
ADC_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082ec  080082ec  000092ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082f4  080082f4  000092f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080082fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000744  24000014  08008310  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000758  08008310  0000a758  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c968  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000370d  00000000  00000000  000269aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001608  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001111  00000000  00000000  0002b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003abf5  00000000  00000000  0002c7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f80e  00000000  00000000  000673c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017811d  00000000  00000000  00086bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fecf1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d98  00000000  00000000  001fed34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  00204acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800829c 	.word	0x0800829c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800829c 	.word	0x0800829c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ESPE_USART_init>:
char *point = (char *) (vector);

//Zona definizione variabili, vettori globali


void ESPE_USART_init(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//Accendo la trasmissione

	USART3 ->CR1 |= USART_CR1_TE;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <ESPE_USART_init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <ESPE_USART_init+0x40>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <ESPE_USART_init+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <ESPE_USART_init+0x40>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <ESPE_USART_init+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <ESPE_USART_init+0x40>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione

	//Accendo USART
	USART3 ->CR1 |= USART_CR1_UE;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <ESPE_USART_init+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <ESPE_USART_init+0x40>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004800 	.word	0x40004800

0800060c <ESPE_USART_interrupt_send_vector>:





void ESPE_USART_interrupt_send_vector(){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	if (USART3 -> ISR & USART_ISR_RXNE_RXFNE){
 8000610:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d028      	beq.n	800066e <ESPE_USART_interrupt_send_vector+0x62>
		if( USART3 -> RDR != '\r'){
 800061c:	4b33      	ldr	r3, [pc, #204]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d00d      	beq.n	8000640 <ESPE_USART_interrupt_send_vector+0x34>
			*(str+indice) = USART3 -> RDR;
 8000624:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 8000626:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000628:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a31      	ldr	r2, [pc, #196]	@ (80006f4 <ESPE_USART_interrupt_send_vector+0xe8>)
 800062e:	4413      	add	r3, r2
 8000630:	b2ca      	uxtb	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
			indice++;
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a2d      	ldr	r2, [pc, #180]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e016      	b.n	800066e <ESPE_USART_interrupt_send_vector+0x62>
		}else if ( str[0] == 'e' && indice == 1){
 8000640:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <ESPE_USART_interrupt_send_vector+0xe8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b65      	cmp	r3, #101	@ 0x65
 8000646:	d112      	bne.n	800066e <ESPE_USART_interrupt_send_vector+0x62>
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10e      	bne.n	800066e <ESPE_USART_interrupt_send_vector+0x62>
			USART3 -> CR1 |= USART_CR1_TCIE;
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 8000656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800065a:	6013      	str	r3, [r2, #0]
			ADC3 -> CR |= ADC_CR_ADSTART;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <ESPE_USART_interrupt_send_vector+0xec>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a25      	ldr	r2, [pc, #148]	@ (80006f8 <ESPE_USART_interrupt_send_vector+0xec>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6093      	str	r3, [r2, #8]
			indice = 0;
 8000668:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
		}
	}

	if (USART3->ISR & USART_ISR_TC && USART3 -> CR1 & USART_CR1_TCIE){
 800066e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000676:	2b00      	cmp	r3, #0
 8000678:	d020      	beq.n	80006bc <ESPE_USART_interrupt_send_vector+0xb0>
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000682:	2b00      	cmp	r3, #0
 8000684:	d01a      	beq.n	80006bc <ESPE_USART_interrupt_send_vector+0xb0>
		if( indice < lung_uint){
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b63      	cmp	r3, #99	@ 0x63
 800068c:	d80d      	bhi.n	80006aa <ESPE_USART_interrupt_send_vector+0x9e>
			USART3 -> TDR = *(point+indice);
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <ESPE_USART_interrupt_send_vector+0xf0>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
			indice++;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e008      	b.n	80006bc <ESPE_USART_interrupt_send_vector+0xb0>
		}
		else{
			indice = 0;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <ESPE_USART_interrupt_send_vector+0xe4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			USART3 -> CR1 ^= USART_CR1_TCIE;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006b6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80006ba:	6013      	str	r3, [r2, #0]
//		if ( vector < e_max && indice == 0) ;
//		else USART3 -> CR1 ^= USART_CR1_TCIE;
	}

	//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d2:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <ESPE_USART_interrupt_send_vector+0xe0>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]


}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40004800 	.word	0x40004800
 80006f0:	24000030 	.word	0x24000030
 80006f4:	24000034 	.word	0x24000034
 80006f8:	58026000 	.word	0x58026000
 80006fc:	24000000 	.word	0x24000000

08000700 <ESPE_ADC_0_init>:

//selezionare ADC3. Per le prime misure la freqeunza non ha importanza
//Impostare i 2 ingressi VSENSE (forse questa non la misuriamo) e VREFINT

//Queste sono le operazioni che dobbiamo fare, magari con una funzione, nel main(), prima del while(1) (va fatta una sola volta)
void ESPE_ADC_0_init(void) {//Inizializzazione ADC
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
//Passo 2: impostare gli ingressi per la misura

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 8000704:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC3->SQR1 |= 1<<ADC_SQR1_L_Pos;
 800070a:	4b3a      	ldr	r3, [pc, #232]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 18 << ADC_SQR1_SQ1_Pos; // ti dice qual è la prima misura da fare
 8000716:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a36      	ldr	r2, [pc, #216]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800071c:	f443 6390 	orr.w	r3, r3, #1152	@ 0x480
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; // ti dice qual è la seconda misura da fare
 8000722:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a33      	ldr	r2, [pc, #204]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000728:	f443 3398 	orr.w	r3, r3, #77824	@ 0x13000
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30



//2)
//Impostiamo anche PCSEL: dobbiamo indicare quali canali legggiamo affinchè si impsti la velocità massima degli ingressi
	ADC3->PCSEL |= ADC_PCSEL_PCSEL_18|ADC_PCSEL_PCSEL_19;
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a30      	ldr	r2, [pc, #192]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000734:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000738:	61d3      	str	r3, [r2, #28]

//3)
//nel CR vanno impostati DEEPPWD e ADVREGEN
	ADC3 -> CR |= 0 << ADC_CR_DEEPPWD_Pos;
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800073c:	4a2d      	ldr	r2, [pc, #180]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	4a2b      	ldr	r2, [pc, #172]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074c:	6093      	str	r3, [r2, #8]

//4)
//Calibrare l'ADC, agendo nel CR con i flag ADCALDIF, ADCALLIN, ADEN e ADCAL
	ADC3 -> CR |= 0<< ADC_CR_ADCALDIF_Pos;			//seleziona modalità differenziata di calibrazione (a 0)
 800074e:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 0<< ADC_CR_ADEN_Pos;
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000764:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;				// Inizia la calibrazione
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000770:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000774:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){
 8000776:	bf00      	nop
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dbfb      	blt.n	8000778 <ESPE_ADC_0_init+0x78>
	}
//5)
//Accendiamo l'ADC, questo non significa effettuare misure, ADRDY nell'ISR e ADEN nel CR
	ADC3->ISR |= 0<<ADC_ISR_ADRDY_Pos;
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	4a19      	ldr	r2, [pc, #100]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){
 8000794:	bf00      	nop
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <ESPE_ADC_0_init+0x96>
	}

//6)
//Abilitare l'interrupt, EOCIE nell'IER  (sarà l'EOC nell'ISR il flag di interrupt)
	ADC3 -> IER |= ADC_IER_EOCIE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6053      	str	r3, [r2, #4]
//7)
//Eventialmente inseire un ritardo per la lettura del canale dopo la connessione in SMPR1 e SMPR2
	ADC3 -> SMPR2 |= 7	 <<ADC_SMPR2_SMP18_Pos; // timer di 5 cicli
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007b8:	6193      	str	r3, [r2, #24]
//8)
//Per potere leggere la temperatura e la tensione occorre abilitare i flag 	TSEN e VREFEN nel CCR
	ADC3_COMMON ->CCR |= ADC_CCR_TSEN;		// attiva termometro
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <ESPE_ADC_0_init+0xf8>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <ESPE_ADC_0_init+0xf8>)
 80007c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007c4:	6093      	str	r3, [r2, #8]
	ADC3_COMMON ->CCR |= ADC_CCR_VREFEN;	// attiva voltaggio di riferimento
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <ESPE_ADC_0_init+0xf8>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <ESPE_ADC_0_init+0xf8>)
 80007cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007d0:	6093      	str	r3, [r2, #8]


//9)
//Nel registro CRGR indicare che misura si vuole considerare, CONT: single o continua, oppure con trigger per esempio con timer, consigliato TIM6.
//oppure si può usare il trigger sw con ADSTART nel CR, consigliato all'inizio.
	ADC3 -> CFGR |= ADC_CFGR_CONT;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007dc:	60d3      	str	r3, [r2, #12]
	ADC3 -> CFGR |= ADC_CFGR_AUTDLY;
 80007de:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <ESPE_ADC_0_init+0xf4>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	60d3      	str	r3, [r2, #12]

}//Fine inizializzazione ADC
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	58026000 	.word	0x58026000
 80007f8:	58026300 	.word	0x58026300

080007fc <ESPE_ADC_data>:

void ESPE_ADC_data(void){
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	if( counter_ADC < 50){
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <ESPE_ADC_data+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b31      	cmp	r3, #49	@ 0x31
 8000806:	d81c      	bhi.n	8000842 <ESPE_ADC_data+0x46>
		if( flag_ADC ){
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <ESPE_ADC_data+0x68>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d007      	beq.n	8000820 <ESPE_ADC_data+0x24>
			voltaggio = ADC3->DR;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <ESPE_ADC_data+0x6c>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a15      	ldr	r2, [pc, #84]	@ (800086c <ESPE_ADC_data+0x70>)
 8000816:	6013      	str	r3, [r2, #0]
			flag_ADC = 0;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <ESPE_ADC_data+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		}
	}else{
		conversion_flag = 1;
		ADC3 -> IER &= ~(ADC_IER_EOCIE);
	}
}
 800081e:	e019      	b.n	8000854 <ESPE_ADC_data+0x58>
			temp[counter_ADC] = ADC3->DR;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <ESPE_ADC_data+0x6c>)
 8000822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <ESPE_ADC_data+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	b291      	uxth	r1, r2
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <ESPE_ADC_data+0x74>)
 800082c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flag_ADC = 1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <ESPE_ADC_data+0x68>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
			counter_ADC++;
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <ESPE_ADC_data+0x64>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <ESPE_ADC_data+0x64>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	e008      	b.n	8000854 <ESPE_ADC_data+0x58>
		conversion_flag = 1;
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <ESPE_ADC_data+0x78>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
		ADC3 -> IER &= ~(ADC_IER_EOCIE);
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <ESPE_ADC_data+0x6c>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <ESPE_ADC_data+0x6c>)
 800084e:	f023 0304 	bic.w	r3, r3, #4
 8000852:	6053      	str	r3, [r2, #4]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	240000b8 	.word	0x240000b8
 8000864:	240000c4 	.word	0x240000c4
 8000868:	58026000 	.word	0x58026000
 800086c:	240000bc 	.word	0x240000bc
 8000870:	240000c8 	.word	0x240000c8
 8000874:	240000c5 	.word	0x240000c5

08000878 <ESPE_ADC_temp_conversion>:

void ESPE_ADC_temp_conversion(){
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	extern uint16_t vector[50];
	extern unsigned int indice;
	extern char *point;
	if (conversion_counter < 50){
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <ESPE_ADC_temp_conversion+0x80>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b31      	cmp	r3, #49	@ 0x31
 8000882:	d823      	bhi.n	80008cc <ESPE_ADC_temp_conversion+0x54>
		vector[conversion_counter] = ((Const1)*((uint32_t)(temp[conversion_counter]) - (uint32_t)(TCAL_30C))/(TS_diff))+(Const2);
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <ESPE_ADC_temp_conversion+0x80>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <ESPE_ADC_temp_conversion+0x84>)
 800088a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088e:	461a      	mov	r2, r3
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <ESPE_ADC_temp_conversion+0x88>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <ESPE_ADC_temp_conversion+0x8c>)
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	4a1a      	ldr	r2, [pc, #104]	@ (8000908 <ESPE_ADC_temp_conversion+0x90>)
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <ESPE_ADC_temp_conversion+0x88>)
 80008a4:	8812      	ldrh	r2, [r2, #0]
 80008a6:	1a8a      	subs	r2, r1, r2
 80008a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80008ac:	b299      	uxth	r1, r3
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <ESPE_ADC_temp_conversion+0x80>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80008b6:	440b      	add	r3, r1
 80008b8:	b299      	uxth	r1, r3
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <ESPE_ADC_temp_conversion+0x94>)
 80008bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		conversion_counter++;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <ESPE_ADC_temp_conversion+0x80>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <ESPE_ADC_temp_conversion+0x80>)
 80008c8:	6013      	str	r3, [r2, #0]
		conversion_flag = 0;
		USART3 -> CR1 |= USART_CR1_TCIE;
		USART3 -> TDR = *(point);
		indice = 1;
	}
}
 80008ca:	e010      	b.n	80008ee <ESPE_ADC_temp_conversion+0x76>
		conversion_flag = 0;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <ESPE_ADC_temp_conversion+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <ESPE_ADC_temp_conversion+0x9c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000914 <ESPE_ADC_temp_conversion+0x9c>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	6013      	str	r3, [r2, #0]
		USART3 -> TDR = *(point);
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <ESPE_ADC_temp_conversion+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <ESPE_ADC_temp_conversion+0x9c>)
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
		indice = 1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <ESPE_ADC_temp_conversion+0xa4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	240000c0 	.word	0x240000c0
 80008fc:	240000c8 	.word	0x240000c8
 8000900:	1ff1e820 	.word	0x1ff1e820
 8000904:	00013880 	.word	0x00013880
 8000908:	1ff1e840 	.word	0x1ff1e840
 800090c:	24000054 	.word	0x24000054
 8000910:	240000c5 	.word	0x240000c5
 8000914:	40004800 	.word	0x40004800
 8000918:	24000000 	.word	0x24000000
 800091c:	24000030 	.word	0x24000030

08000920 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000938:	4b2f      	ldr	r3, [pc, #188]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800093a:	4a30      	ldr	r2, [pc, #192]	@ (80009fc <MX_ADC3_Init+0xdc>)
 800093c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800093e:	4b2e      	ldr	r3, [pc, #184]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000944:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800094c:	2204      	movs	r2, #4
 800094e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000956:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000958:	2200      	movs	r2, #0
 800095a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800095c:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800095e:	2201      	movs	r2, #1
 8000960:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000964:	2200      	movs	r2, #0
 8000966:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000968:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800096a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 8000994:	2201      	movs	r2, #1
 8000996:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000998:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 800099a:	f000 ffa1 	bl	80018e0 <HAL_ADC_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 80009a4:	f000 fa7c 	bl	8000ea0 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 80009b0:	f000 ff96 	bl	80018e0 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 80009ba:	f000 fa71 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_ADC3_Init+0xe0>)
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d0:	2304      	movs	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_ADC3_Init+0xd8>)
 80009e2:	f001 f91f 	bl	8001c24 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80009ec:	f000 fa58 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400012c 	.word	0x2400012c
 80009fc:	58026000 	.word	0x58026000
 8000a00:	cb840000 	.word	0xcb840000

08000a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b4      	sub	sp, #208	@ 0xd0
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	22c0      	movs	r2, #192	@ 0xc0
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 fc14 	bl	8008242 <memset>
  if(adcHandle->Instance==ADC3)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <HAL_ADC_MspInit+0xa0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d13a      	bne.n	8000a9a <HAL_ADC_MspInit+0x96>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000a34:	2312      	movs	r3, #18
 8000a36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a44:	23c0      	movs	r3, #192	@ 0xc0
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000a4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f983 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000a68:	f000 fa1a 	bl	8000ea0 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_ADC_MspInit+0xa4>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <HAL_ADC_MspInit+0xa4>)
 8000a74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_ADC_MspInit+0xa4>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	207f      	movs	r0, #127	@ 0x7f
 8000a90:	f001 fe0b 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000a94:	207f      	movs	r0, #127	@ 0x7f
 8000a96:	f001 fe22 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	37d0      	adds	r7, #208	@ 0xd0
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58026000 	.word	0x58026000
 8000aa8:	58024400 	.word	0x58024400

08000aac <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b83      	ldr	r3, [pc, #524]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	4a81      	ldr	r2, [pc, #516]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af0:	4b77      	ldr	r3, [pc, #476]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b74      	ldr	r3, [pc, #464]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a72      	ldr	r2, [pc, #456]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b70      	ldr	r3, [pc, #448]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	4a6b      	ldr	r2, [pc, #428]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2c:	4b68      	ldr	r3, [pc, #416]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b65      	ldr	r3, [pc, #404]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a63      	ldr	r2, [pc, #396]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b61      	ldr	r3, [pc, #388]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b58:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b68:	4b59      	ldr	r3, [pc, #356]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	4b56      	ldr	r3, [pc, #344]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a54      	ldr	r2, [pc, #336]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b52      	ldr	r3, [pc, #328]	@ (8000cd0 <MX_GPIO_Init+0x224>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b9a:	484e      	ldr	r0, [pc, #312]	@ (8000cd4 <MX_GPIO_Init+0x228>)
 8000b9c:	f001 ff6a 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba6:	484c      	ldr	r0, [pc, #304]	@ (8000cd8 <MX_GPIO_Init+0x22c>)
 8000ba8:	f001 ff64 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2102      	movs	r1, #2
 8000bb0:	484a      	ldr	r0, [pc, #296]	@ (8000cdc <MX_GPIO_Init+0x230>)
 8000bb2:	f001 ff5f 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4845      	ldr	r0, [pc, #276]	@ (8000ce0 <MX_GPIO_Init+0x234>)
 8000bcc:	f001 fda2 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bd0:	2332      	movs	r3, #50	@ 0x32
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	483d      	ldr	r0, [pc, #244]	@ (8000ce0 <MX_GPIO_Init+0x234>)
 8000bec:	f001 fd92 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bf0:	2386      	movs	r3, #134	@ 0x86
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <MX_GPIO_Init+0x238>)
 8000c0c:	f001 fd82 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c10:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	482a      	ldr	r0, [pc, #168]	@ (8000cd4 <MX_GPIO_Init+0x228>)
 8000c2a:	f001 fd73 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <MX_GPIO_Init+0x228>)
 8000c4c:	f001 fd62 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	481b      	ldr	r0, [pc, #108]	@ (8000cd8 <MX_GPIO_Init+0x22c>)
 8000c6a:	f001 fd53 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <MX_GPIO_Init+0x23c>)
 8000c84:	f001 fd46 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c88:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <MX_GPIO_Init+0x23c>)
 8000ca6:	f001 fd35 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <MX_GPIO_Init+0x230>)
 8000cc2:	f001 fd27 	bl	8002714 <HAL_GPIO_Init>

}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	@ 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58020c00 	.word	0x58020c00
 8000cdc:	58021000 	.word	0x58021000
 8000ce0:	58020800 	.word	0x58020800
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	58021800 	.word	0x58021800

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	extern unsigned int counter_ADC;
	extern uint8_t conversion_flag;
	uint8_t tmp = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fba5 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f823 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f7ff fed5 	bl	8000aac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d02:	f000 fa09 	bl	8001118 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d06:	f000 fac5 	bl	8001294 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8000d0a:	f7ff fe09 	bl	8000920 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000d0e:	f000 f9ab 	bl	8001068 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ESPE_ADC_0_init();
 8000d12:	f7ff fcf5 	bl	8000700 <ESPE_ADC_0_init>
  ESPE_USART_init();
 8000d16:	f7ff fc57 	bl	80005c8 <ESPE_USART_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (counter_ADC == 51){
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <main+0x50>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b33      	cmp	r3, #51	@ 0x33
 8000d20:	d101      	bne.n	8000d26 <main+0x3a>
		tmp = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
	  }
	  if(counter_ADC >=50){
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <main+0x50>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b31      	cmp	r3, #49	@ 0x31
 8000d2c:	d9f5      	bls.n	8000d1a <main+0x2e>
		  if(conversion_flag){
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <main+0x54>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f1      	beq.n	8000d1a <main+0x2e>
				ESPE_ADC_temp_conversion();
 8000d36:	f7ff fd9f 	bl	8000878 <ESPE_ADC_temp_conversion>
	  if (counter_ADC == 51){
 8000d3a:	e7ee      	b.n	8000d1a <main+0x2e>
 8000d3c:	240000b8 	.word	0x240000b8
 8000d40:	240000c5 	.word	0x240000c5

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09e      	sub	sp, #120	@ 0x78
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	224c      	movs	r2, #76	@ 0x4c
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f007 fa75 	bl	8008242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 fa6e 	bl	8008242 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f001 ffce 	bl	8002d08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	4a47      	ldr	r2, [pc, #284]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b44      	ldr	r3, [pc, #272]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d9e:	bf00      	nop
 8000da0:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <SystemClock_Config+0x154>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dac:	d1f8      	bne.n	8000da0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dbe:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <SystemClock_Config+0x158>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <SystemClock_Config+0x150>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <SystemClock_Config+0x150>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <SystemClock_Config+0x150>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfe:	bf00      	nop
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <SystemClock_Config+0x154>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e0c:	d1f8      	bne.n	8000e00 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e12:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000e24:	2378      	movs	r3, #120	@ 0x78
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e34:	230c      	movs	r3, #12
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 ffa9 	bl	8002d9c <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e50:	f000 f826 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	233f      	movs	r3, #63	@ 0x3f
 8000e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e60:	2308      	movs	r3, #8
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e68:	2340      	movs	r3, #64	@ 0x40
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fbe7 	bl	8003650 <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e88:	f000 f80a 	bl	8000ea0 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3778      	adds	r7, #120	@ 0x78
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58000400 	.word	0x58000400
 8000e98:	58024800 	.word	0x58024800
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 faf7 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_interrupt_send_vector();
 8000f42:	f7ff fb63 	bl	800060c <ESPE_USART_interrupt_send_vector>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ESPE_ADC_data();
 8000f4e:	f7ff fc55 	bl	80007fc <ESPE_ADC_data>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b37      	ldr	r3, [pc, #220]	@ (800103c <SystemInit+0xe4>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a36      	ldr	r2, [pc, #216]	@ (800103c <SystemInit+0xe4>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <SystemInit+0xe8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <SystemInit+0xe8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <SystemInit+0xe8>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <SystemInit+0xec>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <SystemInit+0xec>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <SystemInit+0xec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <SystemInit+0xec>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4929      	ldr	r1, [pc, #164]	@ (8001044 <SystemInit+0xec>)
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <SystemInit+0xf0>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <SystemInit+0xe8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <SystemInit+0xe8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <SystemInit+0xe8>)
 8000fbc:	f043 0307 	orr.w	r3, r3, #7
 8000fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <SystemInit+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <SystemInit+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <SystemInit+0xec>)
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <SystemInit+0xf4>)
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <SystemInit+0xec>)
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <SystemInit+0xf8>)
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <SystemInit+0xec>)
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <SystemInit+0xfc>)
 8000fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <SystemInit+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <SystemInit+0xec>)
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <SystemInit+0xfc>)
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <SystemInit+0xec>)
 8000ffa:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <SystemInit+0xfc>)
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <SystemInit+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <SystemInit+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <SystemInit+0xec>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <SystemInit+0xec>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <SystemInit+0x100>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <SystemInit+0x104>)
 800101c:	4013      	ands	r3, r2
 800101e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001022:	d202      	bcs.n	800102a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <SystemInit+0x108>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <SystemInit+0x10c>)
 800102c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001030:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	52002000 	.word	0x52002000
 8001044:	58024400 	.word	0x58024400
 8001048:	eaf6ed7f 	.word	0xeaf6ed7f
 800104c:	02020200 	.word	0x02020200
 8001050:	01ff0000 	.word	0x01ff0000
 8001054:	01010280 	.word	0x01010280
 8001058:	5c001000 	.word	0x5c001000
 800105c:	ffff0000 	.word	0xffff0000
 8001060:	51008108 	.word	0x51008108
 8001064:	52004000 	.word	0x52004000

08001068 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_TIM6_Init+0x64>)
 800107a:	4a15      	ldr	r2, [pc, #84]	@ (80010d0 <MX_TIM6_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_TIM6_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_TIM6_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_TIM6_Init+0x64>)
 800108c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_TIM6_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM6_Init+0x64>)
 800109a:	f005 fb63 	bl	8006764 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010a4:	f7ff fefc 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010a8:	2320      	movs	r3, #32
 80010aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_TIM6_Init+0x64>)
 80010b6:	f005 fc53 	bl	8006960 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f7ff feee 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	24000190 	.word	0x24000190
 80010d0:	40001000 	.word	0x40001000

080010d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_TIM_Base_MspInit+0x3c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d10e      	bne.n	8001104 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_TIM_Base_MspInit+0x40>)
 80010e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ec:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <HAL_TIM_Base_MspInit+0x40>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_TIM_Base_MspInit+0x40>)
 80010f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40001000 	.word	0x40001000
 8001114:	58024400 	.word	0x58024400

08001118 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 800111e:	4a23      	ldr	r2, [pc, #140]	@ (80011ac <MX_USART3_UART_Init+0x94>)
 8001120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001124:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001160:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001162:	f005 fc8b 	bl	8006a7c <HAL_UART_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800116c:	f7ff fe98 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001170:	2100      	movs	r1, #0
 8001172:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001174:	f006 fc93 	bl	8007a9e <HAL_UARTEx_SetTxFifoThreshold>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800117e:	f7ff fe8f 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001186:	f006 fcc8 	bl	8007b1a <HAL_UARTEx_SetRxFifoThreshold>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001190:	f7ff fe86 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_USART3_UART_Init+0x90>)
 8001196:	f006 fc49 	bl	8007a2c <HAL_UARTEx_DisableFifoMode>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f7ff fe7e 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240001dc 	.word	0x240001dc
 80011ac:	40004800 	.word	0x40004800

080011b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ba      	sub	sp, #232	@ 0xe8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	22c0      	movs	r2, #192	@ 0xc0
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f007 f836 	bl	8008242 <memset>
  if(uartHandle->Instance==USART3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <HAL_UART_MspInit+0xd8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d14e      	bne.n	800127e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e0:	f04f 0202 	mov.w	r2, #2
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fdb6 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001202:	f7ff fe4d 	bl	8000ea0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_UART_MspInit+0xdc>)
 8001208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800120c:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <HAL_UART_MspInit+0xdc>)
 800120e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001212:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_UART_MspInit+0xdc>)
 8001218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_UART_MspInit+0xdc>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <HAL_UART_MspInit+0xdc>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_UART_MspInit+0xdc>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001242:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125c:	2307      	movs	r3, #7
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001266:	4619      	mov	r1, r3
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <HAL_UART_MspInit+0xe0>)
 800126a:	f001 fa53 	bl	8002714 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2027      	movs	r0, #39	@ 0x27
 8001274:	f001 fa19 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001278:	2027      	movs	r0, #39	@ 0x27
 800127a:	f001 fa30 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800127e:	bf00      	nop
 8001280:	37e8      	adds	r7, #232	@ 0xe8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40004800 	.word	0x40004800
 800128c:	58024400 	.word	0x58024400
 8001290:	58020c00 	.word	0x58020c00

08001294 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129a:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800129c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a0:	2209      	movs	r2, #9
 80012a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012dc:	f001 fbe3 	bl	8002aa6 <HAL_PCD_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012e6:	f7ff fddb 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000270 	.word	0x24000270
 80012f4:	40080000 	.word	0x40080000

080012f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ba      	sub	sp, #232	@ 0xe8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	22c0      	movs	r2, #192	@ 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f006 ff92 	bl	8008242 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a30      	ldr	r2, [pc, #192]	@ (80013e4 <HAL_PCD_MspInit+0xec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d159      	bne.n	80013dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001328:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001334:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fd11 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800134c:	f7ff fda8 	bl	8000ea0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001350:	f001 fd14 	bl	8002d7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001372:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800138c:	230a      	movs	r3, #10
 800138e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001396:	4619      	mov	r1, r3
 8001398:	4814      	ldr	r0, [pc, #80]	@ (80013ec <HAL_PCD_MspInit+0xf4>)
 800139a:	f001 f9bb 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800139e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <HAL_PCD_MspInit+0xf4>)
 80013ba:	f001 f9ab 	bl	8002714 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013c4:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 80013c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_PCD_MspInit+0xf0>)
 80013d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80013dc:	bf00      	nop
 80013de:	37e8      	adds	r7, #232	@ 0xe8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40080000 	.word	0x40080000
 80013e8:	58024400 	.word	0x58024400
 80013ec:	58020000 	.word	0x58020000

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f4:	f7ff fdb0 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f006 ff19 	bl	8008254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fc63 	bl	8000cec <main>
  bx  lr
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800142c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001430:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001434:	080082fc 	.word	0x080082fc
  ldr r2, =_sbss
 8001438:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800143c:	24000758 	.word	0x24000758

08001440 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f001 f922 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001450:	f002 fab4 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_Init+0x68>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <HAL_Init+0x6c>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_Init+0x68>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_Init+0x6c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_Init+0x70>)
 8001486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_Init+0x74>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f814 	bl	80014bc <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fd05 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	080082b4 	.word	0x080082b4
 80014b4:	24000008 	.word	0x24000008
 80014b8:	24000004 	.word	0x24000004

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <HAL_InitTick+0x64>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_InitTick+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f907 	bl	80026fa <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f001 f8d1 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_InitTick+0x68>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	24000010 	.word	0x24000010
 8001520:	24000004 	.word	0x24000004
 8001524:	2400000c 	.word	0x2400000c

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	24000010 	.word	0x24000010
 800154c:	24000754 	.word	0x24000754

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24000754 	.word	0x24000754

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24000010 	.word	0x24000010

080015b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetREVID+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0c1b      	lsrs	r3, r3, #16
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	5c001000 	.word	0x5c001000

080015c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	609a      	str	r2, [r3, #8]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3360      	adds	r3, #96	@ 0x60
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	430b      	orrs	r3, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b087      	sub	sp, #28
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3360      	adds	r3, #96	@ 0x60
 80016b2:	461a      	mov	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]
  }
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3330      	adds	r3, #48	@ 0x30
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	211f      	movs	r1, #31
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 011f 	and.w	r1, r3, #31
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3314      	adds	r3, #20
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0e5b      	lsrs	r3, r3, #25
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0d1b      	lsrs	r3, r3, #20
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2107      	movs	r1, #7
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	0d1b      	lsrs	r3, r3, #20
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800177a:	bf00      	nop
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0318 	and.w	r3, r3, #24
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	400b      	ands	r3, r1
 80017b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	000fffff 	.word	0x000fffff

080017d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	5fffffc0 	.word	0x5fffffc0

080017f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <LL_ADC_EnableInternalRegulator+0x24>)
 800182a:	4013      	ands	r3, r2
 800182c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	6fffffc0 	.word	0x6fffffc0

08001844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001858:	d101      	bne.n	800185e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <LL_ADC_IsEnabled+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_IsEnabled+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d101      	bne.n	80018aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d101      	bne.n	80018d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e18f      	b.n	8001c1a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff f87b 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff67 	bl	80017f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff4d 	bl	80017d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff82 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d114      	bne.n	8001970 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff66 	bl	800181c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001950:	4b87      	ldr	r3, [pc, #540]	@ (8001b70 <HAL_ADC_Init+0x290>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	4a87      	ldr	r2, [pc, #540]	@ (8001b74 <HAL_ADC_Init+0x294>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001962:	e002      	b.n	800196a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3b01      	subs	r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff65 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001984:	f043 0210 	orr.w	r2, r3, #16
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff76 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 80019a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 8129 	bne.w	8001c08 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 8125 	bne.w	8001c08 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019c6:	f043 0202 	orr.w	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff4a 	bl	800186c <LL_ADC_IsEnabled>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d136      	bne.n	8001a4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_ADC_Init+0x298>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_Init+0x112>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_ADC_Init+0x29c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_ADC_Init+0x130>
 80019f2:	4861      	ldr	r0, [pc, #388]	@ (8001b78 <HAL_ADC_Init+0x298>)
 80019f4:	f7ff ff3a 	bl	800186c <LL_ADC_IsEnabled>
 80019f8:	4604      	mov	r4, r0
 80019fa:	4860      	ldr	r0, [pc, #384]	@ (8001b7c <HAL_ADC_Init+0x29c>)
 80019fc:	f7ff ff36 	bl	800186c <LL_ADC_IsEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4323      	orrs	r3, r4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e008      	b.n	8001a22 <HAL_ADC_Init+0x142>
 8001a10:	485b      	ldr	r0, [pc, #364]	@ (8001b80 <HAL_ADC_Init+0x2a0>)
 8001a12:	f7ff ff2b 	bl	800186c <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a53      	ldr	r2, [pc, #332]	@ (8001b78 <HAL_ADC_Init+0x298>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_ADC_Init+0x15a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a51      	ldr	r2, [pc, #324]	@ (8001b7c <HAL_ADC_Init+0x29c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x15e>
 8001a3a:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_ADC_Init+0x2a4>)
 8001a3c:	e000      	b.n	8001a40 <HAL_ADC_Init+0x160>
 8001a3e:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_ADC_Init+0x2a8>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f7ff fdbe 	bl	80015c8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a4c:	f7ff fdb0 	bl	80015b0 <HAL_GetREVID>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d914      	bls.n	8001a84 <HAL_ADC_Init+0x1a4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d110      	bne.n	8001a84 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7d5b      	ldrb	r3, [r3, #21]
 8001a66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7f1b      	ldrb	r3, [r3, #28]
 8001a78:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a7a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7c:	f043 030c 	orr.w	r3, r3, #12
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	e00d      	b.n	8001aa0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7d5b      	ldrb	r3, [r3, #21]
 8001a88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f1b      	ldrb	r3, [r3, #28]
 8001a9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7f1b      	ldrb	r3, [r3, #28]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	045b      	lsls	r3, r3, #17
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <HAL_ADC_Init+0x2ac>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	69b9      	ldr	r1, [r7, #24]
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fed1 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fede 	bl	80018b8 <LL_ADC_INJ_IsConversionOngoing>
 8001afc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d15f      	bne.n	8001bc4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d15c      	bne.n	8001bc4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7d1b      	ldrb	r3, [r3, #20]
 8001b0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <HAL_ADC_Init+0x2b0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d130      	bne.n	8001b98 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_ADC_Init+0x2b4>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	0411      	lsls	r1, r2, #16
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	e01c      	b.n	8001ba8 <HAL_ADC_Init+0x2c8>
 8001b6e:	bf00      	nop
 8001b70:	24000004 	.word	0x24000004
 8001b74:	053e2d63 	.word	0x053e2d63
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40022100 	.word	0x40022100
 8001b80:	58026000 	.word	0x58026000
 8001b84:	40022300 	.word	0x40022300
 8001b88:	58026300 	.word	0x58026300
 8001b8c:	fff0c003 	.word	0xfff0c003
 8001b90:	ffffbffc 	.word	0xffffbffc
 8001b94:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fb8c 	bl	80022dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10c      	bne.n	8001be6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f023 010f 	bic.w	r1, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 020f 	bic.w	r2, r2, #15
 8001bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c06:	e007      	b.n	8001c18 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	bf00      	nop

08001c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b0a1      	sub	sp, #132	@ 0x84
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a65      	ldr	r2, [pc, #404]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x1b0>)
 8001c3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x2a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e32e      	b.n	80022ac <HAL_ADC_ConfigChannel+0x688>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe19 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8313 	bne.w	800228e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db2c      	blt.n	8001cca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d108      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x6a>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2201      	movs	r2, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	e016      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x98>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001caa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	69d1      	ldr	r1, [r2, #28]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7ff fcfe 	bl	80016d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fdd6 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 8001ce6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fde3 	bl	80018b8 <LL_ADC_INJ_IsConversionOngoing>
 8001cf2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 80b8 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 80b4 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6819      	ldr	r1, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f7ff fd0d 	bl	8001730 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d16:	4b30      	ldr	r3, [pc, #192]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x1b4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d22:	d10b      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x118>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	e01d      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x154>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x13e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	e00a      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x154>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d02c      	beq.n	8001ddc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d90:	f7ff fc4e 	bl	8001630 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6919      	ldr	r1, [r3, #16]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7e5b      	ldrb	r3, [r3, #25]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x186>
 8001da4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x188>
 8001daa:	2300      	movs	r3, #0
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff fc78 	bl	80016a2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7e1b      	ldrb	r3, [r3, #24]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1a4>
 8001dc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dc6:	e000      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1a6>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff fc50 	bl	8001670 <LL_ADC_SetDataRightShift>
 8001dd0:	e04c      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x248>
 8001dd2:	bf00      	nop
 8001dd4:	47ff0000 	.word	0x47ff0000
 8001dd8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	069b      	lsls	r3, r3, #26
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dfe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e22:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e46:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fcfb 	bl	800186c <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 8211 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fc7c 	bl	8001788 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4aa1      	ldr	r2, [pc, #644]	@ (800211c <HAL_ADC_ConfigChannel+0x4f8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 812e 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x2a0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e019      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b09      	cmp	r3, #9
 8001ef0:	bf94      	ite	ls
 8001ef2:	2301      	movls	r3, #1
 8001ef4:	2300      	movhi	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d079      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x2f4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	069b      	lsls	r3, r3, #26
 8001f12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f16:	e015      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x320>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f28:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	069b      	lsls	r3, r3, #26
 8001f40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x340>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	e017      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x370>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x396>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	051b      	lsls	r3, r3, #20
 8001fb8:	e018      	b.n	8001fec <HAL_ADC_ConfigChannel+0x3c8>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	430b      	orrs	r3, r1
 8001fee:	e07e      	b.n	80020ee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_ADC_ConfigChannel+0x3e8>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	069b      	lsls	r3, r3, #26
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800200a:	e015      	b.n	8002038 <HAL_ADC_ConfigChannel+0x414>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800201e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	069b      	lsls	r3, r3, #26
 8002034:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x434>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	e017      	b.n	8002088 <HAL_ADC_ConfigChannel+0x464>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	61bb      	str	r3, [r7, #24]
  return result;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x490>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	051b      	lsls	r3, r3, #20
 80020ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	e01b      	b.n	80020ec <HAL_ADC_ConfigChannel+0x4c8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	60fb      	str	r3, [r7, #12]
  return result;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 021f 	and.w	r2, r3, #31
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	430b      	orrs	r3, r1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7ff fb1c 	bl	8001730 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f280 80cf 	bge.w	80022a0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a06      	ldr	r2, [pc, #24]	@ (8002120 <HAL_ADC_ConfigChannel+0x4fc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x4f2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_ADC_ConfigChannel+0x500>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x508>
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <HAL_ADC_ConfigChannel+0x504>)
 8002118:	e009      	b.n	800212e <HAL_ADC_ConfigChannel+0x50a>
 800211a:	bf00      	nop
 800211c:	47ff0000 	.word	0x47ff0000
 8002120:	40022000 	.word	0x40022000
 8002124:	40022100 	.word	0x40022100
 8002128:	40022300 	.word	0x40022300
 800212c:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_ADC_ConfigChannel+0x690>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fa70 	bl	8001614 <LL_ADC_GetCommonPathInternalCh>
 8002134:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5f      	ldr	r2, [pc, #380]	@ (80022b8 <HAL_ADC_ConfigChannel+0x694>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_ConfigChannel+0x526>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a5d      	ldr	r2, [pc, #372]	@ (80022bc <HAL_ADC_ConfigChannel+0x698>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10e      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x544>
 800214a:	485b      	ldr	r0, [pc, #364]	@ (80022b8 <HAL_ADC_ConfigChannel+0x694>)
 800214c:	f7ff fb8e 	bl	800186c <LL_ADC_IsEnabled>
 8002150:	4604      	mov	r4, r0
 8002152:	485a      	ldr	r0, [pc, #360]	@ (80022bc <HAL_ADC_ConfigChannel+0x698>)
 8002154:	f7ff fb8a 	bl	800186c <LL_ADC_IsEnabled>
 8002158:	4603      	mov	r3, r0
 800215a:	4323      	orrs	r3, r4
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e008      	b.n	800217a <HAL_ADC_ConfigChannel+0x556>
 8002168:	4855      	ldr	r0, [pc, #340]	@ (80022c0 <HAL_ADC_ConfigChannel+0x69c>)
 800216a:	f7ff fb7f 	bl	800186c <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d07d      	beq.n	800227a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a50      	ldr	r2, [pc, #320]	@ (80022c4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d130      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x5c6>
 8002188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800218a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4a      	ldr	r2, [pc, #296]	@ (80022c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 8081 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a45      	ldr	r2, [pc, #276]	@ (80022b8 <HAL_ADC_ConfigChannel+0x694>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x58e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a43      	ldr	r2, [pc, #268]	@ (80022bc <HAL_ADC_ConfigChannel+0x698>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x592>
 80021b2:	4a45      	ldr	r2, [pc, #276]	@ (80022c8 <HAL_ADC_ConfigChannel+0x6a4>)
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x594>
 80021b6:	4a3f      	ldr	r2, [pc, #252]	@ (80022b4 <HAL_ADC_ConfigChannel+0x690>)
 80021b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f7ff fa14 	bl	80015ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c6:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_ADC_ConfigChannel+0x6a8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	4a40      	ldr	r2, [pc, #256]	@ (80022d0 <HAL_ADC_ConfigChannel+0x6ac>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	3301      	adds	r3, #1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021da:	e002      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021e8:	e05a      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a39      	ldr	r2, [pc, #228]	@ (80022d4 <HAL_ADC_ConfigChannel+0x6b0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d11e      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x60e>
 80021f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d14b      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2a      	ldr	r2, [pc, #168]	@ (80022b8 <HAL_ADC_ConfigChannel+0x694>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_ADC_ConfigChannel+0x5f8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a29      	ldr	r2, [pc, #164]	@ (80022bc <HAL_ADC_ConfigChannel+0x698>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x5fc>
 800221c:	4a2a      	ldr	r2, [pc, #168]	@ (80022c8 <HAL_ADC_ConfigChannel+0x6a4>)
 800221e:	e000      	b.n	8002222 <HAL_ADC_ConfigChannel+0x5fe>
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <HAL_ADC_ConfigChannel+0x690>)
 8002222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002224:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f7ff f9df 	bl	80015ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002230:	e036      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a28      	ldr	r2, [pc, #160]	@ (80022d8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d131      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
 800223c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800223e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12c      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <HAL_ADC_ConfigChannel+0x69c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d127      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_ADC_ConfigChannel+0x694>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x640>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <HAL_ADC_ConfigChannel+0x698>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x644>
 8002264:	4a18      	ldr	r2, [pc, #96]	@ (80022c8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002266:	e000      	b.n	800226a <HAL_ADC_ConfigChannel+0x646>
 8002268:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <HAL_ADC_ConfigChannel+0x690>)
 800226a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f7ff f9bb 	bl	80015ee <LL_ADC_SetCommonPathInternalCh>
 8002278:	e012      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800228c:	e008      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3784      	adds	r7, #132	@ 0x84
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	58026300 	.word	0x58026300
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40022100 	.word	0x40022100
 80022c0:	58026000 	.word	0x58026000
 80022c4:	cb840000 	.word	0xcb840000
 80022c8:	40022300 	.word	0x40022300
 80022cc:	24000004 	.word	0x24000004
 80022d0:	053e2d63 	.word	0x053e2d63
 80022d4:	c7520000 	.word	0xc7520000
 80022d8:	cfb80000 	.word	0xcfb80000

080022dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7a      	ldr	r2, [pc, #488]	@ (80024d4 <ADC_ConfigureBoostMode+0x1f8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <ADC_ConfigureBoostMode+0x1c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a79      	ldr	r2, [pc, #484]	@ (80024d8 <ADC_ConfigureBoostMode+0x1fc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d109      	bne.n	800230c <ADC_ConfigureBoostMode+0x30>
 80022f8:	4b78      	ldr	r3, [pc, #480]	@ (80024dc <ADC_ConfigureBoostMode+0x200>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e008      	b.n	800231e <ADC_ConfigureBoostMode+0x42>
 800230c:	4b74      	ldr	r3, [pc, #464]	@ (80024e0 <ADC_ConfigureBoostMode+0x204>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01c      	beq.n	800235c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002322:	f001 fcc5 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8002326:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002330:	d010      	beq.n	8002354 <ADC_ConfigureBoostMode+0x78>
 8002332:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002336:	d873      	bhi.n	8002420 <ADC_ConfigureBoostMode+0x144>
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233c:	d002      	beq.n	8002344 <ADC_ConfigureBoostMode+0x68>
 800233e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002342:	d16d      	bne.n	8002420 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	60fb      	str	r3, [r7, #12]
        break;
 8002352:	e068      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
        break;
 800235a:	e064      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800235c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002360:	f04f 0100 	mov.w	r1, #0
 8002364:	f002 ff0a 	bl	800517c <HAL_RCCEx_GetPeriphCLKFreq>
 8002368:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002372:	d051      	beq.n	8002418 <ADC_ConfigureBoostMode+0x13c>
 8002374:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002378:	d854      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 800237a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800237e:	d047      	beq.n	8002410 <ADC_ConfigureBoostMode+0x134>
 8002380:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002384:	d84e      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 8002386:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800238a:	d03d      	beq.n	8002408 <ADC_ConfigureBoostMode+0x12c>
 800238c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002390:	d848      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 8002392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002396:	d033      	beq.n	8002400 <ADC_ConfigureBoostMode+0x124>
 8002398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800239c:	d842      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 800239e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023a2:	d029      	beq.n	80023f8 <ADC_ConfigureBoostMode+0x11c>
 80023a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023a8:	d83c      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 80023aa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023ae:	d01a      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x10a>
 80023b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023b4:	d836      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 80023b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023ba:	d014      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x10a>
 80023bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023c0:	d830      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 80023c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023c6:	d00e      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x10a>
 80023c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023cc:	d82a      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 80023ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023d2:	d008      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x10a>
 80023d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023d8:	d824      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x148>
 80023da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023de:	d002      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x10a>
 80023e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023e4:	d11e      	bne.n	8002424 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	60fb      	str	r3, [r7, #12]
        break;
 80023f6:	e016      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]
        break;
 80023fe:	e012      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	60fb      	str	r3, [r7, #12]
        break;
 8002406:	e00e      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	60fb      	str	r3, [r7, #12]
        break;
 800240e:	e00a      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	09db      	lsrs	r3, r3, #7
 8002414:	60fb      	str	r3, [r7, #12]
        break;
 8002416:	e006      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	60fb      	str	r3, [r7, #12]
        break;
 800241e:	e002      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002424:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002426:	f7ff f8c3 	bl	80015b0 <HAL_GetREVID>
 800242a:	4603      	mov	r3, r0
 800242c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002430:	4293      	cmp	r3, r2
 8002432:	d815      	bhi.n	8002460 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a2b      	ldr	r2, [pc, #172]	@ (80024e4 <ADC_ConfigureBoostMode+0x208>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d908      	bls.n	800244e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800244c:	e03e      	b.n	80024cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	e035      	b.n	80024cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <ADC_ConfigureBoostMode+0x20c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d808      	bhi.n	8002480 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800247c:	609a      	str	r2, [r3, #8]
}
 800247e:	e025      	b.n	80024cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <ADC_ConfigureBoostMode+0x210>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d80a      	bhi.n	800249e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	e016      	b.n	80024cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a13      	ldr	r2, [pc, #76]	@ (80024f0 <ADC_ConfigureBoostMode+0x214>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d80a      	bhi.n	80024bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	e007      	b.n	80024cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40022100 	.word	0x40022100
 80024dc:	40022300 	.word	0x40022300
 80024e0:	58026300 	.word	0x58026300
 80024e4:	01312d00 	.word	0x01312d00
 80024e8:	005f5e10 	.word	0x005f5e10
 80024ec:	00bebc20 	.word	0x00bebc20
 80024f0:	017d7840 	.word	0x017d7840

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <__NVIC_SetPriorityGrouping+0x40>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	4313      	orrs	r3, r2
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <__NVIC_SetPriorityGrouping+0x40>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00
 8002538:	05fa0000 	.word	0x05fa0000

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4907      	ldr	r1, [pc, #28]	@ (8002590 <__NVIC_EnableIRQ+0x38>)
 8002572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	@ (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	@ (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	@ 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff8e 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff29 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff40 	bl	800253c <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff90 	bl	80025e8 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5f 	bl	8002594 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff33 	bl	8002558 <__NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffa4 	bl	8002650 <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002722:	4b89      	ldr	r3, [pc, #548]	@ (8002948 <HAL_GPIO_Init+0x234>)
 8002724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002726:	e194      	b.n	8002a52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8186 	beq.w	8002a4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d005      	beq.n	8002758 <HAL_GPIO_Init+0x44>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d130      	bne.n	80027ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278e:	2201      	movs	r2, #1
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0201 	and.w	r2, r3, #1
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d017      	beq.n	80027f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d123      	bne.n	800284a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0203 	and.w	r2, r3, #3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80e0 	beq.w	8002a4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <HAL_GPIO_Init+0x238>)
 800288e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002892:	4a2e      	ldr	r2, [pc, #184]	@ (800294c <HAL_GPIO_Init+0x238>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_GPIO_Init+0x238>)
 800289e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a29      	ldr	r2, [pc, #164]	@ (8002950 <HAL_GPIO_Init+0x23c>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <HAL_GPIO_Init+0x240>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d052      	beq.n	800297c <HAL_GPIO_Init+0x268>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <HAL_GPIO_Init+0x244>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_GPIO_Init+0x22e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_GPIO_Init+0x248>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x22a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <HAL_GPIO_Init+0x24c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_GPIO_Init+0x250>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <HAL_GPIO_Init+0x254>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1a      	ldr	r2, [pc, #104]	@ (800296c <HAL_GPIO_Init+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x21a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_GPIO_Init+0x25c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x216>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_GPIO_Init+0x260>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_GPIO_Init+0x264>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x20e>
 800291e:	2309      	movs	r3, #9
 8002920:	e02d      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002922:	230a      	movs	r3, #10
 8002924:	e02b      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002926:	2308      	movs	r3, #8
 8002928:	e029      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800292a:	2307      	movs	r3, #7
 800292c:	e027      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800292e:	2306      	movs	r3, #6
 8002930:	e025      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002932:	2305      	movs	r3, #5
 8002934:	e023      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002936:	2304      	movs	r3, #4
 8002938:	e021      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800293a:	2303      	movs	r3, #3
 800293c:	e01f      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800293e:	2302      	movs	r3, #2
 8002940:	e01d      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002942:	2301      	movs	r3, #1
 8002944:	e01b      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002946:	bf00      	nop
 8002948:	58000080 	.word	0x58000080
 800294c:	58024400 	.word	0x58024400
 8002950:	58000400 	.word	0x58000400
 8002954:	58020000 	.word	0x58020000
 8002958:	58020400 	.word	0x58020400
 800295c:	58020800 	.word	0x58020800
 8002960:	58020c00 	.word	0x58020c00
 8002964:	58021000 	.word	0x58021000
 8002968:	58021400 	.word	0x58021400
 800296c:	58021800 	.word	0x58021800
 8002970:	58021c00 	.word	0x58021c00
 8002974:	58022000 	.word	0x58022000
 8002978:	58022400 	.word	0x58022400
 800297c:	2300      	movs	r3, #0
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298e:	4938      	ldr	r1, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x35c>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f ae63 	bne.w	8002728 <HAL_GPIO_Init+0x14>
  }
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	@ 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	58000400 	.word	0x58000400

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a90:	e003      	b.n	8002a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	041a      	lsls	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af02      	add	r7, sp, #8
 8002aac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0fe      	b.n	8002cb6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe fc13 	bl	80012f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 f91a 	bl	8007d18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7c1a      	ldrb	r2, [r3, #16]
 8002aec:	f88d 2000 	strb.w	r2, [sp]
 8002af0:	3304      	adds	r3, #4
 8002af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af4:	f005 f89e 	bl	8007c34 <USB_CoreInit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0d5      	b.n	8002cb6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f005 f912 	bl	8007d3a <USB_SetCurrentMode>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0c6      	b.n	8002cb6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e04a      	b.n	8002bc4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3315      	adds	r3, #21
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3314      	adds	r3, #20
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	b298      	uxth	r0, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	332e      	adds	r3, #46	@ 0x2e
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	331c      	adds	r3, #28
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3320      	adds	r3, #32
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d3af      	bcc.n	8002b2e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e044      	b.n	8002c5e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	791b      	ldrb	r3, [r3, #4]
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3b5      	bcc.n	8002bd4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7c1a      	ldrb	r2, [r3, #16]
 8002c70:	f88d 2000 	strb.w	r2, [sp]
 8002c74:	3304      	adds	r3, #4
 8002c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c78:	f005 f8ac 	bl	8007dd4 <USB_DevInit>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e013      	b.n	8002cb6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f80b 	bl	8002cc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 fa67 	bl	8008182 <USB_DevDisconnect>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	10000003 	.word	0x10000003

08002d08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_PWREx_ConfigSupply+0x70>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00a      	beq.n	8002d32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_PWREx_ConfigSupply+0x70>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01f      	b.n	8002d6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e01d      	b.n	8002d6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_PWREx_ConfigSupply+0x70>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	490f      	ldr	r1, [pc, #60]	@ (8002d78 <HAL_PWREx_ConfigSupply+0x70>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d42:	f7fe fc05 	bl	8001550 <HAL_GetTick>
 8002d46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d48:	e009      	b.n	8002d5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d4a:	f7fe fc01 	bl	8001550 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d58:	d901      	bls.n	8002d5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e007      	b.n	8002d6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_PWREx_ConfigSupply+0x70>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6a:	d1ee      	bne.n	8002d4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	58024800 	.word	0x58024800

08002d7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	58024800 	.word	0x58024800

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	@ 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 bc48 	b.w	8003640 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8088 	beq.w	8002ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	4b99      	ldr	r3, [pc, #612]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc8:	4b96      	ldr	r3, [pc, #600]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d007      	beq.n	8002de4 <HAL_RCC_OscConfig+0x48>
 8002dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd6:	2b18      	cmp	r3, #24
 8002dd8:	d111      	bne.n	8002dfe <HAL_RCC_OscConfig+0x62>
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b8f      	ldr	r3, [pc, #572]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d06d      	beq.n	8002ecc <HAL_RCC_OscConfig+0x130>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d169      	bne.n	8002ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f000 bc21 	b.w	8003640 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x7a>
 8002e08:	4b86      	ldr	r3, [pc, #536]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a85      	ldr	r2, [pc, #532]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e02e      	b.n	8002e74 <HAL_RCC_OscConfig+0xd8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x9c>
 8002e1e:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a80      	ldr	r2, [pc, #512]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01d      	b.n	8002e74 <HAL_RCC_OscConfig+0xd8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0xc0>
 8002e42:	4b78      	ldr	r3, [pc, #480]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a77      	ldr	r2, [pc, #476]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a74      	ldr	r2, [pc, #464]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xd8>
 8002e5c:	4b71      	ldr	r3, [pc, #452]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a70      	ldr	r2, [pc, #448]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fb68 	bl	8001550 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe fb64 	bl	8001550 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e3d4      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e96:	4b63      	ldr	r3, [pc, #396]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe8>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fb54 	bl	8001550 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe fb50 	bl	8001550 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e3c0      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ebe:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x110>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80ca 	beq.w	8003070 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002edc:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_RCC_OscConfig+0x166>
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2b18      	cmp	r3, #24
 8002ef6:	d156      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x20a>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d151      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f02:	4b48      	ldr	r3, [pc, #288]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x17e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e392      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f1a:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0219 	bic.w	r2, r3, #25
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	493f      	ldr	r1, [pc, #252]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fb10 	bl	8001550 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe fb0c 	bl	8001550 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e37c      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f46:	4b37      	ldr	r3, [pc, #220]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f52:	f7fe fb2d 	bl	80015b0 <HAL_GetREVID>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d817      	bhi.n	8002f90 <HAL_RCC_OscConfig+0x1f4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d108      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1de>
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f70:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f78:	e07a      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	031b      	lsls	r3, r3, #12
 8002f88:	4926      	ldr	r1, [pc, #152]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8e:	e06f      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	4921      	ldr	r1, [pc, #132]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa4:	e064      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d047      	beq.n	800303e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0219 	bic.w	r2, r3, #25
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	491a      	ldr	r1, [pc, #104]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fac6 	bl	8001550 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fac2 	bl	8001550 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e332      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	f7fe fae3 	bl	80015b0 <HAL_GetREVID>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d819      	bhi.n	8003028 <HAL_RCC_OscConfig+0x28c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d108      	bne.n	800300e <HAL_RCC_OscConfig+0x272>
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003004:	4a07      	ldr	r2, [pc, #28]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300a:	6053      	str	r3, [r2, #4]
 800300c:	e030      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
 800300e:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	4901      	ldr	r1, [pc, #4]	@ (8003024 <HAL_RCC_OscConfig+0x288>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e025      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
 8003024:	58024400 	.word	0x58024400
 8003028:	4b9a      	ldr	r3, [pc, #616]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4997      	ldr	r1, [pc, #604]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e018      	b.n	8003070 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b95      	ldr	r3, [pc, #596]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a94      	ldr	r2, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fa81 	bl	8001550 <HAL_GetTick>
 800304e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe fa7d 	bl	8001550 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e2ed      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003064:	4b8b      	ldr	r3, [pc, #556]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a9 	beq.w	80031d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003086:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003088:	4b82      	ldr	r3, [pc, #520]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d007      	beq.n	80030a4 <HAL_RCC_OscConfig+0x308>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b18      	cmp	r3, #24
 8003098:	d13a      	bne.n	8003110 <HAL_RCC_OscConfig+0x374>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d135      	bne.n	8003110 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x320>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e2c1      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030bc:	f7fe fa78 	bl	80015b0 <HAL_GetREVID>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d817      	bhi.n	80030fa <HAL_RCC_OscConfig+0x35e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x348>
 80030d2:	4b70      	ldr	r3, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030da:	4a6e      	ldr	r2, [pc, #440]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e2:	e075      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	069b      	lsls	r3, r3, #26
 80030f2:	4968      	ldr	r1, [pc, #416]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030f8:	e06a      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fa:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	4962      	ldr	r1, [pc, #392]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800310e:	e05f      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d042      	beq.n	800319e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003118:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5d      	ldr	r2, [pc, #372]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800311e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fa14 	bl	8001550 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800312c:	f7fe fa10 	bl	8001550 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e280      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800313e:	4b55      	ldr	r3, [pc, #340]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800314a:	f7fe fa31 	bl	80015b0 <HAL_GetREVID>
 800314e:	4603      	mov	r3, r0
 8003150:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003154:	4293      	cmp	r3, r2
 8003156:	d817      	bhi.n	8003188 <HAL_RCC_OscConfig+0x3ec>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	2b20      	cmp	r3, #32
 800315e:	d108      	bne.n	8003172 <HAL_RCC_OscConfig+0x3d6>
 8003160:	4b4c      	ldr	r3, [pc, #304]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003168:	4a4a      	ldr	r2, [pc, #296]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800316a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800316e:	6053      	str	r3, [r2, #4]
 8003170:	e02e      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
 8003172:	4b48      	ldr	r3, [pc, #288]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	069b      	lsls	r3, r3, #26
 8003180:	4944      	ldr	r1, [pc, #272]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
 8003186:	e023      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
 8003188:	4b42      	ldr	r3, [pc, #264]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	493f      	ldr	r1, [pc, #252]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e018      	b.n	80031d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe f9d1 	bl	8001550 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031b2:	f7fe f9cd 	bl	8001550 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e23d      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d036      	beq.n	800324a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d019      	beq.n	8003218 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe f9ae 	bl	8001550 <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe f9aa 	bl	8001550 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e21a      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800320a:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x45c>
 8003216:	e018      	b.n	800324a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003218:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800321a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321c:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe f994 	bl	8001550 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322c:	f7fe f990 	bl	8001550 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e200      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d039      	beq.n	80032ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01c      	beq.n	8003298 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800325e:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a0c      	ldr	r2, [pc, #48]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003268:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800326a:	f7fe f971 	bl	8001550 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003272:	f7fe f96d 	bl	8001550 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1dd      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x4d6>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
 8003292:	bf00      	nop
 8003294:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003298:	4b9b      	ldr	r3, [pc, #620]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a9a      	ldr	r2, [pc, #616]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800329e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a4:	f7fe f954 	bl	8001550 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ac:	f7fe f950 	bl	8001550 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1c0      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032be:	4b92      	ldr	r3, [pc, #584]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8081 	beq.w	80033da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032d8:	4b8c      	ldr	r3, [pc, #560]	@ (800350c <HAL_RCC_OscConfig+0x770>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a8b      	ldr	r2, [pc, #556]	@ (800350c <HAL_RCC_OscConfig+0x770>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032e4:	f7fe f934 	bl	8001550 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe f930 	bl	8001550 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1a0      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032fe:	4b83      	ldr	r3, [pc, #524]	@ (800350c <HAL_RCC_OscConfig+0x770>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x584>
 8003312:	4b7d      	ldr	r3, [pc, #500]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	4a7c      	ldr	r2, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	@ 0x70
 800331e:	e02d      	b.n	800337c <HAL_RCC_OscConfig+0x5e0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x5a6>
 8003328:	4b77      	ldr	r3, [pc, #476]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332c:	4a76      	ldr	r2, [pc, #472]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	@ 0x70
 8003334:	4b74      	ldr	r3, [pc, #464]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003338:	4a73      	ldr	r2, [pc, #460]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800333a:	f023 0304 	bic.w	r3, r3, #4
 800333e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x5e0>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c8>
 800334a:	4b6f      	ldr	r3, [pc, #444]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a6e      	ldr	r2, [pc, #440]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	@ 0x70
 8003356:	4b6c      	ldr	r3, [pc, #432]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	@ 0x70
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0x5e0>
 8003364:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a67      	ldr	r2, [pc, #412]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	4b65      	ldr	r3, [pc, #404]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a64      	ldr	r2, [pc, #400]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe f8e4 	bl	8001550 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe f8e0 	bl	8001550 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e14e      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a2:	4b59      	ldr	r3, [pc, #356]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCC_OscConfig+0x5f0>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe f8ce 	bl	8001550 <HAL_GetTick>
 80033b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f8ca 	bl	8001550 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e138      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ee      	bne.n	80033b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 812d 	beq.w	800363e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033e4:	4b48      	ldr	r3, [pc, #288]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ec:	2b18      	cmp	r3, #24
 80033ee:	f000 80bd 	beq.w	800356c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	f040 809e 	bne.w	8003538 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b42      	ldr	r3, [pc, #264]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a41      	ldr	r2, [pc, #260]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f8a2 	bl	8001550 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f89e 	bl	8001550 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e10e      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003422:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342e:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003432:	4b37      	ldr	r3, [pc, #220]	@ (8003510 <HAL_RCC_OscConfig+0x774>)
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	430a      	orrs	r2, r1
 8003442:	4931      	ldr	r1, [pc, #196]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	628b      	str	r3, [r1, #40]	@ 0x28
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	3b01      	subs	r3, #1
 800344e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003456:	3b01      	subs	r3, #1
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	b29b      	uxth	r3, r3
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	3b01      	subs	r3, #1
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003478:	4923      	ldr	r1, [pc, #140]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800347e:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800348a:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <HAL_RCC_OscConfig+0x778>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003496:	00d2      	lsls	r2, r2, #3
 8003498:	491b      	ldr	r1, [pc, #108]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800349e:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	f023 020c 	bic.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4917      	ldr	r1, [pc, #92]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034b0:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	f023 0202 	bic.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	4912      	ldr	r1, [pc, #72]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034c2:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <HAL_RCC_OscConfig+0x76c>)
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe f827 	bl	8001550 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003504:	e011      	b.n	800352a <HAL_RCC_OscConfig+0x78e>
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
 800350c:	58024800 	.word	0x58024800
 8003510:	fffffc0c 	.word	0xfffffc0c
 8003514:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe f81a 	bl	8001550 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e08a      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800352a:	4b47      	ldr	r3, [pc, #284]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x77c>
 8003536:	e082      	b.n	800363e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003538:	4b43      	ldr	r3, [pc, #268]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f804 	bl	8001550 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe f800 	bl	8001550 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e070      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800355e:	4b3a      	ldr	r3, [pc, #232]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x7b0>
 800356a:	e068      	b.n	800363e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800356c:	4b36      	ldr	r3, [pc, #216]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003572:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2b01      	cmp	r3, #1
 800357e:	d031      	beq.n	80035e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0203 	and.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d12a      	bne.n	80035e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d122      	bne.n	80035e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d11a      	bne.n	80035e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0a5b      	lsrs	r3, r3, #9
 80035b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d111      	bne.n	80035e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	0e1b      	lsrs	r3, r3, #24
 80035d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02b      	b.n	8003640 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035e8:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d01f      	beq.n	800363e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035fe:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	4a11      	ldr	r2, [pc, #68]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800360a:	f7fd ffa1 	bl	8001550 <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003610:	bf00      	nop
 8003612:	f7fd ff9d 	bl	8001550 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	4293      	cmp	r3, r2
 800361c:	d0f9      	beq.n	8003612 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800361e:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003622:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <HAL_RCC_OscConfig+0x8b0>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800362a:	00d2      	lsls	r2, r2, #3
 800362c:	4906      	ldr	r1, [pc, #24]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 800362e:	4313      	orrs	r3, r2
 8003630:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003632:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <HAL_RCC_OscConfig+0x8ac>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3730      	adds	r7, #48	@ 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	58024400 	.word	0x58024400
 800364c:	ffff0007 	.word	0xffff0007

08003650 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e19c      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b8a      	ldr	r3, [pc, #552]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d910      	bls.n	8003694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b87      	ldr	r3, [pc, #540]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	4985      	ldr	r1, [pc, #532]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b83      	ldr	r3, [pc, #524]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e184      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d908      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b0:	4b78      	ldr	r3, [pc, #480]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4975      	ldr	r1, [pc, #468]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	4b70      	ldr	r3, [pc, #448]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036da:	429a      	cmp	r2, r3
 80036dc:	d908      	bls.n	80036f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036de:	4b6d      	ldr	r3, [pc, #436]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	496a      	ldr	r1, [pc, #424]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	4b64      	ldr	r3, [pc, #400]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003708:	429a      	cmp	r2, r3
 800370a:	d908      	bls.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	495e      	ldr	r1, [pc, #376]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800371a:	4313      	orrs	r3, r2
 800371c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	4b59      	ldr	r3, [pc, #356]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003736:	429a      	cmp	r2, r3
 8003738:	d908      	bls.n	800374c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800373a:	4b56      	ldr	r3, [pc, #344]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4953      	ldr	r1, [pc, #332]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003748:	4313      	orrs	r3, r2
 800374a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4b4d      	ldr	r3, [pc, #308]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	429a      	cmp	r2, r3
 8003766:	d908      	bls.n	800377a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b4a      	ldr	r3, [pc, #296]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f023 020f 	bic.w	r2, r3, #15
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4947      	ldr	r1, [pc, #284]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003776:	4313      	orrs	r3, r2
 8003778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d055      	beq.n	8003832 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003786:	4b43      	ldr	r3, [pc, #268]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4940      	ldr	r1, [pc, #256]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003794:	4313      	orrs	r3, r2
 8003796:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d121      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0f6      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037b8:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d115      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0ea      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037d0:	4b30      	ldr	r3, [pc, #192]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0de      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0d6      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037f0:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f023 0207 	bic.w	r2, r3, #7
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4925      	ldr	r1, [pc, #148]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003802:	f7fd fea5 	bl	8001550 <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	e00a      	b.n	8003820 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380a:	f7fd fea1 	bl	8001550 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0be      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003820:	4b1c      	ldr	r3, [pc, #112]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	429a      	cmp	r2, r3
 8003830:	d1eb      	bne.n	800380a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	429a      	cmp	r2, r3
 800384c:	d208      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384e:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f023 020f 	bic.w	r2, r3, #15
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	490e      	ldr	r1, [pc, #56]	@ (8003894 <HAL_RCC_ClockConfig+0x244>)
 800385c:	4313      	orrs	r3, r2
 800385e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d214      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 020f 	bic.w	r2, r3, #15
 8003876:	4906      	ldr	r1, [pc, #24]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <HAL_RCC_ClockConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e086      	b.n	800399e <HAL_RCC_ClockConfig+0x34e>
 8003890:	52002000 	.word	0x52002000
 8003894:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d208      	bcs.n	80038c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038b4:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4939      	ldr	r1, [pc, #228]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d010      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038de:	429a      	cmp	r2, r3
 80038e0:	d208      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038e2:	4b31      	ldr	r3, [pc, #196]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	492e      	ldr	r1, [pc, #184]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800390c:	429a      	cmp	r2, r3
 800390e:	d208      	bcs.n	8003922 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003910:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4922      	ldr	r1, [pc, #136]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 800391e:	4313      	orrs	r3, r2
 8003920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800393a:	429a      	cmp	r2, r3
 800393c:	d208      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800393e:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4917      	ldr	r1, [pc, #92]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 800394c:	4313      	orrs	r3, r2
 800394e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003950:	f000 f834 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4912      	ldr	r1, [pc, #72]	@ (80039ac <HAL_RCC_ClockConfig+0x35c>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800396e:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_RCC_ClockConfig+0x358>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a0d      	ldr	r2, [pc, #52]	@ (80039ac <HAL_RCC_ClockConfig+0x35c>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <HAL_RCC_ClockConfig+0x360>)
 8003986:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003988:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <HAL_RCC_ClockConfig+0x364>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_RCC_ClockConfig+0x368>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fd92 	bl	80014bc <HAL_InitTick>
 8003998:	4603      	mov	r3, r0
 800399a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	58024400 	.word	0x58024400
 80039ac:	080082b4 	.word	0x080082b4
 80039b0:	24000008 	.word	0x24000008
 80039b4:	24000004 	.word	0x24000004
 80039b8:	2400000c 	.word	0x2400000c

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c2:	4bb3      	ldr	r3, [pc, #716]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039ca:	2b18      	cmp	r3, #24
 80039cc:	f200 8155 	bhi.w	8003c7a <HAL_RCC_GetSysClockFreq+0x2be>
 80039d0:	a201      	add	r2, pc, #4	@ (adr r2, 80039d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a3d 	.word	0x08003a3d
 80039dc:	08003c7b 	.word	0x08003c7b
 80039e0:	08003c7b 	.word	0x08003c7b
 80039e4:	08003c7b 	.word	0x08003c7b
 80039e8:	08003c7b 	.word	0x08003c7b
 80039ec:	08003c7b 	.word	0x08003c7b
 80039f0:	08003c7b 	.word	0x08003c7b
 80039f4:	08003c7b 	.word	0x08003c7b
 80039f8:	08003a63 	.word	0x08003a63
 80039fc:	08003c7b 	.word	0x08003c7b
 8003a00:	08003c7b 	.word	0x08003c7b
 8003a04:	08003c7b 	.word	0x08003c7b
 8003a08:	08003c7b 	.word	0x08003c7b
 8003a0c:	08003c7b 	.word	0x08003c7b
 8003a10:	08003c7b 	.word	0x08003c7b
 8003a14:	08003c7b 	.word	0x08003c7b
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003c7b 	.word	0x08003c7b
 8003a20:	08003c7b 	.word	0x08003c7b
 8003a24:	08003c7b 	.word	0x08003c7b
 8003a28:	08003c7b 	.word	0x08003c7b
 8003a2c:	08003c7b 	.word	0x08003c7b
 8003a30:	08003c7b 	.word	0x08003c7b
 8003a34:	08003c7b 	.word	0x08003c7b
 8003a38:	08003a6f 	.word	0x08003a6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3c:	4b94      	ldr	r3, [pc, #592]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a48:	4b91      	ldr	r3, [pc, #580]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a90      	ldr	r2, [pc, #576]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a5a:	e111      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a5e:	61bb      	str	r3, [r7, #24]
      break;
 8003a60:	e10e      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a62:	4b8d      	ldr	r3, [pc, #564]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a64:	61bb      	str	r3, [r7, #24]
      break;
 8003a66:	e10b      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a68:	4b8c      	ldr	r3, [pc, #560]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a6a:	61bb      	str	r3, [r7, #24]
      break;
 8003a6c:	e108      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a6e:	4b88      	ldr	r3, [pc, #544]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a78:	4b85      	ldr	r3, [pc, #532]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a84:	4b82      	ldr	r3, [pc, #520]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a8e:	4b80      	ldr	r3, [pc, #512]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80e1 	beq.w	8003c74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	f000 8083 	beq.w	8003bc0 <HAL_RCC_GetSysClockFreq+0x204>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	f200 80a1 	bhi.w	8003c04 <HAL_RCC_GetSysClockFreq+0x248>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d056      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ace:	e099      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02d      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003adc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b62      	ldr	r3, [pc, #392]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b36:	e087      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b51      	ldr	r3, [pc, #324]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b7a:	e065      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b40      	ldr	r3, [pc, #256]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bbe:	e043      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c02:	e021      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	0a5b      	lsrs	r3, r3, #9
 8003c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c52:	3301      	adds	r3, #1
 8003c54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6c:	ee17 3a90 	vmov	r3, s15
 8003c70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
      break;
 8003c78:	e002      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c7c:	61bb      	str	r3, [r7, #24]
      break;
 8003c7e:	bf00      	nop
  }

  return sysclockfreq;
 8003c80:	69bb      	ldr	r3, [r7, #24]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	@ 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58024400 	.word	0x58024400
 8003c94:	03d09000 	.word	0x03d09000
 8003c98:	003d0900 	.word	0x003d0900
 8003c9c:	007a1200 	.word	0x007a1200
 8003ca0:	46000000 	.word	0x46000000
 8003ca4:	4c742400 	.word	0x4c742400
 8003ca8:	4a742400 	.word	0x4a742400
 8003cac:	4af42400 	.word	0x4af42400

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cb6:	f7ff fe81 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	490f      	ldr	r1, [pc, #60]	@ (8003d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cc8:	5ccb      	ldrb	r3, [r1, r3]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cee:	4a07      	ldr	r2, [pc, #28]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	58024400 	.word	0x58024400
 8003d04:	080082b4 	.word	0x080082b4
 8003d08:	24000008 	.word	0x24000008
 8003d0c:	24000004 	.word	0x24000004

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d14:	f7ff ffcc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58024400 	.word	0x58024400
 8003d38:	080082b4 	.word	0x080082b4

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d40:	f7ff ffb6 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	@ (8003d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	080082b4 	.word	0x080082b4

08003d68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d6c:	b0ca      	sub	sp, #296	@ 0x128
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	ea54 0305 	orrs.w	r3, r4, r5
 8003d92:	d049      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d9e:	d02f      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003da0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003da4:	d828      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003daa:	d01a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db0:	d822      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dba:	d007      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbc:	e01c      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4bb8      	ldr	r3, [pc, #736]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4ab7      	ldr	r2, [pc, #732]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dca:	e01a      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f002 fb61 	bl	800649c <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de6:	3328      	adds	r3, #40	@ 0x28
 8003de8:	2102      	movs	r1, #2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fc08 	bl	8006600 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e0a:	4ba5      	ldr	r3, [pc, #660]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e18:	4aa1      	ldr	r2, [pc, #644]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e34:	f04f 0900 	mov.w	r9, #0
 8003e38:	ea58 0309 	orrs.w	r3, r8, r9
 8003e3c:	d047      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d82a      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e48:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e65 	.word	0x08003e65
 8003e54:	08003e73 	.word	0x08003e73
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003ea7 	.word	0x08003ea7
 8003e60:	08003ea7 	.word	0x08003ea7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e64:	4b8e      	ldr	r3, [pc, #568]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4a8d      	ldr	r2, [pc, #564]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e70:	e01a      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	3308      	adds	r3, #8
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 fb0e 	bl	800649c <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e86:	e00f      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	3328      	adds	r3, #40	@ 0x28
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f002 fbb5 	bl	8006600 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb4:	f023 0107 	bic.w	r1, r3, #7
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	4a78      	ldr	r2, [pc, #480]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003eda:	f04f 0b00 	mov.w	fp, #0
 8003ede:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ee2:	d04c      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eee:	d030      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef4:	d829      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef8:	d02d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003efc:	d825      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003efe:	2b80      	cmp	r3, #128	@ 0x80
 8003f00:	d018      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f02:	2b80      	cmp	r3, #128	@ 0x80
 8003f04:	d821      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003f0e:	e01c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4b63      	ldr	r3, [pc, #396]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4a62      	ldr	r2, [pc, #392]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3308      	adds	r3, #8
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 fab8 	bl	800649c <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f32:	e011      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	3328      	adds	r3, #40	@ 0x28
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 fb5f 	bl	8006600 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f60:	4b4f      	ldr	r3, [pc, #316]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d053      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003faa:	d035      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fb0:	d82e      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fb6:	d031      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fbc:	d828      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc2:	d01a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc8:	d822      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd2:	d007      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fd4:	e01c      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd6:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a31      	ldr	r2, [pc, #196]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe2:	e01c      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	3308      	adds	r3, #8
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 fa55 	bl	800649c <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	3328      	adds	r3, #40	@ 0x28
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f002 fafc 	bl	8006600 <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004016:	e002      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004026:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004036:	4a1a      	ldr	r2, [pc, #104]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004038:	430b      	orrs	r3, r1
 800403a:	6593      	str	r3, [r2, #88]	@ 0x58
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004052:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800405c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d056      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800406e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004072:	d038      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004078:	d831      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800407e:	d034      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004080:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004084:	d82b      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800408a:	d01d      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004090:	d825      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800409c:	e01f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4ba2      	ldr	r3, [pc, #648]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4aa1      	ldr	r2, [pc, #644]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040b0:	e01c      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	3308      	adds	r3, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 f9ee 	bl	800649c <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	3328      	adds	r3, #40	@ 0x28
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f002 fa95 	bl	8006600 <RCCEx_PLL3_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e4:	e002      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004104:	4a8a      	ldr	r2, [pc, #552]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6593      	str	r3, [r2, #88]	@ 0x58
 800410a:	e003      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800412a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d03a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413a:	2b30      	cmp	r3, #48	@ 0x30
 800413c:	d01f      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800413e:	2b30      	cmp	r3, #48	@ 0x30
 8004140:	d819      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004142:	2b20      	cmp	r3, #32
 8004144:	d00c      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004146:	2b20      	cmp	r3, #32
 8004148:	d815      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d019      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800414e:	2b10      	cmp	r3, #16
 8004150:	d111      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004152:	4b77      	ldr	r3, [pc, #476]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	4a76      	ldr	r2, [pc, #472]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800415e:	e011      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	3308      	adds	r3, #8
 8004166:	2102      	movs	r1, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f002 f997 	bl	800649c <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800418c:	4b68      	ldr	r3, [pc, #416]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004190:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	4a65      	ldr	r2, [pc, #404]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800419c:	430b      	orrs	r3, r1
 800419e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d051      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d4:	d035      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041da:	d82e      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041e0:	d031      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041e6:	d828      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ec:	d01a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f2:	d822      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fc:	d007      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041fe:	e01c      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004200:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a4a      	ldr	r2, [pc, #296]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800420c:	e01c      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3308      	adds	r3, #8
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f002 f940 	bl	800649c <RCCEx_PLL2_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004222:	e011      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	3328      	adds	r3, #40	@ 0x28
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f002 f9e7 	bl	8006600 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004238:	e006      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004240:	e002      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004250:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004254:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425e:	4a34      	ldr	r2, [pc, #208]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6513      	str	r3, [r2, #80]	@ 0x50
 8004264:	e003      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800427a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800427e:	2300      	movs	r3, #0
 8004280:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004284:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004288:	460b      	mov	r3, r1
 800428a:	4313      	orrs	r3, r2
 800428c:	d056      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004298:	d033      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800429a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800429e:	d82c      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042a4:	d02f      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80042a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042aa:	d826      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042b0:	d02b      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80042b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042b6:	d820      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042bc:	d012      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c2:	d81a      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d022      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042cc:	d115      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	3308      	adds	r3, #8
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 f8e0 	bl	800649c <RCCEx_PLL2_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042e2:	e015      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	3328      	adds	r3, #40	@ 0x28
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 f987 	bl	8006600 <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042f8:	e00a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004302:	bf00      	nop
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800430e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004326:	4a02      	ldr	r2, [pc, #8]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6513      	str	r3, [r2, #80]	@ 0x50
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004352:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d055      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004368:	d033      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800436a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800436e:	d82c      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004374:	d02f      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437a:	d826      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800437c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004380:	d02b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004386:	d820      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800438c:	d012      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800438e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004392:	d81a      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d022      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800439c:	d115      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	3308      	adds	r3, #8
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f002 f878 	bl	800649c <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043b2:	e015      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	3328      	adds	r3, #40	@ 0x28
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f002 f91f 	bl	8006600 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043d2:	bf00      	nop
 80043d4:	e004      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043e8:	4ba3      	ldr	r3, [pc, #652]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800441e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d037      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004432:	d00e      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004438:	d816      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800443e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004442:	d111      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004444:	4b8c      	ldr	r3, [pc, #560]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	4a8b      	ldr	r2, [pc, #556]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3308      	adds	r3, #8
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f002 f81e 	bl	800649c <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800447a:	4b7f      	ldr	r3, [pc, #508]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800447c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	4a7b      	ldr	r2, [pc, #492]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448a:	430b      	orrs	r3, r1
 800448c:	6513      	str	r3, [r2, #80]	@ 0x50
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80044a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80044ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d039      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d81c      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044c2:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	08004505 	.word	0x08004505
 80044cc:	080044d9 	.word	0x080044d9
 80044d0:	080044e7 	.word	0x080044e7
 80044d4:	08004505 	.word	0x08004505
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b67      	ldr	r3, [pc, #412]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	4a66      	ldr	r2, [pc, #408]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044e4:	e00f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	3308      	adds	r3, #8
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 ffd4 	bl	800649c <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800450e:	4b5a      	ldr	r3, [pc, #360]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	f023 0103 	bic.w	r1, r3, #3
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451c:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800451e:	430b      	orrs	r3, r1
 8004520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004522:	e003      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004542:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	f000 809f 	beq.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454e:	4b4b      	ldr	r3, [pc, #300]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800455a:	f7fc fff9 	bl	8001550 <HAL_GetTick>
 800455e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004562:	e00b      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fc fff4 	bl	8001550 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	@ 0x64
 8004572:	d903      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457a:	e005      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457c:	4b3f      	ldr	r3, [pc, #252]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ed      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458c:	2b00      	cmp	r3, #0
 800458e:	d179      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004592:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800459c:	4053      	eors	r3, r2
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d015      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a30      	ldr	r2, [pc, #192]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045be:	4b2e      	ldr	r3, [pc, #184]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d118      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fc ffb6 	bl	8001550 <HAL_GetTick>
 80045e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e8:	e00d      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fc ffb1 	bl	8001550 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d903      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004604:	e005      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004606:	4b1c      	ldr	r3, [pc, #112]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0eb      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d129      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462a:	d10e      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800462c:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800463c:	091a      	lsrs	r2, r3, #4
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004640:	4013      	ands	r3, r2
 8004642:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6113      	str	r3, [r2, #16]
 8004648:	e005      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004650:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004654:	6113      	str	r3, [r2, #16]
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004658:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6713      	str	r3, [r2, #112]	@ 0x70
 800466c:	e00e      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004678:	58024400 	.word	0x58024400
 800467c:	58024800 	.word	0x58024800
 8004680:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 0301 	and.w	r3, r2, #1
 8004698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f000 8089 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b4:	2b28      	cmp	r3, #40	@ 0x28
 80046b6:	d86b      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046b8:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	08004799 	.word	0x08004799
 80046c4:	08004791 	.word	0x08004791
 80046c8:	08004791 	.word	0x08004791
 80046cc:	08004791 	.word	0x08004791
 80046d0:	08004791 	.word	0x08004791
 80046d4:	08004791 	.word	0x08004791
 80046d8:	08004791 	.word	0x08004791
 80046dc:	08004791 	.word	0x08004791
 80046e0:	08004765 	.word	0x08004765
 80046e4:	08004791 	.word	0x08004791
 80046e8:	08004791 	.word	0x08004791
 80046ec:	08004791 	.word	0x08004791
 80046f0:	08004791 	.word	0x08004791
 80046f4:	08004791 	.word	0x08004791
 80046f8:	08004791 	.word	0x08004791
 80046fc:	08004791 	.word	0x08004791
 8004700:	0800477b 	.word	0x0800477b
 8004704:	08004791 	.word	0x08004791
 8004708:	08004791 	.word	0x08004791
 800470c:	08004791 	.word	0x08004791
 8004710:	08004791 	.word	0x08004791
 8004714:	08004791 	.word	0x08004791
 8004718:	08004791 	.word	0x08004791
 800471c:	08004791 	.word	0x08004791
 8004720:	08004799 	.word	0x08004799
 8004724:	08004791 	.word	0x08004791
 8004728:	08004791 	.word	0x08004791
 800472c:	08004791 	.word	0x08004791
 8004730:	08004791 	.word	0x08004791
 8004734:	08004791 	.word	0x08004791
 8004738:	08004791 	.word	0x08004791
 800473c:	08004791 	.word	0x08004791
 8004740:	08004799 	.word	0x08004799
 8004744:	08004791 	.word	0x08004791
 8004748:	08004791 	.word	0x08004791
 800474c:	08004791 	.word	0x08004791
 8004750:	08004791 	.word	0x08004791
 8004754:	08004791 	.word	0x08004791
 8004758:	08004791 	.word	0x08004791
 800475c:	08004791 	.word	0x08004791
 8004760:	08004799 	.word	0x08004799
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	3308      	adds	r3, #8
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fe95 	bl	800649c <RCCEx_PLL2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004778:	e00f      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	3328      	adds	r3, #40	@ 0x28
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f001 ff3c 	bl	8006600 <RCCEx_PLL3_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800478e:	e004      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047a2:	4bbf      	ldr	r3, [pc, #764]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047b0:	4abb      	ldr	r2, [pc, #748]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 0302 	and.w	r3, r2, #2
 80047cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d041      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d824      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	0800483d 	.word	0x0800483d
 80047f4:	08004809 	.word	0x08004809
 80047f8:	0800481f 	.word	0x0800481f
 80047fc:	0800483d 	.word	0x0800483d
 8004800:	0800483d 	.word	0x0800483d
 8004804:	0800483d 	.word	0x0800483d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	3308      	adds	r3, #8
 800480e:	2101      	movs	r1, #1
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fe43 	bl	800649c <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800481c:	e00f      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	3328      	adds	r3, #40	@ 0x28
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f001 feea 	bl	8006600 <RCCEx_PLL3_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004832:	e004      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800483c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004846:	4b96      	ldr	r3, [pc, #600]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	f023 0107 	bic.w	r1, r3, #7
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004854:	4a92      	ldr	r2, [pc, #584]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004856:	430b      	orrs	r3, r1
 8004858:	6553      	str	r3, [r2, #84]	@ 0x54
 800485a:	e003      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f002 0304 	and.w	r3, r2, #4
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800487a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d044      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800488c:	2b05      	cmp	r3, #5
 800488e:	d825      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004890:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048e5 	.word	0x080048e5
 800489c:	080048b1 	.word	0x080048b1
 80048a0:	080048c7 	.word	0x080048c7
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048e5 	.word	0x080048e5
 80048ac:	080048e5 	.word	0x080048e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	3308      	adds	r3, #8
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fdef 	bl	800649c <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048c4:	e00f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	2101      	movs	r1, #1
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fe96 	bl	8006600 <RCCEx_PLL3_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048da:	e004      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e2:	e000      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ee:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	f023 0107 	bic.w	r1, r3, #7
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fe:	4a68      	ldr	r2, [pc, #416]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004900:	430b      	orrs	r3, r1
 8004902:	6593      	str	r3, [r2, #88]	@ 0x58
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f002 0320 	and.w	r3, r2, #32
 800491a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004928:	460b      	mov	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	d055      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800493a:	d033      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800493c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004940:	d82c      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494c:	d826      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800494e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004952:	d02b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004958:	d820      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800495a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800495e:	d012      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004964:	d81a      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d022      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800496a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800496e:	d115      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	3308      	adds	r3, #8
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fd8f 	bl	800649c <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004984:	e015      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	3328      	adds	r3, #40	@ 0x28
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fe36 	bl	8006600 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800499a:	e00a      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a2:	e006      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049a4:	bf00      	nop
 80049a6:	e004      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ba:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d058      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a06:	d033      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004a08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a0c:	d82c      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d02f      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a18:	d826      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a1e:	d02b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a24:	d820      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2a:	d012      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a30:	d81a      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d022      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d115      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	3308      	adds	r3, #8
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fd29 	bl	800649c <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a50:	e015      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3328      	adds	r3, #40	@ 0x28
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fdd0 	bl	8006600 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a66:	e00a      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a6e:	e006      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a70:	bf00      	nop
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a96:	4a02      	ldr	r2, [pc, #8]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ac2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d055      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ad4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ad8:	d033      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ada:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ade:	d82c      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae4:	d02f      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aea:	d826      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004aec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004af0:	d02b      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004af2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004af6:	d820      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004afc:	d012      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b02:	d81a      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0c:	d115      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	3308      	adds	r3, #8
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 fcc0 	bl	800649c <RCCEx_PLL2_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b22:	e015      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	3328      	adds	r3, #40	@ 0x28
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fd67 	bl	8006600 <RCCEx_PLL3_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b38:	e00a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b40:	e006      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b42:	bf00      	nop
 8004b44:	e004      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b58:	4ba1      	ldr	r3, [pc, #644]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b68:	4a9d      	ldr	r2, [pc, #628]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f002 0308 	and.w	r3, r2, #8
 8004b84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d01e      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	3328      	adds	r3, #40	@ 0x28
 8004bac:	2102      	movs	r1, #2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 fd26 	bl	8006600 <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bc0:	4b87      	ldr	r3, [pc, #540]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd0:	4a83      	ldr	r2, [pc, #524]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f002 0310 	and.w	r3, r2, #16
 8004be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d01e      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	3328      	adds	r3, #40	@ 0x28
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fcf7 	bl	8006600 <RCCEx_PLL3_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c1e:	4b70      	ldr	r3, [pc, #448]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d03e      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c60:	d022      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d81b      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c72:	e015      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c78:	3308      	adds	r3, #8
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fc0d 	bl	800649c <RCCEx_PLL2_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c88:	e00f      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	3328      	adds	r3, #40	@ 0x28
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fcb4 	bl	8006600 <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c9e:	e004      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca6:	e000      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cc2:	4a47      	ldr	r2, [pc, #284]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ce4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4313      	orrs	r3, r2
 8004cec:	d03b      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cfa:	d01f      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d00:	d818      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d0c:	d007      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4b33      	ldr	r3, [pc, #204]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d1c:	e00f      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3328      	adds	r3, #40	@ 0x28
 8004d24:	2101      	movs	r1, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fc6a 	bl	8006600 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d32:	e004      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d46:	4b26      	ldr	r3, [pc, #152]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	4a22      	ldr	r2, [pc, #136]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d5c:	e003      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d74:	2300      	movs	r3, #0
 8004d76:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d034      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d007      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d92:	e011      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d94:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4a11      	ldr	r2, [pc, #68]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004da0:	e00e      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	3308      	adds	r3, #8
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fb76 	bl	800649c <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dcc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd6:	4a02      	ldr	r2, [pc, #8]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ddc:	e006      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dde:	bf00      	nop
 8004de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d00c      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0c:	3328      	adds	r3, #40	@ 0x28
 8004e0e:	2102      	movs	r1, #2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fbf5 	bl	8006600 <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e30:	2300      	movs	r3, #0
 8004e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d038      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e4a:	d018      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e50:	d811      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e56:	d014      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5c:	d80b      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e66:	d106      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e68:	4bc3      	ldr	r3, [pc, #780]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	4ac2      	ldr	r2, [pc, #776]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e74:	e008      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e7c:	e004      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e90:	4bb9      	ldr	r3, [pc, #740]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea0:	4ab5      	ldr	r2, [pc, #724]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ea6:	e003      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ec2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ecc:	4baa      	ldr	r3, [pc, #680]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eda:	4aa7      	ldr	r2, [pc, #668]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004eec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eee:	2300      	movs	r3, #0
 8004ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ef2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004efc:	4b9e      	ldr	r3, [pc, #632]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f0c:	4a9a      	ldr	r2, [pc, #616]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f20:	2300      	movs	r3, #0
 8004f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f2e:	4b92      	ldr	r3, [pc, #584]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3c:	4a8e      	ldr	r2, [pc, #568]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f50:	2300      	movs	r3, #0
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f5e:	4b86      	ldr	r3, [pc, #536]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	4a85      	ldr	r2, [pc, #532]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f68:	6113      	str	r3, [r2, #16]
 8004f6a:	4b83      	ldr	r3, [pc, #524]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6c:	6919      	ldr	r1, [r3, #16]
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f76:	4a80      	ldr	r2, [pc, #512]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f98:	4b77      	ldr	r3, [pc, #476]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	4a74      	ldr	r2, [pc, #464]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fba:	2300      	movs	r3, #0
 8004fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd8:	4a67      	ldr	r2, [pc, #412]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	d011      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	3308      	adds	r3, #8
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fa4a 	bl	800649c <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800500e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	2100      	movs	r1, #0
 8005028:	6239      	str	r1, [r7, #32]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005030:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d011      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	3308      	adds	r3, #8
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fa2a 	bl	800649c <RCCEx_PLL2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	2100      	movs	r1, #0
 8005068:	61b9      	str	r1, [r7, #24]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d011      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	3308      	adds	r3, #8
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fa0a 	bl	800649c <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800508e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800509e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	2100      	movs	r1, #0
 80050a8:	6139      	str	r1, [r7, #16]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d011      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	3328      	adds	r3, #40	@ 0x28
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fa9c 	bl	8006600 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80050ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	2100      	movs	r1, #0
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050f4:	460b      	mov	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	d011      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	3328      	adds	r3, #40	@ 0x28
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f001 fa7c 	bl	8006600 <RCCEx_PLL3_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	2100      	movs	r1, #0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005134:	460b      	mov	r3, r1
 8005136:	4313      	orrs	r3, r2
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fa5c 	bl	8006600 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800515a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800515e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005178:	58024400 	.word	0x58024400

0800517c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b090      	sub	sp, #64	@ 0x40
 8005180:	af00      	add	r7, sp, #0
 8005182:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800518e:	430b      	orrs	r3, r1
 8005190:	f040 8094 	bne.w	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005194:	4b9e      	ldr	r3, [pc, #632]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	f200 8087 	bhi.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80051a6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051c1 	.word	0x080051c1
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	08005211 	.word	0x08005211
 80051b8:	080052ad 	.word	0x080052ad
 80051bc:	08005239 	.word	0x08005239
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051c0:	4b93      	ldr	r3, [pc, #588]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051cc:	d108      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 f810 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051dc:	f000 bd45 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e4:	f000 bd41 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051e8:	4b89      	ldr	r3, [pc, #548]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f4:	d108      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051f6:	f107 0318 	add.w	r3, r7, #24
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fd54 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005204:	f000 bd31 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800520c:	f000 bd2d 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005210:	4b7f      	ldr	r3, [pc, #508]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800521c:	d108      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521e:	f107 030c 	add.w	r3, r7, #12
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fe94 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800522c:	f000 bd1d 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005234:	f000 bd19 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005238:	4b75      	ldr	r3, [pc, #468]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005240:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005242:	4b73      	ldr	r3, [pc, #460]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d10c      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800524e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005254:	4b6e      	ldr	r3, [pc, #440]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	4a6d      	ldr	r2, [pc, #436]	@ (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005266:	e01f      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005268:	4b69      	ldr	r3, [pc, #420]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005274:	d106      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800527c:	d102      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800527e:	4b66      	ldr	r3, [pc, #408]	@ (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005284:	4b62      	ldr	r3, [pc, #392]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005290:	d106      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005298:	d102      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800529a:	4b60      	ldr	r3, [pc, #384]	@ (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80052a4:	f000 bce1 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052a8:	f000 bcdf 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b0:	f000 bcdb 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b8:	f000 bcd7 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80052bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80052c4:	430b      	orrs	r3, r1
 80052c6:	f040 80ad 	bne.w	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80052ca:	4b51      	ldr	r3, [pc, #324]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80052d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052da:	d056      	beq.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e2:	f200 8090 	bhi.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ea:	f000 8088 	beq.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80052f2:	f200 8088 	bhi.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	2b80      	cmp	r3, #128	@ 0x80
 80052fa:	d032      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	2b80      	cmp	r3, #128	@ 0x80
 8005300:	f200 8081 	bhi.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b40      	cmp	r3, #64	@ 0x40
 800530e:	d014      	beq.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005310:	e079      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005312:	4b3f      	ldr	r3, [pc, #252]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800531e:	d108      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005324:	4618      	mov	r0, r3
 8005326:	f000 ff67 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800532e:	f000 bc9c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005336:	f000 bc98 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800533a:	4b35      	ldr	r3, [pc, #212]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005346:	d108      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005348:	f107 0318 	add.w	r3, r7, #24
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fcab 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005356:	f000 bc88 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800535e:	f000 bc84 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005362:	4b2b      	ldr	r3, [pc, #172]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800536a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800536e:	d108      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005370:	f107 030c 	add.w	r3, r7, #12
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fdeb 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800537e:	f000 bc74 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005386:	f000 bc70 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800538a:	4b21      	ldr	r3, [pc, #132]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005394:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d10c      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	4a18      	ldr	r2, [pc, #96]	@ (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053b8:	e01f      	b.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053ba:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d106      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ce:	d102      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053d0:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053d4:	e011      	b.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053e2:	d106      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ea:	d102      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80053ec:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80053ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f0:	e003      	b.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80053f6:	f000 bc38 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053fa:	f000 bc36 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80053fe:	4b08      	ldr	r3, [pc, #32]	@ (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005402:	f000 bc32 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540a:	f000 bc2e 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800540e:	bf00      	nop
 8005410:	58024400 	.word	0x58024400
 8005414:	03d09000 	.word	0x03d09000
 8005418:	003d0900 	.word	0x003d0900
 800541c:	007a1200 	.word	0x007a1200
 8005420:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800542c:	430b      	orrs	r3, r1
 800542e:	f040 809c 	bne.w	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005432:	4b9e      	ldr	r3, [pc, #632]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800543a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005442:	d054      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800544a:	f200 808b 	bhi.w	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005454:	f000 8083 	beq.w	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800545e:	f200 8081 	bhi.w	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005468:	d02f      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005470:	d878      	bhi.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800547e:	d012      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005480:	e070      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005482:	4b8a      	ldr	r3, [pc, #552]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005494:	4618      	mov	r0, r3
 8005496:	f000 feaf 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800549e:	e3e4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a4:	e3e1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054a6:	4b81      	ldr	r3, [pc, #516]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b4:	f107 0318 	add.w	r3, r7, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fbf5 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c2:	e3d2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054c8:	e3cf      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ca:	4b78      	ldr	r3, [pc, #480]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d6:	d107      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd37 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e6:	e3c0      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ec:	e3bd      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054ee:	4b6f      	ldr	r3, [pc, #444]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054f8:	4b6c      	ldr	r3, [pc, #432]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d10c      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800550a:	4b68      	ldr	r3, [pc, #416]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	08db      	lsrs	r3, r3, #3
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	4a66      	ldr	r2, [pc, #408]	@ (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800551c:	e01e      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800551e:	4b63      	ldr	r3, [pc, #396]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005532:	d102      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005534:	4b5f      	ldr	r3, [pc, #380]	@ (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005538:	e010      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800553a:	4b5c      	ldr	r3, [pc, #368]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005550:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005554:	e002      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800555a:	e386      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800555c:	e385      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800555e:	4b57      	ldr	r3, [pc, #348]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005562:	e382      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e37f      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800556a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005572:	430b      	orrs	r3, r1
 8005574:	f040 80a7 	bne.w	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005578:	4b4c      	ldr	r3, [pc, #304]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005580:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005588:	d055      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005590:	f200 8096 	bhi.w	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800559a:	f000 8084 	beq.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055a4:	f200 808c 	bhi.w	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055ae:	d030      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b6:	f200 8083 	bhi.w	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055c6:	d012      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80055c8:	e07a      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055ca:	4b38      	ldr	r3, [pc, #224]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055d6:	d107      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe0b 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055e6:	e340      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ec:	e33d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ee:	4b2f      	ldr	r3, [pc, #188]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055fa:	d107      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fc:	f107 0318 	add.w	r3, r7, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fb51 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800560a:	e32e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005610:	e32b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005612:	4b26      	ldr	r3, [pc, #152]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800561a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800561e:	d107      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005620:	f107 030c 	add.w	r3, r7, #12
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fc93 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800562e:	e31c      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005634:	e319      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005636:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005640:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d10c      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005652:	4b16      	ldr	r3, [pc, #88]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	08db      	lsrs	r3, r3, #3
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	4a14      	ldr	r2, [pc, #80]	@ (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800565e:	fa22 f303 	lsr.w	r3, r2, r3
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005664:	e01e      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005666:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005672:	d106      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800567a:	d102      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005680:	e010      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005682:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800568e:	d106      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005696:	d102      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005698:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80056a2:	e2e2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056a4:	e2e1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056a6:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80056a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056aa:	e2de      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056ac:	58024400 	.word	0x58024400
 80056b0:	03d09000 	.word	0x03d09000
 80056b4:	003d0900 	.word	0x003d0900
 80056b8:	007a1200 	.word	0x007a1200
 80056bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c4:	e2d1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80056ce:	430b      	orrs	r3, r1
 80056d0:	f040 809c 	bne.w	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80056d4:	4b93      	ldr	r3, [pc, #588]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80056dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e4:	d054      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ec:	f200 808b 	bhi.w	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056f6:	f000 8083 	beq.w	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005700:	f200 8081 	bhi.w	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d02f      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005712:	d878      	bhi.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005720:	d012      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005722:	e070      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005724:	4b7f      	ldr	r3, [pc, #508]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005730:	d107      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fd5e 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005740:	e293      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005746:	e290      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005748:	4b76      	ldr	r3, [pc, #472]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005754:	d107      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005756:	f107 0318 	add.w	r3, r7, #24
 800575a:	4618      	mov	r0, r3
 800575c:	f000 faa4 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005764:	e281      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576a:	e27e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800576c:	4b6d      	ldr	r3, [pc, #436]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005778:	d107      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fbe6 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005788:	e26f      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800578e:	e26c      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005790:	4b64      	ldr	r3, [pc, #400]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800579a:	4b62      	ldr	r3, [pc, #392]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057be:	e01e      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057c0:	4b58      	ldr	r3, [pc, #352]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057cc:	d106      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d4:	d102      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057d6:	4b55      	ldr	r3, [pc, #340]	@ (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057da:	e010      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057dc:	4b51      	ldr	r3, [pc, #324]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057e8:	d106      	bne.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80057ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f0:	d102      	bne.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f6:	e002      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057fc:	e235      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057fe:	e234      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005800:	4b4c      	ldr	r3, [pc, #304]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005804:	e231      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800580a:	e22e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800580c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005810:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005814:	430b      	orrs	r3, r1
 8005816:	f040 808f 	bne.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800581a:	4b42      	ldr	r3, [pc, #264]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800581c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800582a:	d06b      	beq.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005832:	d874      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800583a:	d056      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005842:	d86c      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800584a:	d03b      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005852:	d864      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585a:	d021      	beq.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005862:	d85c      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d004      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005872:	e054      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005874:	f7fe fa4c 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8005878:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800587a:	e1f6      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800587c:	4b29      	ldr	r3, [pc, #164]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005888:	d107      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588a:	f107 0318 	add.w	r3, r7, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fa0a 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005898:	e1e7      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800589e:	e1e4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058a0:	4b20      	ldr	r3, [pc, #128]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ac:	d107      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fb4c 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058bc:	e1d5      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c2:	e1d2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058c4:	4b17      	ldr	r3, [pc, #92]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d109      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058d0:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058e2:	e1c2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e8:	e1bf      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80058ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f6:	d102      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80058f8:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058fc:	e1b5      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005902:	e1b2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005904:	4b07      	ldr	r3, [pc, #28]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005910:	d102      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005912:	4b07      	ldr	r3, [pc, #28]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005916:	e1a8      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800591c:	e1a5      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005922:	e1a2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005924:	58024400 	.word	0x58024400
 8005928:	03d09000 	.word	0x03d09000
 800592c:	003d0900 	.word	0x003d0900
 8005930:	007a1200 	.word	0x007a1200
 8005934:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005940:	430b      	orrs	r3, r1
 8005942:	d173      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005944:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800594c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800594e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005954:	d02f      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800595c:	d863      	bhi.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596a:	d012      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800596c:	e05b      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800596e:	4b92      	ldr	r3, [pc, #584]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800597a:	d107      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597c:	f107 0318 	add.w	r3, r7, #24
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f991 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800598a:	e16e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005990:	e16b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005992:	4b89      	ldr	r3, [pc, #548]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800599a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599e:	d107      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fad3 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ae:	e15c      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b4:	e159      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059b6:	4b80      	ldr	r3, [pc, #512]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059c0:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d10c      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d2:	4b79      	ldr	r3, [pc, #484]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	4a77      	ldr	r2, [pc, #476]	@ (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	e01e      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059e6:	4b74      	ldr	r3, [pc, #464]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80059f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059fa:	d102      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059fc:	4b70      	ldr	r3, [pc, #448]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a00:	e010      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a02:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a16:	d102      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a18:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a1c:	e002      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a22:	e122      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a24:	e121      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a2a:	e11e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a30:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005a34:	430b      	orrs	r3, r1
 8005a36:	d133      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a38:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a4e:	d012      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005a50:	e023      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a52:	4b59      	ldr	r3, [pc, #356]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fbc7 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a6e:	e0fc      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a74:	e0f9      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a76:	4b50      	ldr	r3, [pc, #320]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a82:	d107      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a84:	f107 0318 	add.w	r3, r7, #24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f90d 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a92:	e0ea      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a98:	e0e7      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9e:	e0e4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	f040 808d 	bne.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005aae:	4b42      	ldr	r3, [pc, #264]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005ab6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005abe:	d06b      	beq.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac6:	d874      	bhi.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ace:	d056      	beq.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad6:	d86c      	bhi.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ade:	d03b      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae6:	d864      	bhi.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aee:	d021      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af6:	d85c      	bhi.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b04:	d004      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005b06:	e054      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b08:	f000 f8b8 	bl	8005c7c <HAL_RCCEx_GetD3PCLK1Freq>
 8005b0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b0e:	e0ac      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b10:	4b29      	ldr	r3, [pc, #164]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f8c0 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b2c:	e09d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b32:	e09a      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b34:	4b20      	ldr	r3, [pc, #128]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b40:	d107      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fa02 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b50:	e08b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b56:	e088      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b58:	4b17      	ldr	r3, [pc, #92]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d109      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b64:	4b14      	ldr	r3, [pc, #80]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	08db      	lsrs	r3, r3, #3
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b76:	e078      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7c:	e075      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d102      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b90:	e06b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b96:	e068      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b98:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba4:	d102      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005baa:	e05e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb0:	e05b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb6:	e058      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	03d09000 	.word	0x03d09000
 8005bc0:	003d0900 	.word	0x003d0900
 8005bc4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bcc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	d148      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005bd4:	4b27      	ldr	r3, [pc, #156]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d02a      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bec:	d838      	bhi.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bfa:	d00d      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005bfc:	e030      	b.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c0a:	d102      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c10:	e02b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c16:	e028      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c18:	4b16      	ldr	r3, [pc, #88]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c24:	d107      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fae4 	bl	80061f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c34:	e019      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3a:	e016      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c48:	d107      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f82a 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c58:	e007      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5e:	e004      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3740      	adds	r7, #64	@ 0x40
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	58024400 	.word	0x58024400
 8005c78:	007a1200 	.word	0x007a1200

08005c7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c80:	f7fe f816 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4904      	ldr	r1, [pc, #16]	@ (8005ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	080082b4 	.word	0x080082b4

08005ca8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	@ 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb0:	4ba1      	ldr	r3, [pc, #644]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cba:	4b9f      	ldr	r3, [pc, #636]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	0b1b      	lsrs	r3, r3, #12
 8005cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cd2:	4b99      	ldr	r3, [pc, #612]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8111 	beq.w	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	f000 8083 	beq.w	8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	f200 80a1 	bhi.w	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d056      	beq.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d12:	e099      	b.n	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d14:	4b88      	ldr	r3, [pc, #544]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d02d      	beq.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d20:	4b85      	ldr	r3, [pc, #532]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	08db      	lsrs	r3, r3, #3
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	4a84      	ldr	r2, [pc, #528]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d7a:	e087      	b.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dbe:	e065      	b.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b59      	ldr	r3, [pc, #356]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e02:	e043      	b.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b48      	ldr	r3, [pc, #288]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e46:	e021      	b.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	0a5b      	lsrs	r3, r3, #9
 8005e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb2:	ee17 2a90 	vmov	r2, s15
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005eba:	4b1f      	ldr	r3, [pc, #124]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee0:	ee17 2a90 	vmov	r2, s15
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ee8:	4b13      	ldr	r3, [pc, #76]	@ (8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	0e1b      	lsrs	r3, r3, #24
 8005eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f0e:	ee17 2a90 	vmov	r2, s15
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f16:	e008      	b.n	8005f2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	609a      	str	r2, [r3, #8]
}
 8005f2a:	bf00      	nop
 8005f2c:	3724      	adds	r7, #36	@ 0x24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	03d09000 	.word	0x03d09000
 8005f40:	46000000 	.word	0x46000000
 8005f44:	4c742400 	.word	0x4c742400
 8005f48:	4a742400 	.word	0x4a742400
 8005f4c:	4af42400 	.word	0x4af42400

08005f50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	@ 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f58:	4ba1      	ldr	r3, [pc, #644]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f62:	4b9f      	ldr	r3, [pc, #636]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	0d1b      	lsrs	r3, r3, #20
 8005f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f6e:	4b9c      	ldr	r3, [pc, #624]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f7a:	4b99      	ldr	r3, [pc, #612]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8111 	beq.w	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	f000 8083 	beq.w	80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	f200 80a1 	bhi.w	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d056      	beq.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fba:	e099      	b.n	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fbc:	4b88      	ldr	r3, [pc, #544]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02d      	beq.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fc8:	4b85      	ldr	r3, [pc, #532]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	08db      	lsrs	r3, r3, #3
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	4a84      	ldr	r2, [pc, #528]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b7b      	ldr	r3, [pc, #492]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a03 	vldr	s12, [r7, #12]
 8006006:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006022:	e087      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b6a      	ldr	r3, [pc, #424]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a03 	vldr	s12, [r7, #12]
 800604a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006066:	e065      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b59      	ldr	r3, [pc, #356]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a03 	vldr	s12, [r7, #12]
 800608e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060aa:	e043      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b48      	ldr	r3, [pc, #288]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ee:	e021      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b37      	ldr	r3, [pc, #220]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a03 	vldr	s12, [r7, #12]
 8006116:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006132:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006134:	4b2a      	ldr	r3, [pc, #168]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	0a5b      	lsrs	r3, r3, #9
 800613a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800614a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615a:	ee17 2a90 	vmov	r2, s15
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006162:	4b1f      	ldr	r3, [pc, #124]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800617c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006188:	ee17 2a90 	vmov	r2, s15
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006190:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006194:	0e1b      	lsrs	r3, r3, #24
 8006196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b6:	ee17 2a90 	vmov	r2, s15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061be:	e008      	b.n	80061d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
}
 80061d2:	bf00      	nop
 80061d4:	3724      	adds	r7, #36	@ 0x24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	03d09000 	.word	0x03d09000
 80061e8:	46000000 	.word	0x46000000
 80061ec:	4c742400 	.word	0x4c742400
 80061f0:	4a742400 	.word	0x4a742400
 80061f4:	4af42400 	.word	0x4af42400

080061f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	@ 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006200:	4ba0      	ldr	r3, [pc, #640]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800620a:	4b9e      	ldr	r3, [pc, #632]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006214:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006216:	4b9b      	ldr	r3, [pc, #620]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006220:	4b98      	ldr	r3, [pc, #608]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	08db      	lsrs	r3, r3, #3
 8006226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	fb02 f303 	mul.w	r3, r2, r3
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006238:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8111 	beq.w	8006466 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	f000 8083 	beq.w	8006352 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b02      	cmp	r3, #2
 8006250:	f200 80a1 	bhi.w	8006396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d056      	beq.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006260:	e099      	b.n	8006396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006262:	4b88      	ldr	r3, [pc, #544]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02d      	beq.n	80062ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800626e:	4b85      	ldr	r3, [pc, #532]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	08db      	lsrs	r3, r3, #3
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	4a83      	ldr	r2, [pc, #524]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800627a:	fa22 f303 	lsr.w	r3, r2, r3
 800627e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006298:	4b7a      	ldr	r3, [pc, #488]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062c8:	e087      	b.n	80063da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062dc:	4b69      	ldr	r3, [pc, #420]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800630c:	e065      	b.n	80063da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006318:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006494 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800631c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006320:	4b58      	ldr	r3, [pc, #352]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006330:	ed97 6a03 	vldr	s12, [r7, #12]
 8006334:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006350:	e043      	b.n	80063da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006364:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006374:	ed97 6a03 	vldr	s12, [r7, #12]
 8006378:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800637c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006394:	e021      	b.n	80063da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a8:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b0:	ee07 3a90 	vmov	s15, r3
 80063b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063da:	4b2a      	ldr	r3, [pc, #168]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	0a5b      	lsrs	r3, r3, #9
 80063e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006400:	ee17 2a90 	vmov	r2, s15
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006408:	4b1e      	ldr	r3, [pc, #120]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800641e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006422:	edd7 6a07 	vldr	s13, [r7, #28]
 8006426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642e:	ee17 2a90 	vmov	r2, s15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	0e1b      	lsrs	r3, r3, #24
 800643c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006448:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800644c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006450:	edd7 6a07 	vldr	s13, [r7, #28]
 8006454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645c:	ee17 2a90 	vmov	r2, s15
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006464:	e008      	b.n	8006478 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	609a      	str	r2, [r3, #8]
}
 8006478:	bf00      	nop
 800647a:	3724      	adds	r7, #36	@ 0x24
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	58024400 	.word	0x58024400
 8006488:	03d09000 	.word	0x03d09000
 800648c:	46000000 	.word	0x46000000
 8006490:	4c742400 	.word	0x4c742400
 8006494:	4a742400 	.word	0x4a742400
 8006498:	4af42400 	.word	0x4af42400

0800649c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064aa:	4b53      	ldr	r3, [pc, #332]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d101      	bne.n	80064ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e099      	b.n	80065ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064ba:	4b4f      	ldr	r3, [pc, #316]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4e      	ldr	r2, [pc, #312]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c6:	f7fb f843 	bl	8001550 <HAL_GetTick>
 80064ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064ce:	f7fb f83f 	bl	8001550 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e086      	b.n	80065ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064e0:	4b45      	ldr	r3, [pc, #276]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064ec:	4b42      	ldr	r3, [pc, #264]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	493f      	ldr	r1, [pc, #252]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	025b      	lsls	r3, r3, #9
 8006512:	b29b      	uxth	r3, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006530:	4931      	ldr	r1, [pc, #196]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006536:	4b30      	ldr	r3, [pc, #192]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	492d      	ldr	r1, [pc, #180]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006548:	4b2b      	ldr	r3, [pc, #172]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	f023 0220 	bic.w	r2, r3, #32
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4928      	ldr	r1, [pc, #160]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800655a:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006560:	f023 0310 	bic.w	r3, r3, #16
 8006564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006566:	4b24      	ldr	r3, [pc, #144]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800656a:	4b24      	ldr	r3, [pc, #144]	@ (80065fc <RCCEx_PLL2_Config+0x160>)
 800656c:	4013      	ands	r3, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	69d2      	ldr	r2, [r2, #28]
 8006572:	00d2      	lsls	r2, r2, #3
 8006574:	4920      	ldr	r1, [pc, #128]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800657a:	4b1f      	ldr	r3, [pc, #124]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	4a1e      	ldr	r2, [pc, #120]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006580:	f043 0310 	orr.w	r3, r3, #16
 8006584:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800658c:	4b1a      	ldr	r3, [pc, #104]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 8006592:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006598:	e00f      	b.n	80065ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065a0:	4b15      	ldr	r3, [pc, #84]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	4a14      	ldr	r2, [pc, #80]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065ac:	e005      	b.n	80065ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ae:	4b12      	ldr	r3, [pc, #72]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065ba:	4b0f      	ldr	r3, [pc, #60]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a0e      	ldr	r2, [pc, #56]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c6:	f7fa ffc3 	bl	8001550 <HAL_GetTick>
 80065ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065cc:	e008      	b.n	80065e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065ce:	f7fa ffbf 	bl	8001550 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065e0:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <RCCEx_PLL2_Config+0x15c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
 80065fc:	ffff0007 	.word	0xffff0007

08006600 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800660e:	4b53      	ldr	r3, [pc, #332]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b03      	cmp	r3, #3
 8006618:	d101      	bne.n	800661e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e099      	b.n	8006752 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800661e:	4b4f      	ldr	r3, [pc, #316]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a4e      	ldr	r2, [pc, #312]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800662a:	f7fa ff91 	bl	8001550 <HAL_GetTick>
 800662e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006630:	e008      	b.n	8006644 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006632:	f7fa ff8d 	bl	8001550 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e086      	b.n	8006752 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006644:	4b45      	ldr	r3, [pc, #276]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006650:	4b42      	ldr	r3, [pc, #264]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	493f      	ldr	r1, [pc, #252]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006660:	4313      	orrs	r3, r2
 8006662:	628b      	str	r3, [r1, #40]	@ 0x28
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	3b01      	subs	r3, #1
 800666a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	025b      	lsls	r3, r3, #9
 8006676:	b29b      	uxth	r3, r3
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	3b01      	subs	r3, #1
 8006680:	041b      	lsls	r3, r3, #16
 8006682:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	3b01      	subs	r3, #1
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006694:	4931      	ldr	r1, [pc, #196]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800669a:	4b30      	ldr	r3, [pc, #192]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	492d      	ldr	r1, [pc, #180]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066ac:	4b2b      	ldr	r3, [pc, #172]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	4928      	ldr	r1, [pc, #160]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066be:	4b27      	ldr	r3, [pc, #156]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a26      	ldr	r2, [pc, #152]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066ca:	4b24      	ldr	r3, [pc, #144]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ce:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <RCCEx_PLL3_Config+0x160>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	69d2      	ldr	r2, [r2, #28]
 80066d6:	00d2      	lsls	r2, r2, #3
 80066d8:	4920      	ldr	r1, [pc, #128]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066de:	4b1f      	ldr	r3, [pc, #124]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066f0:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a19      	ldr	r2, [pc, #100]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 80066f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066fc:	e00f      	b.n	800671e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d106      	bne.n	8006712 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006704:	4b15      	ldr	r3, [pc, #84]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 800670a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800670e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006710:	e005      	b.n	800671e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	4a11      	ldr	r2, [pc, #68]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006718:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800671c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a0e      	ldr	r2, [pc, #56]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672a:	f7fa ff11 	bl	8001550 <HAL_GetTick>
 800672e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006730:	e008      	b.n	8006744 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006732:	f7fa ff0d 	bl	8001550 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e006      	b.n	8006752 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <RCCEx_PLL3_Config+0x15c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400
 8006760:	ffff0007 	.word	0xffff0007

08006764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e049      	b.n	800680a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fa fca2 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 f836 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a46      	ldr	r2, [pc, #280]	@ (8006940 <TIM_Base_SetConfig+0x12c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006832:	d00f      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a43      	ldr	r2, [pc, #268]	@ (8006944 <TIM_Base_SetConfig+0x130>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a42      	ldr	r2, [pc, #264]	@ (8006948 <TIM_Base_SetConfig+0x134>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a41      	ldr	r2, [pc, #260]	@ (800694c <TIM_Base_SetConfig+0x138>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a40      	ldr	r2, [pc, #256]	@ (8006950 <TIM_Base_SetConfig+0x13c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a35      	ldr	r2, [pc, #212]	@ (8006940 <TIM_Base_SetConfig+0x12c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01f      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006874:	d01b      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a32      	ldr	r2, [pc, #200]	@ (8006944 <TIM_Base_SetConfig+0x130>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d017      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a31      	ldr	r2, [pc, #196]	@ (8006948 <TIM_Base_SetConfig+0x134>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a30      	ldr	r2, [pc, #192]	@ (800694c <TIM_Base_SetConfig+0x138>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2f      	ldr	r2, [pc, #188]	@ (8006950 <TIM_Base_SetConfig+0x13c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2e      	ldr	r2, [pc, #184]	@ (8006954 <TIM_Base_SetConfig+0x140>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006958 <TIM_Base_SetConfig+0x144>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_Base_SetConfig+0x9a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <TIM_Base_SetConfig+0x148>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d108      	bne.n	80068c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <TIM_Base_SetConfig+0x12c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0xf8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <TIM_Base_SetConfig+0x13c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0xf8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a17      	ldr	r2, [pc, #92]	@ (8006954 <TIM_Base_SetConfig+0x140>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0xf8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a16      	ldr	r2, [pc, #88]	@ (8006958 <TIM_Base_SetConfig+0x144>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0xf8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a15      	ldr	r2, [pc, #84]	@ (800695c <TIM_Base_SetConfig+0x148>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d103      	bne.n	8006914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d105      	bne.n	8006932 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f023 0201 	bic.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]
  }
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40010400 	.word	0x40010400
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800

08006960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006974:	2302      	movs	r3, #2
 8006976:	e06d      	b.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a30      	ldr	r2, [pc, #192]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d108      	bne.n	80069be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a20      	ldr	r2, [pc, #128]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d022      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ea:	d01d      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d018      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d013      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1a      	ldr	r2, [pc, #104]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00e      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d009      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a15      	ldr	r2, [pc, #84]	@ (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10c      	bne.n	8006a42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40001800 	.word	0x40001800
 8006a78:	40014000 	.word	0x40014000

08006a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e042      	b.n	8006b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fa fb85 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	@ 0x24
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fd90 	bl	80075ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f825 	bl	8006b1c <UART_SetConfig>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01b      	b.n	8006b14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fe0f 	bl	8007730 <UART_CheckIdleState>
 8006b12:	4603      	mov	r3, r0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b20:	b092      	sub	sp, #72	@ 0x48
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4bbe      	ldr	r3, [pc, #760]	@ (8006e44 <UART_SetConfig+0x328>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4ab3      	ldr	r2, [pc, #716]	@ (8006e48 <UART_SetConfig+0x32c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b84:	4313      	orrs	r3, r2
 8006b86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	4baf      	ldr	r3, [pc, #700]	@ (8006e4c <UART_SetConfig+0x330>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	f023 010f 	bic.w	r1, r3, #15
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4aa6      	ldr	r2, [pc, #664]	@ (8006e50 <UART_SetConfig+0x334>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d177      	bne.n	8006cac <UART_SetConfig+0x190>
 8006bbc:	4ba5      	ldr	r3, [pc, #660]	@ (8006e54 <UART_SetConfig+0x338>)
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bc4:	2b28      	cmp	r3, #40	@ 0x28
 8006bc6:	d86d      	bhi.n	8006ca4 <UART_SetConfig+0x188>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <UART_SetConfig+0xb4>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c75 	.word	0x08006c75
 8006bd4:	08006ca5 	.word	0x08006ca5
 8006bd8:	08006ca5 	.word	0x08006ca5
 8006bdc:	08006ca5 	.word	0x08006ca5
 8006be0:	08006ca5 	.word	0x08006ca5
 8006be4:	08006ca5 	.word	0x08006ca5
 8006be8:	08006ca5 	.word	0x08006ca5
 8006bec:	08006ca5 	.word	0x08006ca5
 8006bf0:	08006c7d 	.word	0x08006c7d
 8006bf4:	08006ca5 	.word	0x08006ca5
 8006bf8:	08006ca5 	.word	0x08006ca5
 8006bfc:	08006ca5 	.word	0x08006ca5
 8006c00:	08006ca5 	.word	0x08006ca5
 8006c04:	08006ca5 	.word	0x08006ca5
 8006c08:	08006ca5 	.word	0x08006ca5
 8006c0c:	08006ca5 	.word	0x08006ca5
 8006c10:	08006c85 	.word	0x08006c85
 8006c14:	08006ca5 	.word	0x08006ca5
 8006c18:	08006ca5 	.word	0x08006ca5
 8006c1c:	08006ca5 	.word	0x08006ca5
 8006c20:	08006ca5 	.word	0x08006ca5
 8006c24:	08006ca5 	.word	0x08006ca5
 8006c28:	08006ca5 	.word	0x08006ca5
 8006c2c:	08006ca5 	.word	0x08006ca5
 8006c30:	08006c8d 	.word	0x08006c8d
 8006c34:	08006ca5 	.word	0x08006ca5
 8006c38:	08006ca5 	.word	0x08006ca5
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006ca5 	.word	0x08006ca5
 8006c48:	08006ca5 	.word	0x08006ca5
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006c95 	.word	0x08006c95
 8006c54:	08006ca5 	.word	0x08006ca5
 8006c58:	08006ca5 	.word	0x08006ca5
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006ca5 	.word	0x08006ca5
 8006c64:	08006ca5 	.word	0x08006ca5
 8006c68:	08006ca5 	.word	0x08006ca5
 8006c6c:	08006ca5 	.word	0x08006ca5
 8006c70:	08006c9d 	.word	0x08006c9d
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7a:	e222      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e21e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006c84:	2308      	movs	r3, #8
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e21a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e216      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006c94:	2320      	movs	r3, #32
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e212      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006c9c:	2340      	movs	r3, #64	@ 0x40
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e20e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006ca4:	2380      	movs	r3, #128	@ 0x80
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e20a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a69      	ldr	r2, [pc, #420]	@ (8006e58 <UART_SetConfig+0x33c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d130      	bne.n	8006d18 <UART_SetConfig+0x1fc>
 8006cb6:	4b67      	ldr	r3, [pc, #412]	@ (8006e54 <UART_SetConfig+0x338>)
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d826      	bhi.n	8006d10 <UART_SetConfig+0x1f4>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0x1ac>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006ce1 	.word	0x08006ce1
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006cf1 	.word	0x08006cf1
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e1ec      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e1e8      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e1e4      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e1e0      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e1dc      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d08:	2340      	movs	r3, #64	@ 0x40
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e1d8      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d10:	2380      	movs	r3, #128	@ 0x80
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e1d4      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e5c <UART_SetConfig+0x340>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d130      	bne.n	8006d84 <UART_SetConfig+0x268>
 8006d22:	4b4c      	ldr	r3, [pc, #304]	@ (8006e54 <UART_SetConfig+0x338>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d826      	bhi.n	8006d7c <UART_SetConfig+0x260>
 8006d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d34 <UART_SetConfig+0x218>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d5d 	.word	0x08006d5d
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e1b6      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e1b2      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e1ae      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e1aa      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e1a6      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d74:	2340      	movs	r3, #64	@ 0x40
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e1a2      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d7c:	2380      	movs	r3, #128	@ 0x80
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e19e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <UART_SetConfig+0x344>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d130      	bne.n	8006df0 <UART_SetConfig+0x2d4>
 8006d8e:	4b31      	ldr	r3, [pc, #196]	@ (8006e54 <UART_SetConfig+0x338>)
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d826      	bhi.n	8006de8 <UART_SetConfig+0x2cc>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <UART_SetConfig+0x284>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd9 	.word	0x08006dd9
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	2300      	movs	r3, #0
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e180      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e17c      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e178      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e174      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e170      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006de0:	2340      	movs	r3, #64	@ 0x40
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e16c      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e168      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <UART_SetConfig+0x348>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d142      	bne.n	8006e80 <UART_SetConfig+0x364>
 8006dfa:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <UART_SetConfig+0x338>)
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d838      	bhi.n	8006e78 <UART_SetConfig+0x35c>
 8006e06:	a201      	add	r2, pc, #4	@ (adr r2, 8006e0c <UART_SetConfig+0x2f0>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e25 	.word	0x08006e25
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e35 	.word	0x08006e35
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e69 	.word	0x08006e69
 8006e20:	08006e71 	.word	0x08006e71
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e14a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e146      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e142      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e13e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e44:	cfff69f3 	.word	0xcfff69f3
 8006e48:	58000c00 	.word	0x58000c00
 8006e4c:	11fff4ff 	.word	0x11fff4ff
 8006e50:	40011000 	.word	0x40011000
 8006e54:	58024400 	.word	0x58024400
 8006e58:	40004400 	.word	0x40004400
 8006e5c:	40004800 	.word	0x40004800
 8006e60:	40004c00 	.word	0x40004c00
 8006e64:	40005000 	.word	0x40005000
 8006e68:	2320      	movs	r3, #32
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6e:	e128      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e70:	2340      	movs	r3, #64	@ 0x40
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e76:	e124      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e78:	2380      	movs	r3, #128	@ 0x80
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e120      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4acb      	ldr	r2, [pc, #812]	@ (80071b4 <UART_SetConfig+0x698>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d176      	bne.n	8006f78 <UART_SetConfig+0x45c>
 8006e8a:	4bcb      	ldr	r3, [pc, #812]	@ (80071b8 <UART_SetConfig+0x69c>)
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e92:	2b28      	cmp	r3, #40	@ 0x28
 8006e94:	d86c      	bhi.n	8006f70 <UART_SetConfig+0x454>
 8006e96:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <UART_SetConfig+0x380>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006f41 	.word	0x08006f41
 8006ea0:	08006f71 	.word	0x08006f71
 8006ea4:	08006f71 	.word	0x08006f71
 8006ea8:	08006f71 	.word	0x08006f71
 8006eac:	08006f71 	.word	0x08006f71
 8006eb0:	08006f71 	.word	0x08006f71
 8006eb4:	08006f71 	.word	0x08006f71
 8006eb8:	08006f71 	.word	0x08006f71
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f71 	.word	0x08006f71
 8006ec4:	08006f71 	.word	0x08006f71
 8006ec8:	08006f71 	.word	0x08006f71
 8006ecc:	08006f71 	.word	0x08006f71
 8006ed0:	08006f71 	.word	0x08006f71
 8006ed4:	08006f71 	.word	0x08006f71
 8006ed8:	08006f71 	.word	0x08006f71
 8006edc:	08006f51 	.word	0x08006f51
 8006ee0:	08006f71 	.word	0x08006f71
 8006ee4:	08006f71 	.word	0x08006f71
 8006ee8:	08006f71 	.word	0x08006f71
 8006eec:	08006f71 	.word	0x08006f71
 8006ef0:	08006f71 	.word	0x08006f71
 8006ef4:	08006f71 	.word	0x08006f71
 8006ef8:	08006f71 	.word	0x08006f71
 8006efc:	08006f59 	.word	0x08006f59
 8006f00:	08006f71 	.word	0x08006f71
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	08006f71 	.word	0x08006f71
 8006f0c:	08006f71 	.word	0x08006f71
 8006f10:	08006f71 	.word	0x08006f71
 8006f14:	08006f71 	.word	0x08006f71
 8006f18:	08006f71 	.word	0x08006f71
 8006f1c:	08006f61 	.word	0x08006f61
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08006f71 	.word	0x08006f71
 8006f28:	08006f71 	.word	0x08006f71
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f71 	.word	0x08006f71
 8006f34:	08006f71 	.word	0x08006f71
 8006f38:	08006f71 	.word	0x08006f71
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e0bc      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e0b8      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f50:	2308      	movs	r3, #8
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e0b4      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e0b0      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f60:	2320      	movs	r3, #32
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e0ac      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f68:	2340      	movs	r3, #64	@ 0x40
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e0a8      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f70:	2380      	movs	r3, #128	@ 0x80
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e0a4      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a8f      	ldr	r2, [pc, #572]	@ (80071bc <UART_SetConfig+0x6a0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d130      	bne.n	8006fe4 <UART_SetConfig+0x4c8>
 8006f82:	4b8d      	ldr	r3, [pc, #564]	@ (80071b8 <UART_SetConfig+0x69c>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d826      	bhi.n	8006fdc <UART_SetConfig+0x4c0>
 8006f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <UART_SetConfig+0x478>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e086      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e082      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e07e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e07a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fcc:	2320      	movs	r3, #32
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e076      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fd4:	2340      	movs	r3, #64	@ 0x40
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e072      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fdc:	2380      	movs	r3, #128	@ 0x80
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e06e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a75      	ldr	r2, [pc, #468]	@ (80071c0 <UART_SetConfig+0x6a4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d130      	bne.n	8007050 <UART_SetConfig+0x534>
 8006fee:	4b72      	ldr	r3, [pc, #456]	@ (80071b8 <UART_SetConfig+0x69c>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b05      	cmp	r3, #5
 8006ff8:	d826      	bhi.n	8007048 <UART_SetConfig+0x52c>
 8006ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <UART_SetConfig+0x4e4>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007019 	.word	0x08007019
 8007004:	08007021 	.word	0x08007021
 8007008:	08007029 	.word	0x08007029
 800700c:	08007031 	.word	0x08007031
 8007010:	08007039 	.word	0x08007039
 8007014:	08007041 	.word	0x08007041
 8007018:	2300      	movs	r3, #0
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e050      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007020:	2304      	movs	r3, #4
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e04c      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007028:	2308      	movs	r3, #8
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e048      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e044      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007038:	2320      	movs	r3, #32
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e040      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007040:	2340      	movs	r3, #64	@ 0x40
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e03c      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007048:	2380      	movs	r3, #128	@ 0x80
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e038      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a5b      	ldr	r2, [pc, #364]	@ (80071c4 <UART_SetConfig+0x6a8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d130      	bne.n	80070bc <UART_SetConfig+0x5a0>
 800705a:	4b57      	ldr	r3, [pc, #348]	@ (80071b8 <UART_SetConfig+0x69c>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	2b05      	cmp	r3, #5
 8007064:	d826      	bhi.n	80070b4 <UART_SetConfig+0x598>
 8007066:	a201      	add	r2, pc, #4	@ (adr r2, 800706c <UART_SetConfig+0x550>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007085 	.word	0x08007085
 8007070:	0800708d 	.word	0x0800708d
 8007074:	08007095 	.word	0x08007095
 8007078:	0800709d 	.word	0x0800709d
 800707c:	080070a5 	.word	0x080070a5
 8007080:	080070ad 	.word	0x080070ad
 8007084:	2302      	movs	r3, #2
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e01a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 800708c:	2304      	movs	r3, #4
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e016      	b.n	80070c2 <UART_SetConfig+0x5a6>
 8007094:	2308      	movs	r3, #8
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e012      	b.n	80070c2 <UART_SetConfig+0x5a6>
 800709c:	2310      	movs	r3, #16
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e00e      	b.n	80070c2 <UART_SetConfig+0x5a6>
 80070a4:	2320      	movs	r3, #32
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e00a      	b.n	80070c2 <UART_SetConfig+0x5a6>
 80070ac:	2340      	movs	r3, #64	@ 0x40
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e006      	b.n	80070c2 <UART_SetConfig+0x5a6>
 80070b4:	2380      	movs	r3, #128	@ 0x80
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e002      	b.n	80070c2 <UART_SetConfig+0x5a6>
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a3f      	ldr	r2, [pc, #252]	@ (80071c4 <UART_SetConfig+0x6a8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	f040 80f8 	bne.w	80072be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	dc46      	bgt.n	8007164 <UART_SetConfig+0x648>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	f2c0 8082 	blt.w	80071e0 <UART_SetConfig+0x6c4>
 80070dc:	3b02      	subs	r3, #2
 80070de:	2b1e      	cmp	r3, #30
 80070e0:	d87e      	bhi.n	80071e0 <UART_SetConfig+0x6c4>
 80070e2:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <UART_SetConfig+0x5cc>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	0800716b 	.word	0x0800716b
 80070ec:	080071e1 	.word	0x080071e1
 80070f0:	08007173 	.word	0x08007173
 80070f4:	080071e1 	.word	0x080071e1
 80070f8:	080071e1 	.word	0x080071e1
 80070fc:	080071e1 	.word	0x080071e1
 8007100:	08007183 	.word	0x08007183
 8007104:	080071e1 	.word	0x080071e1
 8007108:	080071e1 	.word	0x080071e1
 800710c:	080071e1 	.word	0x080071e1
 8007110:	080071e1 	.word	0x080071e1
 8007114:	080071e1 	.word	0x080071e1
 8007118:	080071e1 	.word	0x080071e1
 800711c:	080071e1 	.word	0x080071e1
 8007120:	08007193 	.word	0x08007193
 8007124:	080071e1 	.word	0x080071e1
 8007128:	080071e1 	.word	0x080071e1
 800712c:	080071e1 	.word	0x080071e1
 8007130:	080071e1 	.word	0x080071e1
 8007134:	080071e1 	.word	0x080071e1
 8007138:	080071e1 	.word	0x080071e1
 800713c:	080071e1 	.word	0x080071e1
 8007140:	080071e1 	.word	0x080071e1
 8007144:	080071e1 	.word	0x080071e1
 8007148:	080071e1 	.word	0x080071e1
 800714c:	080071e1 	.word	0x080071e1
 8007150:	080071e1 	.word	0x080071e1
 8007154:	080071e1 	.word	0x080071e1
 8007158:	080071e1 	.word	0x080071e1
 800715c:	080071e1 	.word	0x080071e1
 8007160:	080071d3 	.word	0x080071d3
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	d037      	beq.n	80071d8 <UART_SetConfig+0x6bc>
 8007168:	e03a      	b.n	80071e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800716a:	f7fe fd87 	bl	8005c7c <HAL_RCCEx_GetD3PCLK1Freq>
 800716e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007170:	e03c      	b.n	80071ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fd96 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007180:	e034      	b.n	80071ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007182:	f107 0318 	add.w	r3, r7, #24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fee2 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007190:	e02c      	b.n	80071ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007192:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <UART_SetConfig+0x69c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800719e:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <UART_SetConfig+0x69c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	08db      	lsrs	r3, r3, #3
 80071a4:	f003 0303 	and.w	r3, r3, #3
 80071a8:	4a07      	ldr	r2, [pc, #28]	@ (80071c8 <UART_SetConfig+0x6ac>)
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071b0:	e01c      	b.n	80071ec <UART_SetConfig+0x6d0>
 80071b2:	bf00      	nop
 80071b4:	40011400 	.word	0x40011400
 80071b8:	58024400 	.word	0x58024400
 80071bc:	40007800 	.word	0x40007800
 80071c0:	40007c00 	.word	0x40007c00
 80071c4:	58000c00 	.word	0x58000c00
 80071c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80071cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007444 <UART_SetConfig+0x928>)
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d0:	e00c      	b.n	80071ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071d2:	4b9d      	ldr	r3, [pc, #628]	@ (8007448 <UART_SetConfig+0x92c>)
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d6:	e009      	b.n	80071ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071de:	e005      	b.n	80071ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 81de 	beq.w	80075b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	4a94      	ldr	r2, [pc, #592]	@ (800744c <UART_SetConfig+0x930>)
 80071fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071fe:	461a      	mov	r2, r3
 8007200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007202:	fbb3 f3f2 	udiv	r3, r3, r2
 8007206:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	4413      	add	r3, r2
 8007212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007214:	429a      	cmp	r2, r3
 8007216:	d305      	bcc.n	8007224 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800721e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007220:	429a      	cmp	r2, r3
 8007222:	d903      	bls.n	800722c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800722a:	e1c1      	b.n	80075b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800722c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722e:	2200      	movs	r2, #0
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	60fa      	str	r2, [r7, #12]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	4a84      	ldr	r2, [pc, #528]	@ (800744c <UART_SetConfig+0x930>)
 800723a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723e:	b29b      	uxth	r3, r3
 8007240:	2200      	movs	r2, #0
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800724e:	f7f9 f843 	bl	80002d8 <__aeabi_uldivmod>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	020b      	lsls	r3, r1, #8
 8007264:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007268:	0202      	lsls	r2, r0, #8
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	6849      	ldr	r1, [r1, #4]
 800726e:	0849      	lsrs	r1, r1, #1
 8007270:	2000      	movs	r0, #0
 8007272:	460c      	mov	r4, r1
 8007274:	4605      	mov	r5, r0
 8007276:	eb12 0804 	adds.w	r8, r2, r4
 800727a:	eb43 0905 	adc.w	r9, r3, r5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	469a      	mov	sl, r3
 8007286:	4693      	mov	fp, r2
 8007288:	4652      	mov	r2, sl
 800728a:	465b      	mov	r3, fp
 800728c:	4640      	mov	r0, r8
 800728e:	4649      	mov	r1, r9
 8007290:	f7f9 f822 	bl	80002d8 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4613      	mov	r3, r2
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a2:	d308      	bcc.n	80072b6 <UART_SetConfig+0x79a>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072aa:	d204      	bcs.n	80072b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072b2:	60da      	str	r2, [r3, #12]
 80072b4:	e17c      	b.n	80075b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072bc:	e178      	b.n	80075b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c6:	f040 80c5 	bne.w	8007454 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80072ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	dc48      	bgt.n	8007364 <UART_SetConfig+0x848>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db7b      	blt.n	80073ce <UART_SetConfig+0x8b2>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d879      	bhi.n	80073ce <UART_SetConfig+0x8b2>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x7c4>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	08007373 	.word	0x08007373
 80072e8:	080073cf 	.word	0x080073cf
 80072ec:	080073cf 	.word	0x080073cf
 80072f0:	0800737b 	.word	0x0800737b
 80072f4:	080073cf 	.word	0x080073cf
 80072f8:	080073cf 	.word	0x080073cf
 80072fc:	080073cf 	.word	0x080073cf
 8007300:	0800738b 	.word	0x0800738b
 8007304:	080073cf 	.word	0x080073cf
 8007308:	080073cf 	.word	0x080073cf
 800730c:	080073cf 	.word	0x080073cf
 8007310:	080073cf 	.word	0x080073cf
 8007314:	080073cf 	.word	0x080073cf
 8007318:	080073cf 	.word	0x080073cf
 800731c:	080073cf 	.word	0x080073cf
 8007320:	0800739b 	.word	0x0800739b
 8007324:	080073cf 	.word	0x080073cf
 8007328:	080073cf 	.word	0x080073cf
 800732c:	080073cf 	.word	0x080073cf
 8007330:	080073cf 	.word	0x080073cf
 8007334:	080073cf 	.word	0x080073cf
 8007338:	080073cf 	.word	0x080073cf
 800733c:	080073cf 	.word	0x080073cf
 8007340:	080073cf 	.word	0x080073cf
 8007344:	080073cf 	.word	0x080073cf
 8007348:	080073cf 	.word	0x080073cf
 800734c:	080073cf 	.word	0x080073cf
 8007350:	080073cf 	.word	0x080073cf
 8007354:	080073cf 	.word	0x080073cf
 8007358:	080073cf 	.word	0x080073cf
 800735c:	080073cf 	.word	0x080073cf
 8007360:	080073c1 	.word	0x080073c1
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d02e      	beq.n	80073c6 <UART_SetConfig+0x8aa>
 8007368:	e031      	b.n	80073ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736a:	f7fc fcd1 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 800736e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007370:	e033      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007372:	f7fc fce3 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8007376:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007378:	e02f      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fc92 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e027      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738a:	f107 0318 	add.w	r3, r7, #24
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fdde 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007398:	e01f      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739a:	4b2d      	ldr	r3, [pc, #180]	@ (8007450 <UART_SetConfig+0x934>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007450 <UART_SetConfig+0x934>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	08db      	lsrs	r3, r3, #3
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	4a24      	ldr	r2, [pc, #144]	@ (8007444 <UART_SetConfig+0x928>)
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b8:	e00f      	b.n	80073da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073ba:	4b22      	ldr	r3, [pc, #136]	@ (8007444 <UART_SetConfig+0x928>)
 80073bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073be:	e00c      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073c0:	4b21      	ldr	r3, [pc, #132]	@ (8007448 <UART_SetConfig+0x92c>)
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c4:	e009      	b.n	80073da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073cc:	e005      	b.n	80073da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80e7 	beq.w	80075b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	4a19      	ldr	r2, [pc, #100]	@ (800744c <UART_SetConfig+0x930>)
 80073e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f4:	005a      	lsls	r2, r3, #1
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	441a      	add	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d916      	bls.n	800743c <UART_SetConfig+0x920>
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007414:	d212      	bcs.n	800743c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	b29b      	uxth	r3, r3
 800741a:	f023 030f 	bic.w	r3, r3, #15
 800741e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	b29a      	uxth	r2, r3
 800742c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800742e:	4313      	orrs	r3, r2
 8007430:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	e0b9      	b.n	80075b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007442:	e0b5      	b.n	80075b0 <UART_SetConfig+0xa94>
 8007444:	03d09000 	.word	0x03d09000
 8007448:	003d0900 	.word	0x003d0900
 800744c:	080082c4 	.word	0x080082c4
 8007450:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007454:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007458:	2b20      	cmp	r3, #32
 800745a:	dc49      	bgt.n	80074f0 <UART_SetConfig+0x9d4>
 800745c:	2b00      	cmp	r3, #0
 800745e:	db7c      	blt.n	800755a <UART_SetConfig+0xa3e>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d87a      	bhi.n	800755a <UART_SetConfig+0xa3e>
 8007464:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <UART_SetConfig+0x950>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	080074f7 	.word	0x080074f7
 8007470:	080074ff 	.word	0x080074ff
 8007474:	0800755b 	.word	0x0800755b
 8007478:	0800755b 	.word	0x0800755b
 800747c:	08007507 	.word	0x08007507
 8007480:	0800755b 	.word	0x0800755b
 8007484:	0800755b 	.word	0x0800755b
 8007488:	0800755b 	.word	0x0800755b
 800748c:	08007517 	.word	0x08007517
 8007490:	0800755b 	.word	0x0800755b
 8007494:	0800755b 	.word	0x0800755b
 8007498:	0800755b 	.word	0x0800755b
 800749c:	0800755b 	.word	0x0800755b
 80074a0:	0800755b 	.word	0x0800755b
 80074a4:	0800755b 	.word	0x0800755b
 80074a8:	0800755b 	.word	0x0800755b
 80074ac:	08007527 	.word	0x08007527
 80074b0:	0800755b 	.word	0x0800755b
 80074b4:	0800755b 	.word	0x0800755b
 80074b8:	0800755b 	.word	0x0800755b
 80074bc:	0800755b 	.word	0x0800755b
 80074c0:	0800755b 	.word	0x0800755b
 80074c4:	0800755b 	.word	0x0800755b
 80074c8:	0800755b 	.word	0x0800755b
 80074cc:	0800755b 	.word	0x0800755b
 80074d0:	0800755b 	.word	0x0800755b
 80074d4:	0800755b 	.word	0x0800755b
 80074d8:	0800755b 	.word	0x0800755b
 80074dc:	0800755b 	.word	0x0800755b
 80074e0:	0800755b 	.word	0x0800755b
 80074e4:	0800755b 	.word	0x0800755b
 80074e8:	0800755b 	.word	0x0800755b
 80074ec:	0800754d 	.word	0x0800754d
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	d02e      	beq.n	8007552 <UART_SetConfig+0xa36>
 80074f4:	e031      	b.n	800755a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f6:	f7fc fc0b 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80074fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074fc:	e033      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074fe:	f7fc fc1d 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8007502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007504:	e02f      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fbcc 	bl	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	e027      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007516:	f107 0318 	add.w	r3, r7, #24
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fd18 	bl	8005f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007524:	e01f      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007526:	4b2d      	ldr	r3, [pc, #180]	@ (80075dc <UART_SetConfig+0xac0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007532:	4b2a      	ldr	r3, [pc, #168]	@ (80075dc <UART_SetConfig+0xac0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	08db      	lsrs	r3, r3, #3
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	4a28      	ldr	r2, [pc, #160]	@ (80075e0 <UART_SetConfig+0xac4>)
 800753e:	fa22 f303 	lsr.w	r3, r2, r3
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007544:	e00f      	b.n	8007566 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007546:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <UART_SetConfig+0xac4>)
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754a:	e00c      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800754c:	4b25      	ldr	r3, [pc, #148]	@ (80075e4 <UART_SetConfig+0xac8>)
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007550:	e009      	b.n	8007566 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007558:	e005      	b.n	8007566 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007564:	bf00      	nop
    }

    if (pclk != 0U)
 8007566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d021      	beq.n	80075b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	4a1d      	ldr	r2, [pc, #116]	@ (80075e8 <UART_SetConfig+0xacc>)
 8007572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007576:	461a      	mov	r2, r3
 8007578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757a:	fbb3 f2f2 	udiv	r2, r3, r2
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	441a      	add	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	fbb2 f3f3 	udiv	r3, r2, r3
 800758e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	2b0f      	cmp	r3, #15
 8007594:	d909      	bls.n	80075aa <UART_SetConfig+0xa8e>
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759c:	d205      	bcs.n	80075aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60da      	str	r2, [r3, #12]
 80075a8:	e002      	b.n	80075b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2200      	movs	r2, #0
 80075c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3748      	adds	r7, #72	@ 0x48
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075da:	bf00      	nop
 80075dc:	58024400 	.word	0x58024400
 80075e0:	03d09000 	.word	0x03d09000
 80075e4:	003d0900 	.word	0x003d0900
 80075e8:	080082c4 	.word	0x080082c4

080075ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ea:	d10a      	bne.n	8007702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]
  }
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b098      	sub	sp, #96	@ 0x60
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007740:	f7f9 ff06 	bl	8001550 <HAL_GetTick>
 8007744:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b08      	cmp	r3, #8
 8007752:	d12f      	bne.n	80077b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007754:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800775c:	2200      	movs	r2, #0
 800775e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f88e 	bl	8007884 <UART_WaitOnFlagUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d022      	beq.n	80077b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800777c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007782:	653b      	str	r3, [r7, #80]	@ 0x50
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
 800778e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e6      	bne.n	800776e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e063      	b.n	800787c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d149      	bne.n	8007856 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ca:	2200      	movs	r2, #0
 80077cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f857 	bl	8007884 <UART_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03c      	beq.n	8007856 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e6      	bne.n	80077dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	60fb      	str	r3, [r7, #12]
   return(result);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800782e:	61fa      	str	r2, [r7, #28]
 8007830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	69b9      	ldr	r1, [r7, #24]
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	617b      	str	r3, [r7, #20]
   return(result);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e5      	bne.n	800780e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e012      	b.n	800787c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3758      	adds	r7, #88	@ 0x58
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007894:	e04f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d04b      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789e:	f7f9 fe57 	bl	8001550 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d302      	bcc.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e04e      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d037      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b80      	cmp	r3, #128	@ 0x80
 80078ca:	d034      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b40      	cmp	r3, #64	@ 0x40
 80078d0:	d031      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d110      	bne.n	8007902 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f839 	bl	8007960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2208      	movs	r2, #8
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e029      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007910:	d111      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800791a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f81f 	bl	8007960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d0a0      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b095      	sub	sp, #84	@ 0x54
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800797c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007986:	643b      	str	r3, [r7, #64]	@ 0x40
 8007988:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800798c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e6      	bne.n	8007968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007a28 <UART_EndRxTransfer+0xc8>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d118      	bne.n	8007a08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6979      	ldr	r1, [r7, #20]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	613b      	str	r3, [r7, #16]
   return(result);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a1c:	bf00      	nop
 8007a1e:	3754      	adds	r7, #84	@ 0x54
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	effffffe 	.word	0xeffffffe

08007a2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e027      	b.n	8007a92 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2224      	movs	r2, #36	@ 0x24
 8007a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0201 	bic.w	r2, r2, #1
 8007a68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e02d      	b.n	8007b12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2224      	movs	r2, #36	@ 0x24
 8007ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f850 	bl	8007b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e02d      	b.n	8007b8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2224      	movs	r2, #36	@ 0x24
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f812 	bl	8007b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d108      	bne.n	8007bba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bb8:	e031      	b.n	8007c1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bba:	2310      	movs	r3, #16
 8007bbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bbe:	2310      	movs	r3, #16
 8007bc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	0e5b      	lsrs	r3, r3, #25
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	0f5b      	lsrs	r3, r3, #29
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	7b3a      	ldrb	r2, [r7, #12]
 8007be6:	4911      	ldr	r1, [pc, #68]	@ (8007c2c <UARTEx_SetNbDataToProcess+0x94>)
 8007be8:	5c8a      	ldrb	r2, [r1, r2]
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bee:	7b3a      	ldrb	r2, [r7, #12]
 8007bf0:	490f      	ldr	r1, [pc, #60]	@ (8007c30 <UARTEx_SetNbDataToProcess+0x98>)
 8007bf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	7b7a      	ldrb	r2, [r7, #13]
 8007c04:	4909      	ldr	r1, [pc, #36]	@ (8007c2c <UARTEx_SetNbDataToProcess+0x94>)
 8007c06:	5c8a      	ldrb	r2, [r1, r2]
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c0c:	7b7a      	ldrb	r2, [r7, #13]
 8007c0e:	4908      	ldr	r1, [pc, #32]	@ (8007c30 <UARTEx_SetNbDataToProcess+0x98>)
 8007c10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	080082dc 	.word	0x080082dc
 8007c30:	080082e4 	.word	0x080082e4

08007c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c34:	b084      	sub	sp, #16
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	f107 001c 	add.w	r0, r7, #28
 8007c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d121      	bne.n	8007c92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d10 <USB_CoreInit+0xdc>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d105      	bne.n	8007c86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 faaa 	bl	80081e0 <USB_CoreReset>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	e01b      	b.n	8007cca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa9e 	bl	80081e0 <USB_CoreReset>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cbc:	e005      	b.n	8007cca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cca:	7fbb      	ldrb	r3, [r7, #30]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d116      	bne.n	8007cfe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <USB_CoreInit+0xe0>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f043 0206 	orr.w	r2, r3, #6
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f043 0220 	orr.w	r2, r3, #32
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d0a:	b004      	add	sp, #16
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	ffbdffbf 	.word	0xffbdffbf
 8007d14:	03ee0000 	.word	0x03ee0000

08007d18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 0201 	bic.w	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d115      	bne.n	8007d88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d68:	200a      	movs	r0, #10
 8007d6a:	f7f9 fbfd 	bl	8001568 <HAL_Delay>
      ms += 10U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	330a      	adds	r3, #10
 8007d72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa25 	bl	80081c4 <USB_GetMode>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d01e      	beq.n	8007dbe <USB_SetCurrentMode+0x84>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d84:	d9f0      	bls.n	8007d68 <USB_SetCurrentMode+0x2e>
 8007d86:	e01a      	b.n	8007dbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d9a:	200a      	movs	r0, #10
 8007d9c:	f7f9 fbe4 	bl	8001568 <HAL_Delay>
      ms += 10U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	330a      	adds	r3, #10
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa0c 	bl	80081c4 <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x60>
 8007db8:	e001      	b.n	8007dbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e005      	b.n	8007dca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2bc8      	cmp	r3, #200	@ 0xc8
 8007dc2:	d101      	bne.n	8007dc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e009      	b.n	8007e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3340      	adds	r3, #64	@ 0x40
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b0e      	cmp	r3, #14
 8007e0c:	d9f2      	bls.n	8007df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d11c      	bne.n	8007e50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e005      	b.n	8007e5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d10d      	bne.n	8007e8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f968 	bl	8008150 <USB_SetDevSpeed>
 8007e80:	e008      	b.n	8007e94 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f963 	bl	8008150 <USB_SetDevSpeed>
 8007e8a:	e003      	b.n	8007e94 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e8c:	2103      	movs	r1, #3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f95e 	bl	8008150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e94:	2110      	movs	r1, #16
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8fa 	bl	8008090 <USB_FlushTxFifo>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f924 	bl	80080f4 <USB_FlushRxFifo>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	e043      	b.n	8007f68 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ef6:	d118      	bne.n	8007f2a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e013      	b.n	8007f3c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f20:	461a      	mov	r2, r3
 8007f22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	e008      	b.n	8007f3c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f36:	461a      	mov	r2, r3
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	3301      	adds	r3, #1
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d3b5      	bcc.n	8007ee0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	e043      	b.n	8008002 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f90:	d118      	bne.n	8007fc4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e013      	b.n	8007fd6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	e008      	b.n	8007fd6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ffa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	3301      	adds	r3, #1
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008006:	461a      	mov	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4293      	cmp	r3, r2
 800800c:	d3b5      	bcc.n	8007f7a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800801c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008020:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800802e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f043 0210 	orr.w	r2, r3, #16
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699a      	ldr	r2, [r3, #24]
 8008048:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <USB_DevInit+0x2b4>)
 800804a:	4313      	orrs	r3, r2
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008050:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f043 0208 	orr.w	r2, r3, #8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008064:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008068:	2b01      	cmp	r3, #1
 800806a:	d105      	bne.n	8008078 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	4b06      	ldr	r3, [pc, #24]	@ (800808c <USB_DevInit+0x2b8>)
 8008072:	4313      	orrs	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008084:	b004      	add	sp, #16
 8008086:	4770      	bx	lr
 8008088:	803c3800 	.word	0x803c3800
 800808c:	40000004 	.word	0x40000004

08008090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080aa:	d901      	bls.n	80080b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e01b      	b.n	80080e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	daf2      	bge.n	800809e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	019b      	lsls	r3, r3, #6
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d4:	d901      	bls.n	80080da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e006      	b.n	80080e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d0f0      	beq.n	80080c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3301      	adds	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800810c:	d901      	bls.n	8008112 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e018      	b.n	8008144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	daf2      	bge.n	8008100 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2210      	movs	r2, #16
 8008122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008130:	d901      	bls.n	8008136 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e006      	b.n	8008144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d0f0      	beq.n	8008124 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008170:	4313      	orrs	r3, r2
 8008172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081b0:	f043 0302 	orr.w	r3, r3, #2
 80081b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	f003 0301 	and.w	r3, r3, #1
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081f8:	d901      	bls.n	80081fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e01b      	b.n	8008236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	daf2      	bge.n	80081ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f043 0201 	orr.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008222:	d901      	bls.n	8008228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e006      	b.n	8008236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b01      	cmp	r3, #1
 8008232:	d0f0      	beq.n	8008216 <USB_CoreReset+0x36>

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <memset>:
 8008242:	4402      	add	r2, r0
 8008244:	4603      	mov	r3, r0
 8008246:	4293      	cmp	r3, r2
 8008248:	d100      	bne.n	800824c <memset+0xa>
 800824a:	4770      	bx	lr
 800824c:	f803 1b01 	strb.w	r1, [r3], #1
 8008250:	e7f9      	b.n	8008246 <memset+0x4>
	...

08008254 <__libc_init_array>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4d0d      	ldr	r5, [pc, #52]	@ (800828c <__libc_init_array+0x38>)
 8008258:	4c0d      	ldr	r4, [pc, #52]	@ (8008290 <__libc_init_array+0x3c>)
 800825a:	1b64      	subs	r4, r4, r5
 800825c:	10a4      	asrs	r4, r4, #2
 800825e:	2600      	movs	r6, #0
 8008260:	42a6      	cmp	r6, r4
 8008262:	d109      	bne.n	8008278 <__libc_init_array+0x24>
 8008264:	4d0b      	ldr	r5, [pc, #44]	@ (8008294 <__libc_init_array+0x40>)
 8008266:	4c0c      	ldr	r4, [pc, #48]	@ (8008298 <__libc_init_array+0x44>)
 8008268:	f000 f818 	bl	800829c <_init>
 800826c:	1b64      	subs	r4, r4, r5
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	2600      	movs	r6, #0
 8008272:	42a6      	cmp	r6, r4
 8008274:	d105      	bne.n	8008282 <__libc_init_array+0x2e>
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	f855 3b04 	ldr.w	r3, [r5], #4
 800827c:	4798      	blx	r3
 800827e:	3601      	adds	r6, #1
 8008280:	e7ee      	b.n	8008260 <__libc_init_array+0xc>
 8008282:	f855 3b04 	ldr.w	r3, [r5], #4
 8008286:	4798      	blx	r3
 8008288:	3601      	adds	r6, #1
 800828a:	e7f2      	b.n	8008272 <__libc_init_array+0x1e>
 800828c:	080082f4 	.word	0x080082f4
 8008290:	080082f4 	.word	0x080082f4
 8008294:	080082f4 	.word	0x080082f4
 8008298:	080082f8 	.word	0x080082f8

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
