
Exp01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080059e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000010  080059f0  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000110  080059f0  00007110  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014dd9  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000268f  00000000  00000000  0001be17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd8  00000000  00000000  0001e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c60  00000000  00000000  0001f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003711d  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015342  00000000  00000000  000571fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161b81  00000000  00000000  0006c53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ce0c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042ac  00000000  00000000  001ce104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001d23b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005980 	.word	0x08005980

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005980 	.word	0x08005980

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b8b      	ldr	r3, [pc, #556]	@ (800080c <MX_GPIO_Init+0x244>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a89      	ldr	r2, [pc, #548]	@ (800080c <MX_GPIO_Init+0x244>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b87      	ldr	r3, [pc, #540]	@ (800080c <MX_GPIO_Init+0x244>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b83      	ldr	r3, [pc, #524]	@ (800080c <MX_GPIO_Init+0x244>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a82      	ldr	r2, [pc, #520]	@ (800080c <MX_GPIO_Init+0x244>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b7f      	ldr	r3, [pc, #508]	@ (800080c <MX_GPIO_Init+0x244>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b7c      	ldr	r3, [pc, #496]	@ (800080c <MX_GPIO_Init+0x244>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a7a      	ldr	r2, [pc, #488]	@ (800080c <MX_GPIO_Init+0x244>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b78      	ldr	r3, [pc, #480]	@ (800080c <MX_GPIO_Init+0x244>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b74      	ldr	r3, [pc, #464]	@ (800080c <MX_GPIO_Init+0x244>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a73      	ldr	r2, [pc, #460]	@ (800080c <MX_GPIO_Init+0x244>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b70      	ldr	r3, [pc, #448]	@ (800080c <MX_GPIO_Init+0x244>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b6d      	ldr	r3, [pc, #436]	@ (800080c <MX_GPIO_Init+0x244>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a6b      	ldr	r2, [pc, #428]	@ (800080c <MX_GPIO_Init+0x244>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b69      	ldr	r3, [pc, #420]	@ (800080c <MX_GPIO_Init+0x244>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000674:	4b65      	ldr	r3, [pc, #404]	@ (800080c <MX_GPIO_Init+0x244>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a64      	ldr	r2, [pc, #400]	@ (800080c <MX_GPIO_Init+0x244>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b61      	ldr	r3, [pc, #388]	@ (800080c <MX_GPIO_Init+0x244>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b5e      	ldr	r3, [pc, #376]	@ (800080c <MX_GPIO_Init+0x244>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a5c      	ldr	r2, [pc, #368]	@ (800080c <MX_GPIO_Init+0x244>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b5a      	ldr	r3, [pc, #360]	@ (800080c <MX_GPIO_Init+0x244>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80006b6:	4856      	ldr	r0, [pc, #344]	@ (8000810 <MX_GPIO_Init+0x248>)
 80006b8:	f000 ff12 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c2:	4854      	ldr	r0, [pc, #336]	@ (8000814 <MX_GPIO_Init+0x24c>)
 80006c4:	f000 ff0c 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	4852      	ldr	r0, [pc, #328]	@ (8000818 <MX_GPIO_Init+0x250>)
 80006ce:	f000 ff07 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	484d      	ldr	r0, [pc, #308]	@ (800081c <MX_GPIO_Init+0x254>)
 80006e8:	f000 fd4a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006ec:	2332      	movs	r3, #50	@ 0x32
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4845      	ldr	r0, [pc, #276]	@ (800081c <MX_GPIO_Init+0x254>)
 8000708:	f000 fd3a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800070c:	2386      	movs	r3, #134	@ 0x86
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071c:	230b      	movs	r3, #11
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	483e      	ldr	r0, [pc, #248]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000728:	f000 fd2a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800072c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4832      	ldr	r0, [pc, #200]	@ (8000810 <MX_GPIO_Init+0x248>)
 8000746:	f000 fd1b 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075c:	230b      	movs	r3, #11
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	482a      	ldr	r0, [pc, #168]	@ (8000810 <MX_GPIO_Init+0x248>)
 8000768:	f000 fd0a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800076c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4823      	ldr	r0, [pc, #140]	@ (8000814 <MX_GPIO_Init+0x24c>)
 8000786:	f000 fcfb 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4821      	ldr	r0, [pc, #132]	@ (8000824 <MX_GPIO_Init+0x25c>)
 80007a0:	f000 fcee 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007a4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007b6:	230a      	movs	r3, #10
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4817      	ldr	r0, [pc, #92]	@ (8000820 <MX_GPIO_Init+0x258>)
 80007c2:	f000 fcdd 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d8:	230b      	movs	r3, #11
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <MX_GPIO_Init+0x25c>)
 80007e4:	f000 fccc 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	@ (8000818 <MX_GPIO_Init+0x250>)
 8000800:	f000 fcbe 	bl	8001180 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3730      	adds	r7, #48	@ 0x30
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58024400 	.word	0x58024400
 8000810:	58020400 	.word	0x58020400
 8000814:	58020c00 	.word	0x58020c00
 8000818:	58021000 	.word	0x58021000
 800081c:	58020800 	.word	0x58020800
 8000820:	58020000 	.word	0x58020000
 8000824:	58021800 	.word	0x58021800

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

//Queste sono variabili che useremo
//Abituiamoci ad inserire commenti
	unsigned int cc=2000;
 800082e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000832:	617b      	str	r3, [r7, #20]
	unsigned int attesa= 1;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
    unsigned int il_clock_impostato,  ripetizioni;
    char led_acceso=1;
 8000838:	2301      	movs	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
    cc = 0xff;
 800083c:	23ff      	movs	r3, #255	@ 0xff
 800083e:	617b      	str	r3, [r7, #20]
	#define interruttore_lampadina  GPIOB->BSRR
	#define accendi_lampadina (1<<0)
	#define spegni_lampadina (1<<(0+16))

//Useremo tra poco per misurare il tempo
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; //Abilitiamo il conta cicli macchina
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <main+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <main+0xd0>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]
	DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM6_Msk; //Stoppiamo TIM6 al breakpoint
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <main+0xd4>)
 800084e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000850:	4a2a      	ldr	r2, [pc, #168]	@ (80008fc <main+0xd4>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	63d3      	str	r3, [r2, #60]	@ 0x3c
	DWT->CYCCNT=0;  //Azzeriamo il contacicli macchina per comodità
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <main+0xd0>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]

	il_clock_impostato = HAL_RCC_GetSysClockFreq ()  ;
 800085e:	f001 fca3 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8000862:	60b8      	str	r0, [r7, #8]
	ripetizioni = il_clock_impostato / 12;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4a26      	ldr	r2, [pc, #152]	@ (8000900 <main+0xd8>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fad8 	bl	8000e24 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f84c 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff fea6 	bl	80005c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087c:	f000 f9f2 	bl	8000c64 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000880:	f000 f992 	bl	8000ba8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  cc &= 1<<3;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	617b      	str	r3, [r7, #20]
  USART3->CR1 |=USART_CR1_TCIE;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <main+0xdc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <main+0xdc>)
 8000892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000896:	6013      	str	r3, [r2, #0]

  TIM6 -> CNT = 0;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <main+0xe0>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM6 -> CR1 |= TIM_CR1_CEN;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <main+0xe0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a19      	ldr	r2, [pc, #100]	@ (8000908 <main+0xe0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */


  //set scaler ( il counter conta CLOCK/SCALER)
  TIM6->PSC = 1000;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <main+0xe0>)
 80008ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28

  //set the end timer
  TIM6->ARR = 60000;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <main+0xe0>)
 80008b4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM6->CR1 = TIM_CR1_CEN;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <main+0xe0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  while( TIM6->SR )
 80008c0:	e015      	b.n	80008ee <main+0xc6>
	  {
		  TIM6->SR = 0;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <main+0xe0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
		  if (GPIOB->IDR&1<<0){
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <main+0xe4>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <main+0xba>
			  GPIOB ->BSRR |= GPIO_BSRR_BR0;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <main+0xe4>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <main+0xe4>)
 80008da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	e005      	b.n	80008ee <main+0xc6>
		  }
		  else{
			  GPIOB ->BSRR |= GPIO_BSRR_BS0;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <main+0xe4>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a09      	ldr	r2, [pc, #36]	@ (800090c <main+0xe4>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
	  while( TIM6->SR )
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <main+0xe0>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e5      	bne.n	80008c2 <main+0x9a>
 80008f6:	e7fa      	b.n	80008ee <main+0xc6>
 80008f8:	e0001000 	.word	0xe0001000
 80008fc:	5c001000 	.word	0x5c001000
 8000900:	aaaaaaab 	.word	0xaaaaaaab
 8000904:	40004800 	.word	0x40004800
 8000908:	40001000 	.word	0x40001000
 800090c:	58020400 	.word	0x58020400

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	@ 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	224c      	movs	r2, #76	@ 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 f802 	bl	8005928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fffc 	bl	8005928 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000930:	2002      	movs	r0, #2
 8000932:	f000 fdef 	bl	8001514 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <SystemClock_Config+0xcc>)
 800093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093e:	4a27      	ldr	r2, [pc, #156]	@ (80009dc <SystemClock_Config+0xcc>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <SystemClock_Config+0xcc>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <SystemClock_Config+0xd0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000958:	4a21      	ldr	r2, [pc, #132]	@ (80009e0 <SystemClock_Config+0xd0>)
 800095a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <SystemClock_Config+0xd0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <SystemClock_Config+0xd0>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000980:	2301      	movs	r3, #1
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2340      	movs	r3, #64	@ 0x40
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fdf9 	bl	8001588 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800099c:	f000 f822 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	233f      	movs	r3, #63	@ 0x3f
 80009a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fa39 	bl	8001e3c <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d0:	f000 f808 	bl	80009e4 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3770      	adds	r7, #112	@ 0x70
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58000400 	.word	0x58000400
 80009e0:	58024800 	.word	0x58024800

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_MspInit+0x30>)
 80009f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009fc:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x30>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x30>)
 8000a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	58024400 	.word	0x58024400

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 fa45 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <TIM6_DAC_IRQHandler+0x10>)
 8000a8a:	f003 fbe6 	bl	800425a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2400002c 	.word	0x2400002c

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <SystemInit+0xe4>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa2:	4a36      	ldr	r2, [pc, #216]	@ (8000b7c <SystemInit+0xe4>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aac:	4b34      	ldr	r3, [pc, #208]	@ (8000b80 <SystemInit+0xe8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d807      	bhi.n	8000ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab8:	4b31      	ldr	r3, [pc, #196]	@ (8000b80 <SystemInit+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 030f 	bic.w	r3, r3, #15
 8000ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8000b80 <SystemInit+0xe8>)
 8000ac2:	f043 0307 	orr.w	r3, r3, #7
 8000ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <SystemInit+0xec>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b84 <SystemInit+0xec>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <SystemInit+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <SystemInit+0xec>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4929      	ldr	r1, [pc, #164]	@ (8000b84 <SystemInit+0xec>)
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <SystemInit+0xf0>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <SystemInit+0xe8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <SystemInit+0xe8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <SystemInit+0xe8>)
 8000afc:	f043 0307 	orr.w	r3, r3, #7
 8000b00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b02:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <SystemInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <SystemInit+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <SystemInit+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <SystemInit+0xec>)
 8000b16:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <SystemInit+0xf4>)
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <SystemInit+0xec>)
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b90 <SystemInit+0xf8>)
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <SystemInit+0xec>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <SystemInit+0xfc>)
 8000b24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <SystemInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <SystemInit+0xec>)
 8000b2e:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <SystemInit+0xfc>)
 8000b30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <SystemInit+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <SystemInit+0xec>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	@ (8000b94 <SystemInit+0xfc>)
 8000b3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <SystemInit+0xec>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <SystemInit+0xec>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <SystemInit+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <SystemInit+0x100>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <SystemInit+0x104>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b62:	d202      	bcs.n	8000b6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <SystemInit+0x108>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <SystemInit+0x10c>)
 8000b6c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	52002000 	.word	0x52002000
 8000b84:	58024400 	.word	0x58024400
 8000b88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b8c:	02020200 	.word	0x02020200
 8000b90:	01ff0000 	.word	0x01ff0000
 8000b94:	01010280 	.word	0x01010280
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_TIM6_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bda:	f003 fae7 	bl	80041ac <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000be4:	f7ff fefe 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_TIM6_Init+0x64>)
 8000bf6:	f003 fd0f 	bl	8004618 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f7ff fef0 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2400002c 	.word	0x2400002c
 8000c10:	40001000 	.word	0x40001000

08000c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_TIM_Base_MspInit+0x48>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d116      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_TIM_Base_MspInit+0x4c>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c60 <HAL_TIM_Base_MspInit+0x4c>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_TIM_Base_MspInit+0x4c>)
 8000c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2036      	movs	r0, #54	@ 0x36
 8000c4a:	f000 fa64 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4e:	2036      	movs	r0, #54	@ 0x36
 8000c50:	f000 fa7b 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40001000 	.word	0x40001000
 8000c60:	58024400 	.word	0x58024400

08000c64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <MX_USART3_UART_Init+0x94>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cac:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000cae:	f003 fd5f 	bl	8004770 <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cb8:	f7ff fe94 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000cc0:	f004 fd67 	bl	8005792 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f7ff fe8b 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f004 fd9c 	bl	800580e <HAL_UARTEx_SetRxFifoThreshold>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f7ff fe82 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_USART3_UART_Init+0x90>)
 8000ce2:	f004 fd1d 	bl	8005720 <HAL_UARTEx_DisableFifoMode>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f7ff fe7a 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000078 	.word	0x24000078
 8000cf8:	40004800 	.word	0x40004800

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ba      	sub	sp, #232	@ 0xe8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	22c0      	movs	r2, #192	@ 0xc0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 fe03 	bl	8005928 <memset>
  if(uartHandle->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a27      	ldr	r2, [pc, #156]	@ (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d146      	bne.n	8000dba <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	f04f 0202 	mov.w	r2, #2
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fc06 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d4e:	f7ff fe49 	bl	80009e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <HAL_UART_MspInit+0xd0>)
 8000db6:	f000 f9e3 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	37e8      	adds	r7, #232	@ 0xe8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020c00 	.word	0x58020c00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd4:	f7ff fe60 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f004 fd9b 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fd11 	bl	8000828 <main>
  bx  lr
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e10:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e14:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8000e18:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e1c:	24000110 	.word	0x24000110

08000e20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC3_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f968 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e30:	f001 f9ba 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_Init+0x68>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	4913      	ldr	r1, [pc, #76]	@ (8000e90 <HAL_Init+0x6c>)
 8000e42:	5ccb      	ldrb	r3, [r1, r3]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_Init+0x68>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	4a0e      	ldr	r2, [pc, #56]	@ (8000e90 <HAL_Init+0x6c>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_Init+0x70>)
 8000e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e68:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_Init+0x74>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f814 	bl	8000e9c <HAL_InitTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e002      	b.n	8000e84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7e:	f7ff fdb7 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	08005998 	.word	0x08005998
 8000e94:	24000004 	.word	0x24000004
 8000e98:	24000000 	.word	0x24000000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_InitTick+0x60>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e021      	b.n	8000ef4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_InitTick+0x64>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_InitTick+0x60>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f94d 	bl	8001166 <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee4:	f000 f917 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_InitTick+0x68>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2400000c 	.word	0x2400000c
 8000f00:	24000000 	.word	0x24000000
 8000f04:	24000008 	.word	0x24000008

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2400000c 	.word	0x2400000c
 8000f2c:	2400010c 	.word	0x2400010c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2400010c 	.word	0x2400010c

08000f48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetREVID+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0c1b      	lsrs	r3, r3, #16
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	5c001000 	.word	0x5c001000

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	05fa0000 	.word	0x05fa0000

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff40 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff33 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa4 	bl	80010bc <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800118e:	4b89      	ldr	r3, [pc, #548]	@ (80013b4 <HAL_GPIO_Init+0x234>)
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001192:	e194      	b.n	80014be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8186 	beq.w	80014b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x44>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	69b9      	ldr	r1, [r7, #24]
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80e0 	beq.w	80014b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x238>)
 80012fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012fe:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <HAL_GPIO_Init+0x238>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001308:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <HAL_GPIO_Init+0x238>)
 800130a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a29      	ldr	r2, [pc, #164]	@ (80013bc <HAL_GPIO_Init+0x23c>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <HAL_GPIO_Init+0x240>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d052      	beq.n	80013e8 <HAL_GPIO_Init+0x268>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <HAL_GPIO_Init+0x244>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d031      	beq.n	80013ae <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_GPIO_Init+0x248>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x22a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <HAL_GPIO_Init+0x24c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <HAL_GPIO_Init+0x250>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <HAL_GPIO_Init+0x254>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1a      	ldr	r2, [pc, #104]	@ (80013d8 <HAL_GPIO_Init+0x258>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <HAL_GPIO_Init+0x25c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <HAL_GPIO_Init+0x260>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <HAL_GPIO_Init+0x264>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x20e>
 800138a:	2309      	movs	r3, #9
 800138c:	e02d      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 800138e:	230a      	movs	r3, #10
 8001390:	e02b      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 8001392:	2308      	movs	r3, #8
 8001394:	e029      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 8001396:	2307      	movs	r3, #7
 8001398:	e027      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 800139a:	2306      	movs	r3, #6
 800139c:	e025      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 800139e:	2305      	movs	r3, #5
 80013a0:	e023      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e021      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e01f      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e01d      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e01b      	b.n	80013ea <HAL_GPIO_Init+0x26a>
 80013b2:	bf00      	nop
 80013b4:	58000080 	.word	0x58000080
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58000400 	.word	0x58000400
 80013c0:	58020000 	.word	0x58020000
 80013c4:	58020400 	.word	0x58020400
 80013c8:	58020800 	.word	0x58020800
 80013cc:	58020c00 	.word	0x58020c00
 80013d0:	58021000 	.word	0x58021000
 80013d4:	58021400 	.word	0x58021400
 80013d8:	58021800 	.word	0x58021800
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58022000 	.word	0x58022000
 80013e4:	58022400 	.word	0x58022400
 80013e8:	2300      	movs	r3, #0
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fa:	4938      	ldr	r1, [pc, #224]	@ (80014dc <HAL_GPIO_Init+0x35c>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800142e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800145c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	3301      	adds	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f ae63 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	3724      	adds	r7, #36	@ 0x24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	58000400 	.word	0x58000400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_PWREx_ConfigSupply+0x70>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00a      	beq.n	800153e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_PWREx_ConfigSupply+0x70>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e01f      	b.n	800157a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e01d      	b.n	800157a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_PWREx_ConfigSupply+0x70>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	490f      	ldr	r1, [pc, #60]	@ (8001584 <HAL_PWREx_ConfigSupply+0x70>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800154e:	f7ff fcef 	bl	8000f30 <HAL_GetTick>
 8001552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001554:	e009      	b.n	800156a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001556:	f7ff fceb 	bl	8000f30 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001564:	d901      	bls.n	800156a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_PWREx_ConfigSupply+0x70>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001576:	d1ee      	bne.n	8001556 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58024800 	.word	0x58024800

08001588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	@ 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	f000 bc48 	b.w	8001e2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8088 	beq.w	80016ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	4b99      	ldr	r3, [pc, #612]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b4:	4b96      	ldr	r3, [pc, #600]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d007      	beq.n	80015d0 <HAL_RCC_OscConfig+0x48>
 80015c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c2:	2b18      	cmp	r3, #24
 80015c4:	d111      	bne.n	80015ea <HAL_RCC_OscConfig+0x62>
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d06d      	beq.n	80016b8 <HAL_RCC_OscConfig+0x130>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d169      	bne.n	80016b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f000 bc21 	b.w	8001e2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x7a>
 80015f4:	4b86      	ldr	r3, [pc, #536]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a85      	ldr	r2, [pc, #532]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e02e      	b.n	8001660 <HAL_RCC_OscConfig+0xd8>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x9c>
 800160a:	4b81      	ldr	r3, [pc, #516]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a80      	ldr	r2, [pc, #512]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b7e      	ldr	r3, [pc, #504]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7d      	ldr	r2, [pc, #500]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800161c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xd8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0xc0>
 800162e:	4b78      	ldr	r3, [pc, #480]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a77      	ldr	r2, [pc, #476]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b75      	ldr	r3, [pc, #468]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a74      	ldr	r2, [pc, #464]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xd8>
 8001648:	4b71      	ldr	r3, [pc, #452]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a70      	ldr	r2, [pc, #448]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b6e      	ldr	r3, [pc, #440]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6d      	ldr	r2, [pc, #436]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fc62 	bl	8000f30 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fc5e 	bl	8000f30 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e3d4      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001682:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xe8>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fc4e 	bl	8000f30 <HAL_GetTick>
 8001694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc4a 	bl	8000f30 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e3c0      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016aa:	4b59      	ldr	r3, [pc, #356]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x110>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80ca 	beq.w	800185c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c8:	4b51      	ldr	r3, [pc, #324]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80016d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_RCC_OscConfig+0x166>
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	2b18      	cmp	r3, #24
 80016e2:	d156      	bne.n	8001792 <HAL_RCC_OscConfig+0x20a>
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d151      	bne.n	8001792 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ee:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x17e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e392      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001706:	4b42      	ldr	r3, [pc, #264]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0219 	bic.w	r2, r3, #25
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	493f      	ldr	r1, [pc, #252]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fc0a 	bl	8000f30 <HAL_GetTick>
 800171c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fc06 	bl	8000f30 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e37c      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001732:	4b37      	ldr	r3, [pc, #220]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	f7ff fc03 	bl	8000f48 <HAL_GetREVID>
 8001742:	4603      	mov	r3, r0
 8001744:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001748:	4293      	cmp	r3, r2
 800174a:	d817      	bhi.n	800177c <HAL_RCC_OscConfig+0x1f4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b40      	cmp	r3, #64	@ 0x40
 8001752:	d108      	bne.n	8001766 <HAL_RCC_OscConfig+0x1de>
 8001754:	4b2e      	ldr	r3, [pc, #184]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800175c:	4a2c      	ldr	r2, [pc, #176]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001762:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	e07a      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	031b      	lsls	r3, r3, #12
 8001774:	4926      	ldr	r1, [pc, #152]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177a:	e06f      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	4921      	ldr	r1, [pc, #132]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	e064      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d047      	beq.n	800182a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800179a:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0219 	bic.w	r2, r3, #25
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	491a      	ldr	r1, [pc, #104]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbc0 	bl	8000f30 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fbbc 	bl	8000f30 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e332      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	f7ff fbb9 	bl	8000f48 <HAL_GetREVID>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017dc:	4293      	cmp	r3, r2
 80017de:	d819      	bhi.n	8001814 <HAL_RCC_OscConfig+0x28c>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	2b40      	cmp	r3, #64	@ 0x40
 80017e6:	d108      	bne.n	80017fa <HAL_RCC_OscConfig+0x272>
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f6:	6053      	str	r3, [r2, #4]
 80017f8:	e030      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	031b      	lsls	r3, r3, #12
 8001808:	4901      	ldr	r1, [pc, #4]	@ (8001810 <HAL_RCC_OscConfig+0x288>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
 800180e:	e025      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
 8001810:	58024400 	.word	0x58024400
 8001814:	4b9a      	ldr	r3, [pc, #616]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	4997      	ldr	r1, [pc, #604]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e018      	b.n	800185c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b95      	ldr	r3, [pc, #596]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a94      	ldr	r2, [pc, #592]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fb7b 	bl	8000f30 <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fb77 	bl	8000f30 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e2ed      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001850:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a9 	beq.w	80019bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001872:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001874:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d007      	beq.n	8001890 <HAL_RCC_OscConfig+0x308>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b18      	cmp	r3, #24
 8001884:	d13a      	bne.n	80018fc <HAL_RCC_OscConfig+0x374>
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d135      	bne.n	80018fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001890:	4b7b      	ldr	r3, [pc, #492]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x320>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b80      	cmp	r3, #128	@ 0x80
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e2c1      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018a8:	f7ff fb4e 	bl	8000f48 <HAL_GetREVID>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d817      	bhi.n	80018e6 <HAL_RCC_OscConfig+0x35e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d108      	bne.n	80018d0 <HAL_RCC_OscConfig+0x348>
 80018be:	4b70      	ldr	r3, [pc, #448]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ce:	e075      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	069b      	lsls	r3, r3, #26
 80018de:	4968      	ldr	r1, [pc, #416]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018e4:	e06a      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e6:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	4962      	ldr	r1, [pc, #392]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018fa:	e05f      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d042      	beq.n	800198a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001904:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a5d      	ldr	r2, [pc, #372]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800190a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fb0e 	bl	8000f30 <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001918:	f7ff fb0a 	bl	8000f30 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e280      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800192a:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001936:	f7ff fb07 	bl	8000f48 <HAL_GetREVID>
 800193a:	4603      	mov	r3, r0
 800193c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001940:	4293      	cmp	r3, r2
 8001942:	d817      	bhi.n	8001974 <HAL_RCC_OscConfig+0x3ec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	2b20      	cmp	r3, #32
 800194a:	d108      	bne.n	800195e <HAL_RCC_OscConfig+0x3d6>
 800194c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001954:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800195a:	6053      	str	r3, [r2, #4]
 800195c:	e02e      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	069b      	lsls	r3, r3, #26
 800196c:	4944      	ldr	r1, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e023      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	493f      	ldr	r1, [pc, #252]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3c      	ldr	r2, [pc, #240]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff facb 	bl	8000f30 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800199e:	f7ff fac7 	bl	8000f30 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e23d      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d036      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d019      	beq.n	8001a04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff faa8 	bl	8000f30 <HAL_GetTick>
 80019e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff faa4 	bl	8000f30 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e21a      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x45c>
 8001a02:	e018      	b.n	8001a36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff fa8e 	bl	8000f30 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fa8a 	bl	8000f30 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e200      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d039      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa6b 	bl	8000f30 <HAL_GetTick>
 8001a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5e:	f7ff fa67 	bl	8000f30 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1dd      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x52e>
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a84:	4b9b      	ldr	r3, [pc, #620]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a9a      	ldr	r2, [pc, #616]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa4e 	bl	8000f30 <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff fa4a 	bl	8000f30 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1c0      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aaa:	4b92      	ldr	r3, [pc, #584]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8081 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a8b      	ldr	r2, [pc, #556]	@ (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff fa2e 	bl	8000f30 <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad8:	f7ff fa2a 	bl	8000f30 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1a0      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aea:	4b83      	ldr	r3, [pc, #524]	@ (8001cf8 <HAL_RCC_OscConfig+0x770>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x584>
 8001afe:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b02:	4a7c      	ldr	r2, [pc, #496]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0a:	e02d      	b.n	8001b68 <HAL_RCC_OscConfig+0x5e0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10c      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5a6>
 8001b14:	4b77      	ldr	r3, [pc, #476]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b18:	4a76      	ldr	r2, [pc, #472]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b20:	4b74      	ldr	r3, [pc, #464]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	4a73      	ldr	r2, [pc, #460]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2c:	e01c      	b.n	8001b68 <HAL_RCC_OscConfig+0x5e0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5c8>
 8001b36:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b42:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	4a6b      	ldr	r2, [pc, #428]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0x5e0>
 8001b50:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b54:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5c:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b60:	4a64      	ldr	r2, [pc, #400]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f9de 	bl	8000f30 <HAL_GetTick>
 8001b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7ff f9da 	bl	8000f30 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e14e      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8e:	4b59      	ldr	r3, [pc, #356]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ee      	beq.n	8001b78 <HAL_RCC_OscConfig+0x5f0>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff f9c8 	bl	8000f30 <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f9c4 	bl	8000f30 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e138      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bba:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ee      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 812d 	beq.w	8001e2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bd0:	4b48      	ldr	r3, [pc, #288]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bd8:	2b18      	cmp	r3, #24
 8001bda:	f000 80bd 	beq.w	8001d58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	f040 809e 	bne.w	8001d24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a41      	ldr	r2, [pc, #260]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f99c 	bl	8000f30 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f998 	bl	8000f30 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e10e      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c0e:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c1e:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <HAL_RCC_OscConfig+0x774>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4931      	ldr	r1, [pc, #196]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c42:	3b01      	subs	r3, #1
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	061b      	lsls	r3, r3, #24
 8001c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c64:	4923      	ldr	r1, [pc, #140]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6e:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c82:	00d2      	lsls	r2, r2, #3
 8001c84:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	f023 020c 	bic.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4917      	ldr	r1, [pc, #92]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f023 0202 	bic.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	4912      	ldr	r1, [pc, #72]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	4a10      	ldr	r2, [pc, #64]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f921 	bl	8000f30 <HAL_GetTick>
 8001cee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf0:	e011      	b.n	8001d16 <HAL_RCC_OscConfig+0x78e>
 8001cf2:	bf00      	nop
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58024800 	.word	0x58024800
 8001cfc:	fffffc0c 	.word	0xfffffc0c
 8001d00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f914 	bl	8000f30 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e08a      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x77c>
 8001d22:	e082      	b.n	8001e2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f8fe 	bl	8000f30 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f8fa 	bl	8000f30 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e070      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x7b0>
 8001d56:	e068      	b.n	8001e2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d58:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d5e:	4b35      	ldr	r3, [pc, #212]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d031      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f003 0203 	and.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d12a      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d122      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11a      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	0a5b      	lsrs	r3, r3, #9
 8001d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d111      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0e1b      	lsrs	r3, r3, #24
 8001dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e02b      	b.n	8001e2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d01f      	beq.n	8001e2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df6:	f7ff f89b 	bl	8000f30 <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001dfc:	bf00      	nop
 8001dfe:	f7ff f897 	bl	8000f30 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d0f9      	beq.n	8001dfe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_RCC_OscConfig+0x8b0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e16:	00d2      	lsls	r2, r2, #3
 8001e18:	4906      	ldr	r1, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_RCC_OscConfig+0x8ac>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3730      	adds	r7, #48	@ 0x30
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	58024400 	.word	0x58024400
 8001e38:	ffff0007 	.word	0xffff0007

08001e3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e19c      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b8a      	ldr	r3, [pc, #552]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b87      	ldr	r3, [pc, #540]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 020f 	bic.w	r2, r3, #15
 8001e66:	4985      	ldr	r1, [pc, #532]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b83      	ldr	r3, [pc, #524]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e184      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	4b7b      	ldr	r3, [pc, #492]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e9c:	4b78      	ldr	r3, [pc, #480]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	4975      	ldr	r1, [pc, #468]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d908      	bls.n	8001edc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eca:	4b6d      	ldr	r3, [pc, #436]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	496a      	ldr	r1, [pc, #424]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	4b64      	ldr	r3, [pc, #400]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ef8:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	495e      	ldr	r1, [pc, #376]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d908      	bls.n	8001f38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f26:	4b56      	ldr	r3, [pc, #344]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4953      	ldr	r1, [pc, #332]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d010      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d908      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b4a      	ldr	r3, [pc, #296]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f023 020f 	bic.w	r2, r3, #15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4947      	ldr	r1, [pc, #284]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d055      	beq.n	800201e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4940      	ldr	r1, [pc, #256]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d121      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0f6      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa4:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d115      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0ea      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fbc:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0de      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0d6      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4925      	ldr	r1, [pc, #148]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fee:	f7fe ff9f 	bl	8000f30 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff6:	f7fe ff9b 	bl	8000f30 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0be      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	429a      	cmp	r2, r3
 800201c:	d1eb      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	429a      	cmp	r2, r3
 8002038:	d208      	bcs.n	800204c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	490e      	ldr	r1, [pc, #56]	@ (8002080 <HAL_RCC_ClockConfig+0x244>)
 8002048:	4313      	orrs	r3, r2
 800204a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d214      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	4906      	ldr	r1, [pc, #24]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <HAL_RCC_ClockConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e086      	b.n	800218a <HAL_RCC_ClockConfig+0x34e>
 800207c:	52002000 	.word	0x52002000
 8002080:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4939      	ldr	r1, [pc, #228]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d208      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ce:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	492e      	ldr	r1, [pc, #184]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d208      	bcs.n	800210e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4922      	ldr	r1, [pc, #136]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 800210a:	4313      	orrs	r3, r2
 800210c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002126:	429a      	cmp	r2, r3
 8002128:	d208      	bcs.n	800213c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4917      	ldr	r1, [pc, #92]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 8002138:	4313      	orrs	r3, r2
 800213a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800213c:	f000 f834 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	4912      	ldr	r1, [pc, #72]	@ (8002198 <HAL_RCC_ClockConfig+0x35c>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_RCC_ClockConfig+0x358>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <HAL_RCC_ClockConfig+0x35c>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x360>)
 8002172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x364>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_RCC_ClockConfig+0x368>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fe8c 	bl	8000e9c <HAL_InitTick>
 8002184:	4603      	mov	r3, r0
 8002186:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	58024400 	.word	0x58024400
 8002198:	08005998 	.word	0x08005998
 800219c:	24000004 	.word	0x24000004
 80021a0:	24000000 	.word	0x24000000
 80021a4:	24000008 	.word	0x24000008

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ae:	4bb3      	ldr	r3, [pc, #716]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b6:	2b18      	cmp	r3, #24
 80021b8:	f200 8155 	bhi.w	8002466 <HAL_RCC_GetSysClockFreq+0x2be>
 80021bc:	a201      	add	r2, pc, #4	@ (adr r2, 80021c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c2:	bf00      	nop
 80021c4:	08002229 	.word	0x08002229
 80021c8:	08002467 	.word	0x08002467
 80021cc:	08002467 	.word	0x08002467
 80021d0:	08002467 	.word	0x08002467
 80021d4:	08002467 	.word	0x08002467
 80021d8:	08002467 	.word	0x08002467
 80021dc:	08002467 	.word	0x08002467
 80021e0:	08002467 	.word	0x08002467
 80021e4:	0800224f 	.word	0x0800224f
 80021e8:	08002467 	.word	0x08002467
 80021ec:	08002467 	.word	0x08002467
 80021f0:	08002467 	.word	0x08002467
 80021f4:	08002467 	.word	0x08002467
 80021f8:	08002467 	.word	0x08002467
 80021fc:	08002467 	.word	0x08002467
 8002200:	08002467 	.word	0x08002467
 8002204:	08002255 	.word	0x08002255
 8002208:	08002467 	.word	0x08002467
 800220c:	08002467 	.word	0x08002467
 8002210:	08002467 	.word	0x08002467
 8002214:	08002467 	.word	0x08002467
 8002218:	08002467 	.word	0x08002467
 800221c:	08002467 	.word	0x08002467
 8002220:	08002467 	.word	0x08002467
 8002224:	0800225b 	.word	0x0800225b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002228:	4b94      	ldr	r3, [pc, #592]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002234:	4b91      	ldr	r3, [pc, #580]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	4a90      	ldr	r2, [pc, #576]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002246:	e111      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002248:	4b8d      	ldr	r3, [pc, #564]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800224a:	61bb      	str	r3, [r7, #24]
      break;
 800224c:	e10e      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800224e:	4b8d      	ldr	r3, [pc, #564]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002250:	61bb      	str	r3, [r7, #24]
      break;
 8002252:	e10b      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002254:	4b8c      	ldr	r3, [pc, #560]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002256:	61bb      	str	r3, [r7, #24]
      break;
 8002258:	e108      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800225a:	4b88      	ldr	r3, [pc, #544]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002264:	4b85      	ldr	r3, [pc, #532]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002270:	4b82      	ldr	r3, [pc, #520]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800227a:	4b80      	ldr	r3, [pc, #512]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80e1 	beq.w	8002460 <HAL_RCC_GetSysClockFreq+0x2b8>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	f000 8083 	beq.w	80023ac <HAL_RCC_GetSysClockFreq+0x204>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f200 80a1 	bhi.w	80023f0 <HAL_RCC_GetSysClockFreq+0x248>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x114>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d056      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022ba:	e099      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022c8:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f2:	4b62      	ldr	r3, [pc, #392]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002302:	ed97 6a02 	vldr	s12, [r7, #8]
 8002306:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e4>
 800230a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002322:	e087      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	ee07 3a90 	vmov	s15, r3
 800232a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002490 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002336:	4b51      	ldr	r3, [pc, #324]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002346:	ed97 6a02 	vldr	s12, [r7, #8]
 800234a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e4>
 800234e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800235a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002366:	e065      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002494 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237a:	4b40      	ldr	r3, [pc, #256]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238a:	ed97 6a02 	vldr	s12, [r7, #8]
 800238e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023aa:	e043      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002498 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023be:	4b2f      	ldr	r3, [pc, #188]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ee:	e021      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002494 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002412:	ed97 6a02 	vldr	s12, [r7, #8]
 8002416:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e4>
 800241a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800242a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002432:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	0a5b      	lsrs	r3, r3, #9
 800243a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800243e:	3301      	adds	r3, #1
 8002440:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002458:	ee17 3a90 	vmov	r3, s15
 800245c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800245e:	e005      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002468:	61bb      	str	r3, [r7, #24]
      break;
 800246a:	bf00      	nop
  }

  return sysclockfreq;
 800246c:	69bb      	ldr	r3, [r7, #24]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	@ 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	03d09000 	.word	0x03d09000
 8002484:	003d0900 	.word	0x003d0900
 8002488:	007a1200 	.word	0x007a1200
 800248c:	46000000 	.word	0x46000000
 8002490:	4c742400 	.word	0x4c742400
 8002494:	4a742400 	.word	0x4a742400
 8002498:	4af42400 	.word	0x4af42400

0800249c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024a2:	f7ff fe81 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x50>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490f      	ldr	r1, [pc, #60]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x50>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80024d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024da:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	58024400 	.word	0x58024400
 80024f0:	08005998 	.word	0x08005998
 80024f4:	24000004 	.word	0x24000004
 80024f8:	24000000 	.word	0x24000000

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002500:	f7ff ffcc 	bl	800249c <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4904      	ldr	r1, [pc, #16]	@ (8002524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}
 8002520:	58024400 	.word	0x58024400
 8002524:	08005998 	.word	0x08005998

08002528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800252c:	f7ff ffb6 	bl	800249c <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4904      	ldr	r1, [pc, #16]	@ (8002550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	58024400 	.word	0x58024400
 8002550:	08005998 	.word	0x08005998

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b0ca      	sub	sp, #296	@ 0x128
 800255a:	af00      	add	r7, sp, #0
 800255c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800256c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002578:	2500      	movs	r5, #0
 800257a:	ea54 0305 	orrs.w	r3, r4, r5
 800257e:	d049      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002586:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800258a:	d02f      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800258c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002590:	d828      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002596:	d01a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800259c:	d822      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025a6:	d007      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025a8:	e01c      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025aa:	4bb8      	ldr	r3, [pc, #736]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	4ab7      	ldr	r2, [pc, #732]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025b6:	e01a      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025bc:	3308      	adds	r3, #8
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fc8f 	bl	8003ee4 <RCCEx_PLL2_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025cc:	e00f      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d2:	3328      	adds	r3, #40	@ 0x28
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fd36 	bl	8004048 <RCCEx_PLL3_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025e2:	e004      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025ea:	e000      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025f6:	4ba5      	ldr	r3, [pc, #660]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80025fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002604:	4aa1      	ldr	r2, [pc, #644]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002606:	430b      	orrs	r3, r1
 8002608:	6513      	str	r3, [r2, #80]	@ 0x50
 800260a:	e003      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002620:	f04f 0900 	mov.w	r9, #0
 8002624:	ea58 0309 	orrs.w	r3, r8, r9
 8002628:	d047      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800262a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	2b04      	cmp	r3, #4
 8002632:	d82a      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002634:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002651 	.word	0x08002651
 8002640:	0800265f 	.word	0x0800265f
 8002644:	08002675 	.word	0x08002675
 8002648:	08002693 	.word	0x08002693
 800264c:	08002693 	.word	0x08002693
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002650:	4b8e      	ldr	r3, [pc, #568]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	4a8d      	ldr	r2, [pc, #564]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800265a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800265c:	e01a      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002662:	3308      	adds	r3, #8
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fc3c 	bl	8003ee4 <RCCEx_PLL2_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002672:	e00f      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002678:	3328      	adds	r3, #40	@ 0x28
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fce3 	bl	8004048 <RCCEx_PLL3_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002688:	e004      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002690:	e000      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269c:	4b7b      	ldr	r3, [pc, #492]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a0:	f023 0107 	bic.w	r1, r3, #7
 80026a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	4a78      	ldr	r2, [pc, #480]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80026c6:	f04f 0b00 	mov.w	fp, #0
 80026ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80026ce:	d04c      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026da:	d030      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80026dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e0:	d829      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80026e4:	d02d      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80026e8:	d825      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d018      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026ee:	2b80      	cmp	r3, #128	@ 0x80
 80026f0:	d821      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80026f6:	2b40      	cmp	r3, #64	@ 0x40
 80026f8:	d007      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80026fa:	e01c      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026fc:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	4a62      	ldr	r2, [pc, #392]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002708:	e01c      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270e:	3308      	adds	r3, #8
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fbe6 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800271e:	e011      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002724:	3328      	adds	r3, #40	@ 0x28
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fc8d 	bl	8004048 <RCCEx_PLL3_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002734:	e006      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800273c:	e002      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800274c:	4b4f      	ldr	r3, [pc, #316]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002750:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	4a4c      	ldr	r2, [pc, #304]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275c:	430b      	orrs	r3, r1
 800275e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002760:	e003      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800276a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002776:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002780:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002784:	460b      	mov	r3, r1
 8002786:	4313      	orrs	r3, r2
 8002788:	d053      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800278a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800278e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002796:	d035      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002798:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800279c:	d82e      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800279e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027a2:	d031      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027a8:	d828      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ae:	d01a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b4:	d822      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027be:	d007      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80027c0:	e01c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c2:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ce:	e01c      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d4:	3308      	adds	r3, #8
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fb83 	bl	8003ee4 <RCCEx_PLL2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027e4:	e011      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ea:	3328      	adds	r3, #40	@ 0x28
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fc2a 	bl	8004048 <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027fa:	e006      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002802:	e002      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800280a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002812:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800281a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002824:	430b      	orrs	r3, r1
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
 8002828:	e003      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800282e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800283e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002848:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800284c:	460b      	mov	r3, r1
 800284e:	4313      	orrs	r3, r2
 8002850:	d056      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800285a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800285e:	d038      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002864:	d831      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002866:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800286a:	d034      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800286c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002870:	d82b      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002876:	d01d      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002878:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800287c:	d825      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002888:	e01f      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800288a:	bf00      	nop
 800288c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002890:	4ba2      	ldr	r3, [pc, #648]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	4aa1      	ldr	r2, [pc, #644]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800289c:	e01c      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	3308      	adds	r3, #8
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 fb1c 	bl	8003ee4 <RCCEx_PLL2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b8:	3328      	adds	r3, #40	@ 0x28
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fbc3 	bl	8004048 <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028f0:	4a8a      	ldr	r2, [pc, #552]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f6:	e003      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800290c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002916:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800291a:	460b      	mov	r3, r1
 800291c:	4313      	orrs	r3, r2
 800291e:	d03a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	2b30      	cmp	r3, #48	@ 0x30
 8002928:	d01f      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800292a:	2b30      	cmp	r3, #48	@ 0x30
 800292c:	d819      	bhi.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800292e:	2b20      	cmp	r3, #32
 8002930:	d00c      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002932:	2b20      	cmp	r3, #32
 8002934:	d815      	bhi.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800293a:	2b10      	cmp	r3, #16
 800293c:	d111      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293e:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	4a76      	ldr	r2, [pc, #472]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800294a:	e011      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800294c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002950:	3308      	adds	r3, #8
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f001 fac5 	bl	8003ee4 <RCCEx_PLL2_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002960:	e006      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002968:	e002      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800296e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	4a65      	ldr	r2, [pc, #404]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002988:	430b      	orrs	r3, r1
 800298a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800298c:	e003      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80029a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4313      	orrs	r3, r2
 80029b4:	d051      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029c0:	d035      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80029c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029c6:	d82e      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029cc:	d031      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80029ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029d2:	d828      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d8:	d01a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029de:	d822      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e8:	d007      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029ea:	e01c      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029f8:	e01c      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fe:	3308      	adds	r3, #8
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fa6e 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a0e:	e011      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a14:	3328      	adds	r3, #40	@ 0x28
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fb15 	bl	8004048 <RCCEx_PLL3_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a2c:	e002      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a3c:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	4a34      	ldr	r2, [pc, #208]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a50:	e003      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002a70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002a74:	460b      	mov	r3, r1
 8002a76:	4313      	orrs	r3, r2
 8002a78:	d056      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a84:	d033      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8a:	d82c      	bhi.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a90:	d02f      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a96:	d826      	bhi.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a9c:	d02b      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aa2:	d820      	bhi.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aa8:	d012      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aae:	d81a      	bhi.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d022      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	3308      	adds	r3, #8
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fa0e 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ace:	e015      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad4:	3328      	adds	r3, #40	@ 0x28
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fab5 	bl	8004048 <RCCEx_PLL3_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ae4:	e00a      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002aee:	bf00      	nop
 8002af0:	e004      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b12:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b18:	e006      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4313      	orrs	r3, r2
 8002b46:	d055      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b54:	d033      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b5a:	d82c      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b60:	d02f      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b66:	d826      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b72:	d820      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b78:	d012      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b7e:	d81a      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d022      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8e:	3308      	adds	r3, #8
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f9a6 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b9e:	e015      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba4:	3328      	adds	r3, #40	@ 0x28
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fa4d 	bl	8004048 <RCCEx_PLL3_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bbc:	e006      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e004      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bd4:	4ba3      	ldr	r3, [pc, #652]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002be4:	4a9f      	ldr	r2, [pc, #636]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	e003      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4313      	orrs	r3, r2
 8002c12:	d037      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1e:	d00e      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c24:	d816      	bhi.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d018      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2e:	d111      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c30:	4b8c      	ldr	r3, [pc, #560]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	4a8b      	ldr	r2, [pc, #556]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c3c:	e00f      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c42:	3308      	adds	r3, #8
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f94c 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c52:	e004      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c66:	4b7f      	ldr	r3, [pc, #508]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	4a7b      	ldr	r2, [pc, #492]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c76:	430b      	orrs	r3, r1
 8002c78:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c7a:	e003      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002c9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	d039      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d81c      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cc5 	.word	0x08002cc5
 8002cbc:	08002cd3 	.word	0x08002cd3
 8002cc0:	08002cf1 	.word	0x08002cf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc4:	4b67      	ldr	r3, [pc, #412]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	4a66      	ldr	r2, [pc, #408]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cd0:	e00f      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f902 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	f023 0103 	bic.w	r1, r3, #3
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d08:	4a56      	ldr	r2, [pc, #344]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f000 809f 	beq.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f8f3 	bl	8000f30 <HAL_GetTick>
 8002d4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe f8ee 	bl	8000f30 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	@ 0x64
 8002d5e:	d903      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d68:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ed      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d179      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d7c:	4b39      	ldr	r3, [pc, #228]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d88:	4053      	eors	r3, r2
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d92:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a30      	ldr	r2, [pc, #192]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a2d      	ldr	r2, [pc, #180]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002db6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dca:	d118      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f8b0 	bl	8000f30 <HAL_GetTick>
 8002dd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd4:	e00d      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f8ab 	bl	8000f30 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d903      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002df0:	e005      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0eb      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d129      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e16:	d10e      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e28:	091a      	lsrs	r2, r3, #4
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6113      	str	r3, [r2, #16]
 8002e34:	e005      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e40:	6113      	str	r3, [r2, #16]
 8002e42:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e52:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e58:	e00e      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002e64:	58024400 	.word	0x58024400
 8002e68:	58024800 	.word	0x58024800
 8002e6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0301 	and.w	r3, r2, #1
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f000 8089 	beq.w	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea0:	2b28      	cmp	r3, #40	@ 0x28
 8002ea2:	d86b      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002f85 	.word	0x08002f85
 8002eb0:	08002f7d 	.word	0x08002f7d
 8002eb4:	08002f7d 	.word	0x08002f7d
 8002eb8:	08002f7d 	.word	0x08002f7d
 8002ebc:	08002f7d 	.word	0x08002f7d
 8002ec0:	08002f7d 	.word	0x08002f7d
 8002ec4:	08002f7d 	.word	0x08002f7d
 8002ec8:	08002f7d 	.word	0x08002f7d
 8002ecc:	08002f51 	.word	0x08002f51
 8002ed0:	08002f7d 	.word	0x08002f7d
 8002ed4:	08002f7d 	.word	0x08002f7d
 8002ed8:	08002f7d 	.word	0x08002f7d
 8002edc:	08002f7d 	.word	0x08002f7d
 8002ee0:	08002f7d 	.word	0x08002f7d
 8002ee4:	08002f7d 	.word	0x08002f7d
 8002ee8:	08002f7d 	.word	0x08002f7d
 8002eec:	08002f67 	.word	0x08002f67
 8002ef0:	08002f7d 	.word	0x08002f7d
 8002ef4:	08002f7d 	.word	0x08002f7d
 8002ef8:	08002f7d 	.word	0x08002f7d
 8002efc:	08002f7d 	.word	0x08002f7d
 8002f00:	08002f7d 	.word	0x08002f7d
 8002f04:	08002f7d 	.word	0x08002f7d
 8002f08:	08002f7d 	.word	0x08002f7d
 8002f0c:	08002f85 	.word	0x08002f85
 8002f10:	08002f7d 	.word	0x08002f7d
 8002f14:	08002f7d 	.word	0x08002f7d
 8002f18:	08002f7d 	.word	0x08002f7d
 8002f1c:	08002f7d 	.word	0x08002f7d
 8002f20:	08002f7d 	.word	0x08002f7d
 8002f24:	08002f7d 	.word	0x08002f7d
 8002f28:	08002f7d 	.word	0x08002f7d
 8002f2c:	08002f85 	.word	0x08002f85
 8002f30:	08002f7d 	.word	0x08002f7d
 8002f34:	08002f7d 	.word	0x08002f7d
 8002f38:	08002f7d 	.word	0x08002f7d
 8002f3c:	08002f7d 	.word	0x08002f7d
 8002f40:	08002f7d 	.word	0x08002f7d
 8002f44:	08002f7d 	.word	0x08002f7d
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002f85 	.word	0x08002f85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	3308      	adds	r3, #8
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ffc3 	bl	8003ee4 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f64:	e00f      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	3328      	adds	r3, #40	@ 0x28
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 f86a 	bl	8004048 <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f7a:	e004      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f8e:	4bbf      	ldr	r3, [pc, #764]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9c:	4abb      	ldr	r2, [pc, #748]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fa2:	e003      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f002 0302 	and.w	r3, r2, #2
 8002fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d041      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d824      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003029 	.word	0x08003029
 8002fe0:	08002ff5 	.word	0x08002ff5
 8002fe4:	0800300b 	.word	0x0800300b
 8002fe8:	08003029 	.word	0x08003029
 8002fec:	08003029 	.word	0x08003029
 8002ff0:	08003029 	.word	0x08003029
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 ff71 	bl	8003ee4 <RCCEx_PLL2_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003008:	e00f      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	3328      	adds	r3, #40	@ 0x28
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f818 	bl	8004048 <RCCEx_PLL3_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800301e:	e004      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003032:	4b96      	ldr	r3, [pc, #600]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	f023 0107 	bic.w	r1, r3, #7
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003040:	4a92      	ldr	r2, [pc, #584]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6553      	str	r3, [r2, #84]	@ 0x54
 8003046:	e003      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800304c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f002 0304 	and.w	r3, r2, #4
 800305c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003066:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800306a:	460b      	mov	r3, r1
 800306c:	4313      	orrs	r3, r2
 800306e:	d044      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003078:	2b05      	cmp	r3, #5
 800307a:	d825      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030d1 	.word	0x080030d1
 8003088:	0800309d 	.word	0x0800309d
 800308c:	080030b3 	.word	0x080030b3
 8003090:	080030d1 	.word	0x080030d1
 8003094:	080030d1 	.word	0x080030d1
 8003098:	080030d1 	.word	0x080030d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	3308      	adds	r3, #8
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 ff1d 	bl	8003ee4 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030b0:	e00f      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b6:	3328      	adds	r3, #40	@ 0x28
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ffc4 	bl	8004048 <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030c6:	e004      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80030d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030da:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	f023 0107 	bic.w	r1, r3, #7
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ea:	4a68      	ldr	r2, [pc, #416]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f002 0320 	and.w	r3, r2, #32
 8003106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003114:	460b      	mov	r3, r1
 8003116:	4313      	orrs	r3, r2
 8003118:	d055      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003126:	d033      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800312c:	d82c      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003132:	d02f      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003138:	d826      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800313a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800313e:	d02b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003144:	d820      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800314a:	d012      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003150:	d81a      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d022      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800315a:	d115      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003160:	3308      	adds	r3, #8
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 febd 	bl	8003ee4 <RCCEx_PLL2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003170:	e015      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	3328      	adds	r3, #40	@ 0x28
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 ff64 	bl	8004048 <RCCEx_PLL3_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003186:	e00a      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800318e:	e006      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003190:	bf00      	nop
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003194:	bf00      	nop
 8003196:	e002      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	4a35      	ldr	r2, [pc, #212]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4313      	orrs	r3, r2
 80031e4:	d058      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031f2:	d033      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80031f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031f8:	d82c      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fe:	d02f      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003204:	d826      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800320a:	d02b      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800320c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003210:	d820      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003216:	d012      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800321c:	d81a      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d022      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d115      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322c:	3308      	adds	r3, #8
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fe57 	bl	8003ee4 <RCCEx_PLL2_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800323c:	e015      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800323e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003242:	3328      	adds	r3, #40	@ 0x28
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fefe 	bl	8004048 <RCCEx_PLL3_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003252:	e00a      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800325a:	e006      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800325c:	bf00      	nop
 800325e:	e004      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003260:	bf00      	nop
 8003262:	e002      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003282:	4a02      	ldr	r2, [pc, #8]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003284:	430b      	orrs	r3, r1
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800328a:	bf00      	nop
 800328c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d055      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032c4:	d033      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80032c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032ca:	d82c      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d0:	d02f      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80032d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d6:	d826      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032dc:	d02b      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80032de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032e2:	d820      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e8:	d012      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d81a      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d022      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f8:	d115      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	3308      	adds	r3, #8
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fdee 	bl	8003ee4 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800330e:	e015      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003314:	3328      	adds	r3, #40	@ 0x28
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fe95 	bl	8004048 <RCCEx_PLL3_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003324:	e00a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800333a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003344:	4ba1      	ldr	r3, [pc, #644]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003354:	4a9d      	ldr	r2, [pc, #628]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003356:	430b      	orrs	r3, r1
 8003358:	6593      	str	r3, [r2, #88]	@ 0x58
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f002 0308 	and.w	r3, r2, #8
 8003370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800337a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800337e:	460b      	mov	r3, r1
 8003380:	4313      	orrs	r3, r2
 8003382:	d01e      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	3328      	adds	r3, #40	@ 0x28
 8003398:	2102      	movs	r1, #2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fe54 	bl	8004048 <RCCEx_PLL3_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033ac:	4b87      	ldr	r3, [pc, #540]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033bc:	4a83      	ldr	r2, [pc, #524]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033be:	430b      	orrs	r3, r1
 80033c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f002 0310 	and.w	r3, r2, #16
 80033ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d01e      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ee:	d10c      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	3328      	adds	r3, #40	@ 0x28
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fe25 	bl	8004048 <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800340a:	4b70      	ldr	r3, [pc, #448]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003416:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800341a:	4a6c      	ldr	r2, [pc, #432]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800342c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003436:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d03e      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800344c:	d022      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800344e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003452:	d81b      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d00b      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800345e:	e015      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	3308      	adds	r3, #8
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fd3b 	bl	8003ee4 <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003474:	e00f      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3328      	adds	r3, #40	@ 0x28
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fde2 	bl	8004048 <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349e:	4b4b      	ldr	r3, [pc, #300]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034ae:	4a47      	ldr	r2, [pc, #284]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034cc:	2300      	movs	r3, #0
 80034ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034e6:	d01f      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80034e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034ec:	d818      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80034ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f2:	d003      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80034f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034f8:	d007      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b33      	ldr	r3, [pc, #204]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4a32      	ldr	r2, [pc, #200]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd98 	bl	8004048 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003532:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003544:	430b      	orrs	r3, r1
 8003546:	6553      	str	r3, [r2, #84]	@ 0x54
 8003548:	e003      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800355e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003560:	2300      	movs	r3, #0
 8003562:	677b      	str	r3, [r7, #116]	@ 0x74
 8003564:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003568:	460b      	mov	r3, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	d034      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a11      	ldr	r2, [pc, #68]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800358c:	e00e      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3308      	adds	r3, #8
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fca4 	bl	8003ee4 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c2:	4a02      	ldr	r2, [pc, #8]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035e6:	2300      	movs	r3, #0
 80035e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035ee:	460b      	mov	r3, r1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	d00c      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	3328      	adds	r3, #40	@ 0x28
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd23 	bl	8004048 <RCCEx_PLL3_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800361a:	663b      	str	r3, [r7, #96]	@ 0x60
 800361c:	2300      	movs	r3, #0
 800361e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003620:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003624:	460b      	mov	r3, r1
 8003626:	4313      	orrs	r3, r2
 8003628:	d038      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003636:	d018      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363c:	d811      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800363e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003642:	d014      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003648:	d80b      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d011      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800364e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003652:	d106      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4bc3      	ldr	r3, [pc, #780]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4ac2      	ldr	r2, [pc, #776]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003668:	e004      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800367c:	4bb9      	ldr	r3, [pc, #740]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800368c:	4ab5      	ldr	r2, [pc, #724]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800368e:	430b      	orrs	r3, r1
 8003690:	6553      	str	r3, [r2, #84]	@ 0x54
 8003692:	e003      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036aa:	2300      	movs	r3, #0
 80036ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b8:	4baa      	ldr	r3, [pc, #680]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	4aa7      	ldr	r2, [pc, #668]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036da:	2300      	movs	r3, #0
 80036dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80036de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036e8:	4b9e      	ldr	r3, [pc, #632]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80036f8:	4a9a      	ldr	r2, [pc, #616]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370c:	2300      	movs	r3, #0
 800370e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003710:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800371a:	4b92      	ldr	r3, [pc, #584]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800371c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	4a8e      	ldr	r2, [pc, #568]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800373a:	643b      	str	r3, [r7, #64]	@ 0x40
 800373c:	2300      	movs	r3, #0
 800373e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003740:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800374a:	4b86      	ldr	r3, [pc, #536]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	4a85      	ldr	r2, [pc, #532]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003750:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003754:	6113      	str	r3, [r2, #16]
 8003756:	4b83      	ldr	r3, [pc, #524]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003758:	6919      	ldr	r1, [r3, #16]
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003762:	4a80      	ldr	r2, [pc, #512]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003764:	430b      	orrs	r3, r1
 8003766:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003776:	2300      	movs	r3, #0
 8003778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800377a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003784:	4b77      	ldr	r3, [pc, #476]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003788:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	4a74      	ldr	r2, [pc, #464]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003794:	430b      	orrs	r3, r1
 8003796:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037ae:	460b      	mov	r3, r1
 80037b0:	4313      	orrs	r3, r2
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c4:	4a67      	ldr	r2, [pc, #412]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	2100      	movs	r1, #0
 80037d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d011      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	3308      	adds	r3, #8
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fb78 	bl	8003ee4 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80037fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	2100      	movs	r1, #0
 8003814:	6239      	str	r1, [r7, #32]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d011      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3308      	adds	r3, #8
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fb58 	bl	8003ee4 <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	2100      	movs	r1, #0
 8003854:	61b9      	str	r1, [r7, #24]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d011      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	3308      	adds	r3, #8
 800386c:	2102      	movs	r1, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fb38 	bl	8003ee4 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	2100      	movs	r1, #0
 8003894:	6139      	str	r1, [r7, #16]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038a0:	460b      	mov	r3, r1
 80038a2:	4313      	orrs	r3, r2
 80038a4:	d011      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	3328      	adds	r3, #40	@ 0x28
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fbca 	bl	8004048 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	2100      	movs	r1, #0
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d011      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	3328      	adds	r3, #40	@ 0x28
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fbaa 	bl	8004048 <RCCEx_PLL3_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	2100      	movs	r1, #0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d011      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	3328      	adds	r3, #40	@ 0x28
 800392c:	2102      	movs	r1, #2
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fb8a 	bl	8004048 <RCCEx_PLL3_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800393a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800394a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
}
 8003958:	4618      	mov	r0, r3
 800395a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800395e:	46bd      	mov	sp, r7
 8003960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003964:	58024400 	.word	0x58024400

08003968 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800396c:	f7fe fd96 	bl	800249c <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4904      	ldr	r1, [pc, #16]	@ (8003990 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	58024400 	.word	0x58024400
 8003990:	08005998 	.word	0x08005998

08003994 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800399c:	4ba1      	ldr	r3, [pc, #644]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039a6:	4b9f      	ldr	r3, [pc, #636]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	0b1b      	lsrs	r3, r3, #12
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039b2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039be:	4b99      	ldr	r3, [pc, #612]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8111 	beq.w	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f000 8083 	beq.w	8003af0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f200 80a1 	bhi.w	8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d056      	beq.n	8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039fe:	e099      	b.n	8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a00:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02d      	beq.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a0c:	4b85      	ldr	r3, [pc, #532]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	4a84      	ldr	r2, [pc, #528]	@ (8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b7b      	ldr	r3, [pc, #492]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a66:	e087      	b.n	8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aaa:	e065      	b.n	8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b59      	ldr	r3, [pc, #356]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aee:	e043      	b.n	8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b02:	4b48      	ldr	r3, [pc, #288]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b32:	e021      	b.n	8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	4b37      	ldr	r3, [pc, #220]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	0a5b      	lsrs	r3, r3, #9
 8003b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9e:	ee17 2a90 	vmov	r2, s15
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bcc:	ee17 2a90 	vmov	r2, s15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003bd4:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfa:	ee17 2a90 	vmov	r2, s15
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
}
 8003c16:	bf00      	nop
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
 8003c28:	03d09000 	.word	0x03d09000
 8003c2c:	46000000 	.word	0x46000000
 8003c30:	4c742400 	.word	0x4c742400
 8003c34:	4a742400 	.word	0x4a742400
 8003c38:	4af42400 	.word	0x4af42400

08003c3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c44:	4ba1      	ldr	r3, [pc, #644]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c4e:	4b9f      	ldr	r3, [pc, #636]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	0d1b      	lsrs	r3, r3, #20
 8003c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c5a:	4b9c      	ldr	r3, [pc, #624]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c66:	4b99      	ldr	r3, [pc, #612]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8111 	beq.w	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	f000 8083 	beq.w	8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f200 80a1 	bhi.w	8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d056      	beq.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ca6:	e099      	b.n	8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca8:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d02d      	beq.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cb4:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	4a84      	ldr	r2, [pc, #528]	@ (8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cde:	4b7b      	ldr	r3, [pc, #492]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d0e:	e087      	b.n	8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d52:	e065      	b.n	8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d66:	4b59      	ldr	r3, [pc, #356]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d96:	e043      	b.n	8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003daa:	4b48      	ldr	r3, [pc, #288]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dda:	e021      	b.n	8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	0a5b      	lsrs	r3, r3, #9
 8003e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e46:	ee17 2a90 	vmov	r2, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e74:	ee17 2a90 	vmov	r2, s15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	0e1b      	lsrs	r3, r3, #24
 8003e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea2:	ee17 2a90 	vmov	r2, s15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
}
 8003ebe:	bf00      	nop
 8003ec0:	3724      	adds	r7, #36	@ 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	03d09000 	.word	0x03d09000
 8003ed4:	46000000 	.word	0x46000000
 8003ed8:	4c742400 	.word	0x4c742400
 8003edc:	4a742400 	.word	0x4a742400
 8003ee0:	4af42400 	.word	0x4af42400

08003ee4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ef2:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d101      	bne.n	8003f02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e099      	b.n	8004036 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f02:	4b4f      	ldr	r3, [pc, #316]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4e      	ldr	r2, [pc, #312]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7fd f80f 	bl	8000f30 <HAL_GetTick>
 8003f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f16:	f7fd f80b 	bl	8000f30 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e086      	b.n	8004036 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f28:	4b45      	ldr	r3, [pc, #276]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f34:	4b42      	ldr	r3, [pc, #264]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	493f      	ldr	r1, [pc, #252]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	025b      	lsls	r3, r3, #9
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f78:	4931      	ldr	r1, [pc, #196]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f7e:	4b30      	ldr	r3, [pc, #192]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	492d      	ldr	r1, [pc, #180]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	f023 0220 	bic.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4928      	ldr	r1, [pc, #160]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fa2:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	f023 0310 	bic.w	r3, r3, #16
 8003fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb2:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <RCCEx_PLL2_Config+0x160>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	69d2      	ldr	r2, [r2, #28]
 8003fba:	00d2      	lsls	r2, r2, #3
 8003fbc:	4920      	ldr	r1, [pc, #128]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	f043 0310 	orr.w	r3, r3, #16
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fe0:	e00f      	b.n	8004002 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003fe8:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ff4:	e005      	b.n	8004002 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	4a11      	ldr	r2, [pc, #68]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004000:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 8004008:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800400c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400e:	f7fc ff8f 	bl	8000f30 <HAL_GetTick>
 8004012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004014:	e008      	b.n	8004028 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004016:	f7fc ff8b 	bl	8000f30 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e006      	b.n	8004036 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <RCCEx_PLL2_Config+0x15c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	58024400 	.word	0x58024400
 8004044:	ffff0007 	.word	0xffff0007

08004048 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004056:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d101      	bne.n	8004066 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e099      	b.n	800419a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004066:	4b4f      	ldr	r3, [pc, #316]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4e      	ldr	r2, [pc, #312]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004072:	f7fc ff5d 	bl	8000f30 <HAL_GetTick>
 8004076:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004078:	e008      	b.n	800408c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800407a:	f7fc ff59 	bl	8000f30 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e086      	b.n	800419a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800408c:	4b45      	ldr	r3, [pc, #276]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004098:	4b42      	ldr	r3, [pc, #264]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	051b      	lsls	r3, r3, #20
 80040a6:	493f      	ldr	r1, [pc, #252]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	025b      	lsls	r3, r3, #9
 80040be:	b29b      	uxth	r3, r3
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040dc:	4931      	ldr	r1, [pc, #196]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040e2:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	492d      	ldr	r1, [pc, #180]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040f4:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4928      	ldr	r1, [pc, #160]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004106:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800410c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004116:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <RCCEx_PLL3_Config+0x160>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	69d2      	ldr	r2, [r2, #28]
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	4920      	ldr	r1, [pc, #128]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004138:	4b1a      	ldr	r3, [pc, #104]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	4a19      	ldr	r2, [pc, #100]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800413e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004142:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004144:	e00f      	b.n	8004166 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004152:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004156:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004158:	e005      	b.n	8004166 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800415a:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a11      	ldr	r2, [pc, #68]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004166:	4b0f      	ldr	r3, [pc, #60]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0e      	ldr	r2, [pc, #56]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004172:	f7fc fedd 	bl	8000f30 <HAL_GetTick>
 8004176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004178:	e008      	b.n	800418c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800417a:	f7fc fed9 	bl	8000f30 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e006      	b.n	800419a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <RCCEx_PLL3_Config+0x15c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	ffff0007 	.word	0xffff0007

080041ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e049      	b.n	8004252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc fd1e 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 f96e 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01b      	beq.n	80042be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0202 	mvn.w	r2, #2
 800428e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8f3 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80042aa:	e005      	b.n	80042b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f8e5 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8f6 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01b      	beq.n	800430a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0204 	mvn.w	r2, #4
 80042da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8cd 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80042f6:	e005      	b.n	8004304 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8bf 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8d0 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0208 	mvn.w	r2, #8
 8004326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2204      	movs	r2, #4
 800432c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8a7 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004342:	e005      	b.n	8004350 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f899 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8aa 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01b      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0210 	mvn.w	r2, #16
 8004372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2208      	movs	r2, #8
 8004378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f881 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 800438e:	e005      	b.n	800439c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f873 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f884 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00c      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0201 	mvn.w	r2, #1
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f851 	bl	8004468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9aa 	bl	8004748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9a2 	bl	800475c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f83e 	bl	80044b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0220 	mvn.w	r2, #32
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f96a 	bl	8004734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a46      	ldr	r2, [pc, #280]	@ (80045f8 <TIM_Base_SetConfig+0x12c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a43      	ldr	r2, [pc, #268]	@ (80045fc <TIM_Base_SetConfig+0x130>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a42      	ldr	r2, [pc, #264]	@ (8004600 <TIM_Base_SetConfig+0x134>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a41      	ldr	r2, [pc, #260]	@ (8004604 <TIM_Base_SetConfig+0x138>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a40      	ldr	r2, [pc, #256]	@ (8004608 <TIM_Base_SetConfig+0x13c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a35      	ldr	r2, [pc, #212]	@ (80045f8 <TIM_Base_SetConfig+0x12c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01f      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452c:	d01b      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a32      	ldr	r2, [pc, #200]	@ (80045fc <TIM_Base_SetConfig+0x130>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d017      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <TIM_Base_SetConfig+0x134>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a30      	ldr	r2, [pc, #192]	@ (8004604 <TIM_Base_SetConfig+0x138>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00f      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2f      	ldr	r2, [pc, #188]	@ (8004608 <TIM_Base_SetConfig+0x13c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2e      	ldr	r2, [pc, #184]	@ (800460c <TIM_Base_SetConfig+0x140>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2d      	ldr	r2, [pc, #180]	@ (8004610 <TIM_Base_SetConfig+0x144>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <TIM_Base_SetConfig+0x148>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <TIM_Base_SetConfig+0x12c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <TIM_Base_SetConfig+0x13c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <TIM_Base_SetConfig+0x140>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <TIM_Base_SetConfig+0x144>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <TIM_Base_SetConfig+0x148>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]
  }
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e06d      	b.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a30      	ldr	r2, [pc, #192]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2f      	ldr	r2, [pc, #188]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d108      	bne.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800466a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a20      	ldr	r2, [pc, #128]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d022      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a2:	d01d      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d018      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	@ (800472c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a15      	ldr	r2, [pc, #84]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40001800 	.word	0x40001800
 8004730:	40014000 	.word	0x40014000

08004734 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e042      	b.n	8004808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fc fab1 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2224      	movs	r2, #36	@ 0x24
 800479e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd90 	bl	80052e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f825 	bl	8004810 <UART_SetConfig>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01b      	b.n	8004808 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fe0f 	bl	8005424 <UART_CheckIdleState>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b092      	sub	sp, #72	@ 0x48
 8004816:	af00      	add	r7, sp, #0
 8004818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4bbe      	ldr	r3, [pc, #760]	@ (8004b38 <UART_SetConfig+0x328>)
 8004840:	4013      	ands	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004848:	430b      	orrs	r3, r1
 800484a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4ab3      	ldr	r2, [pc, #716]	@ (8004b3c <UART_SetConfig+0x32c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004878:	4313      	orrs	r3, r2
 800487a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4baf      	ldr	r3, [pc, #700]	@ (8004b40 <UART_SetConfig+0x330>)
 8004884:	4013      	ands	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800488c:	430b      	orrs	r3, r1
 800488e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f023 010f 	bic.w	r1, r3, #15
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4aa6      	ldr	r2, [pc, #664]	@ (8004b44 <UART_SetConfig+0x334>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d177      	bne.n	80049a0 <UART_SetConfig+0x190>
 80048b0:	4ba5      	ldr	r3, [pc, #660]	@ (8004b48 <UART_SetConfig+0x338>)
 80048b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048b8:	2b28      	cmp	r3, #40	@ 0x28
 80048ba:	d86d      	bhi.n	8004998 <UART_SetConfig+0x188>
 80048bc:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0xb4>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	08004969 	.word	0x08004969
 80048c8:	08004999 	.word	0x08004999
 80048cc:	08004999 	.word	0x08004999
 80048d0:	08004999 	.word	0x08004999
 80048d4:	08004999 	.word	0x08004999
 80048d8:	08004999 	.word	0x08004999
 80048dc:	08004999 	.word	0x08004999
 80048e0:	08004999 	.word	0x08004999
 80048e4:	08004971 	.word	0x08004971
 80048e8:	08004999 	.word	0x08004999
 80048ec:	08004999 	.word	0x08004999
 80048f0:	08004999 	.word	0x08004999
 80048f4:	08004999 	.word	0x08004999
 80048f8:	08004999 	.word	0x08004999
 80048fc:	08004999 	.word	0x08004999
 8004900:	08004999 	.word	0x08004999
 8004904:	08004979 	.word	0x08004979
 8004908:	08004999 	.word	0x08004999
 800490c:	08004999 	.word	0x08004999
 8004910:	08004999 	.word	0x08004999
 8004914:	08004999 	.word	0x08004999
 8004918:	08004999 	.word	0x08004999
 800491c:	08004999 	.word	0x08004999
 8004920:	08004999 	.word	0x08004999
 8004924:	08004981 	.word	0x08004981
 8004928:	08004999 	.word	0x08004999
 800492c:	08004999 	.word	0x08004999
 8004930:	08004999 	.word	0x08004999
 8004934:	08004999 	.word	0x08004999
 8004938:	08004999 	.word	0x08004999
 800493c:	08004999 	.word	0x08004999
 8004940:	08004999 	.word	0x08004999
 8004944:	08004989 	.word	0x08004989
 8004948:	08004999 	.word	0x08004999
 800494c:	08004999 	.word	0x08004999
 8004950:	08004999 	.word	0x08004999
 8004954:	08004999 	.word	0x08004999
 8004958:	08004999 	.word	0x08004999
 800495c:	08004999 	.word	0x08004999
 8004960:	08004999 	.word	0x08004999
 8004964:	08004991 	.word	0x08004991
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e222      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e21e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e21a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e216      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004988:	2320      	movs	r3, #32
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e212      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004990:	2340      	movs	r3, #64	@ 0x40
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e20e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e20a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a69      	ldr	r2, [pc, #420]	@ (8004b4c <UART_SetConfig+0x33c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d130      	bne.n	8004a0c <UART_SetConfig+0x1fc>
 80049aa:	4b67      	ldr	r3, [pc, #412]	@ (8004b48 <UART_SetConfig+0x338>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d826      	bhi.n	8004a04 <UART_SetConfig+0x1f4>
 80049b6:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <UART_SetConfig+0x1ac>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049fd 	.word	0x080049fd
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e1ec      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e1e8      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e1e4      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e1e0      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049f4:	2320      	movs	r3, #32
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e1dc      	b.n	8004db6 <UART_SetConfig+0x5a6>
 80049fc:	2340      	movs	r3, #64	@ 0x40
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e1d8      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e1d4      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4f      	ldr	r2, [pc, #316]	@ (8004b50 <UART_SetConfig+0x340>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d130      	bne.n	8004a78 <UART_SetConfig+0x268>
 8004a16:	4b4c      	ldr	r3, [pc, #304]	@ (8004b48 <UART_SetConfig+0x338>)
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d826      	bhi.n	8004a70 <UART_SetConfig+0x260>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x218>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a41 	.word	0x08004a41
 8004a2c:	08004a49 	.word	0x08004a49
 8004a30:	08004a51 	.word	0x08004a51
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a69 	.word	0x08004a69
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e1b6      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e1b2      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a50:	2308      	movs	r3, #8
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a56:	e1ae      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	e1aa      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a60:	2320      	movs	r3, #32
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a66:	e1a6      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a68:	2340      	movs	r3, #64	@ 0x40
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e1a2      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e19e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	@ (8004b54 <UART_SetConfig+0x344>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d130      	bne.n	8004ae4 <UART_SetConfig+0x2d4>
 8004a82:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <UART_SetConfig+0x338>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d826      	bhi.n	8004adc <UART_SetConfig+0x2cc>
 8004a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <UART_SetConfig+0x284>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004aad 	.word	0x08004aad
 8004a98:	08004ab5 	.word	0x08004ab5
 8004a9c:	08004abd 	.word	0x08004abd
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e180      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e17c      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004abc:	2308      	movs	r3, #8
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e178      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aca:	e174      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004acc:	2320      	movs	r3, #32
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e170      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004ad4:	2340      	movs	r3, #64	@ 0x40
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e16c      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e168      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <UART_SetConfig+0x348>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d142      	bne.n	8004b74 <UART_SetConfig+0x364>
 8004aee:	4b16      	ldr	r3, [pc, #88]	@ (8004b48 <UART_SetConfig+0x338>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d838      	bhi.n	8004b6c <UART_SetConfig+0x35c>
 8004afa:	a201      	add	r2, pc, #4	@ (adr r2, 8004b00 <UART_SetConfig+0x2f0>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b19 	.word	0x08004b19
 8004b04:	08004b21 	.word	0x08004b21
 8004b08:	08004b29 	.word	0x08004b29
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b5d 	.word	0x08004b5d
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e14a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e146      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e142      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b36:	e13e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b38:	cfff69f3 	.word	0xcfff69f3
 8004b3c:	58000c00 	.word	0x58000c00
 8004b40:	11fff4ff 	.word	0x11fff4ff
 8004b44:	40011000 	.word	0x40011000
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	40004400 	.word	0x40004400
 8004b50:	40004800 	.word	0x40004800
 8004b54:	40004c00 	.word	0x40004c00
 8004b58:	40005000 	.word	0x40005000
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e128      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b64:	2340      	movs	r3, #64	@ 0x40
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e124      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e120      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4acb      	ldr	r2, [pc, #812]	@ (8004ea8 <UART_SetConfig+0x698>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d176      	bne.n	8004c6c <UART_SetConfig+0x45c>
 8004b7e:	4bcb      	ldr	r3, [pc, #812]	@ (8004eac <UART_SetConfig+0x69c>)
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b86:	2b28      	cmp	r3, #40	@ 0x28
 8004b88:	d86c      	bhi.n	8004c64 <UART_SetConfig+0x454>
 8004b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0x380>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004c35 	.word	0x08004c35
 8004b94:	08004c65 	.word	0x08004c65
 8004b98:	08004c65 	.word	0x08004c65
 8004b9c:	08004c65 	.word	0x08004c65
 8004ba0:	08004c65 	.word	0x08004c65
 8004ba4:	08004c65 	.word	0x08004c65
 8004ba8:	08004c65 	.word	0x08004c65
 8004bac:	08004c65 	.word	0x08004c65
 8004bb0:	08004c3d 	.word	0x08004c3d
 8004bb4:	08004c65 	.word	0x08004c65
 8004bb8:	08004c65 	.word	0x08004c65
 8004bbc:	08004c65 	.word	0x08004c65
 8004bc0:	08004c65 	.word	0x08004c65
 8004bc4:	08004c65 	.word	0x08004c65
 8004bc8:	08004c65 	.word	0x08004c65
 8004bcc:	08004c65 	.word	0x08004c65
 8004bd0:	08004c45 	.word	0x08004c45
 8004bd4:	08004c65 	.word	0x08004c65
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c65 	.word	0x08004c65
 8004be0:	08004c65 	.word	0x08004c65
 8004be4:	08004c65 	.word	0x08004c65
 8004be8:	08004c65 	.word	0x08004c65
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c4d 	.word	0x08004c4d
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c65 	.word	0x08004c65
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c65 	.word	0x08004c65
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c65 	.word	0x08004c65
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e0bc      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e0b8      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e0b4      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e0b0      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c54:	2320      	movs	r3, #32
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e0ac      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c5c:	2340      	movs	r3, #64	@ 0x40
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e0a8      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e0a4      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a8f      	ldr	r2, [pc, #572]	@ (8004eb0 <UART_SetConfig+0x6a0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d130      	bne.n	8004cd8 <UART_SetConfig+0x4c8>
 8004c76:	4b8d      	ldr	r3, [pc, #564]	@ (8004eac <UART_SetConfig+0x69c>)
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d826      	bhi.n	8004cd0 <UART_SetConfig+0x4c0>
 8004c82:	a201      	add	r2, pc, #4	@ (adr r2, 8004c88 <UART_SetConfig+0x478>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004ca1 	.word	0x08004ca1
 8004c8c:	08004ca9 	.word	0x08004ca9
 8004c90:	08004cb1 	.word	0x08004cb1
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e086      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e082      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e07e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e07a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e076      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cc8:	2340      	movs	r3, #64	@ 0x40
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e072      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cd0:	2380      	movs	r3, #128	@ 0x80
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e06e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a75      	ldr	r2, [pc, #468]	@ (8004eb4 <UART_SetConfig+0x6a4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d130      	bne.n	8004d44 <UART_SetConfig+0x534>
 8004ce2:	4b72      	ldr	r3, [pc, #456]	@ (8004eac <UART_SetConfig+0x69c>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d826      	bhi.n	8004d3c <UART_SetConfig+0x52c>
 8004cee:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <UART_SetConfig+0x4e4>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d0d 	.word	0x08004d0d
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d1d 	.word	0x08004d1d
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e050      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e04c      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e048      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e044      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e040      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d34:	2340      	movs	r3, #64	@ 0x40
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e03c      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e038      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb8 <UART_SetConfig+0x6a8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d130      	bne.n	8004db0 <UART_SetConfig+0x5a0>
 8004d4e:	4b57      	ldr	r3, [pc, #348]	@ (8004eac <UART_SetConfig+0x69c>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d826      	bhi.n	8004da8 <UART_SetConfig+0x598>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <UART_SetConfig+0x550>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d79 	.word	0x08004d79
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d89 	.word	0x08004d89
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e01a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e016      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e012      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e00e      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004d98:	2320      	movs	r3, #32
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e00a      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004da0:	2340      	movs	r3, #64	@ 0x40
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e006      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e002      	b.n	8004db6 <UART_SetConfig+0x5a6>
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <UART_SetConfig+0x6a8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	f040 80f8 	bne.w	8004fb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	dc46      	bgt.n	8004e58 <UART_SetConfig+0x648>
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	f2c0 8082 	blt.w	8004ed4 <UART_SetConfig+0x6c4>
 8004dd0:	3b02      	subs	r3, #2
 8004dd2:	2b1e      	cmp	r3, #30
 8004dd4:	d87e      	bhi.n	8004ed4 <UART_SetConfig+0x6c4>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0x5cc>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004ed5 	.word	0x08004ed5
 8004de4:	08004e67 	.word	0x08004e67
 8004de8:	08004ed5 	.word	0x08004ed5
 8004dec:	08004ed5 	.word	0x08004ed5
 8004df0:	08004ed5 	.word	0x08004ed5
 8004df4:	08004e77 	.word	0x08004e77
 8004df8:	08004ed5 	.word	0x08004ed5
 8004dfc:	08004ed5 	.word	0x08004ed5
 8004e00:	08004ed5 	.word	0x08004ed5
 8004e04:	08004ed5 	.word	0x08004ed5
 8004e08:	08004ed5 	.word	0x08004ed5
 8004e0c:	08004ed5 	.word	0x08004ed5
 8004e10:	08004ed5 	.word	0x08004ed5
 8004e14:	08004e87 	.word	0x08004e87
 8004e18:	08004ed5 	.word	0x08004ed5
 8004e1c:	08004ed5 	.word	0x08004ed5
 8004e20:	08004ed5 	.word	0x08004ed5
 8004e24:	08004ed5 	.word	0x08004ed5
 8004e28:	08004ed5 	.word	0x08004ed5
 8004e2c:	08004ed5 	.word	0x08004ed5
 8004e30:	08004ed5 	.word	0x08004ed5
 8004e34:	08004ed5 	.word	0x08004ed5
 8004e38:	08004ed5 	.word	0x08004ed5
 8004e3c:	08004ed5 	.word	0x08004ed5
 8004e40:	08004ed5 	.word	0x08004ed5
 8004e44:	08004ed5 	.word	0x08004ed5
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004ed5 	.word	0x08004ed5
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ec7 	.word	0x08004ec7
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
 8004e5a:	d037      	beq.n	8004ecc <UART_SetConfig+0x6bc>
 8004e5c:	e03a      	b.n	8004ed4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e5e:	f7fe fd83 	bl	8003968 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e64:	e03c      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fd92 	bl	8003994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e74:	e034      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e76:	f107 0318 	add.w	r3, r7, #24
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fede 	bl	8003c3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e84:	e02c      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e86:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <UART_SetConfig+0x69c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <UART_SetConfig+0x69c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <UART_SetConfig+0x6ac>)
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ea4:	e01c      	b.n	8004ee0 <UART_SetConfig+0x6d0>
 8004ea6:	bf00      	nop
 8004ea8:	40011400 	.word	0x40011400
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	40007800 	.word	0x40007800
 8004eb4:	40007c00 	.word	0x40007c00
 8004eb8:	58000c00 	.word	0x58000c00
 8004ebc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8005138 <UART_SetConfig+0x928>)
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec4:	e00c      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ec6:	4b9d      	ldr	r3, [pc, #628]	@ (800513c <UART_SetConfig+0x92c>)
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eca:	e009      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ed2:	e005      	b.n	8004ee0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ede:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 81de 	beq.w	80052a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	4a94      	ldr	r2, [pc, #592]	@ (8005140 <UART_SetConfig+0x930>)
 8004eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d305      	bcc.n	8004f18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f1e:	e1c1      	b.n	80052a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f22:	2200      	movs	r2, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	60fa      	str	r2, [r7, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	4a84      	ldr	r2, [pc, #528]	@ (8005140 <UART_SetConfig+0x930>)
 8004f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2200      	movs	r2, #0
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f42:	f7fb f9c9 	bl	80002d8 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	020b      	lsls	r3, r1, #8
 8004f58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f5c:	0202      	lsls	r2, r0, #8
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	6849      	ldr	r1, [r1, #4]
 8004f62:	0849      	lsrs	r1, r1, #1
 8004f64:	2000      	movs	r0, #0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4605      	mov	r5, r0
 8004f6a:	eb12 0804 	adds.w	r8, r2, r4
 8004f6e:	eb43 0905 	adc.w	r9, r3, r5
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	469a      	mov	sl, r3
 8004f7a:	4693      	mov	fp, r2
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	465b      	mov	r3, fp
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fb f9a8 	bl	80002d8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f96:	d308      	bcc.n	8004faa <UART_SetConfig+0x79a>
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9e:	d204      	bcs.n	8004faa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e17c      	b.n	80052a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fb0:	e178      	b.n	80052a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fba:	f040 80c5 	bne.w	8005148 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004fbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	dc48      	bgt.n	8005058 <UART_SetConfig+0x848>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	db7b      	blt.n	80050c2 <UART_SetConfig+0x8b2>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d879      	bhi.n	80050c2 <UART_SetConfig+0x8b2>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <UART_SetConfig+0x7c4>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	0800505f 	.word	0x0800505f
 8004fd8:	08005067 	.word	0x08005067
 8004fdc:	080050c3 	.word	0x080050c3
 8004fe0:	080050c3 	.word	0x080050c3
 8004fe4:	0800506f 	.word	0x0800506f
 8004fe8:	080050c3 	.word	0x080050c3
 8004fec:	080050c3 	.word	0x080050c3
 8004ff0:	080050c3 	.word	0x080050c3
 8004ff4:	0800507f 	.word	0x0800507f
 8004ff8:	080050c3 	.word	0x080050c3
 8004ffc:	080050c3 	.word	0x080050c3
 8005000:	080050c3 	.word	0x080050c3
 8005004:	080050c3 	.word	0x080050c3
 8005008:	080050c3 	.word	0x080050c3
 800500c:	080050c3 	.word	0x080050c3
 8005010:	080050c3 	.word	0x080050c3
 8005014:	0800508f 	.word	0x0800508f
 8005018:	080050c3 	.word	0x080050c3
 800501c:	080050c3 	.word	0x080050c3
 8005020:	080050c3 	.word	0x080050c3
 8005024:	080050c3 	.word	0x080050c3
 8005028:	080050c3 	.word	0x080050c3
 800502c:	080050c3 	.word	0x080050c3
 8005030:	080050c3 	.word	0x080050c3
 8005034:	080050c3 	.word	0x080050c3
 8005038:	080050c3 	.word	0x080050c3
 800503c:	080050c3 	.word	0x080050c3
 8005040:	080050c3 	.word	0x080050c3
 8005044:	080050c3 	.word	0x080050c3
 8005048:	080050c3 	.word	0x080050c3
 800504c:	080050c3 	.word	0x080050c3
 8005050:	080050c3 	.word	0x080050c3
 8005054:	080050b5 	.word	0x080050b5
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d02e      	beq.n	80050ba <UART_SetConfig+0x8aa>
 800505c:	e031      	b.n	80050c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800505e:	f7fd fa4d 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8005062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005064:	e033      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005066:	f7fd fa5f 	bl	8002528 <HAL_RCC_GetPCLK2Freq>
 800506a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800506c:	e02f      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800506e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fc8e 	bl	8003994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507c:	e027      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800507e:	f107 0318 	add.w	r3, r7, #24
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fdda 	bl	8003c3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800508c:	e01f      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508e:	4b2d      	ldr	r3, [pc, #180]	@ (8005144 <UART_SetConfig+0x934>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800509a:	4b2a      	ldr	r3, [pc, #168]	@ (8005144 <UART_SetConfig+0x934>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	4a24      	ldr	r2, [pc, #144]	@ (8005138 <UART_SetConfig+0x928>)
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050ac:	e00f      	b.n	80050ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050ae:	4b22      	ldr	r3, [pc, #136]	@ (8005138 <UART_SetConfig+0x928>)
 80050b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b2:	e00c      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050b4:	4b21      	ldr	r3, [pc, #132]	@ (800513c <UART_SetConfig+0x92c>)
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b8:	e009      	b.n	80050ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c0:	e005      	b.n	80050ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80e7 	beq.w	80052a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <UART_SetConfig+0x930>)
 80050dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e8:	005a      	lsls	r2, r3, #1
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	441a      	add	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	2b0f      	cmp	r3, #15
 8005100:	d916      	bls.n	8005130 <UART_SetConfig+0x920>
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005108:	d212      	bcs.n	8005130 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	b29b      	uxth	r3, r3
 800510e:	f023 030f 	bic.w	r3, r3, #15
 8005112:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	b29a      	uxth	r2, r3
 8005120:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005122:	4313      	orrs	r3, r2
 8005124:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	e0b9      	b.n	80052a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005136:	e0b5      	b.n	80052a4 <UART_SetConfig+0xa94>
 8005138:	03d09000 	.word	0x03d09000
 800513c:	003d0900 	.word	0x003d0900
 8005140:	080059a8 	.word	0x080059a8
 8005144:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005148:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800514c:	2b20      	cmp	r3, #32
 800514e:	dc49      	bgt.n	80051e4 <UART_SetConfig+0x9d4>
 8005150:	2b00      	cmp	r3, #0
 8005152:	db7c      	blt.n	800524e <UART_SetConfig+0xa3e>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d87a      	bhi.n	800524e <UART_SetConfig+0xa3e>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x950>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	080051eb 	.word	0x080051eb
 8005164:	080051f3 	.word	0x080051f3
 8005168:	0800524f 	.word	0x0800524f
 800516c:	0800524f 	.word	0x0800524f
 8005170:	080051fb 	.word	0x080051fb
 8005174:	0800524f 	.word	0x0800524f
 8005178:	0800524f 	.word	0x0800524f
 800517c:	0800524f 	.word	0x0800524f
 8005180:	0800520b 	.word	0x0800520b
 8005184:	0800524f 	.word	0x0800524f
 8005188:	0800524f 	.word	0x0800524f
 800518c:	0800524f 	.word	0x0800524f
 8005190:	0800524f 	.word	0x0800524f
 8005194:	0800524f 	.word	0x0800524f
 8005198:	0800524f 	.word	0x0800524f
 800519c:	0800524f 	.word	0x0800524f
 80051a0:	0800521b 	.word	0x0800521b
 80051a4:	0800524f 	.word	0x0800524f
 80051a8:	0800524f 	.word	0x0800524f
 80051ac:	0800524f 	.word	0x0800524f
 80051b0:	0800524f 	.word	0x0800524f
 80051b4:	0800524f 	.word	0x0800524f
 80051b8:	0800524f 	.word	0x0800524f
 80051bc:	0800524f 	.word	0x0800524f
 80051c0:	0800524f 	.word	0x0800524f
 80051c4:	0800524f 	.word	0x0800524f
 80051c8:	0800524f 	.word	0x0800524f
 80051cc:	0800524f 	.word	0x0800524f
 80051d0:	0800524f 	.word	0x0800524f
 80051d4:	0800524f 	.word	0x0800524f
 80051d8:	0800524f 	.word	0x0800524f
 80051dc:	0800524f 	.word	0x0800524f
 80051e0:	08005241 	.word	0x08005241
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	d02e      	beq.n	8005246 <UART_SetConfig+0xa36>
 80051e8:	e031      	b.n	800524e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ea:	f7fd f987 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80051ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051f0:	e033      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f2:	f7fd f999 	bl	8002528 <HAL_RCC_GetPCLK2Freq>
 80051f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051f8:	e02f      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fbc8 	bl	8003994 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005208:	e027      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800520a:	f107 0318 	add.w	r3, r7, #24
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fd14 	bl	8003c3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005218:	e01f      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800521a:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <UART_SetConfig+0xac0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005226:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <UART_SetConfig+0xac0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	4a28      	ldr	r2, [pc, #160]	@ (80052d4 <UART_SetConfig+0xac4>)
 8005232:	fa22 f303 	lsr.w	r3, r2, r3
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005238:	e00f      	b.n	800525a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <UART_SetConfig+0xac4>)
 800523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800523e:	e00c      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005240:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <UART_SetConfig+0xac8>)
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005244:	e009      	b.n	800525a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800524c:	e005      	b.n	800525a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005258:	bf00      	nop
    }

    if (pclk != 0U)
 800525a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d021      	beq.n	80052a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	4a1d      	ldr	r2, [pc, #116]	@ (80052dc <UART_SetConfig+0xacc>)
 8005266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526a:	461a      	mov	r2, r3
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	441a      	add	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d909      	bls.n	800529e <UART_SetConfig+0xa8e>
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005290:	d205      	bcs.n	800529e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	b29a      	uxth	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e002      	b.n	80052a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3748      	adds	r7, #72	@ 0x48
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ce:	bf00      	nop
 80052d0:	58024400 	.word	0x58024400
 80052d4:	03d09000 	.word	0x03d09000
 80052d8:	003d0900 	.word	0x003d0900
 80052dc:	080059a8 	.word	0x080059a8

080052e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053de:	d10a      	bne.n	80053f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b098      	sub	sp, #96	@ 0x60
 8005428:	af02      	add	r7, sp, #8
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005434:	f7fb fd7c 	bl	8000f30 <HAL_GetTick>
 8005438:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d12f      	bne.n	80054a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005450:	2200      	movs	r2, #0
 8005452:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f88e 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d022      	beq.n	80054a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005476:	653b      	str	r3, [r7, #80]	@ 0x50
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005480:	647b      	str	r3, [r7, #68]	@ 0x44
 8005482:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800548e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e063      	b.n	8005570 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d149      	bne.n	800554a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054be:	2200      	movs	r2, #0
 80054c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f857 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03c      	beq.n	800554a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	623b      	str	r3, [r7, #32]
   return(result);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	60fb      	str	r3, [r7, #12]
   return(result);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005522:	61fa      	str	r2, [r7, #28]
 8005524:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69b9      	ldr	r1, [r7, #24]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	617b      	str	r3, [r7, #20]
   return(result);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e5      	bne.n	8005502 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e012      	b.n	8005570 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3758      	adds	r7, #88	@ 0x58
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	e04f      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005590:	d04b      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fb fccd 	bl	8000f30 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e04e      	b.n	800564a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d037      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d034      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d031      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d110      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2208      	movs	r2, #8
 80055da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f839 	bl	8005654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2208      	movs	r2, #8
 80055e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e029      	b.n	800564a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005604:	d111      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800560e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f81f 	bl	8005654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e00f      	b.n	800564a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	429a      	cmp	r2, r3
 8005646:	d0a0      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b095      	sub	sp, #84	@ 0x54
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800567a:	643b      	str	r3, [r7, #64]	@ 0x40
 800567c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e6      	bne.n	800565c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	61fb      	str	r3, [r7, #28]
   return(result);
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <UART_EndRxTransfer+0xc8>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d118      	bne.n	80056fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	613b      	str	r3, [r7, #16]
   return(result);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005710:	bf00      	nop
 8005712:	3754      	adds	r7, #84	@ 0x54
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	effffffe 	.word	0xeffffffe

08005720 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_UARTEx_DisableFifoMode+0x16>
 8005732:	2302      	movs	r3, #2
 8005734:	e027      	b.n	8005786 <HAL_UARTEx_DisableFifoMode+0x66>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	@ 0x24
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e02d      	b.n	8005806 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2224      	movs	r2, #36	@ 0x24
 80057b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f850 	bl	800588c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005822:	2302      	movs	r3, #2
 8005824:	e02d      	b.n	8005882 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2224      	movs	r2, #36	@ 0x24
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f812 	bl	800588c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005898:	2b00      	cmp	r3, #0
 800589a:	d108      	bne.n	80058ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058ac:	e031      	b.n	8005912 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058ae:	2310      	movs	r3, #16
 80058b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058b2:	2310      	movs	r3, #16
 80058b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	0e5b      	lsrs	r3, r3, #25
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	0f5b      	lsrs	r3, r3, #29
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	7b3a      	ldrb	r2, [r7, #12]
 80058da:	4911      	ldr	r1, [pc, #68]	@ (8005920 <UARTEx_SetNbDataToProcess+0x94>)
 80058dc:	5c8a      	ldrb	r2, [r1, r2]
 80058de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058e2:	7b3a      	ldrb	r2, [r7, #12]
 80058e4:	490f      	ldr	r1, [pc, #60]	@ (8005924 <UARTEx_SetNbDataToProcess+0x98>)
 80058e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	7b7a      	ldrb	r2, [r7, #13]
 80058f8:	4909      	ldr	r1, [pc, #36]	@ (8005920 <UARTEx_SetNbDataToProcess+0x94>)
 80058fa:	5c8a      	ldrb	r2, [r1, r2]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005900:	7b7a      	ldrb	r2, [r7, #13]
 8005902:	4908      	ldr	r1, [pc, #32]	@ (8005924 <UARTEx_SetNbDataToProcess+0x98>)
 8005904:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005906:	fb93 f3f2 	sdiv	r3, r3, r2
 800590a:	b29a      	uxth	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	080059c0 	.word	0x080059c0
 8005924:	080059c8 	.word	0x080059c8

08005928 <memset>:
 8005928:	4402      	add	r2, r0
 800592a:	4603      	mov	r3, r0
 800592c:	4293      	cmp	r3, r2
 800592e:	d100      	bne.n	8005932 <memset+0xa>
 8005930:	4770      	bx	lr
 8005932:	f803 1b01 	strb.w	r1, [r3], #1
 8005936:	e7f9      	b.n	800592c <memset+0x4>

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	@ (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	@ (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	@ (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	@ (800597c <__libc_init_array+0x44>)
 800594c:	f000 f818 	bl	8005980 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	080059d8 	.word	0x080059d8
 8005974:	080059d8 	.word	0x080059d8
 8005978:	080059d8 	.word	0x080059d8
 800597c:	080059dc 	.word	0x080059dc

08005980 <_init>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr

0800598c <_fini>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr
