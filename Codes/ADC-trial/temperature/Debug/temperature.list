
temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800899c  0800899c  0000999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080089e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000071c  24000014  080089f8  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000730  080089f8  0000a730  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f048  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bd2  00000000  00000000  0002908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001800  00000000  00000000  0002cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001299  00000000  00000000  0002e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af08  00000000  00000000  0002f6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000218a3  00000000  00000000  0006a601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001789a4  00000000  00000000  0008bea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00204848  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066bc  00000000  00000000  0020488c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  0020af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008984 	.word	0x08008984

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08008984 	.word	0x08008984

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005e0:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 80005e2:	4a30      	ldr	r2, [pc, #192]	@ (80006a4 <MX_ADC3_Init+0xdc>)
 80005e4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000600:	2200      	movs	r2, #0
 8000602:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000606:	2201      	movs	r2, #1
 8000608:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000612:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 800061a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800061e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000626:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000632:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 800063c:	2201      	movs	r2, #1
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000640:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000642:	f001 fa37 	bl	8001ab4 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800064c:	f000 fa68 	bl	8000b20 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000656:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 8000658:	f001 fa2c 	bl	8001ab4 <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000662:	f000 fa5d 	bl	8000b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_ADC3_Init+0xe0>)
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066a:	2306      	movs	r3, #6
 800066c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000672:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000676:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000678:	2304      	movs	r3, #4
 800067a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_ADC3_Init+0xd8>)
 800068a:	f001 fe0d 	bl	80022a8 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000694:	f000 fa44 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	24000030 	.word	0x24000030
 80006a4:	58026000 	.word	0x58026000
 80006a8:	cb840000 	.word	0xcb840000

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0b4      	sub	sp, #208	@ 0xd0
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	22c0      	movs	r2, #192	@ 0xc0
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f008 f934 	bl	800892a <memset>
  if(adcHandle->Instance==ADC3)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a20      	ldr	r2, [pc, #128]	@ (8000748 <HAL_ADC_MspInit+0x9c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d139      	bne.n	8000740 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80006dc:	2313      	movs	r3, #19
 80006de:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006ec:	23c0      	movs	r3, #192	@ 0xc0
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80006f0:	2320      	movs	r3, #32
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fea4 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800070e:	f000 fa07 	bl	8000b20 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <HAL_ADC_MspInit+0xa0>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <HAL_ADC_MspInit+0xa0>)
 800071a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_ADC_MspInit+0xa0>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	207f      	movs	r0, #127	@ 0x7f
 8000736:	f002 fb2c 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800073a:	207f      	movs	r0, #127	@ 0x7f
 800073c:	f002 fb43 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	37d0      	adds	r7, #208	@ 0xd0
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58026000 	.word	0x58026000
 800074c:	58024400 	.word	0x58024400

08000750 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b83      	ldr	r3, [pc, #524]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	4a81      	ldr	r2, [pc, #516]	@ (8000974 <MX_GPIO_Init+0x224>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000776:	4b7f      	ldr	r3, [pc, #508]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000784:	4b7b      	ldr	r3, [pc, #492]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078a:	4a7a      	ldr	r2, [pc, #488]	@ (8000974 <MX_GPIO_Init+0x224>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000794:	4b77      	ldr	r3, [pc, #476]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b74      	ldr	r3, [pc, #464]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a72      	ldr	r2, [pc, #456]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b70      	ldr	r3, [pc, #448]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b6c      	ldr	r3, [pc, #432]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c6:	4a6b      	ldr	r2, [pc, #428]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d0:	4b68      	ldr	r3, [pc, #416]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	4b65      	ldr	r3, [pc, #404]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	4a63      	ldr	r2, [pc, #396]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ee:	4b61      	ldr	r3, [pc, #388]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000974 <MX_GPIO_Init+0x224>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000802:	4a5c      	ldr	r2, [pc, #368]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080c:	4b59      	ldr	r3, [pc, #356]	@ (8000974 <MX_GPIO_Init+0x224>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	4b56      	ldr	r3, [pc, #344]	@ (8000974 <MX_GPIO_Init+0x224>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	4a54      	ldr	r2, [pc, #336]	@ (8000974 <MX_GPIO_Init+0x224>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082a:	4b52      	ldr	r3, [pc, #328]	@ (8000974 <MX_GPIO_Init+0x224>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800083e:	484e      	ldr	r0, [pc, #312]	@ (8000978 <MX_GPIO_Init+0x228>)
 8000840:	f002 fc8c 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	484c      	ldr	r0, [pc, #304]	@ (800097c <MX_GPIO_Init+0x22c>)
 800084c:	f002 fc86 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	484a      	ldr	r0, [pc, #296]	@ (8000980 <MX_GPIO_Init+0x230>)
 8000856:	f002 fc81 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4845      	ldr	r0, [pc, #276]	@ (8000984 <MX_GPIO_Init+0x234>)
 8000870:	f002 fac4 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000874:	2332      	movs	r3, #50	@ 0x32
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	483d      	ldr	r0, [pc, #244]	@ (8000984 <MX_GPIO_Init+0x234>)
 8000890:	f002 fab4 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000894:	2386      	movs	r3, #134	@ 0x86
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a4:	230b      	movs	r3, #11
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <MX_GPIO_Init+0x238>)
 80008b0:	f002 faa4 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	482a      	ldr	r0, [pc, #168]	@ (8000978 <MX_GPIO_Init+0x228>)
 80008ce:	f002 fa95 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4822      	ldr	r0, [pc, #136]	@ (8000978 <MX_GPIO_Init+0x228>)
 80008f0:	f002 fa84 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	@ (800097c <MX_GPIO_Init+0x22c>)
 800090e:	f002 fa75 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000912:	2380      	movs	r3, #128	@ 0x80
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4819      	ldr	r0, [pc, #100]	@ (800098c <MX_GPIO_Init+0x23c>)
 8000928:	f002 fa68 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800092c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093e:	230b      	movs	r3, #11
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	@ (800098c <MX_GPIO_Init+0x23c>)
 800094a:	f002 fa57 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_GPIO_Init+0x230>)
 8000966:	f002 fa49 	bl	8002dfc <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58024400 	.word	0x58024400
 8000978:	58020400 	.word	0x58020400
 800097c:	58020c00 	.word	0x58020c00
 8000980:	58021000 	.word	0x58021000
 8000984:	58020800 	.word	0x58020800
 8000988:	58020000 	.word	0x58020000
 800098c:	58021800 	.word	0x58021800

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000994:	f000 fdfe 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f814 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f7ff fed8 	bl	8000750 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009a0:	f7ff fe12 	bl	80005c8 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80009a4:	f000 fc60 	bl	8001268 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a8:	f000 fd1c 	bl	80013e4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80009ac:	f000 fc04 	bl	80011b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ESPE_ADC_init(0);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f8d5 	bl	8000b60 <ESPE_ADC_init>
  ESPE_ADC_TIM6_setup();
 80009b6:	f000 f8b9 	bl	8000b2c <ESPE_ADC_TIM6_setup>
  ESPE_USART_init(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f9fe 	bl	8000dbc <ESPE_USART_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <main+0x30>

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09e      	sub	sp, #120	@ 0x78
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ce:	224c      	movs	r2, #76	@ 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 ffa9 	bl	800892a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 ffa2 	bl	800892a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f002 fd02 	bl	80033f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b48      	ldr	r3, [pc, #288]	@ (8000b14 <SystemClock_Config+0x150>)
 80009f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f4:	4a47      	ldr	r2, [pc, #284]	@ (8000b14 <SystemClock_Config+0x150>)
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009fc:	4b45      	ldr	r3, [pc, #276]	@ (8000b14 <SystemClock_Config+0x150>)
 80009fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a43      	ldr	r2, [pc, #268]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a1e:	bf00      	nop
 8000a20:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a2c:	d1f8      	bne.n	8000a20 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b1c <SystemClock_Config+0x158>)
 8000a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a34:	4a39      	ldr	r2, [pc, #228]	@ (8000b1c <SystemClock_Config+0x158>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a3e:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <SystemClock_Config+0x158>)
 8000a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a30      	ldr	r2, [pc, #192]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <SystemClock_Config+0x150>)
 8000a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b14 <SystemClock_Config+0x150>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a72:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <SystemClock_Config+0x150>)
 8000a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a7e:	bf00      	nop
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <SystemClock_Config+0x154>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a8c:	d1f8      	bne.n	8000a80 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a92:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aa4:	2378      	movs	r3, #120	@ 0x78
 8000aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000aac:	230f      	movs	r3, #15
 8000aae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fcdd 	bl	8003484 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ad0:	f000 f826 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	233f      	movs	r3, #63	@ 0x3f
 8000ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae8:	2340      	movs	r3, #64	@ 0x40
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af2:	2340      	movs	r3, #64	@ 0x40
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2104      	movs	r1, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f91b 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b08:	f000 f80a 	bl	8000b20 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3778      	adds	r7, #120	@ 0x78
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58000400 	.word	0x58000400
 8000b18:	58024800 	.word	0x58024800
 8000b1c:	58024400 	.word	0x58024400

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <ESPE_ADC_TIM6_setup>:
uint16_t temp_vec[len_vec];




void ESPE_ADC_TIM6_setup(void){
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <ESPE_ADC_TIM6_setup+0x30>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->ARR = 1000;
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <ESPE_ADC_TIM6_setup+0x30>)
 8000b38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC = 100;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <ESPE_ADC_TIM6_setup+0x30>)
 8000b40:	2264      	movs	r2, #100	@ 0x64
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->CR1 |= TIM_CR1_CEN;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <ESPE_ADC_TIM6_setup+0x30>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <ESPE_ADC_TIM6_setup+0x30>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40001000 	.word	0x40001000

08000b60 <ESPE_ADC_init>:


void ESPE_ADC_init(uint8_t cont_measurement){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 0<<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 8000b70:	4b3c      	ldr	r3, [pc, #240]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b72:	4a3c      	ldr	r2, [pc, #240]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 18 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a39      	ldr	r2, [pc, #228]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b7e:	f443 6390 	orr.w	r3, r3, #1152	@ 0x480
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC3->PCSEL |= ADC_PCSEL_PCSEL_18;		//segna quali sono i canali in lettura per velocità massima
 8000b84:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a36      	ldr	r2, [pc, #216]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b8e:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC3 -> CR |= 0 << ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 8000b90:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b92:	4a34      	ldr	r2, [pc, #208]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 8000b98:	4b32      	ldr	r3, [pc, #200]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4a31      	ldr	r2, [pc, #196]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	6093      	str	r3, [r2, #8]




	ADC3 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000baa:	f023 031e 	bic.w	r3, r3, #30
 8000bae:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;						//seleziona la modalità lineare di calibrazione (a 1)
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bba:	6093      	str	r3, [r2, #8]
	ADC3 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 8000bbc:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bbe:	4a29      	ldr	r2, [pc, #164]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 8000bd0:	bf00      	nop
 8000bd2:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dbfb      	blt.n	8000bd2 <ESPE_ADC_init+0x72>
	}



	ADC3->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 8000bee:	bf00      	nop
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <ESPE_ADC_init+0x90>
	}


	ADC3 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6053      	str	r3, [r2, #4]


	ADC3_COMMON ->CCR |= ADC_CCR_TSEN;							// attiva termometro
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <ESPE_ADC_init+0x108>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <ESPE_ADC_init+0x108>)
 8000c0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c12:	6093      	str	r3, [r2, #8]
	ADC3_COMMON ->CCR |= ADC_CCR_VREFEN;						// attiva voltaggio di riferimento
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <ESPE_ADC_init+0x108>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4a13      	ldr	r2, [pc, #76]	@ (8000c68 <ESPE_ADC_init+0x108>)
 8000c1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c1e:	6093      	str	r3, [r2, #8]

	ADC3 -> SMPR2 |= 7<<ADC_SMPR2_SMP18_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c26:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c2a:	6193      	str	r3, [r2, #24]


	if( cont_measurement){
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <ESPE_ADC_init+0xea>
		ADC3 -> CFGR |= ADC_CFGR_CONT;							//Abilitiamo la lettura continua dei dati
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c3c:	60d3      	str	r3, [r2, #12]
		ADC3 -> CFGR |= ADC_CFGR_AUTDLY;						//Abilitiamo il record ritardato dei dati nel caso in cui il buffer sia ancora pieno (se DR != 0 -> misura non parte)
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	60d3      	str	r3, [r2, #12]
	}

	ADC3-> CR |= ADC_CR_ADSTART;								//Abilitiamo la presa dati
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <ESPE_ADC_init+0x104>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6093      	str	r3, [r2, #8]

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	58026000 	.word	0x58026000
 8000c68:	58026300 	.word	0x58026300

08000c6c <ESPE_ADC_loop_vec_read>:
		flag_data = 1;
		ADC3 -> IER &= ~(ADC_IER_EOCIE);
	}
}

uint8_t ESPE_ADC_loop_vec_read(uint8_t trigger){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	if( !trigger){
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d117      	bne.n	8000cac <ESPE_ADC_loop_vec_read+0x40>
		data_vec[counter_ADC] = ADC3->DR;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <ESPE_ADC_loop_vec_read+0x70>)
 8000c7e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	b289      	uxth	r1, r1
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <ESPE_ADC_loop_vec_read+0x78>)
 8000c8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if( counter_ADC < len_vec){
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b31      	cmp	r3, #49	@ 0x31
 8000c94:	d806      	bhi.n	8000ca4 <ESPE_ADC_loop_vec_read+0x38>
			counter_ADC++;
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e012      	b.n	8000cca <ESPE_ADC_loop_vec_read+0x5e>
		}else{
			counter_ADC = 0;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e00e      	b.n	8000cca <ESPE_ADC_loop_vec_read+0x5e>
		}
	}else{
		end_read = 1;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <ESPE_ADC_loop_vec_read+0x7c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
		ADC3 -> IER &= ~(ADC_IER_EOCIE);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <ESPE_ADC_loop_vec_read+0x70>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <ESPE_ADC_loop_vec_read+0x70>)
 8000cb8:	f023 0304 	bic.w	r3, r3, #4
 8000cbc:	6053      	str	r3, [r2, #4]
		TIM6 -> CR1 &= ~( TIM_CR1_CEN);
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <ESPE_ADC_loop_vec_read+0x80>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <ESPE_ADC_loop_vec_read+0x80>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	6013      	str	r3, [r2, #0]
	}
	return counter_ADC;
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <ESPE_ADC_loop_vec_read+0x74>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	58026000 	.word	0x58026000
 8000ce0:	24000094 	.word	0x24000094
 8000ce4:	24000098 	.word	0x24000098
 8000ce8:	24000097 	.word	0x24000097
 8000cec:	40001000 	.word	0x40001000

08000cf0 <ESPE_ADC_temp_conversion>:



void ESPE_ADC_temp_conversion(void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	extern uint16_t vector[len_vec];
	if (counter_conversion < len_vec && !flag_conversion){
 8000cf4:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <ESPE_ADC_temp_conversion+0xa8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b31      	cmp	r3, #49	@ 0x31
 8000cfa:	d844      	bhi.n	8000d86 <ESPE_ADC_temp_conversion+0x96>
 8000cfc:	4b27      	ldr	r3, [pc, #156]	@ (8000d9c <ESPE_ADC_temp_conversion+0xac>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d140      	bne.n	8000d86 <ESPE_ADC_temp_conversion+0x96>
		vector[(counter_conversion+counter_ADC)%len_vec] = ((Const1)*((uint16_t)(data_vec[(counter_conversion+counter_ADC)%len_vec]) - (uint32_t)(TCAL_30C))/(TS_diff))+(Const2);
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <ESPE_ADC_temp_conversion+0xa8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <ESPE_ADC_temp_conversion+0xb0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	441a      	add	r2, r3
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <ESPE_ADC_temp_conversion+0xb4>)
 8000d12:	fb83 1302 	smull	r1, r3, r3, r2
 8000d16:	1119      	asrs	r1, r3, #4
 8000d18:	17d3      	asrs	r3, r2, #31
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	2132      	movs	r1, #50	@ 0x32
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <ESPE_ADC_temp_conversion+0xb8>)
 8000d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <ESPE_ADC_temp_conversion+0xbc>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a1f      	ldr	r2, [pc, #124]	@ (8000db0 <ESPE_ADC_temp_conversion+0xc0>)
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	4a1e      	ldr	r2, [pc, #120]	@ (8000db4 <ESPE_ADC_temp_conversion+0xc4>)
 8000d3a:	8812      	ldrh	r2, [r2, #0]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <ESPE_ADC_temp_conversion+0xbc>)
 8000d40:	8812      	ldrh	r2, [r2, #0]
 8000d42:	1a8a      	subs	r2, r1, r2
 8000d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <ESPE_ADC_temp_conversion+0xa8>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <ESPE_ADC_temp_conversion+0xb0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	441a      	add	r2, r3
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <ESPE_ADC_temp_conversion+0xb4>)
 8000d58:	fb83 0302 	smull	r0, r3, r3, r2
 8000d5c:	1118      	asrs	r0, r3, #4
 8000d5e:	17d3      	asrs	r3, r2, #31
 8000d60:	1ac3      	subs	r3, r0, r3
 8000d62:	2032      	movs	r0, #50	@ 0x32
 8000d64:	fb00 f303 	mul.w	r3, r0, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000d6e:	440a      	add	r2, r1
 8000d70:	b291      	uxth	r1, r2
 8000d72:	4a11      	ldr	r2, [pc, #68]	@ (8000db8 <ESPE_ADC_temp_conversion+0xc8>)
 8000d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counter_conversion++;
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <ESPE_ADC_temp_conversion+0xa8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <ESPE_ADC_temp_conversion+0xa8>)
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e003      	b.n	8000d8e <ESPE_ADC_temp_conversion+0x9e>
	}else{
		flag_conversion = 1;
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <ESPE_ADC_temp_conversion+0xac>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]

	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	24000095 	.word	0x24000095
 8000d9c:	24000096 	.word	0x24000096
 8000da0:	24000094 	.word	0x24000094
 8000da4:	51eb851f 	.word	0x51eb851f
 8000da8:	24000098 	.word	0x24000098
 8000dac:	1ff1e820 	.word	0x1ff1e820
 8000db0:	00013880 	.word	0x00013880
 8000db4:	1ff1e840 	.word	0x1ff1e840
 8000db8:	24000100 	.word	0x24000100

08000dbc <ESPE_USART_init>:
uint16_t vector[len_vec];
char *point = (char *) (vector);
//Zona definizione variabili, vettori globali


void ESPE_USART_init(uint8_t flag_rec){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]

	//Accendo la trasmissione

	USART3 ->CR1 |= USART_CR1_TE;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	if( flag_rec){
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <ESPE_USART_init+0x36>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e005      	b.n	8000dfe <ESPE_USART_init+0x42>
	}else{
		USART3 -> CR1 |= USART_CR1_TCIE;
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dfc:	6013      	str	r3, [r2, #0]
	}
	//Abilito interruput ricezione/trasmissione

	//Accendo USART
	USART3 ->CR1 |= USART_CR1_UE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <ESPE_USART_init+0x5c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]

}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800

08000e1c <ESPE_USART_invert_mode>:

void ESPE_USART_invert_mode(void){
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	if(USART3 -> CR1 & USART_CR1_RXNEIE){
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00c      	beq.n	8000e46 <ESPE_USART_invert_mode+0x2a>
		USART3 -> CR1 &= ~USART_CR1_RXNEIE;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e32:	f023 0320 	bic.w	r3, r3, #32
 8000e36:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e42:	6013      	str	r3, [r2, #0]
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
		USART3 -> CR1 |= USART_CR1_RXNEIE;
		USART3 -> CR1 &= ~USART_CR1_TCIE;
	}
}
 8000e44:	e011      	b.n	8000e6a <ESPE_USART_invert_mode+0x4e>
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <ESPE_USART_invert_mode+0x4e>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 &= ~USART_CR1_TCIE;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <ESPE_USART_invert_mode+0x58>)
 8000e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40004800 	.word	0x40004800

08000e78 <ESPE_USART_char_start>:


//Zona definizione di funzioni
uint8_t ESPE_USART_char_start(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	f003 0320 	and.w	r3, r3, #32
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00b      	beq.n	8000ea0 <ESPE_USART_char_start+0x28>
		if ( USART3 -> RDR == char_trigger){
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	2b65      	cmp	r3, #101	@ 0x65
 8000e8e:	d107      	bne.n	8000ea0 <ESPE_USART_char_start+0x28>
			triggered = 1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <ESPE_USART_char_start+0x58>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			ESPE_USART_invert_mode();
 8000e96:	f7ff ffc1 	bl	8000e1c <ESPE_USART_invert_mode>
			count_pointer = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <ESPE_USART_char_start+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb6:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a03      	ldr	r2, [pc, #12]	@ (8000ecc <ESPE_USART_char_start+0x54>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	6193      	str	r3, [r2, #24]

	return triggered;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <ESPE_USART_char_start+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	240000fd 	.word	0x240000fd
 8000ed4:	240000fc 	.word	0x240000fc

08000ed8 <ESPE_USART_transmit_loop_vec>:
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione


}

void ESPE_USART_transmit_loop_vec(uint8_t start){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
 	if ( ((USART3->ISR & USART_ISR_TC) || count_pointer== 0) && (USART3 -> CR1 & USART_CR1_TCIE)){
 8000ee2:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <ESPE_USART_transmit_loop_vec+0x1e>
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d12d      	bne.n	8000f52 <ESPE_USART_transmit_loop_vec+0x7a>
 8000ef6:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d027      	beq.n	8000f52 <ESPE_USART_transmit_loop_vec+0x7a>
		if( count_pointer < lung_uint){
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b63      	cmp	r3, #99	@ 0x63
 8000f08:	d81a      	bhi.n	8000f40 <ESPE_USART_transmit_loop_vec+0x68>
			USART3 -> TDR = *(point+(( count_pointer + start )%lung_uint));
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <ESPE_USART_transmit_loop_vec+0xb4>)
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4413      	add	r3, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <ESPE_USART_transmit_loop_vec+0xb8>)
 8000f1c:	fba3 0302 	umull	r0, r3, r3, r2
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	fb00 f303 	mul.w	r3, r0, r3
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28
			count_pointer++;
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e008      	b.n	8000f52 <ESPE_USART_transmit_loop_vec+0x7a>
		}
		else{
			count_pointer = 0;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <ESPE_USART_transmit_loop_vec+0xb0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
			USART3 -> CR1 &= ~USART_CR1_TCIE;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f50:	6013      	str	r3, [r2, #0]
//		else USART3 -> CR1 ^= USART_CR1_TCIE;
	}

	//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
 	if( 1){
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f68:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ; //Azzeramento flag interrupt ricezione
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <ESPE_USART_transmit_loop_vec+0xac>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6193      	str	r3, [r2, #24]
 	}

}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40004800 	.word	0x40004800
 8000f88:	240000fc 	.word	0x240000fc
 8000f8c:	24000000 	.word	0x24000000
 8000f90:	51eb851f 	.word	0x51eb851f

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 fb2b 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern uint8_t end_read;
	trigger = ESPE_USART_char_start();
 800102c:	f7ff ff24 	bl	8000e78 <ESPE_USART_char_start>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <USART3_IRQHandler+0x2c>)
 8001036:	701a      	strb	r2, [r3, #0]
	if(end_read){
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <USART3_IRQHandler+0x30>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <USART3_IRQHandler+0x26>
		ESPE_ADC_temp_conversion();
 8001040:	f7ff fe56 	bl	8000cf0 <ESPE_ADC_temp_conversion>
		ESPE_USART_transmit_loop_vec(start_transmission);
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <USART3_IRQHandler+0x34>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff45 	bl	8000ed8 <ESPE_USART_transmit_loop_vec>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000164 	.word	0x24000164
 8001058:	24000097 	.word	0x24000097
 800105c:	24000165 	.word	0x24000165

08001060 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	extern uint8_t end_read;
	start_transmission = ESPE_ADC_loop_vec_read(trigger);
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <ADC3_IRQHandler+0x38>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fdff 	bl	8000c6c <ESPE_ADC_loop_vec_read>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <ADC3_IRQHandler+0x3c>)
 8001074:	701a      	strb	r2, [r3, #0]

	if(end_read){
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <ADC3_IRQHandler+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <ADC3_IRQHandler+0x2c>
			ESPE_ADC_temp_conversion();
 800107e:	f7ff fe37 	bl	8000cf0 <ESPE_ADC_temp_conversion>
			ESPE_USART_transmit_loop_vec(start_transmission);
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <ADC3_IRQHandler+0x3c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff26 	bl	8000ed8 <ESPE_USART_transmit_loop_vec>
	}
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <ADC3_IRQHandler+0x44>)
 800108e:	f000 feb3 	bl	8001df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000164 	.word	0x24000164
 800109c:	24000165 	.word	0x24000165
 80010a0:	24000097 	.word	0x24000097
 80010a4:	24000030 	.word	0x24000030

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ac:	4b37      	ldr	r3, [pc, #220]	@ (800118c <SystemInit+0xe4>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a36      	ldr	r2, [pc, #216]	@ (800118c <SystemInit+0xe4>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <SystemInit+0xe8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d807      	bhi.n	80010d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <SystemInit+0xe8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001190 <SystemInit+0xe8>)
 80010d2:	f043 0307 	orr.w	r3, r3, #7
 80010d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <SystemInit+0xec>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001194 <SystemInit+0xec>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <SystemInit+0xec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <SystemInit+0xec>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4929      	ldr	r1, [pc, #164]	@ (8001194 <SystemInit+0xec>)
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <SystemInit+0xf0>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <SystemInit+0xe8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001102:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemInit+0xe8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 030f 	bic.w	r3, r3, #15
 800110a:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <SystemInit+0xe8>)
 800110c:	f043 0307 	orr.w	r3, r3, #7
 8001110:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <SystemInit+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <SystemInit+0xec>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <SystemInit+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <SystemInit+0xec>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <SystemInit+0xf4>)
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <SystemInit+0xec>)
 800112c:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <SystemInit+0xf8>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <SystemInit+0xec>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	@ (80011a4 <SystemInit+0xfc>)
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <SystemInit+0xec>)
 800113e:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <SystemInit+0xfc>)
 8001140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <SystemInit+0xec>)
 800114a:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <SystemInit+0xfc>)
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <SystemInit+0xec>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <SystemInit+0xec>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <SystemInit+0xec>)
 8001162:	2200      	movs	r2, #0
 8001164:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <SystemInit+0x100>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <SystemInit+0x104>)
 800116c:	4013      	ands	r3, r2
 800116e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001172:	d202      	bcs.n	800117a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <SystemInit+0x108>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <SystemInit+0x10c>)
 800117c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001180:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	52002000 	.word	0x52002000
 8001194:	58024400 	.word	0x58024400
 8001198:	eaf6ed7f 	.word	0xeaf6ed7f
 800119c:	02020200 	.word	0x02020200
 80011a0:	01ff0000 	.word	0x01ff0000
 80011a4:	01010280 	.word	0x01010280
 80011a8:	5c001000 	.word	0x5c001000
 80011ac:	ffff0000 	.word	0xffff0000
 80011b0:	51008108 	.word	0x51008108
 80011b4:	52004000 	.word	0x52004000

080011b8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_TIM6_Init+0x64>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <MX_TIM6_Init+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_TIM6_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_TIM6_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_TIM6_Init+0x64>)
 80011dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_TIM6_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <MX_TIM6_Init+0x64>)
 80011ea:	f005 fe2f 	bl	8006e4c <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011f4:	f7ff fc94 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f8:	2320      	movs	r3, #32
 80011fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_TIM6_Init+0x64>)
 8001206:	f005 ff1f 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001210:	f7ff fc86 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24000168 	.word	0x24000168
 8001220:	40001000 	.word	0x40001000

08001224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_TIM_Base_MspInit+0x3c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10e      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_TIM_Base_MspInit+0x40>)
 8001238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800123c:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_TIM_Base_MspInit+0x40>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_TIM_Base_MspInit+0x40>)
 8001248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40001000 	.word	0x40001000
 8001264:	58024400 	.word	0x58024400

08001268 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 800126e:	4a23      	ldr	r2, [pc, #140]	@ (80012fc <MX_USART3_UART_Init+0x94>)
 8001270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 8001274:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b0:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012b2:	f005 ff57 	bl	8007164 <HAL_UART_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012bc:	f7ff fc30 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c0:	2100      	movs	r1, #0
 80012c2:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012c4:	f006 ff5f 	bl	8008186 <HAL_UARTEx_SetTxFifoThreshold>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012ce:	f7ff fc27 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012d6:	f006 ff94 	bl	8008202 <HAL_UARTEx_SetRxFifoThreshold>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012e0:	f7ff fc1e 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_USART3_UART_Init+0x90>)
 80012e6:	f006 ff15 	bl	8008114 <HAL_UARTEx_DisableFifoMode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012f0:	f7ff fc16 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	240001b4 	.word	0x240001b4
 80012fc:	40004800 	.word	0x40004800

08001300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ba      	sub	sp, #232	@ 0xe8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	22c0      	movs	r2, #192	@ 0xc0
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f007 fb02 	bl	800892a <memset>
  if(uartHandle->Instance==USART3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <HAL_UART_MspInit+0xd8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d14e      	bne.n	80013ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001330:	f04f 0202 	mov.w	r2, #2
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f882 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001352:	f7ff fbe5 	bl	8000b20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800135c:	4a1f      	ldr	r2, [pc, #124]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 800135e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001362:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800136c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_UART_MspInit+0xdc>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001392:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ac:	2307      	movs	r3, #7
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <HAL_UART_MspInit+0xe0>)
 80013ba:	f001 fd1f 	bl	8002dfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2027      	movs	r0, #39	@ 0x27
 80013c4:	f001 fce5 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013c8:	2027      	movs	r0, #39	@ 0x27
 80013ca:	f001 fcfc 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	37e8      	adds	r7, #232	@ 0xe8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40004800 	.word	0x40004800
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020c00 	.word	0x58020c00

080013e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80013ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013f0:	2209      	movs	r2, #9
 80013f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001402:	2202      	movs	r2, #2
 8001404:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001408:	2201      	movs	r2, #1
 800140a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140e:	2200      	movs	r2, #0
 8001410:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001414:	2200      	movs	r2, #0
 8001416:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141a:	2201      	movs	r2, #1
 800141c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001420:	2201      	movs	r2, #1
 8001422:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001426:	2200      	movs	r2, #0
 8001428:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142c:	f001 feaf 	bl	800318e <HAL_PCD_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001436:	f7ff fb73 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	24000248 	.word	0x24000248
 8001444:	40080000 	.word	0x40080000

08001448 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ba      	sub	sp, #232	@ 0xe8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	22c0      	movs	r2, #192	@ 0xc0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f007 fa5e 	bl	800892a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a30      	ldr	r2, [pc, #192]	@ (8001534 <HAL_PCD_MspInit+0xec>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d159      	bne.n	800152c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001478:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001484:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4618      	mov	r0, r3
 8001492:	f002 ffdd 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800149c:	f7ff fb40 	bl	8000b20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014a0:	f001 ffe0 	bl	8003464 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b4:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014dc:	230a      	movs	r3, #10
 80014de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <HAL_PCD_MspInit+0xf4>)
 80014ea:	f001 fc87 	bl	8002dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <HAL_PCD_MspInit+0xf4>)
 800150a:	f001 fc77 	bl	8002dfc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 8001510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001514:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 8001516:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800151a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_PCD_MspInit+0xf0>)
 8001520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800152c:	bf00      	nop
 800152e:	37e8      	adds	r7, #232	@ 0xe8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40080000 	.word	0x40080000
 8001538:	58024400 	.word	0x58024400
 800153c:	58020000 	.word	0x58020000

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001578 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001544:	f7ff fdb0 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	@ (8001580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	@ (800158c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f007 f9e5 	bl	800893c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fa0d 	bl	8000990 <main>
  bx  lr
 8001576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800157c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001580:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001584:	080089e4 	.word	0x080089e4
  ldr r2, =_sbss
 8001588:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800158c:	24000730 	.word	0x24000730

08001590 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159a:	2003      	movs	r0, #3
 800159c:	f001 fbee 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015a0:	f002 fd80 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_Init+0x68>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	4913      	ldr	r1, [pc, #76]	@ (8001600 <HAL_Init+0x6c>)
 80015b2:	5ccb      	ldrb	r3, [r1, r3]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_Init+0x68>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <HAL_Init+0x6c>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_Init+0x70>)
 80015d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_Init+0x74>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f814 	bl	800160c <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e002      	b.n	80015f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ee:	f7ff fcd1 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58024400 	.word	0x58024400
 8001600:	0800899c 	.word	0x0800899c
 8001604:	24000008 	.word	0x24000008
 8001608:	24000004 	.word	0x24000004

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_InitTick+0x60>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e021      	b.n	8001664 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_InitTick+0x64>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_InitTick+0x60>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fbd3 	bl	8002de2 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f001 fb9d 	bl	8002d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <HAL_InitTick+0x68>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24000010 	.word	0x24000010
 8001670:	24000004 	.word	0x24000004
 8001674:	2400000c 	.word	0x2400000c

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	24000010 	.word	0x24000010
 800169c:	2400072c 	.word	0x2400072c

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2400072c 	.word	0x2400072c

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000010 	.word	0x24000010

08001700 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetREVID+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0c1b      	lsrs	r3, r3, #16
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	5c001000 	.word	0x5c001000

08001718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3360      	adds	r3, #96	@ 0x60
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	@ 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
  }
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800184e:	b480      	push	{r7}
 8001850:	b087      	sub	sp, #28
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3330      	adds	r3, #48	@ 0x30
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	211f      	movs	r1, #31
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	f003 011f 	and.w	r1, r3, #31
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3314      	adds	r3, #20
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	0e5b      	lsrs	r3, r3, #25
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	0d1b      	lsrs	r3, r3, #20
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	2107      	movs	r1, #7
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	0d1b      	lsrs	r3, r3, #20
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0318 	and.w	r3, r3, #24
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001948:	40d9      	lsrs	r1, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	400b      	ands	r3, r1
 800194e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	000fffff 	.word	0x000fffff

0800196c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 031f 	and.w	r3, r3, #31
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6093      	str	r3, [r2, #8]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	5fffffc0 	.word	0x5fffffc0

080019c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <LL_ADC_EnableInternalRegulator+0x24>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	6fffffc0 	.word	0x6fffffc0

08001a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_IsEnabled+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_IsEnabled+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e18f      	b.n	8001dee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7fe fde5 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff67 	bl	80019c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff4d 	bl	80019a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff82 	bl	8001a18 <LL_ADC_IsInternalRegulatorEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d114      	bne.n	8001b44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff66 	bl	80019f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b24:	4b87      	ldr	r3, [pc, #540]	@ (8001d44 <HAL_ADC_Init+0x290>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	4a87      	ldr	r2, [pc, #540]	@ (8001d48 <HAL_ADC_Init+0x294>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff65 	bl	8001a18 <LL_ADC_IsInternalRegulatorEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff76 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001b7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 8129 	bne.w	8001ddc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 8125 	bne.w	8001ddc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff4a 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d136      	bne.n	8001c20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a65      	ldr	r2, [pc, #404]	@ (8001d4c <HAL_ADC_Init+0x298>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <HAL_ADC_Init+0x112>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a63      	ldr	r2, [pc, #396]	@ (8001d50 <HAL_ADC_Init+0x29c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10e      	bne.n	8001be4 <HAL_ADC_Init+0x130>
 8001bc6:	4861      	ldr	r0, [pc, #388]	@ (8001d4c <HAL_ADC_Init+0x298>)
 8001bc8:	f7ff ff3a 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4860      	ldr	r0, [pc, #384]	@ (8001d50 <HAL_ADC_Init+0x29c>)
 8001bd0:	f7ff ff36 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4323      	orrs	r3, r4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e008      	b.n	8001bf6 <HAL_ADC_Init+0x142>
 8001be4:	485b      	ldr	r0, [pc, #364]	@ (8001d54 <HAL_ADC_Init+0x2a0>)
 8001be6:	f7ff ff2b 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d012      	beq.n	8001c20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a53      	ldr	r2, [pc, #332]	@ (8001d4c <HAL_ADC_Init+0x298>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Init+0x15a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a51      	ldr	r2, [pc, #324]	@ (8001d50 <HAL_ADC_Init+0x29c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x15e>
 8001c0e:	4a52      	ldr	r2, [pc, #328]	@ (8001d58 <HAL_ADC_Init+0x2a4>)
 8001c10:	e000      	b.n	8001c14 <HAL_ADC_Init+0x160>
 8001c12:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_ADC_Init+0x2a8>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f7ff fd7c 	bl	8001718 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c20:	f7ff fd6e 	bl	8001700 <HAL_GetREVID>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d914      	bls.n	8001c58 <HAL_ADC_Init+0x1a4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d110      	bne.n	8001c58 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7d5b      	ldrb	r3, [r3, #21]
 8001c3a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c40:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7f1b      	ldrb	r3, [r3, #28]
 8001c4c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c4e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c50:	f043 030c 	orr.w	r3, r3, #12
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e00d      	b.n	8001c74 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7d5b      	ldrb	r3, [r3, #21]
 8001c5c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c62:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c68:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7f1b      	ldrb	r3, [r3, #28]
 8001c6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7f1b      	ldrb	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	045b      	lsls	r3, r3, #17
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <HAL_ADC_Init+0x2ac>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fed1 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fede 	bl	8001a8c <LL_ADC_INJ_IsConversionOngoing>
 8001cd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d15f      	bne.n	8001d98 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d15c      	bne.n	8001d98 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7d1b      	ldrb	r3, [r3, #20]
 8001ce2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_ADC_Init+0x2b0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d130      	bne.n	8001d6c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_ADC_Init+0x2b4>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	0411      	lsls	r1, r2, #16
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d32:	430a      	orrs	r2, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e01c      	b.n	8001d7c <HAL_ADC_Init+0x2c8>
 8001d42:	bf00      	nop
 8001d44:	24000004 	.word	0x24000004
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40022100 	.word	0x40022100
 8001d54:	58026000 	.word	0x58026000
 8001d58:	40022300 	.word	0x40022300
 8001d5c:	58026300 	.word	0x58026300
 8001d60:	fff0c003 	.word	0xfff0c003
 8001d64:	ffffbffc 	.word	0xffffbffc
 8001d68:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fde4 	bl	8002960 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10c      	bne.n	8001dba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f023 010f 	bic.w	r1, r3, #15
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db8:	e007      	b.n	8001dca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 020f 	bic.w	r2, r2, #15
 8001dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dda:	e007      	b.n	8001dec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop

08001df8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a87      	ldr	r2, [pc, #540]	@ (8002038 <HAL_ADC_IRQHandler+0x240>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x30>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a86      	ldr	r2, [pc, #536]	@ (800203c <HAL_ADC_IRQHandler+0x244>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x34>
 8001e28:	4b85      	ldr	r3, [pc, #532]	@ (8002040 <HAL_ADC_IRQHandler+0x248>)
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_IRQHandler+0x36>
 8001e2c:	4b85      	ldr	r3, [pc, #532]	@ (8002044 <HAL_ADC_IRQHandler+0x24c>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fd9c 	bl	800196c <LL_ADC_GetMultimode>
 8001e34:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x78>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 feb0 	bl	8002bc8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x8c>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8083 	beq.w	8001f96 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d07d      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fcb6 	bl	8001828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d062      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800203c <HAL_ADC_IRQHandler+0x244>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d002      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0xda>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	e000      	b.n	8001ed4 <HAL_ADC_IRQHandler+0xdc>
 8001ed2:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_ADC_IRQHandler+0x240>)
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d008      	beq.n	8001eee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d002      	beq.n	8001eee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d104      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	e00c      	b.n	8001f12 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <HAL_ADC_IRQHandler+0x244>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d002      	beq.n	8001f08 <HAL_ADC_IRQHandler+0x110>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e000      	b.n	8001f0a <HAL_ADC_IRQHandler+0x112>
 8001f08:	4b4b      	ldr	r3, [pc, #300]	@ (8002038 <HAL_ADC_IRQHandler+0x240>)
 8001f0a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d135      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d12e      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd99 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11a      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 020c 	bic.w	r2, r2, #12
 8001f48:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d112      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f6e:	e00b      	b.n	8001f88 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f96f 	bl	800226c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_ADC_IRQHandler+0x1b2>
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a0 	beq.w	80020f6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 809a 	beq.w	80020f6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fc61 	bl	80018a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fe4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fc1c 	bl	8001828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_ADC_IRQHandler+0x244>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_IRQHandler+0x20a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e000      	b.n	8002004 <HAL_ADC_IRQHandler+0x20c>
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_ADC_IRQHandler+0x240>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d008      	beq.n	800201e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d002      	beq.n	800201e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b07      	cmp	r3, #7
 800201c:	d104      	bne.n	8002028 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	e014      	b.n	8002052 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a03      	ldr	r2, [pc, #12]	@ (800203c <HAL_ADC_IRQHandler+0x244>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00a      	beq.n	8002048 <HAL_ADC_IRQHandler+0x250>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e008      	b.n	800204a <HAL_ADC_IRQHandler+0x252>
 8002038:	40022000 	.word	0x40022000
 800203c:	40022100 	.word	0x40022100
 8002040:	40022300 	.word	0x40022300
 8002044:	58026300 	.word	0x58026300
 8002048:	4b84      	ldr	r3, [pc, #528]	@ (800225c <HAL_ADC_IRQHandler+0x464>)
 800204a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d047      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_IRQHandler+0x27a>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03f      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d13a      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b40      	cmp	r3, #64	@ 0x40
 800207e:	d133      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d12e      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fcfc 	bl	8001a8c <LL_ADC_INJ_IsConversionOngoing>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11a      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80020ce:	e00b      	b.n	80020e8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fd45 	bl	8002b78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2260      	movs	r2, #96	@ 0x60
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d011      	beq.n	8002124 <HAL_ADC_IRQHandler+0x32c>
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8b2 	bl	8002280 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2280      	movs	r2, #128	@ 0x80
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_ADC_IRQHandler+0x35c>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fd2b 	bl	8002ba0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002152:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_ADC_IRQHandler+0x38c>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fd1d 	bl	8002bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d043      	beq.n	8002216 <HAL_ADC_IRQHandler+0x41e>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03e      	beq.n	8002216 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a4:	e021      	b.n	80021ea <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2a      	ldr	r2, [pc, #168]	@ (800225c <HAL_ADC_IRQHandler+0x464>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x3c8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_ADC_IRQHandler+0x468>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x3cc>
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_ADC_IRQHandler+0x46c>)
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_IRQHandler+0x3ce>
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_ADC_IRQHandler+0x470>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fbde 	bl	8001988 <LL_ADC_GetMultiDMATransfer>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d6:	e008      	b.n	80021ea <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10e      	bne.n	800220e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f843 	bl	8002294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2210      	movs	r2, #16
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_ADC_IRQHandler+0x45a>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d013      	beq.n	8002252 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f043 0208 	orr.w	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800224a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fc9d 	bl	8002b8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	@ 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000
 8002260:	40022100 	.word	0x40022100
 8002264:	40022300 	.word	0x40022300
 8002268:	58026300 	.word	0x58026300

0800226c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b0a1      	sub	sp, #132	@ 0x84
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_ADC_ConfigChannel+0x1b0>)
 80022c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x2a>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e32e      	b.n	8002930 <HAL_ADC_ConfigChannel+0x688>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fbc1 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8313 	bne.w	8002912 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db2c      	blt.n	800234e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x6a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	e016      	b.n	8002340 <HAL_ADC_ConfigChannel+0x98>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002322:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800232e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	69d1      	ldr	r1, [r2, #28]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	430b      	orrs	r3, r1
 800234c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fa77 	bl	800184e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fb7e 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 800236a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fb8b 	bl	8001a8c <LL_ADC_INJ_IsConversionOngoing>
 8002376:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 80b8 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80b4 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff fa99 	bl	80018cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800239a:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_ADC_ConfigChannel+0x1b4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x118>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	e01d      	b.n	80023fc <HAL_ADC_ConfigChannel+0x154>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x13e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	e00a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x154>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d02c      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002414:	f7ff f9b4 	bl	8001780 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7e5b      	ldrb	r3, [r3, #25]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_ADC_ConfigChannel+0x186>
 8002428:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x188>
 800242e:	2300      	movs	r3, #0
 8002430:	461a      	mov	r2, r3
 8002432:	f7ff f9de 	bl	80017f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1a4>
 8002446:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800244a:	e000      	b.n	800244e <HAL_ADC_ConfigChannel+0x1a6>
 800244c:	2300      	movs	r3, #0
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff f9b6 	bl	80017c0 <LL_ADC_SetDataRightShift>
 8002454:	e04c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x248>
 8002456:	bf00      	nop
 8002458:	47ff0000 	.word	0x47ff0000
 800245c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002482:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff faa3 	bl	8001a40 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8211 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff fa08 	bl	8001924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4aa1      	ldr	r2, [pc, #644]	@ (80027a0 <HAL_ADC_ConfigChannel+0x4f8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 812e 	bne.w	800277c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x2a0>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b09      	cmp	r3, #9
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e019      	b.n	800257c <HAL_ADC_ConfigChannel+0x2d4>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800255a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b09      	cmp	r3, #9
 8002574:	bf94      	ite	ls
 8002576:	2301      	movls	r3, #1
 8002578:	2300      	movhi	r3, #0
 800257a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257c:	2b00      	cmp	r3, #0
 800257e:	d079      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2f4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800259a:	e015      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x320>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80025b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x340>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	e017      	b.n	8002618 <HAL_ADC_ConfigChannel+0x370>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	ea42 0103 	orr.w	r1, r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_ADC_ConfigChannel+0x396>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	051b      	lsls	r3, r3, #20
 800263c:	e018      	b.n	8002670 <HAL_ADC_ConfigChannel+0x3c8>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800264c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
 8002672:	e07e      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3e8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800268e:	e015      	b.n	80026bc <HAL_ADC_ConfigChannel+0x414>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80026ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x434>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	e017      	b.n	800270c <HAL_ADC_ConfigChannel+0x464>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x490>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	3b1e      	subs	r3, #30
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002736:	e01b      	b.n	8002770 <HAL_ADC_ConfigChannel+0x4c8>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	60fb      	str	r3, [r7, #12]
  return result;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	3b1e      	subs	r3, #30
 800276a:	051b      	lsls	r3, r3, #20
 800276c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002770:	430b      	orrs	r3, r1
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	4619      	mov	r1, r3
 8002778:	f7ff f8a8 	bl	80018cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f280 80cf 	bge.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_ADC_ConfigChannel+0x4fc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_ADC_ConfigChannel+0x4f2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_ADC_ConfigChannel+0x500>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x508>
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <HAL_ADC_ConfigChannel+0x504>)
 800279c:	e009      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x50a>
 800279e:	bf00      	nop
 80027a0:	47ff0000 	.word	0x47ff0000
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40022100 	.word	0x40022100
 80027ac:	40022300 	.word	0x40022300
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe ffd6 	bl	8001764 <LL_ADC_GetCommonPathInternalCh>
 80027b8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5f      	ldr	r2, [pc, #380]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x526>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10e      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x544>
 80027ce:	485b      	ldr	r0, [pc, #364]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80027d0:	f7ff f936 	bl	8001a40 <LL_ADC_IsEnabled>
 80027d4:	4604      	mov	r4, r0
 80027d6:	485a      	ldr	r0, [pc, #360]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80027d8:	f7ff f932 	bl	8001a40 <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	4323      	orrs	r3, r4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e008      	b.n	80027fe <HAL_ADC_ConfigChannel+0x556>
 80027ec:	4855      	ldr	r0, [pc, #340]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 80027ee:	f7ff f927 	bl	8001a40 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07d      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_ADC_ConfigChannel+0x6a0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d130      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5c6>
 800280c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800280e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4a      	ldr	r2, [pc, #296]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	f040 8081 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a45      	ldr	r2, [pc, #276]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x58e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x592>
 8002836:	4a45      	ldr	r2, [pc, #276]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 8002838:	e000      	b.n	800283c <HAL_ADC_ConfigChannel+0x594>
 800283a:	4a3f      	ldr	r2, [pc, #252]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7fe ff7a 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284a:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_ADC_ConfigChannel+0x6a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <HAL_ADC_ConfigChannel+0x6ac>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	3301      	adds	r3, #1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800285e:	e002      	b.n	8002866 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	3b01      	subs	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286c:	e05a      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_ADC_ConfigChannel+0x6b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d11e      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x60e>
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2f      	ldr	r2, [pc, #188]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d14b      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x5f8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5fc>
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x5fe>
 80028a4:	4a24      	ldr	r2, [pc, #144]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80028a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe ff45 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b4:	e036      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a28      	ldr	r2, [pc, #160]	@ (800295c <HAL_ADC_ConfigChannel+0x6b4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d131      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
 80028c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12c      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d127      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x640>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x644>
 80028e8:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x646>
 80028ec:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80028ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe ff21 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
 80028fc:	e012      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002910:	e008      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800292c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002930:	4618      	mov	r0, r3
 8002932:	3784      	adds	r7, #132	@ 0x84
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	58026300 	.word	0x58026300
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	58026000 	.word	0x58026000
 8002948:	cb840000 	.word	0xcb840000
 800294c:	40022300 	.word	0x40022300
 8002950:	24000004 	.word	0x24000004
 8002954:	053e2d63 	.word	0x053e2d63
 8002958:	c7520000 	.word	0xc7520000
 800295c:	cfb80000 	.word	0xcfb80000

08002960 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b58 <ADC_ConfigureBoostMode+0x1f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <ADC_ConfigureBoostMode+0x1c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a79      	ldr	r2, [pc, #484]	@ (8002b5c <ADC_ConfigureBoostMode+0x1fc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d109      	bne.n	8002990 <ADC_ConfigureBoostMode+0x30>
 800297c:	4b78      	ldr	r3, [pc, #480]	@ (8002b60 <ADC_ConfigureBoostMode+0x200>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e008      	b.n	80029a2 <ADC_ConfigureBoostMode+0x42>
 8002990:	4b74      	ldr	r3, [pc, #464]	@ (8002b64 <ADC_ConfigureBoostMode+0x204>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01c      	beq.n	80029e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029a6:	f001 fcf7 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80029aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029b4:	d010      	beq.n	80029d8 <ADC_ConfigureBoostMode+0x78>
 80029b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029ba:	d873      	bhi.n	8002aa4 <ADC_ConfigureBoostMode+0x144>
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d002      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x68>
 80029c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029c6:	d16d      	bne.n	8002aa4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	60fb      	str	r3, [r7, #12]
        break;
 80029d6:	e068      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	60fb      	str	r3, [r7, #12]
        break;
 80029de:	e064      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f002 ff3c 	bl	8005864 <HAL_RCCEx_GetPeriphCLKFreq>
 80029ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029f6:	d051      	beq.n	8002a9c <ADC_ConfigureBoostMode+0x13c>
 80029f8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029fc:	d854      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a02:	d047      	beq.n	8002a94 <ADC_ConfigureBoostMode+0x134>
 8002a04:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a08:	d84e      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a0e:	d03d      	beq.n	8002a8c <ADC_ConfigureBoostMode+0x12c>
 8002a10:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a14:	d848      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a1a:	d033      	beq.n	8002a84 <ADC_ConfigureBoostMode+0x124>
 8002a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a20:	d842      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a26:	d029      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x11c>
 8002a28:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a2c:	d83c      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a32:	d01a      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a34:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a38:	d836      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a3e:	d014      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a40:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a44:	d830      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4a:	d00e      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a50:	d82a      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a56:	d008      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a5c:	d824      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a62:	d002      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a68:	d11e      	bne.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e016      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
        break;
 8002a82:	e012      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	60fb      	str	r3, [r7, #12]
        break;
 8002a8a:	e00e      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	60fb      	str	r3, [r7, #12]
        break;
 8002a92:	e00a      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
        break;
 8002a9a:	e006      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	60fb      	str	r3, [r7, #12]
        break;
 8002aa2:	e002      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002aa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002aaa:	f7fe fe29 	bl	8001700 <HAL_GetREVID>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d815      	bhi.n	8002ae4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a2b      	ldr	r2, [pc, #172]	@ (8002b68 <ADC_ConfigureBoostMode+0x208>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d908      	bls.n	8002ad2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ace:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ad0:	e03e      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae0:	609a      	str	r2, [r3, #8]
}
 8002ae2:	e035      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <ADC_ConfigureBoostMode+0x20c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d808      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e025      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a1a      	ldr	r2, [pc, #104]	@ (8002b70 <ADC_ConfigureBoostMode+0x210>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d80a      	bhi.n	8002b22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e016      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <ADC_ConfigureBoostMode+0x214>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d80a      	bhi.n	8002b40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	e007      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022100 	.word	0x40022100
 8002b60:	40022300 	.word	0x40022300
 8002b64:	58026300 	.word	0x58026300
 8002b68:	01312d00 	.word	0x01312d00
 8002b6c:	005f5e10 	.word	0x005f5e10
 8002b70:	00bebc20 	.word	0x00bebc20
 8002b74:	017d7840 	.word	0x017d7840

08002b78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x40>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x40>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	05fa0000 	.word	0x05fa0000

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	@ (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff8e 	bl	8002c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff29 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002da0:	f7ff ff40 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7ff ff90 	bl	8002cd0 <NVIC_EncodePriority>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff5f 	bl	8002c7c <__NVIC_SetPriority>
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff33 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffa4 	bl	8002d38 <SysTick_Config>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e0a:	4b89      	ldr	r3, [pc, #548]	@ (8003030 <HAL_GPIO_Init+0x234>)
 8002e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e0e:	e194      	b.n	800313a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8186 	beq.w	8003134 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d005      	beq.n	8002e40 <HAL_GPIO_Init+0x44>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d130      	bne.n	8002ea2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e76:	2201      	movs	r2, #1
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0201 	and.w	r2, r3, #1
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d017      	beq.n	8002ede <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	2203      	movs	r2, #3
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d123      	bne.n	8002f32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	69b9      	ldr	r1, [r7, #24]
 8002f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80e0 	beq.w	8003134 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f74:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_GPIO_Init+0x238>)
 8002f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <HAL_GPIO_Init+0x238>)
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_GPIO_Init+0x238>)
 8002f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f92:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <HAL_GPIO_Init+0x23c>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a20      	ldr	r2, [pc, #128]	@ (800303c <HAL_GPIO_Init+0x240>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d052      	beq.n	8003064 <HAL_GPIO_Init+0x268>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <HAL_GPIO_Init+0x244>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_GPIO_Init+0x22e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_GPIO_Init+0x248>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02b      	beq.n	8003026 <HAL_GPIO_Init+0x22a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_GPIO_Init+0x24c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d025      	beq.n	8003022 <HAL_GPIO_Init+0x226>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <HAL_GPIO_Init+0x250>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01f      	beq.n	800301e <HAL_GPIO_Init+0x222>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8003050 <HAL_GPIO_Init+0x254>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x21e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <HAL_GPIO_Init+0x258>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x21a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_GPIO_Init+0x25c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x216>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	@ (800305c <HAL_GPIO_Init+0x260>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x212>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <HAL_GPIO_Init+0x264>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x20e>
 8003006:	2309      	movs	r3, #9
 8003008:	e02d      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800300a:	230a      	movs	r3, #10
 800300c:	e02b      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800300e:	2308      	movs	r3, #8
 8003010:	e029      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 8003012:	2307      	movs	r3, #7
 8003014:	e027      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 8003016:	2306      	movs	r3, #6
 8003018:	e025      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800301a:	2305      	movs	r3, #5
 800301c:	e023      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800301e:	2304      	movs	r3, #4
 8003020:	e021      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 8003022:	2303      	movs	r3, #3
 8003024:	e01f      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 8003026:	2302      	movs	r3, #2
 8003028:	e01d      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800302a:	2301      	movs	r3, #1
 800302c:	e01b      	b.n	8003066 <HAL_GPIO_Init+0x26a>
 800302e:	bf00      	nop
 8003030:	58000080 	.word	0x58000080
 8003034:	58024400 	.word	0x58024400
 8003038:	58000400 	.word	0x58000400
 800303c:	58020000 	.word	0x58020000
 8003040:	58020400 	.word	0x58020400
 8003044:	58020800 	.word	0x58020800
 8003048:	58020c00 	.word	0x58020c00
 800304c:	58021000 	.word	0x58021000
 8003050:	58021400 	.word	0x58021400
 8003054:	58021800 	.word	0x58021800
 8003058:	58021c00 	.word	0x58021c00
 800305c:	58022000 	.word	0x58022000
 8003060:	58022400 	.word	0x58022400
 8003064:	2300      	movs	r3, #0
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	f002 0203 	and.w	r2, r2, #3
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	4093      	lsls	r3, r2
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003076:	4938      	ldr	r1, [pc, #224]	@ (8003158 <HAL_GPIO_Init+0x35c>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f ae63 	bne.w	8002e10 <HAL_GPIO_Init+0x14>
  }
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	3724      	adds	r7, #36	@ 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	58000400 	.word	0x58000400

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af02      	add	r7, sp, #8
 8003194:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0fe      	b.n	800339e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fe f947 	bl	8001448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 f91a 	bl	8008400 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7c1a      	ldrb	r2, [r3, #16]
 80031d4:	f88d 2000 	strb.w	r2, [sp]
 80031d8:	3304      	adds	r3, #4
 80031da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031dc:	f005 f89e 	bl	800831c <USB_CoreInit>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0d5      	b.n	800339e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f005 f912 	bl	8008422 <USB_SetCurrentMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0c6      	b.n	800339e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e04a      	b.n	80032ac <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3315      	adds	r3, #21
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3314      	adds	r3, #20
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	b298      	uxth	r0, r3
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	332e      	adds	r3, #46	@ 0x2e
 8003252:	4602      	mov	r2, r0
 8003254:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3318      	adds	r3, #24
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	331c      	adds	r3, #28
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3320      	adds	r3, #32
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3324      	adds	r3, #36	@ 0x24
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	3301      	adds	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	791b      	ldrb	r3, [r3, #4]
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3af      	bcc.n	8003216 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e044      	b.n	8003346 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3301      	adds	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	429a      	cmp	r2, r3
 800334e:	d3b5      	bcc.n	80032bc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7c1a      	ldrb	r2, [r3, #16]
 8003358:	f88d 2000 	strb.w	r2, [sp]
 800335c:	3304      	adds	r3, #4
 800335e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003360:	f005 f8ac 	bl	80084bc <USB_DevInit>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e013      	b.n	800339e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7b1b      	ldrb	r3, [r3, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f80b 	bl	80033a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fa67 	bl	800886a <USB_DevDisconnect>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_PCDEx_ActivateLPM+0x44>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	10000003 	.word	0x10000003

080033f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00a      	beq.n	800341a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01f      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e01d      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800341a:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	490f      	ldr	r1, [pc, #60]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4313      	orrs	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800342a:	f7fe f939 	bl	80016a0 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003432:	f7fe f935 	bl	80016a0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003440:	d901      	bls.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003452:	d1ee      	bne.n	8003432 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024800 	.word	0x58024800

08003464 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	58024800 	.word	0x58024800

08003484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	@ 0x30
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f000 bc48 	b.w	8003d28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8088 	beq.w	80035b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a6:	4b99      	ldr	r3, [pc, #612]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034b0:	4b96      	ldr	r3, [pc, #600]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d007      	beq.n	80034cc <HAL_RCC_OscConfig+0x48>
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034be:	2b18      	cmp	r3, #24
 80034c0:	d111      	bne.n	80034e6 <HAL_RCC_OscConfig+0x62>
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b8f      	ldr	r3, [pc, #572]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d06d      	beq.n	80035b4 <HAL_RCC_OscConfig+0x130>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d169      	bne.n	80035b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f000 bc21 	b.w	8003d28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x7a>
 80034f0:	4b86      	ldr	r3, [pc, #536]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a85      	ldr	r2, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80034f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	e02e      	b.n	800355c <HAL_RCC_OscConfig+0xd8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x9c>
 8003506:	4b81      	ldr	r3, [pc, #516]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a80      	ldr	r2, [pc, #512]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800350c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b7e      	ldr	r3, [pc, #504]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7d      	ldr	r2, [pc, #500]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003518:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e01d      	b.n	800355c <HAL_RCC_OscConfig+0xd8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0xc0>
 800352a:	4b78      	ldr	r3, [pc, #480]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a77      	ldr	r2, [pc, #476]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b75      	ldr	r3, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a74      	ldr	r2, [pc, #464]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e00b      	b.n	800355c <HAL_RCC_OscConfig+0xd8>
 8003544:	4b71      	ldr	r3, [pc, #452]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a70      	ldr	r2, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b6e      	ldr	r3, [pc, #440]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6d      	ldr	r2, [pc, #436]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe f89c 	bl	80016a0 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe f898 	bl	80016a0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e3d4      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800357e:	4b63      	ldr	r3, [pc, #396]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0xe8>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe f888 	bl	80016a0 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe f884 	bl	80016a0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e3c0      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035a6:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x110>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80ca 	beq.w	8003758 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c4:	4b51      	ldr	r3, [pc, #324]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ce:	4b4f      	ldr	r3, [pc, #316]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_RCC_OscConfig+0x166>
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b18      	cmp	r3, #24
 80035de:	d156      	bne.n	800368e <HAL_RCC_OscConfig+0x20a>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d151      	bne.n	800368e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ea:	4b48      	ldr	r3, [pc, #288]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x17e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e392      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003602:	4b42      	ldr	r3, [pc, #264]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0219 	bic.w	r2, r3, #25
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	493f      	ldr	r1, [pc, #252]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe f844 	bl	80016a0 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7fe f840 	bl	80016a0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e37c      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800362e:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	f7fe f861 	bl	8001700 <HAL_GetREVID>
 800363e:	4603      	mov	r3, r0
 8003640:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003644:	4293      	cmp	r3, r2
 8003646:	d817      	bhi.n	8003678 <HAL_RCC_OscConfig+0x1f4>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d108      	bne.n	8003662 <HAL_RCC_OscConfig+0x1de>
 8003650:	4b2e      	ldr	r3, [pc, #184]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003658:	4a2c      	ldr	r2, [pc, #176]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	e07a      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b2a      	ldr	r3, [pc, #168]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	031b      	lsls	r3, r3, #12
 8003670:	4926      	ldr	r1, [pc, #152]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003676:	e06f      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b24      	ldr	r3, [pc, #144]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	4921      	ldr	r1, [pc, #132]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	e064      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d047      	beq.n	8003726 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003696:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0219 	bic.w	r2, r3, #25
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	491a      	ldr	r1, [pc, #104]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fd fffa 	bl	80016a0 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fd fff6 	bl	80016a0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e332      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	f7fe f817 	bl	8001700 <HAL_GetREVID>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036d8:	4293      	cmp	r3, r2
 80036da:	d819      	bhi.n	8003710 <HAL_RCC_OscConfig+0x28c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d108      	bne.n	80036f6 <HAL_RCC_OscConfig+0x272>
 80036e4:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80036ec:	4a07      	ldr	r2, [pc, #28]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e030      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
 80036f6:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	031b      	lsls	r3, r3, #12
 8003704:	4901      	ldr	r1, [pc, #4]	@ (800370c <HAL_RCC_OscConfig+0x288>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
 800370a:	e025      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
 800370c:	58024400 	.word	0x58024400
 8003710:	4b9a      	ldr	r3, [pc, #616]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	4997      	ldr	r1, [pc, #604]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
 8003724:	e018      	b.n	8003758 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b95      	ldr	r3, [pc, #596]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a94      	ldr	r2, [pc, #592]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fd ffb5 	bl	80016a0 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373a:	f7fd ffb1 	bl	80016a0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e2ed      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800374c:	4b8b      	ldr	r3, [pc, #556]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a9 	beq.w	80038b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4b85      	ldr	r3, [pc, #532]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800376e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003770:	4b82      	ldr	r3, [pc, #520]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d007      	beq.n	800378c <HAL_RCC_OscConfig+0x308>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b18      	cmp	r3, #24
 8003780:	d13a      	bne.n	80037f8 <HAL_RCC_OscConfig+0x374>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d135      	bne.n	80037f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800378c:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_OscConfig+0x320>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b80      	cmp	r3, #128	@ 0x80
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e2c1      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037a4:	f7fd ffac 	bl	8001700 <HAL_GetREVID>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d817      	bhi.n	80037e2 <HAL_RCC_OscConfig+0x35e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0x348>
 80037ba:	4b70      	ldr	r3, [pc, #448]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80037c2:	4a6e      	ldr	r2, [pc, #440]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ca:	e075      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037cc:	4b6b      	ldr	r3, [pc, #428]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	4968      	ldr	r1, [pc, #416]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037e0:	e06a      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e2:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	4962      	ldr	r1, [pc, #392]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037f6:	e05f      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d042      	beq.n	8003886 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003800:	4b5e      	ldr	r3, [pc, #376]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5d      	ldr	r2, [pc, #372]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd ff48 	bl	80016a0 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003814:	f7fd ff44 	bl	80016a0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e280      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003826:	4b55      	ldr	r3, [pc, #340]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003832:	f7fd ff65 	bl	8001700 <HAL_GetREVID>
 8003836:	4603      	mov	r3, r0
 8003838:	f241 0203 	movw	r2, #4099	@ 0x1003
 800383c:	4293      	cmp	r3, r2
 800383e:	d817      	bhi.n	8003870 <HAL_RCC_OscConfig+0x3ec>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	2b20      	cmp	r3, #32
 8003846:	d108      	bne.n	800385a <HAL_RCC_OscConfig+0x3d6>
 8003848:	4b4c      	ldr	r3, [pc, #304]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003850:	4a4a      	ldr	r2, [pc, #296]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003852:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003856:	6053      	str	r3, [r2, #4]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
 800385a:	4b48      	ldr	r3, [pc, #288]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	069b      	lsls	r3, r3, #26
 8003868:	4944      	ldr	r1, [pc, #272]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	e023      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
 8003870:	4b42      	ldr	r3, [pc, #264]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	493f      	ldr	r1, [pc, #252]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
 8003884:	e018      	b.n	80038b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003886:	4b3d      	ldr	r3, [pc, #244]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3c      	ldr	r2, [pc, #240]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800388c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fd ff05 	bl	80016a0 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800389a:	f7fd ff01 	bl	80016a0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e23d      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038ac:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d036      	beq.n	8003932 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fd fee2 	bl	80016a0 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fd fede 	bl	80016a0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e21a      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038f2:	4b22      	ldr	r3, [pc, #136]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x45c>
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fec8 	bl	80016a0 <HAL_GetTick>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7fd fec4 	bl	80016a0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e200      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003926:	4b15      	ldr	r3, [pc, #84]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d039      	beq.n	80039b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01c      	beq.n	8003980 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800394c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003950:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003952:	f7fd fea5 	bl	80016a0 <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395a:	f7fd fea1 	bl	80016a0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1dd      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <HAL_RCC_OscConfig+0x4f8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x4d6>
 8003978:	e01b      	b.n	80039b2 <HAL_RCC_OscConfig+0x52e>
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003980:	4b9b      	ldr	r3, [pc, #620]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a9a      	ldr	r2, [pc, #616]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800398a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800398c:	f7fd fe88 	bl	80016a0 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003994:	f7fd fe84 	bl	80016a0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1c0      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039a6:	4b92      	ldr	r3, [pc, #584]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8081 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c0:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf4 <HAL_RCC_OscConfig+0x770>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a8b      	ldr	r2, [pc, #556]	@ (8003bf4 <HAL_RCC_OscConfig+0x770>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039cc:	f7fd fe68 	bl	80016a0 <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fd fe64 	bl	80016a0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1a0      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e6:	4b83      	ldr	r3, [pc, #524]	@ (8003bf4 <HAL_RCC_OscConfig+0x770>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x584>
 80039fa:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fe:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a06:	e02d      	b.n	8003a64 <HAL_RCC_OscConfig+0x5e0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5a6>
 8003a10:	4b77      	ldr	r3, [pc, #476]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a76      	ldr	r2, [pc, #472]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	4b74      	ldr	r3, [pc, #464]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a73      	ldr	r2, [pc, #460]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a28:	e01c      	b.n	8003a64 <HAL_RCC_OscConfig+0x5e0>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x5c8>
 8003a32:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0x5e0>
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	4a67      	ldr	r2, [pc, #412]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a58:	4b65      	ldr	r3, [pc, #404]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	4a64      	ldr	r2, [pc, #400]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fe18 	bl	80016a0 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fe14 	bl	80016a0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e14e      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a8a:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ee      	beq.n	8003a74 <HAL_RCC_OscConfig+0x5f0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fe02 	bl	80016a0 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fdfe 	bl	80016a0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e138      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 812d 	beq.w	8003d26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003acc:	4b48      	ldr	r3, [pc, #288]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ad4:	2b18      	cmp	r3, #24
 8003ad6:	f000 80bd 	beq.w	8003c54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 809e 	bne.w	8003c20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b42      	ldr	r3, [pc, #264]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a41      	ldr	r2, [pc, #260]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fdd6 	bl	80016a0 <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fdd2 	bl	80016a0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e10e      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0a:	4b39      	ldr	r3, [pc, #228]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b16:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b1a:	4b37      	ldr	r3, [pc, #220]	@ (8003bf8 <HAL_RCC_OscConfig+0x774>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4931      	ldr	r1, [pc, #196]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	3b01      	subs	r3, #1
 8003b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	061b      	lsls	r3, r3, #24
 8003b5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b60:	4923      	ldr	r1, [pc, #140]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b66:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b76:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <HAL_RCC_OscConfig+0x778>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b7e:	00d2      	lsls	r2, r2, #3
 8003b80:	491b      	ldr	r1, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b86:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	f023 020c 	bic.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	4917      	ldr	r1, [pc, #92]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b98:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f023 0202 	bic.w	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	4912      	ldr	r1, [pc, #72]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bda:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <HAL_RCC_OscConfig+0x76c>)
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fd5b 	bl	80016a0 <HAL_GetTick>
 8003bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bec:	e011      	b.n	8003c12 <HAL_RCC_OscConfig+0x78e>
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	58024800 	.word	0x58024800
 8003bf8:	fffffc0c 	.word	0xfffffc0c
 8003bfc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd fd4e 	bl	80016a0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e08a      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c12:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x77c>
 8003c1e:	e082      	b.n	8003d26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b43      	ldr	r3, [pc, #268]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a42      	ldr	r2, [pc, #264]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fd38 	bl	80016a0 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fd34 	bl	80016a0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e070      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c46:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x7b0>
 8003c52:	e068      	b.n	8003d26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c5a:	4b35      	ldr	r3, [pc, #212]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d031      	beq.n	8003ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f003 0203 	and.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d12a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d122      	bne.n	8003ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0a5b      	lsrs	r3, r3, #9
 8003c9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d108      	bne.n	8003ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02b      	b.n	8003d28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d01f      	beq.n	8003d26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ce6:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	4a11      	ldr	r2, [pc, #68]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf2:	f7fd fcd5 	bl	80016a0 <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003cf8:	bf00      	nop
 8003cfa:	f7fd fcd1 	bl	80016a0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d0f9      	beq.n	8003cfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d34 <HAL_RCC_OscConfig+0x8b0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d12:	00d2      	lsls	r2, r2, #3
 8003d14:	4906      	ldr	r1, [pc, #24]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <HAL_RCC_OscConfig+0x8ac>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3730      	adds	r7, #48	@ 0x30
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	58024400 	.word	0x58024400
 8003d34:	ffff0007 	.word	0xffff0007

08003d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e19c      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b87      	ldr	r3, [pc, #540]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 020f 	bic.w	r2, r3, #15
 8003d62:	4985      	ldr	r1, [pc, #532]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b83      	ldr	r3, [pc, #524]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e184      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d908      	bls.n	8003daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d98:	4b78      	ldr	r3, [pc, #480]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4975      	ldr	r1, [pc, #468]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	4b70      	ldr	r3, [pc, #448]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d908      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	496a      	ldr	r1, [pc, #424]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	4b64      	ldr	r3, [pc, #400]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d908      	bls.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003df4:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	495e      	ldr	r1, [pc, #376]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	4b59      	ldr	r3, [pc, #356]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d908      	bls.n	8003e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e22:	4b56      	ldr	r3, [pc, #344]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4953      	ldr	r1, [pc, #332]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	4b4d      	ldr	r3, [pc, #308]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d908      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f023 020f 	bic.w	r2, r3, #15
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4947      	ldr	r1, [pc, #284]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d055      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e6e:	4b43      	ldr	r3, [pc, #268]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4940      	ldr	r1, [pc, #256]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e88:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d121      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0f6      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0ea      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eb8:	4b30      	ldr	r3, [pc, #192]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0de      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0d6      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f023 0207 	bic.w	r2, r3, #7
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4925      	ldr	r1, [pc, #148]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eea:	f7fd fbd9 	bl	80016a0 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef2:	f7fd fbd5 	bl	80016a0 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0be      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f08:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d1eb      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d208      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f36:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	490e      	ldr	r1, [pc, #56]	@ (8003f7c <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d214      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 020f 	bic.w	r2, r3, #15
 8003f5e:	4906      	ldr	r1, [pc, #24]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <HAL_RCC_ClockConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e086      	b.n	8004086 <HAL_RCC_ClockConfig+0x34e>
 8003f78:	52002000 	.word	0x52002000
 8003f7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d208      	bcs.n	8003fae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	4939      	ldr	r1, [pc, #228]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d208      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	492e      	ldr	r1, [pc, #184]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d208      	bcs.n	800400a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ff8:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	4922      	ldr	r1, [pc, #136]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8004006:	4313      	orrs	r3, r2
 8004008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004022:	429a      	cmp	r2, r3
 8004024:	d208      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4917      	ldr	r1, [pc, #92]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8004034:	4313      	orrs	r3, r2
 8004036:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004038:	f000 f834 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4912      	ldr	r1, [pc, #72]	@ (8004094 <HAL_RCC_ClockConfig+0x35c>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <HAL_RCC_ClockConfig+0x358>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <HAL_RCC_ClockConfig+0x35c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_RCC_ClockConfig+0x360>)
 800406e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004070:	4a0a      	ldr	r2, [pc, #40]	@ (800409c <HAL_RCC_ClockConfig+0x364>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <HAL_RCC_ClockConfig+0x368>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fac6 	bl	800160c <HAL_InitTick>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	0800899c 	.word	0x0800899c
 8004098:	24000008 	.word	0x24000008
 800409c:	24000004 	.word	0x24000004
 80040a0:	2400000c 	.word	0x2400000c

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	@ 0x24
 80040a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040aa:	4bb3      	ldr	r3, [pc, #716]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b2:	2b18      	cmp	r3, #24
 80040b4:	f200 8155 	bhi.w	8004362 <HAL_RCC_GetSysClockFreq+0x2be>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	08004125 	.word	0x08004125
 80040c4:	08004363 	.word	0x08004363
 80040c8:	08004363 	.word	0x08004363
 80040cc:	08004363 	.word	0x08004363
 80040d0:	08004363 	.word	0x08004363
 80040d4:	08004363 	.word	0x08004363
 80040d8:	08004363 	.word	0x08004363
 80040dc:	08004363 	.word	0x08004363
 80040e0:	0800414b 	.word	0x0800414b
 80040e4:	08004363 	.word	0x08004363
 80040e8:	08004363 	.word	0x08004363
 80040ec:	08004363 	.word	0x08004363
 80040f0:	08004363 	.word	0x08004363
 80040f4:	08004363 	.word	0x08004363
 80040f8:	08004363 	.word	0x08004363
 80040fc:	08004363 	.word	0x08004363
 8004100:	08004151 	.word	0x08004151
 8004104:	08004363 	.word	0x08004363
 8004108:	08004363 	.word	0x08004363
 800410c:	08004363 	.word	0x08004363
 8004110:	08004363 	.word	0x08004363
 8004114:	08004363 	.word	0x08004363
 8004118:	08004363 	.word	0x08004363
 800411c:	08004363 	.word	0x08004363
 8004120:	08004157 	.word	0x08004157
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004124:	4b94      	ldr	r3, [pc, #592]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004130:	4b91      	ldr	r3, [pc, #580]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	4a90      	ldr	r2, [pc, #576]	@ (800437c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
 8004140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004142:	e111      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004144:	4b8d      	ldr	r3, [pc, #564]	@ (800437c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004146:	61bb      	str	r3, [r7, #24]
      break;
 8004148:	e10e      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800414a:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800414c:	61bb      	str	r3, [r7, #24]
      break;
 800414e:	e10b      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004150:	4b8c      	ldr	r3, [pc, #560]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004152:	61bb      	str	r3, [r7, #24]
      break;
 8004154:	e108      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004156:	4b88      	ldr	r3, [pc, #544]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004160:	4b85      	ldr	r3, [pc, #532]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800416a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800416c:	4b82      	ldr	r3, [pc, #520]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004176:	4b80      	ldr	r3, [pc, #512]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417a:	08db      	lsrs	r3, r3, #3
 800417c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80e1 	beq.w	800435c <HAL_RCC_GetSysClockFreq+0x2b8>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b02      	cmp	r3, #2
 800419e:	f000 8083 	beq.w	80042a8 <HAL_RCC_GetSysClockFreq+0x204>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f200 80a1 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x248>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x114>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d056      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041b6:	e099      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02d      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
 80041d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b62      	ldr	r3, [pc, #392]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004202:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800421e:	e087      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800438c <HAL_RCC_GetSysClockFreq+0x2e8>
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b51      	ldr	r3, [pc, #324]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a02 	vldr	s12, [r7, #8]
 8004246:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004262:	e065      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004276:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	ed97 6a02 	vldr	s12, [r7, #8]
 800428a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042a6:	e043      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042ea:	e021      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004312:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	0a5b      	lsrs	r3, r3, #9
 8004336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433a:	3301      	adds	r3, #1
 800433c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004348:	edd7 6a07 	vldr	s13, [r7, #28]
 800434c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004354:	ee17 3a90 	vmov	r3, s15
 8004358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800435a:	e005      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
      break;
 8004360:	e002      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004362:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004364:	61bb      	str	r3, [r7, #24]
      break;
 8004366:	bf00      	nop
  }

  return sysclockfreq;
 8004368:	69bb      	ldr	r3, [r7, #24]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	@ 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
 800437c:	03d09000 	.word	0x03d09000
 8004380:	003d0900 	.word	0x003d0900
 8004384:	007a1200 	.word	0x007a1200
 8004388:	46000000 	.word	0x46000000
 800438c:	4c742400 	.word	0x4c742400
 8004390:	4a742400 	.word	0x4a742400
 8004394:	4af42400 	.word	0x4af42400

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800439e:	f7ff fe81 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	0a1b      	lsrs	r3, r3, #8
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490f      	ldr	r1, [pc, #60]	@ (80043ec <HAL_RCC_GetHCLKFreq+0x54>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	4a09      	ldr	r2, [pc, #36]	@ (80043ec <HAL_RCC_GetHCLKFreq+0x54>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80043d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043d6:	4a07      	ldr	r2, [pc, #28]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	58024400 	.word	0x58024400
 80043ec:	0800899c 	.word	0x0800899c
 80043f0:	24000008 	.word	0x24000008
 80043f4:	24000004 	.word	0x24000004

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043fc:	f7ff ffcc 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4904      	ldr	r1, [pc, #16]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024400 	.word	0x58024400
 8004420:	0800899c 	.word	0x0800899c

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004428:	f7ff ffb6 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4904      	ldr	r1, [pc, #16]	@ (800444c <HAL_RCC_GetPCLK2Freq+0x28>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	58024400 	.word	0x58024400
 800444c:	0800899c 	.word	0x0800899c

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004454:	b0ca      	sub	sp, #296	@ 0x128
 8004456:	af00      	add	r7, sp, #0
 8004458:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004462:	2300      	movs	r3, #0
 8004464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004474:	2500      	movs	r5, #0
 8004476:	ea54 0305 	orrs.w	r3, r4, r5
 800447a:	d049      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004486:	d02f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800448c:	d828      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800448e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004492:	d01a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004498:	d822      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a2:	d007      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044a4:	e01c      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a6:	4bb8      	ldr	r3, [pc, #736]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	4ab7      	ldr	r2, [pc, #732]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044b2:	e01a      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	3308      	adds	r3, #8
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f002 fb61 	bl	8006b84 <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044c8:	e00f      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	3328      	adds	r3, #40	@ 0x28
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 fc08 	bl	8006ce8 <RCCEx_PLL3_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80044e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004500:	4aa1      	ldr	r2, [pc, #644]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6513      	str	r3, [r2, #80]	@ 0x50
 8004506:	e003      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800451c:	f04f 0900 	mov.w	r9, #0
 8004520:	ea58 0309 	orrs.w	r3, r8, r9
 8004524:	d047      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	2b04      	cmp	r3, #4
 800452e:	d82a      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004530:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800454d 	.word	0x0800454d
 800453c:	0800455b 	.word	0x0800455b
 8004540:	08004571 	.word	0x08004571
 8004544:	0800458f 	.word	0x0800458f
 8004548:	0800458f 	.word	0x0800458f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4b8e      	ldr	r3, [pc, #568]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	4a8d      	ldr	r2, [pc, #564]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004558:	e01a      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3308      	adds	r3, #8
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f002 fb0e 	bl	8006b84 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800456e:	e00f      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	3328      	adds	r3, #40	@ 0x28
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f002 fbb5 	bl	8006ce8 <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004584:	e004      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800458e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004598:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800459a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459c:	f023 0107 	bic.w	r1, r3, #7
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a6:	4a78      	ldr	r2, [pc, #480]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80045c2:	f04f 0b00 	mov.w	fp, #0
 80045c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80045ca:	d04c      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d6:	d030      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045dc:	d829      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045de:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e0:	d02d      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80045e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e4:	d825      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d018      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d821      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80045f6:	e01c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b63      	ldr	r3, [pc, #396]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a62      	ldr	r2, [pc, #392]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004604:	e01c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f002 fab8 	bl	8006b84 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f002 fb5f 	bl	8006ce8 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004648:	4b4f      	ldr	r3, [pc, #316]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	4a4c      	ldr	r2, [pc, #304]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6513      	str	r3, [r2, #80]	@ 0x50
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004672:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800467c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d053      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004692:	d035      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004694:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004698:	d82e      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800469a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800469e:	d031      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80046a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80046a4:	d828      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046aa:	d01a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046b0:	d822      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80046b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ba:	d007      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80046bc:	e01c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046be:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ca:	e01c      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3308      	adds	r3, #8
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 fa55 	bl	8006b84 <RCCEx_PLL2_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046e0:	e011      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3328      	adds	r3, #40	@ 0x28
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f002 fafc 	bl	8006ce8 <RCCEx_PLL3_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046f6:	e006      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800470e:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004712:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800471e:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004720:	430b      	orrs	r3, r1
 8004722:	6593      	str	r3, [r2, #88]	@ 0x58
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800473a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004744:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d056      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800475a:	d038      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800475c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004760:	d831      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004766:	d034      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004768:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800476c:	d82b      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800476e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004772:	d01d      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004778:	d825      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d006      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800477e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004784:	e01f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004786:	bf00      	nop
 8004788:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478c:	4ba2      	ldr	r3, [pc, #648]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	4aa1      	ldr	r2, [pc, #644]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004798:	e01c      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	3308      	adds	r3, #8
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 f9ee 	bl	8006b84 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047ae:	e011      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	3328      	adds	r3, #40	@ 0x28
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f002 fa95 	bl	8006ce8 <RCCEx_PLL3_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c4:	e006      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80047ec:	4a8a      	ldr	r2, [pc, #552]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004812:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d03a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004822:	2b30      	cmp	r3, #48	@ 0x30
 8004824:	d01f      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004826:	2b30      	cmp	r3, #48	@ 0x30
 8004828:	d819      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800482a:	2b20      	cmp	r3, #32
 800482c:	d00c      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800482e:	2b20      	cmp	r3, #32
 8004830:	d815      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d019      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004836:	2b10      	cmp	r3, #16
 8004838:	d111      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483a:	4b77      	ldr	r3, [pc, #476]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	4a76      	ldr	r2, [pc, #472]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004846:	e011      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484c:	3308      	adds	r3, #8
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f002 f997 	bl	8006b84 <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004864:	e002      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800486a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004874:	4b68      	ldr	r3, [pc, #416]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004878:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4a65      	ldr	r2, [pc, #404]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004884:	430b      	orrs	r3, r1
 8004886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800489e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80048a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d051      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048bc:	d035      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80048be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048c2:	d82e      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048c8:	d031      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80048ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048ce:	d828      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d4:	d01a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80048d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048da:	d822      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e4:	d007      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80048e6:	e01c      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048f4:	e01c      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	3308      	adds	r3, #8
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 f940 	bl	8006b84 <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	3328      	adds	r3, #40	@ 0x28
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f002 f9e7 	bl	8006ce8 <RCCEx_PLL3_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800492e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004938:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004946:	4a34      	ldr	r2, [pc, #208]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004948:	430b      	orrs	r3, r1
 800494a:	6513      	str	r3, [r2, #80]	@ 0x50
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004962:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800496c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d056      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800497c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004980:	d033      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004986:	d82c      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800498c:	d02f      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800498e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004992:	d826      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004998:	d02b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800499a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800499e:	d820      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a4:	d012      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049aa:	d81a      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d022      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b4:	d115      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ba:	3308      	adds	r3, #8
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f002 f8e0 	bl	8006b84 <RCCEx_PLL2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049ca:	e015      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	3328      	adds	r3, #40	@ 0x28
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f002 f987 	bl	8006ce8 <RCCEx_PLL3_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049e0:	e00a      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049ea:	bf00      	nop
 80049ec:	e004      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a0e:	4a02      	ldr	r2, [pc, #8]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a14:	e006      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d055      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a50:	d033      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a56:	d82c      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d02f      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a62:	d826      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a68:	d02b      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004a6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a6e:	d820      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a74:	d012      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a7a:	d81a      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d022      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a84:	d115      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 f878 	bl	8006b84 <RCCEx_PLL2_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e015      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	3328      	adds	r3, #40	@ 0x28
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f002 f91f 	bl	8006ce8 <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004aba:	bf00      	nop
 8004abc:	e004      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ad0:	4ba3      	ldr	r3, [pc, #652]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ae0:	4a9f      	ldr	r2, [pc, #636]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae6:	e003      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d037      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b1a:	d00e      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b20:	d816      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b2a:	d111      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	4a8b      	ldr	r2, [pc, #556]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b38:	e00f      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	3308      	adds	r3, #8
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 f81e 	bl	8006b84 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b62:	4b7f      	ldr	r3, [pc, #508]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	4a7b      	ldr	r2, [pc, #492]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004b96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d039      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d81c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bed 	.word	0x08004bed
 8004bb4:	08004bc1 	.word	0x08004bc1
 8004bb8:	08004bcf 	.word	0x08004bcf
 8004bbc:	08004bed 	.word	0x08004bed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc0:	4b67      	ldr	r3, [pc, #412]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	4a66      	ldr	r2, [pc, #408]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bcc:	e00f      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 ffd4 	bl	8006b84 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfa:	f023 0103 	bic.w	r1, r3, #3
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c04:	4a56      	ldr	r2, [pc, #344]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f000 809f 	beq.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c36:	4b4b      	ldr	r3, [pc, #300]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c42:	f7fc fd2d 	bl	80016a0 <HAL_GetTick>
 8004c46:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4c:	f7fc fd28 	bl	80016a0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	@ 0x64
 8004c5a:	d903      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c64:	4b3f      	ldr	r3, [pc, #252]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ed      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d179      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c78:	4b39      	ldr	r3, [pc, #228]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c84:	4053      	eors	r3, r2
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c9a:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a2d      	ldr	r2, [pc, #180]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc6:	d118      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc fcea 	bl	80016a0 <HAL_GetTick>
 8004ccc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cd0:	e00d      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fc fce5 	bl	80016a0 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004cdc:	1ad2      	subs	r2, r2, r3
 8004cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d903      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004cec:	e005      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cee:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0eb      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d129      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d12:	d10e      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004d14:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d24:	091a      	lsrs	r2, r3, #4
 8004d26:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6113      	str	r3, [r2, #16]
 8004d30:	e005      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d3c:	6113      	str	r3, [r2, #16]
 8004d3e:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4e:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d54:	e00e      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004d5e:	e009      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004d60:	58024400 	.word	0x58024400
 8004d64:	58024800 	.word	0x58024800
 8004d68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 0301 	and.w	r3, r2, #1
 8004d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f000 8089 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9c:	2b28      	cmp	r3, #40	@ 0x28
 8004d9e:	d86b      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004e81 	.word	0x08004e81
 8004dac:	08004e79 	.word	0x08004e79
 8004db0:	08004e79 	.word	0x08004e79
 8004db4:	08004e79 	.word	0x08004e79
 8004db8:	08004e79 	.word	0x08004e79
 8004dbc:	08004e79 	.word	0x08004e79
 8004dc0:	08004e79 	.word	0x08004e79
 8004dc4:	08004e79 	.word	0x08004e79
 8004dc8:	08004e4d 	.word	0x08004e4d
 8004dcc:	08004e79 	.word	0x08004e79
 8004dd0:	08004e79 	.word	0x08004e79
 8004dd4:	08004e79 	.word	0x08004e79
 8004dd8:	08004e79 	.word	0x08004e79
 8004ddc:	08004e79 	.word	0x08004e79
 8004de0:	08004e79 	.word	0x08004e79
 8004de4:	08004e79 	.word	0x08004e79
 8004de8:	08004e63 	.word	0x08004e63
 8004dec:	08004e79 	.word	0x08004e79
 8004df0:	08004e79 	.word	0x08004e79
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004e79 	.word	0x08004e79
 8004dfc:	08004e79 	.word	0x08004e79
 8004e00:	08004e79 	.word	0x08004e79
 8004e04:	08004e79 	.word	0x08004e79
 8004e08:	08004e81 	.word	0x08004e81
 8004e0c:	08004e79 	.word	0x08004e79
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004e79 	.word	0x08004e79
 8004e18:	08004e79 	.word	0x08004e79
 8004e1c:	08004e79 	.word	0x08004e79
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e79 	.word	0x08004e79
 8004e34:	08004e79 	.word	0x08004e79
 8004e38:	08004e79 	.word	0x08004e79
 8004e3c:	08004e79 	.word	0x08004e79
 8004e40:	08004e79 	.word	0x08004e79
 8004e44:	08004e79 	.word	0x08004e79
 8004e48:	08004e81 	.word	0x08004e81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	3308      	adds	r3, #8
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fe95 	bl	8006b84 <RCCEx_PLL2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	3328      	adds	r3, #40	@ 0x28
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 ff3c 	bl	8006ce8 <RCCEx_PLL3_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e8a:	4bbf      	ldr	r3, [pc, #764]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e98:	4abb      	ldr	r2, [pc, #748]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e9e:	e003      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f002 0302 	and.w	r3, r2, #2
 8004eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ebe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d041      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d824      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f25 	.word	0x08004f25
 8004edc:	08004ef1 	.word	0x08004ef1
 8004ee0:	08004f07 	.word	0x08004f07
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	08004f25 	.word	0x08004f25
 8004eec:	08004f25 	.word	0x08004f25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fe43 	bl	8006b84 <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f04:	e00f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	3328      	adds	r3, #40	@ 0x28
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 feea 	bl	8006ce8 <RCCEx_PLL3_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f1a:	e004      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f22:	e000      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f2e:	4b96      	ldr	r3, [pc, #600]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	f023 0107 	bic.w	r1, r3, #7
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f3c:	4a92      	ldr	r2, [pc, #584]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f42:	e003      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 0304 	and.w	r3, r2, #4
 8004f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d044      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d825      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004f78:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004f99 	.word	0x08004f99
 8004f88:	08004faf 	.word	0x08004faf
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fcd 	.word	0x08004fcd
 8004f94:	08004fcd 	.word	0x08004fcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fdef 	bl	8006b84 <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fac:	e00f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	3328      	adds	r3, #40	@ 0x28
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fe96 	bl	8006ce8 <RCCEx_PLL3_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e004      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fda:	f023 0107 	bic.w	r1, r3, #7
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe6:	4a68      	ldr	r2, [pc, #416]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f002 0320 	and.w	r3, r2, #32
 8005002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005006:	2300      	movs	r3, #0
 8005008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800500c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005010:	460b      	mov	r3, r1
 8005012:	4313      	orrs	r3, r2
 8005014:	d055      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005022:	d033      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005028:	d82c      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502e:	d02f      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005034:	d826      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800503a:	d02b      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800503c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005040:	d820      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005046:	d012      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800504c:	d81a      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d022      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005056:	d115      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	3308      	adds	r3, #8
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f001 fd8f 	bl	8006b84 <RCCEx_PLL2_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800506c:	e015      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005072:	3328      	adds	r3, #40	@ 0x28
 8005074:	2102      	movs	r1, #2
 8005076:	4618      	mov	r0, r3
 8005078:	f001 fe36 	bl	8006ce8 <RCCEx_PLL3_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005082:	e00a      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800508a:	e006      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800508c:	bf00      	nop
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005090:	bf00      	nop
 8005092:	e002      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005094:	bf00      	nop
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a2:	4b39      	ldr	r3, [pc, #228]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	4a35      	ldr	r2, [pc, #212]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80050ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80050d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d058      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050ee:	d033      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80050f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050f4:	d82c      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fa:	d02f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005100:	d826      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005102:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005106:	d02b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800510c:	d820      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800510e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005112:	d012      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005118:	d81a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d022      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005122:	d115      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fd29 	bl	8006b84 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005138:	e015      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fdd0 	bl	8006ce8 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800514e:	e00a      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005156:	e006      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005158:	bf00      	nop
 800515a:	e004      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800515c:	bf00      	nop
 800515e:	e002      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10e      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516e:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800517e:	4a02      	ldr	r2, [pc, #8]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005180:	430b      	orrs	r3, r1
 8005182:	6593      	str	r3, [r2, #88]	@ 0x58
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005186:	bf00      	nop
 8005188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80051ae:	460b      	mov	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d055      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051c0:	d033      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80051c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051c6:	d82c      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	d02f      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d2:	d826      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051d8:	d02b      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80051da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051de:	d820      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051e4:	d012      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80051e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ea:	d81a      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d022      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f4:	d115      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fa:	3308      	adds	r3, #8
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fcc0 	bl	8006b84 <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800520a:	e015      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	3328      	adds	r3, #40	@ 0x28
 8005212:	2102      	movs	r1, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f001 fd67 	bl	8006ce8 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005220:	e00a      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800522a:	bf00      	nop
 800522c:	e004      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005240:	4ba1      	ldr	r3, [pc, #644]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005244:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005250:	4a9d      	ldr	r2, [pc, #628]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005252:	430b      	orrs	r3, r1
 8005254:	6593      	str	r3, [r2, #88]	@ 0x58
 8005256:	e003      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f002 0308 	and.w	r3, r2, #8
 800526c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005276:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	d01e      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	3328      	adds	r3, #40	@ 0x28
 8005294:	2102      	movs	r1, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fd26 	bl	8006ce8 <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052a8:	4b87      	ldr	r3, [pc, #540]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b8:	4a83      	ldr	r2, [pc, #524]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f002 0310 	and.w	r3, r2, #16
 80052ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80052d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d01e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f0:	3328      	adds	r3, #40	@ 0x28
 80052f2:	2102      	movs	r1, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fcf7 	bl	8006ce8 <RCCEx_PLL3_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005316:	4a6c      	ldr	r2, [pc, #432]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005328:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005332:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d03e      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005348:	d022      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800534a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534e:	d81b      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005358:	d00b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800535a:	e015      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800535c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005360:	3308      	adds	r3, #8
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f001 fc0d 	bl	8006b84 <RCCEx_PLL2_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005370:	e00f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	3328      	adds	r3, #40	@ 0x28
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fcb4 	bl	8006ce8 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800539a:	4b4b      	ldr	r3, [pc, #300]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053aa:	4a47      	ldr	r2, [pc, #284]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b0:	e003      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80053c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053c8:	2300      	movs	r3, #0
 80053ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d03b      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053e2:	d01f      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80053e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053e8:	d818      	bhi.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ee:	d003      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80053f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053f4:	d007      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80053f6:	e011      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f8:	4b33      	ldr	r3, [pc, #204]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4a32      	ldr	r2, [pc, #200]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005404:	e00f      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	3328      	adds	r3, #40	@ 0x28
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fc6a 	bl	8006ce8 <RCCEx_PLL3_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800541a:	e004      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005422:	e000      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800542e:	4b26      	ldr	r3, [pc, #152]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	4a22      	ldr	r2, [pc, #136]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005440:	430b      	orrs	r3, r1
 8005442:	6553      	str	r3, [r2, #84]	@ 0x54
 8005444:	e003      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800545a:	673b      	str	r3, [r7, #112]	@ 0x70
 800545c:	2300      	movs	r3, #0
 800545e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005460:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005464:	460b      	mov	r3, r1
 8005466:	4313      	orrs	r3, r2
 8005468:	d034      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005478:	d007      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800547a:	e011      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4b12      	ldr	r3, [pc, #72]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	4a11      	ldr	r2, [pc, #68]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005488:	e00e      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	3308      	adds	r3, #8
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fb76 	bl	8006b84 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10d      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054be:	4a02      	ldr	r2, [pc, #8]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054c4:	e006      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054e2:	2300      	movs	r3, #0
 80054e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f4:	3328      	adds	r3, #40	@ 0x28
 80054f6:	2102      	movs	r1, #2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 fbf5 	bl	8006ce8 <RCCEx_PLL3_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005516:	663b      	str	r3, [r7, #96]	@ 0x60
 8005518:	2300      	movs	r3, #0
 800551a:	667b      	str	r3, [r7, #100]	@ 0x64
 800551c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d038      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005532:	d018      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005538:	d811      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800553a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800553e:	d014      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005544:	d80b      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d011      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800554a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554e:	d106      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4bc3      	ldr	r3, [pc, #780]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4ac2      	ldr	r2, [pc, #776]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800555c:	e008      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005564:	e004      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800556e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005578:	4bb9      	ldr	r3, [pc, #740]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800557a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005588:	4ab5      	ldr	r2, [pc, #724]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800558a:	430b      	orrs	r3, r1
 800558c:	6553      	str	r3, [r2, #84]	@ 0x54
 800558e:	e003      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055a6:	2300      	movs	r3, #0
 80055a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055b4:	4baa      	ldr	r3, [pc, #680]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	4aa7      	ldr	r2, [pc, #668]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80055d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d6:	2300      	movs	r3, #0
 80055d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80055da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055f4:	4a9a      	ldr	r2, [pc, #616]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055f6:	430b      	orrs	r3, r1
 80055f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005608:	2300      	movs	r3, #0
 800560a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005616:	4b92      	ldr	r3, [pc, #584]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005624:	4a8e      	ldr	r2, [pc, #568]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005626:	430b      	orrs	r3, r1
 8005628:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005636:	643b      	str	r3, [r7, #64]	@ 0x40
 8005638:	2300      	movs	r3, #0
 800563a:	647b      	str	r3, [r7, #68]	@ 0x44
 800563c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005640:	460b      	mov	r3, r1
 8005642:	4313      	orrs	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005646:	4b86      	ldr	r3, [pc, #536]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	4a85      	ldr	r2, [pc, #532]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800564c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	4b83      	ldr	r3, [pc, #524]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800565e:	4a80      	ldr	r2, [pc, #512]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005660:	430b      	orrs	r3, r1
 8005662:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005672:	2300      	movs	r3, #0
 8005674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005676:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005680:	4b77      	ldr	r3, [pc, #476]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005684:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	4a74      	ldr	r2, [pc, #464]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005690:	430b      	orrs	r3, r1
 8005692:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80056a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c0:	4a67      	ldr	r2, [pc, #412]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	2100      	movs	r1, #0
 80056d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d011      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	3308      	adds	r3, #8
 80056e8:	2100      	movs	r1, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 fa4a 	bl	8006b84 <RCCEx_PLL2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	2100      	movs	r1, #0
 8005710:	6239      	str	r1, [r7, #32]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d011      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	3308      	adds	r3, #8
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fa2a 	bl	8006b84 <RCCEx_PLL2_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	2100      	movs	r1, #0
 8005750:	61b9      	str	r1, [r7, #24]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d011      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	3308      	adds	r3, #8
 8005768:	2102      	movs	r1, #2
 800576a:	4618      	mov	r0, r3
 800576c:	f001 fa0a 	bl	8006b84 <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	2100      	movs	r1, #0
 8005790:	6139      	str	r1, [r7, #16]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d011      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	3328      	adds	r3, #40	@ 0x28
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fa9c 	bl	8006ce8 <RCCEx_PLL3_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	2100      	movs	r1, #0
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d011      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	3328      	adds	r3, #40	@ 0x28
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fa7c 	bl	8006ce8 <RCCEx_PLL3_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	2100      	movs	r1, #0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e9d7 1200 	ldrd	r1, r2, [r7]
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	3328      	adds	r3, #40	@ 0x28
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fa5c 	bl	8006ce8 <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005846:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
}
 8005854:	4618      	mov	r0, r3
 8005856:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005860:	58024400 	.word	0x58024400

08005864 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b090      	sub	sp, #64	@ 0x40
 8005868:	af00      	add	r7, sp, #0
 800586a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800586e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005872:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005876:	430b      	orrs	r3, r1
 8005878:	f040 8094 	bne.w	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800587c:	4b9e      	ldr	r3, [pc, #632]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800587e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	2b04      	cmp	r3, #4
 800588a:	f200 8087 	bhi.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a9 	.word	0x080058a9
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	08005995 	.word	0x08005995
 80058a4:	08005921 	.word	0x08005921
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058a8:	4b93      	ldr	r3, [pc, #588]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b4:	d108      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 f810 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058c4:	f000 bd45 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058cc:	f000 bd41 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058d0:	4b89      	ldr	r3, [pc, #548]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058dc:	d108      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058de:	f107 0318 	add.w	r3, r7, #24
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd54 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ec:	f000 bd31 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f4:	f000 bd2d 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058f8:	4b7f      	ldr	r3, [pc, #508]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005904:	d108      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fe94 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005914:	f000 bd1d 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800591c:	f000 bd19 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005920:	4b75      	ldr	r3, [pc, #468]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005924:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005928:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800592a:	4b73      	ldr	r3, [pc, #460]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d10c      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800593c:	4b6e      	ldr	r3, [pc, #440]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	4a6d      	ldr	r2, [pc, #436]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800594e:	e01f      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005950:	4b69      	ldr	r3, [pc, #420]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595c:	d106      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800595e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005964:	d102      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005966:	4b66      	ldr	r3, [pc, #408]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596a:	e011      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800596c:	4b62      	ldr	r3, [pc, #392]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005978:	d106      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800597a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005980:	d102      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005982:	4b60      	ldr	r3, [pc, #384]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800598c:	f000 bce1 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005990:	f000 bcdf 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005994:	4b5c      	ldr	r3, [pc, #368]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005998:	f000 bcdb 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a0:	f000 bcd7 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80059a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80059ac:	430b      	orrs	r3, r1
 80059ae:	f040 80ad 	bne.w	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80059b2:	4b51      	ldr	r3, [pc, #324]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80059ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c2:	d056      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ca:	f200 8090 	bhi.w	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80059d2:	f000 8088 	beq.w	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80059da:	f200 8088 	bhi.w	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d032      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	2b80      	cmp	r3, #128	@ 0x80
 80059e8:	f200 8081 	bhi.w	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	2b40      	cmp	r3, #64	@ 0x40
 80059f6:	d014      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80059f8:	e079      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059fa:	4b3f      	ldr	r3, [pc, #252]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a06:	d108      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 ff67 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a16:	f000 bc9c 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1e:	f000 bc98 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a22:	4b35      	ldr	r3, [pc, #212]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a2e:	d108      	bne.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a30:	f107 0318 	add.w	r3, r7, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fcab 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a3e:	f000 bc88 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a46:	f000 bc84 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a56:	d108      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a58:	f107 030c 	add.w	r3, r7, #12
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fdeb 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a66:	f000 bc74 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a6e:	f000 bc70 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a72:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d10c      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	08db      	lsrs	r3, r3, #3
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa0:	e01f      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aae:	d106      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ab6:	d102      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005abc:	e011      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aca:	d106      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad2:	d102      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad8:	e003      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ade:	f000 bc38 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ae2:	f000 bc36 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ae6:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aea:	f000 bc32 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af2:	f000 bc2e 	b.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
 8005afc:	03d09000 	.word	0x03d09000
 8005b00:	003d0900 	.word	0x003d0900
 8005b04:	007a1200 	.word	0x007a1200
 8005b08:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b10:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005b14:	430b      	orrs	r3, r1
 8005b16:	f040 809c 	bne.w	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005b1a:	4b9e      	ldr	r3, [pc, #632]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005b22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b2a:	d054      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b32:	f200 808b 	bhi.w	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b3c:	f000 8083 	beq.w	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b46:	f200 8081 	bhi.w	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b50:	d02f      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b58:	d878      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b66:	d012      	beq.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005b68:	e070      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b76:	d107      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 feaf 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b86:	e3e4      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b8c:	e3e1      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b8e:	4b81      	ldr	r3, [pc, #516]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b9a:	d107      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9c:	f107 0318 	add.w	r3, r7, #24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fbf5 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005baa:	e3d2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb0:	e3cf      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bb2:	4b78      	ldr	r3, [pc, #480]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bc0:	f107 030c 	add.w	r3, r7, #12
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fd37 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bce:	e3c0      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd4:	e3bd      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005be0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bf2:	4b68      	ldr	r3, [pc, #416]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	4a66      	ldr	r2, [pc, #408]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c04:	e01e      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c06:	4b63      	ldr	r3, [pc, #396]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c12:	d106      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1a:	d102      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c20:	e010      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c22:	4b5c      	ldr	r3, [pc, #368]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c36:	d102      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c38:	4b59      	ldr	r3, [pc, #356]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c42:	e386      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c44:	e385      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c46:	4b57      	ldr	r3, [pc, #348]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4a:	e382      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c50:	e37f      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c56:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	f040 80a7 	bne.w	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005c60:	4b4c      	ldr	r3, [pc, #304]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005c68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c70:	d055      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c78:	f200 8096 	bhi.w	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c82:	f000 8084 	beq.w	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c8c:	f200 808c 	bhi.w	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c96:	d030      	beq.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c9e:	f200 8083 	bhi.w	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cae:	d012      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005cb0:	e07a      	b.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cb2:	4b38      	ldr	r3, [pc, #224]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fe0b 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cce:	e340      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e33d      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce4:	f107 0318 	add.w	r3, r7, #24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fb51 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf2:	e32e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf8:	e32b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cfa:	4b26      	ldr	r3, [pc, #152]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d06:	d107      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fc93 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d16:	e31c      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	e319      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	4a14      	ldr	r2, [pc, #80]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4c:	e01e      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d4e:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d5a:	d106      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d62:	d102      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d64:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d68:	e010      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d76:	d106      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7e:	d102      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d8a:	e2e2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d8c:	e2e1      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d8e:	4b05      	ldr	r3, [pc, #20]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d92:	e2de      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d94:	58024400 	.word	0x58024400
 8005d98:	03d09000 	.word	0x03d09000
 8005d9c:	003d0900 	.word	0x003d0900
 8005da0:	007a1200 	.word	0x007a1200
 8005da4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dac:	e2d1      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005db6:	430b      	orrs	r3, r1
 8005db8:	f040 809c 	bne.w	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005dbc:	4b93      	ldr	r3, [pc, #588]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dcc:	d054      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dd4:	f200 808b 	bhi.w	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dde:	f000 8083 	beq.w	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005de8:	f200 8081 	bhi.w	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df2:	d02f      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	d878      	bhi.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e08:	d012      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005e0a:	e070      	b.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e0c:	4b7f      	ldr	r3, [pc, #508]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e18:	d107      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fd5e 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e28:	e293      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e2e:	e290      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e30:	4b76      	ldr	r3, [pc, #472]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e3e:	f107 0318 	add.w	r3, r7, #24
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 faa4 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e4c:	e281      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e52:	e27e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e54:	4b6d      	ldr	r3, [pc, #436]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e60:	d107      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e62:	f107 030c 	add.w	r3, r7, #12
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fbe6 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e70:	e26f      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e76:	e26c      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e78:	4b64      	ldr	r3, [pc, #400]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e82:	4b62      	ldr	r3, [pc, #392]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e94:	4b5d      	ldr	r3, [pc, #372]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	08db      	lsrs	r3, r3, #3
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea6:	e01e      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ea8:	4b58      	ldr	r3, [pc, #352]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb4:	d106      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ebe:	4b55      	ldr	r3, [pc, #340]	@ (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec2:	e010      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ec4:	4b51      	ldr	r3, [pc, #324]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed0:	d106      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed8:	d102      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005eda:	4b4f      	ldr	r3, [pc, #316]	@ (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ede:	e002      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ee4:	e235      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ee6:	e234      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800601c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eec:	e231      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef2:	e22e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005efc:	430b      	orrs	r3, r1
 8005efe:	f040 808f 	bne.w	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005f02:	4b42      	ldr	r3, [pc, #264]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f06:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f12:	d06b      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f1a:	d874      	bhi.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f22:	d056      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f2a:	d86c      	bhi.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f32:	d03b      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f3a:	d864      	bhi.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f42:	d021      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4a:	d85c      	bhi.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f58:	d004      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005f5a:	e054      	b.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fe fa4c 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8005f60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f62:	e1f6      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f64:	4b29      	ldr	r3, [pc, #164]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f72:	f107 0318 	add.w	r3, r7, #24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fa0a 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f80:	e1e7      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f86:	e1e4      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f88:	4b20      	ldr	r3, [pc, #128]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f96:	f107 030c 	add.w	r3, r7, #12
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fb4c 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa4:	e1d5      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005faa:	e1d2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fac:	4b17      	ldr	r3, [pc, #92]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb8:	4b14      	ldr	r3, [pc, #80]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fca:	e1c2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd0:	e1bf      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe4:	e1b5      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fea:	e1b2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fec:	4b07      	ldr	r3, [pc, #28]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff8:	d102      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ffe:	e1a8      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006004:	e1a5      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800600a:	e1a2      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800600c:	58024400 	.word	0x58024400
 8006010:	03d09000 	.word	0x03d09000
 8006014:	003d0900 	.word	0x003d0900
 8006018:	007a1200 	.word	0x007a1200
 800601c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006024:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006028:	430b      	orrs	r3, r1
 800602a:	d173      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800602c:	4b9c      	ldr	r3, [pc, #624]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800602e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006034:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800603c:	d02f      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006044:	d863      	bhi.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006052:	d012      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006054:	e05b      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006056:	4b92      	ldr	r3, [pc, #584]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006062:	d107      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006064:	f107 0318 	add.w	r3, r7, #24
 8006068:	4618      	mov	r0, r3
 800606a:	f000 f991 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006072:	e16e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006078:	e16b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800607a:	4b89      	ldr	r3, [pc, #548]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006086:	d107      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006088:	f107 030c 	add.w	r3, r7, #12
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fad3 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006096:	e15c      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609c:	e159      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800609e:	4b80      	ldr	r3, [pc, #512]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060a8:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d10c      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060ba:	4b79      	ldr	r3, [pc, #484]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	4a77      	ldr	r2, [pc, #476]	@ (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060cc:	e01e      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060ce:	4b74      	ldr	r3, [pc, #464]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d106      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80060dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e2:	d102      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060e4:	4b70      	ldr	r3, [pc, #448]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060e8:	e010      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ea:	4b6d      	ldr	r3, [pc, #436]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f6:	d106      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80060f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060fe:	d102      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006100:	4b6a      	ldr	r3, [pc, #424]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006104:	e002      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800610a:	e122      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800610c:	e121      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006112:	e11e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006118:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800611c:	430b      	orrs	r3, r1
 800611e:	d133      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006120:	4b5f      	ldr	r3, [pc, #380]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006128:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800612a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006136:	d012      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006138:	e023      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800613a:	4b59      	ldr	r3, [pc, #356]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006146:	d107      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fbc7 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006156:	e0fc      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800615c:	e0f9      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800615e:	4b50      	ldr	r3, [pc, #320]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616a:	d107      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616c:	f107 0318 	add.w	r3, r7, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f90d 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800617a:	e0ea      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006180:	e0e7      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006186:	e0e4      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006190:	430b      	orrs	r3, r1
 8006192:	f040 808d 	bne.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006196:	4b42      	ldr	r3, [pc, #264]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800619e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061a6:	d06b      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ae:	d874      	bhi.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b6:	d056      	beq.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d86c      	bhi.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061c6:	d03b      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061ce:	d864      	bhi.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061d6:	d021      	beq.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061de:	d85c      	bhi.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80061e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ec:	d004      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80061ee:	e054      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80061f0:	f000 f8b8 	bl	8006364 <HAL_RCCEx_GetD3PCLK1Freq>
 80061f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061f6:	e0ac      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061f8:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006204:	d107      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f8c0 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006214:	e09d      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621a:	e09a      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800621c:	4b20      	ldr	r3, [pc, #128]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006228:	d107      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fa02 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006238:	e08b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800623e:	e088      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006240:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b04      	cmp	r3, #4
 800624a:	d109      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800624c:	4b14      	ldr	r3, [pc, #80]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	08db      	lsrs	r3, r3, #3
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	4a13      	ldr	r2, [pc, #76]	@ (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800625e:	e078      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006264:	e075      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006266:	4b0e      	ldr	r3, [pc, #56]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006272:	d102      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006274:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006278:	e06b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627e:	e068      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006280:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800628c:	d102      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800628e:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006292:	e05e      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006298:	e05b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629e:	e058      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062a0:	58024400 	.word	0x58024400
 80062a4:	03d09000 	.word	0x03d09000
 80062a8:	003d0900 	.word	0x003d0900
 80062ac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80062b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80062b8:	430b      	orrs	r3, r1
 80062ba:	d148      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80062bc:	4b27      	ldr	r3, [pc, #156]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062cc:	d02a      	beq.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d4:	d838      	bhi.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e2:	d00d      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80062e4:	e030      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80062e6:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f2:	d102      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80062f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062f8:	e02b      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062fe:	e028      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006300:	4b16      	ldr	r3, [pc, #88]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800630c:	d107      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800630e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fae4 	bl	80068e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800631c:	e019      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006322:	e016      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006324:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800632c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006330:	d107      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006332:	f107 0318 	add.w	r3, r7, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f82a 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006340:	e007      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006346:	e004      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634c:	e001      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006354:	4618      	mov	r0, r3
 8006356:	3740      	adds	r7, #64	@ 0x40
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	58024400 	.word	0x58024400
 8006360:	007a1200 	.word	0x007a1200

08006364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006368:	f7fe f816 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4904      	ldr	r1, [pc, #16]	@ (800638c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	58024400 	.word	0x58024400
 800638c:	0800899c 	.word	0x0800899c

08006390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	@ 0x24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006398:	4ba1      	ldr	r3, [pc, #644]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80063a2:	4b9f      	ldr	r3, [pc, #636]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	0b1b      	lsrs	r3, r3, #12
 80063a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063ae:	4b9c      	ldr	r3, [pc, #624]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80063ba:	4b99      	ldr	r3, [pc, #612]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8111 	beq.w	8006600 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	f000 8083 	beq.w	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f200 80a1 	bhi.w	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d056      	beq.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80063fa:	e099      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b88      	ldr	r3, [pc, #544]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02d      	beq.n	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006408:	4b85      	ldr	r3, [pc, #532]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a84      	ldr	r2, [pc, #528]	@ (8006624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b7b      	ldr	r3, [pc, #492]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006462:	e087      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800662c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b6a      	ldr	r3, [pc, #424]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064a6:	e065      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b59      	ldr	r3, [pc, #356]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ea:	e043      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b48      	ldr	r3, [pc, #288]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800652e:	e021      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800653e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006542:	4b37      	ldr	r3, [pc, #220]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a03 	vldr	s12, [r7, #12]
 8006556:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006572:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006574:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	0a5b      	lsrs	r3, r3, #9
 800657a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80065a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80065d0:	4b13      	ldr	r3, [pc, #76]	@ (8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 2a90 	vmov	r2, s15
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065fe:	e008      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
}
 8006612:	bf00      	nop
 8006614:	3724      	adds	r7, #36	@ 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	46000000 	.word	0x46000000
 800662c:	4c742400 	.word	0x4c742400
 8006630:	4a742400 	.word	0x4a742400
 8006634:	4af42400 	.word	0x4af42400

08006638 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	@ 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006640:	4ba1      	ldr	r3, [pc, #644]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800664a:	4b9f      	ldr	r3, [pc, #636]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	0d1b      	lsrs	r3, r3, #20
 8006650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006654:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006656:	4b9c      	ldr	r3, [pc, #624]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006662:	4b99      	ldr	r3, [pc, #612]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8111 	beq.w	80068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b02      	cmp	r3, #2
 800668a:	f000 8083 	beq.w	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f200 80a1 	bhi.w	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d056      	beq.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066a2:	e099      	b.n	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b88      	ldr	r3, [pc, #544]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d02d      	beq.n	800670c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b85      	ldr	r3, [pc, #532]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a84      	ldr	r2, [pc, #528]	@ (80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b7b      	ldr	r3, [pc, #492]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800670a:	e087      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006732:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674e:	e065      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b59      	ldr	r3, [pc, #356]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a03 	vldr	s12, [r7, #12]
 8006776:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006792:	e043      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b48      	ldr	r3, [pc, #288]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d6:	e021      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800681c:	4b2a      	ldr	r3, [pc, #168]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006836:	edd7 6a07 	vldr	s13, [r7, #28]
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006842:	ee17 2a90 	vmov	r2, s15
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800684a:	4b1f      	ldr	r3, [pc, #124]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006864:	edd7 6a07 	vldr	s13, [r7, #28]
 8006868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006870:	ee17 2a90 	vmov	r2, s15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006878:	4b13      	ldr	r3, [pc, #76]	@ (80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687c:	0e1b      	lsrs	r3, r3, #24
 800687e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800688e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006892:	edd7 6a07 	vldr	s13, [r7, #28]
 8006896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689e:	ee17 2a90 	vmov	r2, s15
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	609a      	str	r2, [r3, #8]
}
 80068ba:	bf00      	nop
 80068bc:	3724      	adds	r7, #36	@ 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
 80068cc:	03d09000 	.word	0x03d09000
 80068d0:	46000000 	.word	0x46000000
 80068d4:	4c742400 	.word	0x4c742400
 80068d8:	4a742400 	.word	0x4a742400
 80068dc:	4af42400 	.word	0x4af42400

080068e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	@ 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068e8:	4ba0      	ldr	r3, [pc, #640]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80068f2:	4b9e      	ldr	r3, [pc, #632]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f6:	091b      	lsrs	r3, r3, #4
 80068f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80068fe:	4b9b      	ldr	r3, [pc, #620]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006908:	4b98      	ldr	r3, [pc, #608]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800690a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	ee07 3a90 	vmov	s15, r3
 800691c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006920:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8111 	beq.w	8006b4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b02      	cmp	r3, #2
 8006930:	f000 8083 	beq.w	8006a3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b02      	cmp	r3, #2
 8006938:	f200 80a1 	bhi.w	8006a7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d056      	beq.n	80069f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006948:	e099      	b.n	8006a7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800694a:	4b88      	ldr	r3, [pc, #544]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02d      	beq.n	80069b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006956:	4b85      	ldr	r3, [pc, #532]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	08db      	lsrs	r3, r3, #3
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	4a83      	ldr	r2, [pc, #524]	@ (8006b70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006980:	4b7a      	ldr	r3, [pc, #488]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006988:	ee07 3a90 	vmov	s15, r3
 800698c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006990:	ed97 6a03 	vldr	s12, [r7, #12]
 8006994:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069b0:	e087      	b.n	8006ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80069c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c4:	4b69      	ldr	r3, [pc, #420]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f4:	e065      	b.n	8006ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	ee07 3a90 	vmov	s15, r3
 80069fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a00:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a08:	4b58      	ldr	r3, [pc, #352]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a10:	ee07 3a90 	vmov	s15, r3
 8006a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a38:	e043      	b.n	8006ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a44:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006b80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4c:	4b47      	ldr	r3, [pc, #284]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a60:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7c:	e021      	b.n	8006ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a88:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a90:	4b36      	ldr	r3, [pc, #216]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	0a5b      	lsrs	r3, r3, #9
 8006ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae8:	ee17 2a90 	vmov	r2, s15
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006af0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b16:	ee17 2a90 	vmov	r2, s15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	0e1b      	lsrs	r3, r3, #24
 8006b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b44:	ee17 2a90 	vmov	r2, s15
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	3724      	adds	r7, #36	@ 0x24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	03d09000 	.word	0x03d09000
 8006b74:	46000000 	.word	0x46000000
 8006b78:	4c742400 	.word	0x4c742400
 8006b7c:	4a742400 	.word	0x4a742400
 8006b80:	4af42400 	.word	0x4af42400

08006b84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b92:	4b53      	ldr	r3, [pc, #332]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d101      	bne.n	8006ba2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e099      	b.n	8006cd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bae:	f7fa fd77 	bl	80016a0 <HAL_GetTick>
 8006bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bb6:	f7fa fd73 	bl	80016a0 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e086      	b.n	8006cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bc8:	4b45      	ldr	r3, [pc, #276]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bd4:	4b42      	ldr	r3, [pc, #264]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	493f      	ldr	r1, [pc, #252]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	025b      	lsls	r3, r3, #9
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c18:	4931      	ldr	r1, [pc, #196]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c1e:	4b30      	ldr	r3, [pc, #192]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	492d      	ldr	r1, [pc, #180]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	f023 0220 	bic.w	r2, r3, #32
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	4928      	ldr	r1, [pc, #160]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c42:	4b27      	ldr	r3, [pc, #156]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c46:	4a26      	ldr	r2, [pc, #152]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c48:	f023 0310 	bic.w	r3, r3, #16
 8006c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c52:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <RCCEx_PLL2_Config+0x160>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	69d2      	ldr	r2, [r2, #28]
 8006c5a:	00d2      	lsls	r2, r2, #3
 8006c5c:	4920      	ldr	r1, [pc, #128]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c68:	f043 0310 	orr.w	r3, r3, #16
 8006c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	4a19      	ldr	r2, [pc, #100]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c80:	e00f      	b.n	8006ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c88:	4b15      	ldr	r3, [pc, #84]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c94:	e005      	b.n	8006ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a11      	ldr	r2, [pc, #68]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cae:	f7fa fcf7 	bl	80016a0 <HAL_GetTick>
 8006cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cb4:	e008      	b.n	8006cc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cb6:	f7fa fcf3 	bl	80016a0 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cc8:	4b05      	ldr	r3, [pc, #20]	@ (8006ce0 <RCCEx_PLL2_Config+0x15c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	ffff0007 	.word	0xffff0007

08006ce8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cf6:	4b53      	ldr	r3, [pc, #332]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d101      	bne.n	8006d06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e099      	b.n	8006e3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d06:	4b4f      	ldr	r3, [pc, #316]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d12:	f7fa fcc5 	bl	80016a0 <HAL_GetTick>
 8006d16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d18:	e008      	b.n	8006d2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d1a:	f7fa fcc1 	bl	80016a0 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e086      	b.n	8006e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d2c:	4b45      	ldr	r3, [pc, #276]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f0      	bne.n	8006d1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d38:	4b42      	ldr	r3, [pc, #264]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	051b      	lsls	r3, r3, #20
 8006d46:	493f      	ldr	r1, [pc, #252]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	025b      	lsls	r3, r3, #9
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	061b      	lsls	r3, r3, #24
 8006d78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d7c:	4931      	ldr	r1, [pc, #196]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d82:	4b30      	ldr	r3, [pc, #192]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	492d      	ldr	r1, [pc, #180]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d94:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	4928      	ldr	r1, [pc, #160]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006da6:	4b27      	ldr	r3, [pc, #156]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006daa:	4a26      	ldr	r2, [pc, #152]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006db2:	4b24      	ldr	r3, [pc, #144]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006db6:	4b24      	ldr	r3, [pc, #144]	@ (8006e48 <RCCEx_PLL3_Config+0x160>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	69d2      	ldr	r2, [r2, #28]
 8006dbe:	00d2      	lsls	r2, r2, #3
 8006dc0:	4920      	ldr	r1, [pc, #128]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	4a1e      	ldr	r2, [pc, #120]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	4a19      	ldr	r2, [pc, #100]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006de4:	e00f      	b.n	8006e06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d106      	bne.n	8006dfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006dec:	4b15      	ldr	r3, [pc, #84]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	4a14      	ldr	r2, [pc, #80]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006df2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006df6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006df8:	e005      	b.n	8006e06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	4a11      	ldr	r2, [pc, #68]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e12:	f7fa fc45 	bl	80016a0 <HAL_GetTick>
 8006e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e18:	e008      	b.n	8006e2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e1a:	f7fa fc41 	bl	80016a0 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e006      	b.n	8006e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e2c:	4b05      	ldr	r3, [pc, #20]	@ (8006e44 <RCCEx_PLL3_Config+0x15c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0f0      	beq.n	8006e1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
 8006e48:	ffff0007 	.word	0xffff0007

08006e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e049      	b.n	8006ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa f9d6 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 f836 	bl	8006efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a46      	ldr	r2, [pc, #280]	@ (8007028 <TIM_Base_SetConfig+0x12c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f1a:	d00f      	beq.n	8006f3c <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a43      	ldr	r2, [pc, #268]	@ (800702c <TIM_Base_SetConfig+0x130>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a42      	ldr	r2, [pc, #264]	@ (8007030 <TIM_Base_SetConfig+0x134>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_Base_SetConfig+0x40>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a41      	ldr	r2, [pc, #260]	@ (8007034 <TIM_Base_SetConfig+0x138>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0x40>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a40      	ldr	r2, [pc, #256]	@ (8007038 <TIM_Base_SetConfig+0x13c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d108      	bne.n	8006f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a35      	ldr	r2, [pc, #212]	@ (8007028 <TIM_Base_SetConfig+0x12c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01f      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5c:	d01b      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a32      	ldr	r2, [pc, #200]	@ (800702c <TIM_Base_SetConfig+0x130>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d017      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a31      	ldr	r2, [pc, #196]	@ (8007030 <TIM_Base_SetConfig+0x134>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a30      	ldr	r2, [pc, #192]	@ (8007034 <TIM_Base_SetConfig+0x138>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2f      	ldr	r2, [pc, #188]	@ (8007038 <TIM_Base_SetConfig+0x13c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a2e      	ldr	r2, [pc, #184]	@ (800703c <TIM_Base_SetConfig+0x140>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a2d      	ldr	r2, [pc, #180]	@ (8007040 <TIM_Base_SetConfig+0x144>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0x9a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	@ (8007044 <TIM_Base_SetConfig+0x148>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a16      	ldr	r2, [pc, #88]	@ (8007028 <TIM_Base_SetConfig+0x12c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00f      	beq.n	8006ff4 <TIM_Base_SetConfig+0xf8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <TIM_Base_SetConfig+0x13c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <TIM_Base_SetConfig+0xf8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a17      	ldr	r2, [pc, #92]	@ (800703c <TIM_Base_SetConfig+0x140>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <TIM_Base_SetConfig+0xf8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a16      	ldr	r2, [pc, #88]	@ (8007040 <TIM_Base_SetConfig+0x144>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_Base_SetConfig+0xf8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a15      	ldr	r2, [pc, #84]	@ (8007044 <TIM_Base_SetConfig+0x148>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d103      	bne.n	8006ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b01      	cmp	r3, #1
 800700c:	d105      	bne.n	800701a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]
  }
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40010400 	.word	0x40010400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e06d      	b.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a30      	ldr	r2, [pc, #192]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2f      	ldr	r2, [pc, #188]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800709a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a20      	ldr	r2, [pc, #128]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d022      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d2:	d01d      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d018      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00e      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a15      	ldr	r2, [pc, #84]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10c      	bne.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40001800 	.word	0x40001800
 8007160:	40014000 	.word	0x40014000

08007164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e042      	b.n	80071fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fa f8b9 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	@ 0x24
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fd90 	bl	8007cd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f825 	bl	8007204 <UART_SetConfig>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e01b      	b.n	80071fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fe0f 	bl	8007e18 <UART_CheckIdleState>
 80071fa:	4603      	mov	r3, r0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b092      	sub	sp, #72	@ 0x48
 800720a:	af00      	add	r7, sp, #0
 800720c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	431a      	orrs	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	431a      	orrs	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	4313      	orrs	r3, r2
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4bbe      	ldr	r3, [pc, #760]	@ (800752c <UART_SetConfig+0x328>)
 8007234:	4013      	ands	r3, r2
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800723c:	430b      	orrs	r3, r1
 800723e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4ab3      	ldr	r2, [pc, #716]	@ (8007530 <UART_SetConfig+0x32c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800726c:	4313      	orrs	r3, r2
 800726e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	4baf      	ldr	r3, [pc, #700]	@ (8007534 <UART_SetConfig+0x330>)
 8007278:	4013      	ands	r3, r2
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007280:	430b      	orrs	r3, r1
 8007282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	f023 010f 	bic.w	r1, r3, #15
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4aa6      	ldr	r2, [pc, #664]	@ (8007538 <UART_SetConfig+0x334>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d177      	bne.n	8007394 <UART_SetConfig+0x190>
 80072a4:	4ba5      	ldr	r3, [pc, #660]	@ (800753c <UART_SetConfig+0x338>)
 80072a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ac:	2b28      	cmp	r3, #40	@ 0x28
 80072ae:	d86d      	bhi.n	800738c <UART_SetConfig+0x188>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <UART_SetConfig+0xb4>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	0800735d 	.word	0x0800735d
 80072bc:	0800738d 	.word	0x0800738d
 80072c0:	0800738d 	.word	0x0800738d
 80072c4:	0800738d 	.word	0x0800738d
 80072c8:	0800738d 	.word	0x0800738d
 80072cc:	0800738d 	.word	0x0800738d
 80072d0:	0800738d 	.word	0x0800738d
 80072d4:	0800738d 	.word	0x0800738d
 80072d8:	08007365 	.word	0x08007365
 80072dc:	0800738d 	.word	0x0800738d
 80072e0:	0800738d 	.word	0x0800738d
 80072e4:	0800738d 	.word	0x0800738d
 80072e8:	0800738d 	.word	0x0800738d
 80072ec:	0800738d 	.word	0x0800738d
 80072f0:	0800738d 	.word	0x0800738d
 80072f4:	0800738d 	.word	0x0800738d
 80072f8:	0800736d 	.word	0x0800736d
 80072fc:	0800738d 	.word	0x0800738d
 8007300:	0800738d 	.word	0x0800738d
 8007304:	0800738d 	.word	0x0800738d
 8007308:	0800738d 	.word	0x0800738d
 800730c:	0800738d 	.word	0x0800738d
 8007310:	0800738d 	.word	0x0800738d
 8007314:	0800738d 	.word	0x0800738d
 8007318:	08007375 	.word	0x08007375
 800731c:	0800738d 	.word	0x0800738d
 8007320:	0800738d 	.word	0x0800738d
 8007324:	0800738d 	.word	0x0800738d
 8007328:	0800738d 	.word	0x0800738d
 800732c:	0800738d 	.word	0x0800738d
 8007330:	0800738d 	.word	0x0800738d
 8007334:	0800738d 	.word	0x0800738d
 8007338:	0800737d 	.word	0x0800737d
 800733c:	0800738d 	.word	0x0800738d
 8007340:	0800738d 	.word	0x0800738d
 8007344:	0800738d 	.word	0x0800738d
 8007348:	0800738d 	.word	0x0800738d
 800734c:	0800738d 	.word	0x0800738d
 8007350:	0800738d 	.word	0x0800738d
 8007354:	0800738d 	.word	0x0800738d
 8007358:	08007385 	.word	0x08007385
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007362:	e222      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e21e      	b.n	80077aa <UART_SetConfig+0x5a6>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007372:	e21a      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737a:	e216      	b.n	80077aa <UART_SetConfig+0x5a6>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007382:	e212      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007384:	2340      	movs	r3, #64	@ 0x40
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e20e      	b.n	80077aa <UART_SetConfig+0x5a6>
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e20a      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a69      	ldr	r2, [pc, #420]	@ (8007540 <UART_SetConfig+0x33c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d130      	bne.n	8007400 <UART_SetConfig+0x1fc>
 800739e:	4b67      	ldr	r3, [pc, #412]	@ (800753c <UART_SetConfig+0x338>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d826      	bhi.n	80073f8 <UART_SetConfig+0x1f4>
 80073aa:	a201      	add	r2, pc, #4	@ (adr r2, 80073b0 <UART_SetConfig+0x1ac>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c9 	.word	0x080073c9
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073e9 	.word	0x080073e9
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e1ec      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e1e8      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e1e4      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e1e0      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073e8:	2320      	movs	r3, #32
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e1dc      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073f0:	2340      	movs	r3, #64	@ 0x40
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e1d8      	b.n	80077aa <UART_SetConfig+0x5a6>
 80073f8:	2380      	movs	r3, #128	@ 0x80
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e1d4      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a4f      	ldr	r2, [pc, #316]	@ (8007544 <UART_SetConfig+0x340>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d130      	bne.n	800746c <UART_SetConfig+0x268>
 800740a:	4b4c      	ldr	r3, [pc, #304]	@ (800753c <UART_SetConfig+0x338>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d826      	bhi.n	8007464 <UART_SetConfig+0x260>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <UART_SetConfig+0x218>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007435 	.word	0x08007435
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007445 	.word	0x08007445
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e1b6      	b.n	80077aa <UART_SetConfig+0x5a6>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e1b2      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e1ae      	b.n	80077aa <UART_SetConfig+0x5a6>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e1aa      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e1a6      	b.n	80077aa <UART_SetConfig+0x5a6>
 800745c:	2340      	movs	r3, #64	@ 0x40
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e1a2      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007464:	2380      	movs	r3, #128	@ 0x80
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e19e      	b.n	80077aa <UART_SetConfig+0x5a6>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a35      	ldr	r2, [pc, #212]	@ (8007548 <UART_SetConfig+0x344>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d130      	bne.n	80074d8 <UART_SetConfig+0x2d4>
 8007476:	4b31      	ldr	r3, [pc, #196]	@ (800753c <UART_SetConfig+0x338>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b05      	cmp	r3, #5
 8007480:	d826      	bhi.n	80074d0 <UART_SetConfig+0x2cc>
 8007482:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x284>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074b1 	.word	0x080074b1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e180      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e17c      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e178      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e174      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e170      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074c8:	2340      	movs	r3, #64	@ 0x40
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e16c      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074d0:	2380      	movs	r3, #128	@ 0x80
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e168      	b.n	80077aa <UART_SetConfig+0x5a6>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1b      	ldr	r2, [pc, #108]	@ (800754c <UART_SetConfig+0x348>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d142      	bne.n	8007568 <UART_SetConfig+0x364>
 80074e2:	4b16      	ldr	r3, [pc, #88]	@ (800753c <UART_SetConfig+0x338>)
 80074e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d838      	bhi.n	8007560 <UART_SetConfig+0x35c>
 80074ee:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x2f0>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007515 	.word	0x08007515
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	08007525 	.word	0x08007525
 8007504:	08007551 	.word	0x08007551
 8007508:	08007559 	.word	0x08007559
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e14a      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e146      	b.n	80077aa <UART_SetConfig+0x5a6>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e142      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e13e      	b.n	80077aa <UART_SetConfig+0x5a6>
 800752c:	cfff69f3 	.word	0xcfff69f3
 8007530:	58000c00 	.word	0x58000c00
 8007534:	11fff4ff 	.word	0x11fff4ff
 8007538:	40011000 	.word	0x40011000
 800753c:	58024400 	.word	0x58024400
 8007540:	40004400 	.word	0x40004400
 8007544:	40004800 	.word	0x40004800
 8007548:	40004c00 	.word	0x40004c00
 800754c:	40005000 	.word	0x40005000
 8007550:	2320      	movs	r3, #32
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e128      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007558:	2340      	movs	r3, #64	@ 0x40
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e124      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007560:	2380      	movs	r3, #128	@ 0x80
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e120      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4acb      	ldr	r2, [pc, #812]	@ (800789c <UART_SetConfig+0x698>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d176      	bne.n	8007660 <UART_SetConfig+0x45c>
 8007572:	4bcb      	ldr	r3, [pc, #812]	@ (80078a0 <UART_SetConfig+0x69c>)
 8007574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800757a:	2b28      	cmp	r3, #40	@ 0x28
 800757c:	d86c      	bhi.n	8007658 <UART_SetConfig+0x454>
 800757e:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <UART_SetConfig+0x380>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	08007629 	.word	0x08007629
 8007588:	08007659 	.word	0x08007659
 800758c:	08007659 	.word	0x08007659
 8007590:	08007659 	.word	0x08007659
 8007594:	08007659 	.word	0x08007659
 8007598:	08007659 	.word	0x08007659
 800759c:	08007659 	.word	0x08007659
 80075a0:	08007659 	.word	0x08007659
 80075a4:	08007631 	.word	0x08007631
 80075a8:	08007659 	.word	0x08007659
 80075ac:	08007659 	.word	0x08007659
 80075b0:	08007659 	.word	0x08007659
 80075b4:	08007659 	.word	0x08007659
 80075b8:	08007659 	.word	0x08007659
 80075bc:	08007659 	.word	0x08007659
 80075c0:	08007659 	.word	0x08007659
 80075c4:	08007639 	.word	0x08007639
 80075c8:	08007659 	.word	0x08007659
 80075cc:	08007659 	.word	0x08007659
 80075d0:	08007659 	.word	0x08007659
 80075d4:	08007659 	.word	0x08007659
 80075d8:	08007659 	.word	0x08007659
 80075dc:	08007659 	.word	0x08007659
 80075e0:	08007659 	.word	0x08007659
 80075e4:	08007641 	.word	0x08007641
 80075e8:	08007659 	.word	0x08007659
 80075ec:	08007659 	.word	0x08007659
 80075f0:	08007659 	.word	0x08007659
 80075f4:	08007659 	.word	0x08007659
 80075f8:	08007659 	.word	0x08007659
 80075fc:	08007659 	.word	0x08007659
 8007600:	08007659 	.word	0x08007659
 8007604:	08007649 	.word	0x08007649
 8007608:	08007659 	.word	0x08007659
 800760c:	08007659 	.word	0x08007659
 8007610:	08007659 	.word	0x08007659
 8007614:	08007659 	.word	0x08007659
 8007618:	08007659 	.word	0x08007659
 800761c:	08007659 	.word	0x08007659
 8007620:	08007659 	.word	0x08007659
 8007624:	08007651 	.word	0x08007651
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e0bc      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e0b8      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e0b4      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e0b0      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007648:	2320      	movs	r3, #32
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e0ac      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007650:	2340      	movs	r3, #64	@ 0x40
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e0a8      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007658:	2380      	movs	r3, #128	@ 0x80
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e0a4      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a8f      	ldr	r2, [pc, #572]	@ (80078a4 <UART_SetConfig+0x6a0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d130      	bne.n	80076cc <UART_SetConfig+0x4c8>
 800766a:	4b8d      	ldr	r3, [pc, #564]	@ (80078a0 <UART_SetConfig+0x69c>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b05      	cmp	r3, #5
 8007674:	d826      	bhi.n	80076c4 <UART_SetConfig+0x4c0>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x478>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007695 	.word	0x08007695
 8007680:	0800769d 	.word	0x0800769d
 8007684:	080076a5 	.word	0x080076a5
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076bd 	.word	0x080076bd
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e086      	b.n	80077aa <UART_SetConfig+0x5a6>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e082      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e07e      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e07a      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076b4:	2320      	movs	r3, #32
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e076      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076bc:	2340      	movs	r3, #64	@ 0x40
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e072      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e06e      	b.n	80077aa <UART_SetConfig+0x5a6>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a75      	ldr	r2, [pc, #468]	@ (80078a8 <UART_SetConfig+0x6a4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d130      	bne.n	8007738 <UART_SetConfig+0x534>
 80076d6:	4b72      	ldr	r3, [pc, #456]	@ (80078a0 <UART_SetConfig+0x69c>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d826      	bhi.n	8007730 <UART_SetConfig+0x52c>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x4e4>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007729 	.word	0x08007729
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e050      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e04c      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e048      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e044      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007720:	2320      	movs	r3, #32
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e040      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007728:	2340      	movs	r3, #64	@ 0x40
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e03c      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007730:	2380      	movs	r3, #128	@ 0x80
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e038      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a5b      	ldr	r2, [pc, #364]	@ (80078ac <UART_SetConfig+0x6a8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d130      	bne.n	80077a4 <UART_SetConfig+0x5a0>
 8007742:	4b57      	ldr	r3, [pc, #348]	@ (80078a0 <UART_SetConfig+0x69c>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b05      	cmp	r3, #5
 800774c:	d826      	bhi.n	800779c <UART_SetConfig+0x598>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <UART_SetConfig+0x550>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	0800776d 	.word	0x0800776d
 8007758:	08007775 	.word	0x08007775
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007785 	.word	0x08007785
 8007764:	0800778d 	.word	0x0800778d
 8007768:	08007795 	.word	0x08007795
 800776c:	2302      	movs	r3, #2
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e01a      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e016      	b.n	80077aa <UART_SetConfig+0x5a6>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e012      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e00e      	b.n	80077aa <UART_SetConfig+0x5a6>
 800778c:	2320      	movs	r3, #32
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e00a      	b.n	80077aa <UART_SetConfig+0x5a6>
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e006      	b.n	80077aa <UART_SetConfig+0x5a6>
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e002      	b.n	80077aa <UART_SetConfig+0x5a6>
 80077a4:	2380      	movs	r3, #128	@ 0x80
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a3f      	ldr	r2, [pc, #252]	@ (80078ac <UART_SetConfig+0x6a8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	f040 80f8 	bne.w	80079a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	dc46      	bgt.n	800784c <UART_SetConfig+0x648>
 80077be:	2b02      	cmp	r3, #2
 80077c0:	f2c0 8082 	blt.w	80078c8 <UART_SetConfig+0x6c4>
 80077c4:	3b02      	subs	r3, #2
 80077c6:	2b1e      	cmp	r3, #30
 80077c8:	d87e      	bhi.n	80078c8 <UART_SetConfig+0x6c4>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x5cc>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007853 	.word	0x08007853
 80077d4:	080078c9 	.word	0x080078c9
 80077d8:	0800785b 	.word	0x0800785b
 80077dc:	080078c9 	.word	0x080078c9
 80077e0:	080078c9 	.word	0x080078c9
 80077e4:	080078c9 	.word	0x080078c9
 80077e8:	0800786b 	.word	0x0800786b
 80077ec:	080078c9 	.word	0x080078c9
 80077f0:	080078c9 	.word	0x080078c9
 80077f4:	080078c9 	.word	0x080078c9
 80077f8:	080078c9 	.word	0x080078c9
 80077fc:	080078c9 	.word	0x080078c9
 8007800:	080078c9 	.word	0x080078c9
 8007804:	080078c9 	.word	0x080078c9
 8007808:	0800787b 	.word	0x0800787b
 800780c:	080078c9 	.word	0x080078c9
 8007810:	080078c9 	.word	0x080078c9
 8007814:	080078c9 	.word	0x080078c9
 8007818:	080078c9 	.word	0x080078c9
 800781c:	080078c9 	.word	0x080078c9
 8007820:	080078c9 	.word	0x080078c9
 8007824:	080078c9 	.word	0x080078c9
 8007828:	080078c9 	.word	0x080078c9
 800782c:	080078c9 	.word	0x080078c9
 8007830:	080078c9 	.word	0x080078c9
 8007834:	080078c9 	.word	0x080078c9
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078c9 	.word	0x080078c9
 8007844:	080078c9 	.word	0x080078c9
 8007848:	080078bb 	.word	0x080078bb
 800784c:	2b40      	cmp	r3, #64	@ 0x40
 800784e:	d037      	beq.n	80078c0 <UART_SetConfig+0x6bc>
 8007850:	e03a      	b.n	80078c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007852:	f7fe fd87 	bl	8006364 <HAL_RCCEx_GetD3PCLK1Freq>
 8007856:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007858:	e03c      	b.n	80078d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fd96 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007868:	e034      	b.n	80078d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fee2 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e02c      	b.n	80078d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787a:	4b09      	ldr	r3, [pc, #36]	@ (80078a0 <UART_SetConfig+0x69c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d016      	beq.n	80078b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007886:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <UART_SetConfig+0x69c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4a07      	ldr	r2, [pc, #28]	@ (80078b0 <UART_SetConfig+0x6ac>)
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007898:	e01c      	b.n	80078d4 <UART_SetConfig+0x6d0>
 800789a:	bf00      	nop
 800789c:	40011400 	.word	0x40011400
 80078a0:	58024400 	.word	0x58024400
 80078a4:	40007800 	.word	0x40007800
 80078a8:	40007c00 	.word	0x40007c00
 80078ac:	58000c00 	.word	0x58000c00
 80078b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80078b4:	4b9d      	ldr	r3, [pc, #628]	@ (8007b2c <UART_SetConfig+0x928>)
 80078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b8:	e00c      	b.n	80078d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078ba:	4b9d      	ldr	r3, [pc, #628]	@ (8007b30 <UART_SetConfig+0x92c>)
 80078bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078be:	e009      	b.n	80078d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c6:	e005      	b.n	80078d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 81de 	beq.w	8007c98 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	4a94      	ldr	r2, [pc, #592]	@ (8007b34 <UART_SetConfig+0x930>)
 80078e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	4413      	add	r3, r2
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d305      	bcc.n	800790c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007908:	429a      	cmp	r2, r3
 800790a:	d903      	bls.n	8007914 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007912:	e1c1      	b.n	8007c98 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007916:	2200      	movs	r2, #0
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	60fa      	str	r2, [r7, #12]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	4a84      	ldr	r2, [pc, #528]	@ (8007b34 <UART_SetConfig+0x930>)
 8007922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007926:	b29b      	uxth	r3, r3
 8007928:	2200      	movs	r2, #0
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007936:	f7f8 fccf 	bl	80002d8 <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4610      	mov	r0, r2
 8007940:	4619      	mov	r1, r3
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	020b      	lsls	r3, r1, #8
 800794c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007950:	0202      	lsls	r2, r0, #8
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	6849      	ldr	r1, [r1, #4]
 8007956:	0849      	lsrs	r1, r1, #1
 8007958:	2000      	movs	r0, #0
 800795a:	460c      	mov	r4, r1
 800795c:	4605      	mov	r5, r0
 800795e:	eb12 0804 	adds.w	r8, r2, r4
 8007962:	eb43 0905 	adc.w	r9, r3, r5
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	469a      	mov	sl, r3
 800796e:	4693      	mov	fp, r2
 8007970:	4652      	mov	r2, sl
 8007972:	465b      	mov	r3, fp
 8007974:	4640      	mov	r0, r8
 8007976:	4649      	mov	r1, r9
 8007978:	f7f8 fcae 	bl	80002d8 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4613      	mov	r3, r2
 8007982:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800798a:	d308      	bcc.n	800799e <UART_SetConfig+0x79a>
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007992:	d204      	bcs.n	800799e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800799a:	60da      	str	r2, [r3, #12]
 800799c:	e17c      	b.n	8007c98 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079a4:	e178      	b.n	8007c98 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ae:	f040 80c5 	bne.w	8007b3c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80079b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	dc48      	bgt.n	8007a4c <UART_SetConfig+0x848>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	db7b      	blt.n	8007ab6 <UART_SetConfig+0x8b2>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d879      	bhi.n	8007ab6 <UART_SetConfig+0x8b2>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x7c4>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a53 	.word	0x08007a53
 80079cc:	08007a5b 	.word	0x08007a5b
 80079d0:	08007ab7 	.word	0x08007ab7
 80079d4:	08007ab7 	.word	0x08007ab7
 80079d8:	08007a63 	.word	0x08007a63
 80079dc:	08007ab7 	.word	0x08007ab7
 80079e0:	08007ab7 	.word	0x08007ab7
 80079e4:	08007ab7 	.word	0x08007ab7
 80079e8:	08007a73 	.word	0x08007a73
 80079ec:	08007ab7 	.word	0x08007ab7
 80079f0:	08007ab7 	.word	0x08007ab7
 80079f4:	08007ab7 	.word	0x08007ab7
 80079f8:	08007ab7 	.word	0x08007ab7
 80079fc:	08007ab7 	.word	0x08007ab7
 8007a00:	08007ab7 	.word	0x08007ab7
 8007a04:	08007ab7 	.word	0x08007ab7
 8007a08:	08007a83 	.word	0x08007a83
 8007a0c:	08007ab7 	.word	0x08007ab7
 8007a10:	08007ab7 	.word	0x08007ab7
 8007a14:	08007ab7 	.word	0x08007ab7
 8007a18:	08007ab7 	.word	0x08007ab7
 8007a1c:	08007ab7 	.word	0x08007ab7
 8007a20:	08007ab7 	.word	0x08007ab7
 8007a24:	08007ab7 	.word	0x08007ab7
 8007a28:	08007ab7 	.word	0x08007ab7
 8007a2c:	08007ab7 	.word	0x08007ab7
 8007a30:	08007ab7 	.word	0x08007ab7
 8007a34:	08007ab7 	.word	0x08007ab7
 8007a38:	08007ab7 	.word	0x08007ab7
 8007a3c:	08007ab7 	.word	0x08007ab7
 8007a40:	08007ab7 	.word	0x08007ab7
 8007a44:	08007ab7 	.word	0x08007ab7
 8007a48:	08007aa9 	.word	0x08007aa9
 8007a4c:	2b40      	cmp	r3, #64	@ 0x40
 8007a4e:	d02e      	beq.n	8007aae <UART_SetConfig+0x8aa>
 8007a50:	e031      	b.n	8007ab6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a52:	f7fc fcd1 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8007a56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a58:	e033      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a5a:	f7fc fce3 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8007a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a60:	e02f      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fc92 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e027      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a72:	f107 0318 	add.w	r3, r7, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fdde 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e01f      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a82:	4b2d      	ldr	r3, [pc, #180]	@ (8007b38 <UART_SetConfig+0x934>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b38 <UART_SetConfig+0x934>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	08db      	lsrs	r3, r3, #3
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	4a24      	ldr	r2, [pc, #144]	@ (8007b2c <UART_SetConfig+0x928>)
 8007a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aa0:	e00f      	b.n	8007ac2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007aa2:	4b22      	ldr	r3, [pc, #136]	@ (8007b2c <UART_SetConfig+0x928>)
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa6:	e00c      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aa8:	4b21      	ldr	r3, [pc, #132]	@ (8007b30 <UART_SetConfig+0x92c>)
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aac:	e009      	b.n	8007ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e005      	b.n	8007ac2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80e7 	beq.w	8007c98 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	4a19      	ldr	r2, [pc, #100]	@ (8007b34 <UART_SetConfig+0x930>)
 8007ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007adc:	005a      	lsls	r2, r3, #1
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	2b0f      	cmp	r3, #15
 8007af4:	d916      	bls.n	8007b24 <UART_SetConfig+0x920>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afc:	d212      	bcs.n	8007b24 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f023 030f 	bic.w	r3, r3, #15
 8007b06:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b16:	4313      	orrs	r3, r2
 8007b18:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b20:	60da      	str	r2, [r3, #12]
 8007b22:	e0b9      	b.n	8007c98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b2a:	e0b5      	b.n	8007c98 <UART_SetConfig+0xa94>
 8007b2c:	03d09000 	.word	0x03d09000
 8007b30:	003d0900 	.word	0x003d0900
 8007b34:	080089ac 	.word	0x080089ac
 8007b38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	dc49      	bgt.n	8007bd8 <UART_SetConfig+0x9d4>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db7c      	blt.n	8007c42 <UART_SetConfig+0xa3e>
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d87a      	bhi.n	8007c42 <UART_SetConfig+0xa3e>
 8007b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x950>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007bdf 	.word	0x08007bdf
 8007b58:	08007be7 	.word	0x08007be7
 8007b5c:	08007c43 	.word	0x08007c43
 8007b60:	08007c43 	.word	0x08007c43
 8007b64:	08007bef 	.word	0x08007bef
 8007b68:	08007c43 	.word	0x08007c43
 8007b6c:	08007c43 	.word	0x08007c43
 8007b70:	08007c43 	.word	0x08007c43
 8007b74:	08007bff 	.word	0x08007bff
 8007b78:	08007c43 	.word	0x08007c43
 8007b7c:	08007c43 	.word	0x08007c43
 8007b80:	08007c43 	.word	0x08007c43
 8007b84:	08007c43 	.word	0x08007c43
 8007b88:	08007c43 	.word	0x08007c43
 8007b8c:	08007c43 	.word	0x08007c43
 8007b90:	08007c43 	.word	0x08007c43
 8007b94:	08007c0f 	.word	0x08007c0f
 8007b98:	08007c43 	.word	0x08007c43
 8007b9c:	08007c43 	.word	0x08007c43
 8007ba0:	08007c43 	.word	0x08007c43
 8007ba4:	08007c43 	.word	0x08007c43
 8007ba8:	08007c43 	.word	0x08007c43
 8007bac:	08007c43 	.word	0x08007c43
 8007bb0:	08007c43 	.word	0x08007c43
 8007bb4:	08007c43 	.word	0x08007c43
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c43 	.word	0x08007c43
 8007bc0:	08007c43 	.word	0x08007c43
 8007bc4:	08007c43 	.word	0x08007c43
 8007bc8:	08007c43 	.word	0x08007c43
 8007bcc:	08007c43 	.word	0x08007c43
 8007bd0:	08007c43 	.word	0x08007c43
 8007bd4:	08007c35 	.word	0x08007c35
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d02e      	beq.n	8007c3a <UART_SetConfig+0xa36>
 8007bdc:	e031      	b.n	8007c42 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bde:	f7fc fc0b 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8007be2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007be4:	e033      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be6:	f7fc fc1d 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8007bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bec:	e02f      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fbcc 	bl	8006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bfc:	e027      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bfe:	f107 0318 	add.w	r3, r7, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fd18 	bl	8006638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c0c:	e01f      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8007cc4 <UART_SetConfig+0xac0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cc4 <UART_SetConfig+0xac0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	08db      	lsrs	r3, r3, #3
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	4a28      	ldr	r2, [pc, #160]	@ (8007cc8 <UART_SetConfig+0xac4>)
 8007c26:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c2c:	e00f      	b.n	8007c4e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007c2e:	4b26      	ldr	r3, [pc, #152]	@ (8007cc8 <UART_SetConfig+0xac4>)
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c32:	e00c      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c34:	4b25      	ldr	r3, [pc, #148]	@ (8007ccc <UART_SetConfig+0xac8>)
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e009      	b.n	8007c4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c40:	e005      	b.n	8007c4e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d021      	beq.n	8007c98 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <UART_SetConfig+0xacc>)
 8007c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	441a      	add	r2, r3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	d909      	bls.n	8007c92 <UART_SetConfig+0xa8e>
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c84:	d205      	bcs.n	8007c92 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60da      	str	r2, [r3, #12]
 8007c90:	e002      	b.n	8007c98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2200      	movs	r2, #0
 8007cac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cb4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3748      	adds	r7, #72	@ 0x48
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cc2:	bf00      	nop
 8007cc4:	58024400 	.word	0x58024400
 8007cc8:	03d09000 	.word	0x03d09000
 8007ccc:	003d0900 	.word	0x003d0900
 8007cd0:	080089ac 	.word	0x080089ac

08007cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd2:	d10a      	bne.n	8007dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b098      	sub	sp, #96	@ 0x60
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e28:	f7f9 fc3a 	bl	80016a0 <HAL_GetTick>
 8007e2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d12f      	bne.n	8007e9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e44:	2200      	movs	r2, #0
 8007e46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f88e 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d022      	beq.n	8007e9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e6      	bne.n	8007e56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e063      	b.n	8007f64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d149      	bne.n	8007f3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f857 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d03c      	beq.n	8007f3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3308      	adds	r3, #8
 8007efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f16:	61fa      	str	r2, [r7, #28]
 8007f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	69b9      	ldr	r1, [r7, #24]
 8007f1c:	69fa      	ldr	r2, [r7, #28]
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	617b      	str	r3, [r7, #20]
   return(result);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e012      	b.n	8007f64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3758      	adds	r7, #88	@ 0x58
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7c:	e04f      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d04b      	beq.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f86:	f7f9 fb8b 	bl	80016a0 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e04e      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d037      	beq.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b80      	cmp	r3, #128	@ 0x80
 8007fb2:	d034      	beq.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b40      	cmp	r3, #64	@ 0x40
 8007fb8:	d031      	beq.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d110      	bne.n	8007fea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 f839 	bl	8008048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e029      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff8:	d111      	bne.n	800801e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f81f 	bl	8008048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e00f      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4013      	ands	r3, r2
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	429a      	cmp	r2, r3
 800802c:	bf0c      	ite	eq
 800802e:	2301      	moveq	r3, #1
 8008030:	2300      	movne	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	429a      	cmp	r2, r3
 800803a:	d0a0      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b095      	sub	sp, #84	@ 0x54
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800806e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008070:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3308      	adds	r3, #8
 8008088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	61fb      	str	r3, [r7, #28]
   return(result);
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	4b1e      	ldr	r3, [pc, #120]	@ (8008110 <UART_EndRxTransfer+0xc8>)
 8008096:	4013      	ands	r3, r2
 8008098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3308      	adds	r3, #8
 80080a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d118      	bne.n	80080f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f023 0310 	bic.w	r3, r3, #16
 80080d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6979      	ldr	r1, [r7, #20]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e6      	bne.n	80080be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008104:	bf00      	nop
 8008106:	3754      	adds	r7, #84	@ 0x54
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	effffffe 	.word	0xeffffffe

08008114 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_UARTEx_DisableFifoMode+0x16>
 8008126:	2302      	movs	r3, #2
 8008128:	e027      	b.n	800817a <HAL_UARTEx_DisableFifoMode+0x66>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2224      	movs	r2, #36	@ 0x24
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0201 	bic.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008158:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800819a:	2302      	movs	r3, #2
 800819c:	e02d      	b.n	80081fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2224      	movs	r2, #36	@ 0x24
 80081aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0201 	bic.w	r2, r2, #1
 80081c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f850 	bl	8008280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008216:	2302      	movs	r3, #2
 8008218:	e02d      	b.n	8008276 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2224      	movs	r2, #36	@ 0x24
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f812 	bl	8008280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082a0:	e031      	b.n	8008306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082a2:	2310      	movs	r3, #16
 80082a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082a6:	2310      	movs	r3, #16
 80082a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	0e5b      	lsrs	r3, r3, #25
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	0f5b      	lsrs	r3, r3, #29
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	7b3a      	ldrb	r2, [r7, #12]
 80082ce:	4911      	ldr	r1, [pc, #68]	@ (8008314 <UARTEx_SetNbDataToProcess+0x94>)
 80082d0:	5c8a      	ldrb	r2, [r1, r2]
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082d6:	7b3a      	ldrb	r2, [r7, #12]
 80082d8:	490f      	ldr	r1, [pc, #60]	@ (8008318 <UARTEx_SetNbDataToProcess+0x98>)
 80082da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	7b7a      	ldrb	r2, [r7, #13]
 80082ec:	4909      	ldr	r1, [pc, #36]	@ (8008314 <UARTEx_SetNbDataToProcess+0x94>)
 80082ee:	5c8a      	ldrb	r2, [r1, r2]
 80082f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082f4:	7b7a      	ldrb	r2, [r7, #13]
 80082f6:	4908      	ldr	r1, [pc, #32]	@ (8008318 <UARTEx_SetNbDataToProcess+0x98>)
 80082f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	080089c4 	.word	0x080089c4
 8008318:	080089cc 	.word	0x080089cc

0800831c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800831c:	b084      	sub	sp, #16
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	f107 001c 	add.w	r0, r7, #28
 800832a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800832e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008332:	2b01      	cmp	r3, #1
 8008334:	d121      	bne.n	800837a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	4b2c      	ldr	r3, [pc, #176]	@ (80083f8 <USB_CoreInit+0xdc>)
 8008348:	4013      	ands	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800835a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800835e:	2b01      	cmp	r3, #1
 8008360:	d105      	bne.n	800836e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 faaa 	bl	80088c8 <USB_CoreReset>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	e01b      	b.n	80083b2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa9e 	bl	80088c8 <USB_CoreReset>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008390:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80083a4:	e005      	b.n	80083b2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083b2:	7fbb      	ldrb	r3, [r7, #30]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d116      	bne.n	80083e6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <USB_CoreInit+0xe0>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f043 0206 	orr.w	r2, r3, #6
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f043 0220 	orr.w	r2, r3, #32
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083f2:	b004      	add	sp, #16
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	ffbdffbf 	.word	0xffbdffbf
 80083fc:	03ee0000 	.word	0x03ee0000

08008400 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f023 0201 	bic.w	r2, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d115      	bne.n	8008470 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008450:	200a      	movs	r0, #10
 8008452:	f7f9 f931 	bl	80016b8 <HAL_Delay>
      ms += 10U;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	330a      	adds	r3, #10
 800845a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa25 	bl	80088ac <USB_GetMode>
 8008462:	4603      	mov	r3, r0
 8008464:	2b01      	cmp	r3, #1
 8008466:	d01e      	beq.n	80084a6 <USB_SetCurrentMode+0x84>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2bc7      	cmp	r3, #199	@ 0xc7
 800846c:	d9f0      	bls.n	8008450 <USB_SetCurrentMode+0x2e>
 800846e:	e01a      	b.n	80084a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d115      	bne.n	80084a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008482:	200a      	movs	r0, #10
 8008484:	f7f9 f918 	bl	80016b8 <HAL_Delay>
      ms += 10U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	330a      	adds	r3, #10
 800848c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa0c 	bl	80088ac <USB_GetMode>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <USB_SetCurrentMode+0x84>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2bc7      	cmp	r3, #199	@ 0xc7
 800849e:	d9f0      	bls.n	8008482 <USB_SetCurrentMode+0x60>
 80084a0:	e001      	b.n	80084a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e005      	b.n	80084b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2bc8      	cmp	r3, #200	@ 0xc8
 80084aa:	d101      	bne.n	80084b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084bc:	b084      	sub	sp, #16
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80084ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084d6:	2300      	movs	r3, #0
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	e009      	b.n	80084f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3340      	adds	r3, #64	@ 0x40
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	2200      	movs	r2, #0
 80084e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3301      	adds	r3, #1
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b0e      	cmp	r3, #14
 80084f4:	d9f2      	bls.n	80084dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d11c      	bne.n	8008538 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008516:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e005      	b.n	8008544 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800854a:	461a      	mov	r2, r3
 800854c:	2300      	movs	r3, #0
 800854e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008550:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008554:	2b01      	cmp	r3, #1
 8008556:	d10d      	bne.n	8008574 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f968 	bl	8008838 <USB_SetDevSpeed>
 8008568:	e008      	b.n	800857c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800856a:	2101      	movs	r1, #1
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f963 	bl	8008838 <USB_SetDevSpeed>
 8008572:	e003      	b.n	800857c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008574:	2103      	movs	r1, #3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f95e 	bl	8008838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800857c:	2110      	movs	r1, #16
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8fa 	bl	8008778 <USB_FlushTxFifo>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f924 	bl	80087dc <USB_FlushRxFifo>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a4:	461a      	mov	r2, r3
 80085a6:	2300      	movs	r3, #0
 80085a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b0:	461a      	mov	r2, r3
 80085b2:	2300      	movs	r3, #0
 80085b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	e043      	b.n	8008650 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085de:	d118      	bne.n	8008612 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f2:	461a      	mov	r2, r3
 80085f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	e013      	b.n	8008624 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008608:	461a      	mov	r2, r3
 800860a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e008      	b.n	8008624 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800861e:	461a      	mov	r2, r3
 8008620:	2300      	movs	r3, #0
 8008622:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008630:	461a      	mov	r2, r3
 8008632:	2300      	movs	r3, #0
 8008634:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008642:	461a      	mov	r2, r3
 8008644:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	3301      	adds	r3, #1
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008654:	461a      	mov	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4293      	cmp	r3, r2
 800865a:	d3b5      	bcc.n	80085c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800865c:	2300      	movs	r3, #0
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	e043      	b.n	80086ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008678:	d118      	bne.n	80086ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868c:	461a      	mov	r2, r3
 800868e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	e013      	b.n	80086be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a2:	461a      	mov	r2, r3
 80086a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e008      	b.n	80086be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b8:	461a      	mov	r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ca:	461a      	mov	r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086dc:	461a      	mov	r2, r3
 80086de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	3301      	adds	r3, #1
 80086e8:	613b      	str	r3, [r7, #16]
 80086ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086ee:	461a      	mov	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d3b5      	bcc.n	8008662 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008708:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008716:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008718:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f043 0210 	orr.w	r2, r3, #16
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	4b0f      	ldr	r3, [pc, #60]	@ (8008770 <USB_DevInit+0x2b4>)
 8008732:	4313      	orrs	r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008738:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f043 0208 	orr.w	r2, r3, #8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800874c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <USB_DevInit+0x2b8>)
 800875a:	4313      	orrs	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800876c:	b004      	add	sp, #16
 800876e:	4770      	bx	lr
 8008770:	803c3800 	.word	0x803c3800
 8008774:	40000004 	.word	0x40000004

08008778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008792:	d901      	bls.n	8008798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e01b      	b.n	80087d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	daf2      	bge.n	8008786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	019b      	lsls	r3, r3, #6
 80087a8:	f043 0220 	orr.w	r2, r3, #32
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087bc:	d901      	bls.n	80087c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e006      	b.n	80087d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d0f0      	beq.n	80087b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087f4:	d901      	bls.n	80087fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e018      	b.n	800882c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	daf2      	bge.n	80087e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2210      	movs	r2, #16
 800880a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008818:	d901      	bls.n	800881e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e006      	b.n	800882c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 0310 	and.w	r3, r3, #16
 8008826:	2b10      	cmp	r3, #16
 8008828:	d0f0      	beq.n	800880c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008858:	4313      	orrs	r3, r2
 800885a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008884:	f023 0303 	bic.w	r3, r3, #3
 8008888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008898:	f043 0302 	orr.w	r3, r3, #2
 800889c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0301 	and.w	r3, r3, #1
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088e0:	d901      	bls.n	80088e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e01b      	b.n	800891e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	daf2      	bge.n	80088d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f043 0201 	orr.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800890a:	d901      	bls.n	8008910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e006      	b.n	800891e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d0f0      	beq.n	80088fe <USB_CoreReset+0x36>

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <memset>:
 800892a:	4402      	add	r2, r0
 800892c:	4603      	mov	r3, r0
 800892e:	4293      	cmp	r3, r2
 8008930:	d100      	bne.n	8008934 <memset+0xa>
 8008932:	4770      	bx	lr
 8008934:	f803 1b01 	strb.w	r1, [r3], #1
 8008938:	e7f9      	b.n	800892e <memset+0x4>
	...

0800893c <__libc_init_array>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4d0d      	ldr	r5, [pc, #52]	@ (8008974 <__libc_init_array+0x38>)
 8008940:	4c0d      	ldr	r4, [pc, #52]	@ (8008978 <__libc_init_array+0x3c>)
 8008942:	1b64      	subs	r4, r4, r5
 8008944:	10a4      	asrs	r4, r4, #2
 8008946:	2600      	movs	r6, #0
 8008948:	42a6      	cmp	r6, r4
 800894a:	d109      	bne.n	8008960 <__libc_init_array+0x24>
 800894c:	4d0b      	ldr	r5, [pc, #44]	@ (800897c <__libc_init_array+0x40>)
 800894e:	4c0c      	ldr	r4, [pc, #48]	@ (8008980 <__libc_init_array+0x44>)
 8008950:	f000 f818 	bl	8008984 <_init>
 8008954:	1b64      	subs	r4, r4, r5
 8008956:	10a4      	asrs	r4, r4, #2
 8008958:	2600      	movs	r6, #0
 800895a:	42a6      	cmp	r6, r4
 800895c:	d105      	bne.n	800896a <__libc_init_array+0x2e>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	f855 3b04 	ldr.w	r3, [r5], #4
 8008964:	4798      	blx	r3
 8008966:	3601      	adds	r6, #1
 8008968:	e7ee      	b.n	8008948 <__libc_init_array+0xc>
 800896a:	f855 3b04 	ldr.w	r3, [r5], #4
 800896e:	4798      	blx	r3
 8008970:	3601      	adds	r6, #1
 8008972:	e7f2      	b.n	800895a <__libc_init_array+0x1e>
 8008974:	080089dc 	.word	0x080089dc
 8008978:	080089dc 	.word	0x080089dc
 800897c:	080089dc 	.word	0x080089dc
 8008980:	080089e0 	.word	0x080089e0

08008984 <_init>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr

08008990 <_fini>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr
