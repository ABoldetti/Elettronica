
dual_wielding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a280  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a518  0800a518  0000b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a558  0800a558  0000b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a560  0800a560  0000b560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a564  0800a564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  0800a568  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e5c  24000018  0800a580  0000c018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e74  0800a580  0000ce74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 10 .debug_info   000209a9  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003da4  00000000  00000000  0002c9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001928  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001384  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b239  00000000  00000000  00033444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000244fd  00000000  00000000  0006e67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017947e  00000000  00000000  00092b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020bff8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b68  00000000  00000000  0020c03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  00212ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a500 	.word	0x0800a500

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800a500 	.word	0x0800a500

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <DMA_setup_ADC1>:
unsigned char *pointer = (unsigned char *)(&index_stop);




void DMA_setup_ADC1(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA1_Stream0 ->M0AR = (uint32_t) &DMA_data_ADC1;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <DMA_setup_ADC1+0x24>)
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <DMA_setup_ADC1+0x28>)
 80005d0:	60da      	str	r2, [r3, #12]
	DMA1_Stream0 ->PAR = (uint32_t) &(ADC1->DR);
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <DMA_setup_ADC1+0x24>)
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <DMA_setup_ADC1+0x2c>)
 80005d6:	609a      	str	r2, [r3, #8]
	DMA1_Stream0 ->NDTR = (uint16_t) vec_len;
 80005d8:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <DMA_setup_ADC1+0x24>)
 80005da:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005de:	605a      	str	r2, [r3, #4]
	//ADC3->CFGR |= ADC_CFGR_DMNGT;
	//DMA1_Stream0 ->CR |= DMA_SxCR_TCIE;
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40020010 	.word	0x40020010
 80005f0:	24000034 	.word	0x24000034
 80005f4:	40022040 	.word	0x40022040

080005f8 <DMA_setup_ADC3>:

void DMA_setup_ADC3(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	DMA1_Stream1 ->M0AR = (uint32_t) &DMA_data_ADC3;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <DMA_setup_ADC3+0x24>)
 80005fe:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <DMA_setup_ADC3+0x28>)
 8000600:	60da      	str	r2, [r3, #12]
	DMA1_Stream1 ->PAR = (uint32_t) &(ADC3->DR);
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <DMA_setup_ADC3+0x24>)
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <DMA_setup_ADC3+0x2c>)
 8000606:	609a      	str	r2, [r3, #8]
	DMA1_Stream1 ->NDTR = (uint16_t) vec_len;
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <DMA_setup_ADC3+0x24>)
 800060a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800060e:	605a      	str	r2, [r3, #4]
	//ADC3->CFGR |= ADC_CFGR_DMNGT;
	//DMA1_Stream0 ->CR |= DMA_SxCR_TCIE;
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40020028 	.word	0x40020028
 8000620:	24000354 	.word	0x24000354
 8000624:	58026040 	.word	0x58026040

08000628 <DMA_reset>:

void DMA_reset(void){
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	DMA2->LIFCR = 0xffffffff;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <DMA_reset+0x30>)
 800062e:	f04f 32ff 	mov.w	r2, #4294967295
 8000632:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <DMA_reset+0x30>)
 8000636:	f04f 32ff 	mov.w	r2, #4294967295
 800063a:	60da      	str	r2, [r3, #12]

	DMA1->LIFCR = 0xffffffff;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <DMA_reset+0x34>)
 800063e:	f04f 32ff 	mov.w	r2, #4294967295
 8000642:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <DMA_reset+0x34>)
 8000646:	f04f 32ff 	mov.w	r2, #4294967295
 800064a:	60da      	str	r2, [r3, #12]

}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40020400 	.word	0x40020400
 800065c:	40020000 	.word	0x40020000

08000660 <DMA_setup_USART_ADC3>:
	DMA2_Stream0 ->NDTR = (uint16_t) vec_len*2;
	USART3->CR3 |= USART_CR3_DMAT;
	DMA2_Stream0->CR |=DMA_SxCR_TCIE;
}

void DMA_setup_USART_ADC3(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	DMA2_Stream0 ->M0AR = (uint32_t) &DMA_data_ADC3;
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <DMA_setup_USART_ADC3+0x3c>)
 8000666:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <DMA_setup_USART_ADC3+0x40>)
 8000668:	60da      	str	r2, [r3, #12]
	DMA2_Stream0 ->PAR = (uint32_t) &(USART3->TDR);
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <DMA_setup_USART_ADC3+0x3c>)
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <DMA_setup_USART_ADC3+0x44>)
 800066e:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 ->NDTR = (uint16_t) vec_len*2;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <DMA_setup_USART_ADC3+0x3c>)
 8000672:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000676:	605a      	str	r2, [r3, #4]
	USART3->CR3 |= USART_CR3_DMAT;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <DMA_setup_USART_ADC3+0x48>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <DMA_setup_USART_ADC3+0x48>)
 800067e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000682:	6093      	str	r3, [r2, #8]
	DMA2_Stream0->CR |=DMA_SxCR_TCIE;
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <DMA_setup_USART_ADC3+0x3c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <DMA_setup_USART_ADC3+0x3c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40020410 	.word	0x40020410
 80006a0:	24000354 	.word	0x24000354
 80006a4:	40004828 	.word	0x40004828
 80006a8:	40004800 	.word	0x40004800

080006ac <ESPE_USART_init>:

void ESPE_USART_init(void){
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

	//Accendo la trasmissione
	USART3 ->CR1 |= USART_CR1_TE;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <ESPE_USART_init+0x34>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione


}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40004800 	.word	0x40004800

080006e4 <ESPE_ADC1_init>:
void ESPE_ADC1_init(void){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

	// azzeriamo per evitare casini di configurazione
	ADC1 -> SQR1 = 0;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC1->SQR1 |= 0 <<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 80006f0:	4a2c      	ldr	r2, [pc, #176]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= 0 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 80006f6:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 80006f8:	4a2a      	ldr	r2, [pc, #168]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC1->PCSEL |= ADC_PCSEL_PCSEL_0;		//segna quali sono i canali in lettura per velocità massima
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC1 -> CR &= ~ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000710:	f023 031d 	bic.w	r3, r3, #29
 8000714:	6093      	str	r3, [r2, #8]
	ADC1 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	6093      	str	r3, [r2, #8]




	ADC1 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000728:	f023 031e 	bic.w	r3, r3, #30
 800072c:	6093      	str	r3, [r2, #8]
	ADC1 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;	//seleziona la modalità lineare di calibrazione (a 1)
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000738:	6093      	str	r3, [r2, #8]
	ADC1 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	6093      	str	r3, [r2, #8]
	ADC1 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000748:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074c:	6093      	str	r3, [r2, #8]

	while( ADC1->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 800074e:	bf00      	nop
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dbfb      	blt.n	8000750 <ESPE_ADC1_init+0x6c>
	}



	ADC1->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6013      	str	r3, [r2, #0]
	ADC1->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 8000760:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6093      	str	r3, [r2, #8]
	while( !(ADC1->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 800076c:	bf00      	nop
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <ESPE_ADC1_init+0x8a>
	}

	ADC1 -> CFGR |=(3<<ADC_CFGR_DMNGT_Pos);
 800077a:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4a09      	ldr	r2, [pc, #36]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000780:	f043 0303 	orr.w	r3, r3, #3
 8000784:	60d3      	str	r3, [r2, #12]

	ADC1 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6053      	str	r3, [r2, #4]

	ADC1 -> SMPR1 |= 0<<ADC_SMPR1_SMP0_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000794:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <ESPE_ADC1_init+0xc0>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	6153      	str	r3, [r2, #20]


}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40022000 	.word	0x40022000

080007a8 <ESPE_ADC3_init>:

//Queste sono le operazioni che dobbiamo fare, magari con una funzione, nel main(), prima del while(1) (va fatta una sola volta)
void ESPE_ADC3_init(void){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 80007ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 0 <<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 80007b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 0 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		//segna quali sono i canali in lettura per velocità massima
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a28      	ldr	r2, [pc, #160]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC3 -> CR &= ~ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	4a25      	ldr	r2, [pc, #148]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007d4:	f023 031d 	bic.w	r3, r3, #29
 80007d8:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6093      	str	r3, [r2, #8]




	ADC3 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007ec:	f023 031e 	bic.w	r3, r3, #30
 80007f0:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;	//seleziona la modalità lineare di calibrazione (a 1)
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 80007f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007fc:	6093      	str	r3, [r2, #8]
	ADC3 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000800:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 800080c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000810:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 8000812:	bf00      	nop
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dbfb      	blt.n	8000814 <ESPE_ADC3_init+0x6c>
	}



	ADC3->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a0f      	ldr	r2, [pc, #60]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 8000830:	bf00      	nop
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <ESPE_ADC3_init+0x8a>
	}

	ADC3 -> CFGR |=(3<<ADC_CFGR_DMNGT_Pos);
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4a09      	ldr	r2, [pc, #36]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000844:	f043 0303 	orr.w	r3, r3, #3
 8000848:	60d3      	str	r3, [r2, #12]

	ADC3 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6053      	str	r3, [r2, #4]

	ADC3 -> SMPR1 |= 0<<ADC_SMPR1_SMP0_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 8000858:	4a03      	ldr	r2, [pc, #12]	@ (8000868 <ESPE_ADC3_init+0xc0>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	6153      	str	r3, [r2, #20]


}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	58026000 	.word	0x58026000

0800086c <ESPE_TIM6_init>:

void ESPE_TIM6_init(void){
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <ESPE_TIM6_init+0x20>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->ARR = 10;
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <ESPE_TIM6_init+0x20>)
 8000878:	220a      	movs	r2, #10
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC = 24;
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <ESPE_TIM6_init+0x20>)
 800087e:	2218      	movs	r2, #24
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40001000 	.word	0x40001000

08000890 <ESPE_COMP_init>:

void ESPE_COMP_init(void){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	COMP2->CFGR |= COMP_CFGRx_EN;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <ESPE_COMP_init+0x3c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <ESPE_COMP_init+0x3c>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]
	DAC1 -> DHR12R1 = 1000;										// soglia di trigger
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <ESPE_COMP_init+0x40>)
 80008a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a6:	609a      	str	r2, [r3, #8]
	DAC1 -> SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <ESPE_COMP_init+0x40>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <ESPE_COMP_init+0x40>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6053      	str	r3, [r2, #4]
	DAC1 -> CR |= DAC_CR_EN1;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <ESPE_COMP_init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <ESPE_COMP_init+0x40>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	58003810 	.word	0x58003810
 80008d0:	40007400 	.word	0x40007400

080008d4 <ESPE_USART_invert_mode>:



void ESPE_USART_invert_mode(void){
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	if(USART3 -> CR1 & USART_CR1_RXNEIE){
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00c      	beq.n	80008fe <ESPE_USART_invert_mode+0x2a>
		USART3 -> CR1 &= ~USART_CR1_RXNEIE;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a10      	ldr	r2, [pc, #64]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 80008ea:	f023 0320 	bic.w	r3, r3, #32
 80008ee:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 80008f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fa:	6013      	str	r3, [r2, #0]
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
		USART3 -> CR1 |= USART_CR1_RXNEIE;
		USART3 -> CR1 &= ~USART_CR1_TCIE;
	}
}
 80008fc:	e011      	b.n	8000922 <ESPE_USART_invert_mode+0x4e>
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00b      	beq.n	8000922 <ESPE_USART_invert_mode+0x4e>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a07      	ldr	r2, [pc, #28]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 &= ~USART_CR1_TCIE;
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a04      	ldr	r2, [pc, #16]	@ (800092c <ESPE_USART_invert_mode+0x58>)
 800091c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000920:	6013      	str	r3, [r2, #0]
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40004800 	.word	0x40004800

08000930 <ESPE_USART_char_start>:


//Zona definizione di funzioni
void ESPE_USART_char_start(void){
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <ESPE_USART_char_start+0x1e>
		if ( USART3 -> RDR == char_trigger){
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000944:	2b65      	cmp	r3, #101	@ 0x65
 8000946:	d102      	bne.n	800094e <ESPE_USART_char_start+0x1e>
			//flag_USART = 1;
			flag_Trigger_EN = 1;
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <ESPE_USART_char_start+0x50>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]

		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <ESPE_USART_char_start+0x4c>)
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	4a07      	ldr	r2, [pc, #28]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <ESPE_USART_char_start+0x4c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <ESPE_USART_char_start+0x4c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40004800 	.word	0x40004800
 8000980:	24000676 	.word	0x24000676

08000984 <ESPE_DMA_switch_mode>:


void ESPE_DMA_switch_mode(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	//if(flag_USART){
	if( flag_Triggered){
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <ESPE_DMA_switch_mode+0x68>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d029      	beq.n	80009e6 <ESPE_DMA_switch_mode+0x62>
		if(!flag_ADC){
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <ESPE_DMA_switch_mode+0x6c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d112      	bne.n	80009c2 <ESPE_DMA_switch_mode+0x3e>
			TIM6_stop;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <ESPE_DMA_switch_mode+0x70>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <ESPE_DMA_switch_mode+0x70>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
			DMA_reset();
 80009a8:	f7ff fe3e 	bl	8000628 <DMA_reset>
			DMA_setup_ADC1();
 80009ac:	f7ff fe0c 	bl	80005c8 <DMA_setup_ADC1>
			ESPE_USART_invert_mode();
 80009b0:	f7ff ff90 	bl	80008d4 <ESPE_USART_invert_mode>
			DMA_start_USART;
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <ESPE_DMA_switch_mode+0x74>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <ESPE_DMA_switch_mode+0x74>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]
			DMA_start_USART;
			//flag_USART = 0;
		}

	}
}
 80009c0:	e011      	b.n	80009e6 <ESPE_DMA_switch_mode+0x62>
			TIM6_stop;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <ESPE_DMA_switch_mode+0x70>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <ESPE_DMA_switch_mode+0x70>)
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	6013      	str	r3, [r2, #0]
			DMA_reset();
 80009ce:	f7ff fe2b 	bl	8000628 <DMA_reset>
			DMA_setup_ADC1();
 80009d2:	f7ff fdf9 	bl	80005c8 <DMA_setup_ADC1>
			ESPE_USART_invert_mode();
 80009d6:	f7ff ff7d 	bl	80008d4 <ESPE_USART_invert_mode>
			DMA_start_USART;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <ESPE_DMA_switch_mode+0x74>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a06      	ldr	r2, [pc, #24]	@ (80009f8 <ESPE_DMA_switch_mode+0x74>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000675 	.word	0x24000675
 80009f0:	24000677 	.word	0x24000677
 80009f4:	40001000 	.word	0x40001000
 80009f8:	40020410 	.word	0x40020410

080009fc <ESPE_DMA_switch_back>:


void ESPE_DMA_switch_back(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if(!(DMA2_Stream0 -> NDTR) && !flag_ADC) ESPE_DMA_switch_mode();
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <ESPE_DMA_switch_back+0x64>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <ESPE_DMA_switch_back+0x1a>
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <ESPE_DMA_switch_back+0x68>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <ESPE_DMA_switch_back+0x1a>
 8000a12:	f7ff ffb7 	bl	8000984 <ESPE_DMA_switch_mode>
	if( !(DMA2_Stream0 -> NDTR) && flag_ADC){
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <ESPE_DMA_switch_back+0x64>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11e      	bne.n	8000a5c <ESPE_DMA_switch_back+0x60>
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <ESPE_DMA_switch_back+0x68>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d019      	beq.n	8000a5c <ESPE_DMA_switch_back+0x60>
		flag_Triggered = 0;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <ESPE_DMA_switch_back+0x6c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
		flag_ADC = 0;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <ESPE_DMA_switch_back+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
		ESPE_USART_invert_mode();
 8000a34:	f7ff ff4e 	bl	80008d4 <ESPE_USART_invert_mode>
		DMA_stop_USART;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <ESPE_DMA_switch_back+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <ESPE_DMA_switch_back+0x64>)
 8000a3e:	f023 0301 	bic.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]
		DMA_reset();
 8000a44:	f7ff fdf0 	bl	8000628 <DMA_reset>
		DMA2_Stream0 -> NDTR = 2*vec_len;
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <ESPE_DMA_switch_back+0x64>)
 8000a4a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000a4e:	605a      	str	r2, [r3, #4]
		TIM6_start;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <ESPE_DMA_switch_back+0x70>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <ESPE_DMA_switch_back+0x70>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]
	}

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020410 	.word	0x40020410
 8000a64:	24000677 	.word	0x24000677
 8000a68:	24000675 	.word	0x24000675
 8000a6c:	40001000 	.word	0x40001000

08000a70 <ESPE_DMA_data_manipulation>:
		}
	}
}


void ESPE_DMA_data_manipulation(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	if(flag_Triggered && DMA1_Stream0 ->NDTR == (index_stop)){
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <ESPE_DMA_data_manipulation+0x30>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00d      	beq.n	8000a9a <ESPE_DMA_data_manipulation+0x2a>
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <ESPE_DMA_data_manipulation+0x34>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <ESPE_DMA_data_manipulation+0x38>)
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d107      	bne.n	8000a9a <ESPE_DMA_data_manipulation+0x2a>
		TIM6_stop;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <ESPE_DMA_data_manipulation+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <ESPE_DMA_data_manipulation+0x3c>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	6013      	str	r3, [r2, #0]
		ESPE_DMA_switch_mode();
 8000a96:	f7ff ff75 	bl	8000984 <ESPE_DMA_switch_mode>
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000675 	.word	0x24000675
 8000aa4:	40020010 	.word	0x40020010
 8000aa8:	24000000 	.word	0x24000000
 8000aac:	40001000 	.word	0x40001000

08000ab0 <ESPE_DMA_end_transmission>:

void ESPE_DMA_end_transmission(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if( flag_Triggered){
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <ESPE_DMA_end_transmission+0x5c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d024      	beq.n	8000b08 <ESPE_DMA_end_transmission+0x58>
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000abe:	bf00      	nop
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <ESPE_DMA_end_transmission+0x60>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0f9      	beq.n	8000ac0 <ESPE_DMA_end_transmission+0x10>
		if(USART3 ->CR1 & USART_CR1_TCIE){
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <ESPE_DMA_end_transmission+0x60>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d017      	beq.n	8000b08 <ESPE_DMA_end_transmission+0x58>
			if( index_transmission < 2){
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <ESPE_DMA_end_transmission+0x64>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d80e      	bhi.n	8000afe <ESPE_DMA_end_transmission+0x4e>
				USART3->TDR = pointer[index_transmission];
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <ESPE_DMA_end_transmission+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <ESPE_DMA_end_transmission+0x64>)
 8000ae6:	8812      	ldrh	r2, [r2, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <ESPE_DMA_end_transmission+0x60>)
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
				index_transmission ++;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <ESPE_DMA_end_transmission+0x64>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <ESPE_DMA_end_transmission+0x64>)
 8000afa:	801a      	strh	r2, [r3, #0]
			}

		}
	}

}
 8000afc:	e004      	b.n	8000b08 <ESPE_DMA_end_transmission+0x58>
				index_transmission = 0;
 8000afe:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <ESPE_DMA_end_transmission+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
				ESPE_DMA_switch_back();
 8000b04:	f7ff ff7a 	bl	80009fc <ESPE_DMA_switch_back>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000675 	.word	0x24000675
 8000b10:	40004800 	.word	0x40004800
 8000b14:	24000678 	.word	0x24000678
 8000b18:	24000004 	.word	0x24000004

08000b1c <ESPE_DMA_Dual_ADC>:


void ESPE_DMA_Dual_ADC(void){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	if(!flag_Triggered && flag_Trigger_EN){
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <ESPE_DMA_Dual_ADC+0x90>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d13b      	bne.n	8000ba2 <ESPE_DMA_Dual_ADC+0x86>
 8000b2a:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <ESPE_DMA_Dual_ADC+0x94>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d036      	beq.n	8000ba2 <ESPE_DMA_Dual_ADC+0x86>
		if( flag_Pretriggered){
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <ESPE_DMA_Dual_ADC+0x98>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d026      	beq.n	8000b8c <ESPE_DMA_Dual_ADC+0x70>
			if( ADC1 -> DR > Trigger_Value){
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <ESPE_DMA_Dual_ADC+0x9c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d92a      	bls.n	8000ba0 <ESPE_DMA_Dual_ADC+0x84>
				flag_Triggered = 1;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <ESPE_DMA_Dual_ADC+0x90>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
				flag_Trigger_EN = 0;
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <ESPE_DMA_Dual_ADC+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
				flag_Pretriggered = 0;
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <ESPE_DMA_Dual_ADC+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
				flag_ADC = 0;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <ESPE_DMA_Dual_ADC+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
				//index_stop = (DMA1_Stream0 ->NDTR + vec_len - data_len)%vec_len;
				index_stop = vec_len - (vec_len - DMA1_Stream0 -> NDTR + data_len +1)%vec_len;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <ESPE_DMA_Dual_ADC+0xa4>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	f240 1391 	movw	r3, #401	@ 0x191
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <ESPE_DMA_Dual_ADC+0xa8>)
 8000b6e:	fba2 1203 	umull	r1, r2, r2, r3
 8000b72:	09d2      	lsrs	r2, r2, #7
 8000b74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b78:	fb01 f202 	mul.w	r2, r1, r2
 8000b7c:	1a9a      	subs	r2, r3, r2
 8000b7e:	b293      	uxth	r3, r2
 8000b80:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <ESPE_DMA_Dual_ADC+0xac>)
 8000b88:	801a      	strh	r2, [r3, #0]

			}
			return;
 8000b8a:	e009      	b.n	8000ba0 <ESPE_DMA_Dual_ADC+0x84>
		}
		if( ADC3 -> DR > Trigger_Value){
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <ESPE_DMA_Dual_ADC+0xb0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d904      	bls.n	8000ba2 <ESPE_DMA_Dual_ADC+0x86>
			flag_Pretriggered = 1;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <ESPE_DMA_Dual_ADC+0x98>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e000      	b.n	8000ba2 <ESPE_DMA_Dual_ADC+0x86>
			return;
 8000ba0:	bf00      	nop
		}
	}

}
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	24000675 	.word	0x24000675
 8000bb0:	24000676 	.word	0x24000676
 8000bb4:	24000674 	.word	0x24000674
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	24000677 	.word	0x24000677
 8000bc0:	40020010 	.word	0x40020010
 8000bc4:	51eb851f 	.word	0x51eb851f
 8000bc8:	24000000 	.word	0x24000000
 8000bcc:	58026000 	.word	0x58026000

08000bd0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000bf6:	4a37      	ldr	r2, [pc, #220]	@ (8000cd4 <MX_ADC1_Init+0x104>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c20:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4e:	4820      	ldr	r0, [pc, #128]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c50:	f001 f9b2 	bl	8001fb8 <HAL_ADC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c5a:	f000 fc28 	bl	80014ae <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6a:	4819      	ldr	r0, [pc, #100]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c6c:	f001 f9a4 	bl	8001fb8 <HAL_ADC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c76:	f000 fc1a 	bl	80014ae <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000c86:	f001 ffc7 	bl	8002c18 <HAL_ADCEx_MultiModeConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000c90:	f000 fc0d 	bl	80014ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_ADC1_Init+0x108>)
 8000c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_ADC1_Init+0x100>)
 8000cb8:	f001 fb20 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000cc2:	f000 fbf4 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2400067c 	.word	0x2400067c
 8000cd4:	40022000 	.word	0x40022000
 8000cd8:	0c900008 	.word	0x0c900008

08000cdc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000cf6:	4a31      	ldr	r2, [pc, #196]	@ (8000dbc <MX_ADC3_Init+0xe0>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d26:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d40:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d58:	f001 f92e 	bl	8001fb8 <HAL_ADC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000d62:	f000 fba4 	bl	80014ae <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000d6e:	f001 f923 	bl	8001fb8 <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8000d78:	f000 fb99 	bl	80014ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_ADC3_Init+0xdc>)
 8000da0:	f001 faac 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000daa:	f000 fb80 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	240006e0 	.word	0x240006e0
 8000dbc:	58026000 	.word	0x58026000

08000dc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	@ 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a61      	ldr	r2, [pc, #388]	@ (8000f64 <HAL_ADC_MspInit+0x1a4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d15a      	bne.n	8000e98 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000de2:	4b61      	ldr	r3, [pc, #388]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a58      	ldr	r2, [pc, #352]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b55      	ldr	r3, [pc, #340]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	484e      	ldr	r0, [pc, #312]	@ (8000f6c <HAL_ADC_MspInit+0x1ac>)
 8000e32:	f003 fda1 	bl	8004978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e38:	4a4e      	ldr	r2, [pc, #312]	@ (8000f74 <HAL_ADC_MspInit+0x1b4>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e3e:	2209      	movs	r2, #9
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b4b      	ldr	r3, [pc, #300]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e56:	4b46      	ldr	r3, [pc, #280]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5e:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e66:	4b42      	ldr	r3, [pc, #264]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7a:	483d      	ldr	r0, [pc, #244]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e7c:	f002 f8ba 	bl	8002ff4 <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000e86:	f000 fb12 	bl	80014ae <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a38      	ldr	r2, [pc, #224]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e90:	4a37      	ldr	r2, [pc, #220]	@ (8000f70 <HAL_ADC_MspInit+0x1b0>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000e96:	e060      	b.n	8000f5a <HAL_ADC_MspInit+0x19a>
  else if(adcHandle->Instance==ADC3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a36      	ldr	r2, [pc, #216]	@ (8000f78 <HAL_ADC_MspInit+0x1b8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d15b      	bne.n	8000f5a <HAL_ADC_MspInit+0x19a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <HAL_ADC_MspInit+0x1a8>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ede:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000ee2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000ee6:	f000 fec5 	bl	8001c74 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000eec:	4a24      	ldr	r2, [pc, #144]	@ (8000f80 <HAL_ADC_MspInit+0x1c0>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000ef2:	2273      	movs	r2, #115	@ 0x73
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f2e:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f30:	f002 f860 	bl	8002ff4 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8000f3a:	f000 fab8 	bl	80014ae <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f42:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <HAL_ADC_MspInit+0x1bc>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207f      	movs	r0, #127	@ 0x7f
 8000f50:	f002 f81b 	bl	8002f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f54:	207f      	movs	r0, #127	@ 0x7f
 8000f56:	f002 f832 	bl	8002fbe <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3730      	adds	r7, #48	@ 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020000 	.word	0x58020000
 8000f70:	24000744 	.word	0x24000744
 8000f74:	40020010 	.word	0x40020010
 8000f78:	58026000 	.word	0x58026000
 8000f7c:	240007bc 	.word	0x240007bc
 8000f80:	40020028 	.word	0x40020028

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_DMA_Init+0x7c>)
 8000fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	200b      	movs	r0, #11
 8000fcc:	f001 ffdd 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f001 fff4 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200c      	movs	r0, #12
 8000fdc:	f001 ffd5 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f001 ffec 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2038      	movs	r0, #56	@ 0x38
 8000fec:	f001 ffcd 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ff0:	2038      	movs	r0, #56	@ 0x38
 8000ff2:	f001 ffe4 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	58024400 	.word	0x58024400

08001004 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	@ 0x30
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b83      	ldr	r3, [pc, #524]	@ (8001228 <MX_GPIO_Init+0x224>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a81      	ldr	r2, [pc, #516]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102a:	4b7f      	ldr	r3, [pc, #508]	@ (8001228 <MX_GPIO_Init+0x224>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001038:	4b7b      	ldr	r3, [pc, #492]	@ (8001228 <MX_GPIO_Init+0x224>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a7a      	ldr	r2, [pc, #488]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b77      	ldr	r3, [pc, #476]	@ (8001228 <MX_GPIO_Init+0x224>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b74      	ldr	r3, [pc, #464]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	4a72      	ldr	r2, [pc, #456]	@ (8001228 <MX_GPIO_Init+0x224>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001066:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b6c      	ldr	r3, [pc, #432]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	4a6b      	ldr	r2, [pc, #428]	@ (8001228 <MX_GPIO_Init+0x224>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001084:	4b68      	ldr	r3, [pc, #416]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <MX_GPIO_Init+0x224>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001098:	4a63      	ldr	r2, [pc, #396]	@ (8001228 <MX_GPIO_Init+0x224>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a2:	4b61      	ldr	r3, [pc, #388]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c0:	4b59      	ldr	r3, [pc, #356]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	4b56      	ldr	r3, [pc, #344]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	4a54      	ldr	r2, [pc, #336]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010de:	4b52      	ldr	r3, [pc, #328]	@ (8001228 <MX_GPIO_Init+0x224>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010f2:	484e      	ldr	r0, [pc, #312]	@ (800122c <MX_GPIO_Init+0x228>)
 80010f4:	f003 fdf0 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fe:	484c      	ldr	r0, [pc, #304]	@ (8001230 <MX_GPIO_Init+0x22c>)
 8001100:	f003 fdea 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2102      	movs	r1, #2
 8001108:	484a      	ldr	r0, [pc, #296]	@ (8001234 <MX_GPIO_Init+0x230>)
 800110a:	f003 fde5 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4845      	ldr	r0, [pc, #276]	@ (8001238 <MX_GPIO_Init+0x234>)
 8001124:	f003 fc28 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001128:	2332      	movs	r3, #50	@ 0x32
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001138:	230b      	movs	r3, #11
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	483d      	ldr	r0, [pc, #244]	@ (8001238 <MX_GPIO_Init+0x234>)
 8001144:	f003 fc18 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001148:	2386      	movs	r3, #134	@ 0x86
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001158:	230b      	movs	r3, #11
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4836      	ldr	r0, [pc, #216]	@ (800123c <MX_GPIO_Init+0x238>)
 8001164:	f003 fc08 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001168:	f244 0301 	movw	r3, #16385	@ 0x4001
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	482a      	ldr	r0, [pc, #168]	@ (800122c <MX_GPIO_Init+0x228>)
 8001182:	f003 fbf9 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	@ (800122c <MX_GPIO_Init+0x228>)
 80011a4:	f003 fbe8 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	481b      	ldr	r0, [pc, #108]	@ (8001230 <MX_GPIO_Init+0x22c>)
 80011c2:	f003 fbd9 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4819      	ldr	r0, [pc, #100]	@ (8001240 <MX_GPIO_Init+0x23c>)
 80011dc:	f003 fbcc 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011e0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f2:	230b      	movs	r3, #11
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <MX_GPIO_Init+0x23c>)
 80011fe:	f003 fbbb 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4806      	ldr	r0, [pc, #24]	@ (8001234 <MX_GPIO_Init+0x230>)
 800121a:	f003 fbad 	bl	8004978 <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	@ 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	58024400 	.word	0x58024400
 800122c:	58020400 	.word	0x58020400
 8001230:	58020c00 	.word	0x58020c00
 8001234:	58021000 	.word	0x58021000
 8001238:	58020800 	.word	0x58020800
 800123c:	58020000 	.word	0x58020000
 8001240:	58021800 	.word	0x58021800

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fc52 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f852 	bl	80012f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001250:	f000 f8fe 	bl	8001450 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f7ff fed6 	bl	8001004 <MX_GPIO_Init>
  MX_DMA_Init();
 8001258:	f7ff fe94 	bl	8000f84 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800125c:	f000 fa82 	bl	8001764 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001260:	f000 fb6e 	bl	8001940 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8001264:	f7ff fd3a 	bl	8000cdc <MX_ADC3_Init>
  MX_ADC1_Init();
 8001268:	f7ff fcb2 	bl	8000bd0 <MX_ADC1_Init>
  MX_TIM6_Init();
 800126c:	f000 fa22 	bl	80016b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ESPE_TIM6_init();
 8001270:	f7ff fafc 	bl	800086c <ESPE_TIM6_init>
  ESPE_ADC1_init();
 8001274:	f7ff fa36 	bl	80006e4 <ESPE_ADC1_init>
  ESPE_ADC3_init();
 8001278:	f7ff fa96 	bl	80007a8 <ESPE_ADC3_init>
  ESPE_USART_init();
 800127c:	f7ff fa16 	bl	80006ac <ESPE_USART_init>
  ESPE_COMP_init();
 8001280:	f7ff fb06 	bl	8000890 <ESPE_COMP_init>
  DMA_setup_ADC1();
 8001284:	f7ff f9a0 	bl	80005c8 <DMA_setup_ADC1>
  DMA_setup_ADC3 ();
 8001288:	f7ff f9b6 	bl	80005f8 <DMA_setup_ADC3>

  DMA_setup_USART_ADC3();
 800128c:	f7ff f9e8 	bl	8000660 <DMA_setup_USART_ADC3>
  USART_start;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <main+0x98>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <main+0x98>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
  TIM6_start;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <main+0x9c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <main+0x9c>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]
  ADC3_start;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <main+0xa0>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <main+0xa0>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6093      	str	r3, [r2, #8]
  ADC1_start;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <main+0xa4>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <main+0xa4>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6093      	str	r3, [r2, #8]
  DMA_start_ADC1;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <main+0xa8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <main+0xa8>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
  DMA_start_ADC3;
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <main+0xac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <main+0xac>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <main+0x94>
 80012dc:	40004800 	.word	0x40004800
 80012e0:	40001000 	.word	0x40001000
 80012e4:	58026000 	.word	0x58026000
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40020010 	.word	0x40020010
 80012f0:	40020028 	.word	0x40020028

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b09e      	sub	sp, #120	@ 0x78
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fe:	224c      	movs	r2, #76	@ 0x4c
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f009 f8cf 	bl	800a4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f009 f8c8 	bl	800a4a6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001316:	2002      	movs	r0, #2
 8001318:	f003 fe28 	bl	8004f6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <SystemClock_Config+0x150>)
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	4a47      	ldr	r2, [pc, #284]	@ (8001444 <SystemClock_Config+0x150>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800132c:	4b45      	ldr	r3, [pc, #276]	@ (8001444 <SystemClock_Config+0x150>)
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <SystemClock_Config+0x154>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a43      	ldr	r2, [pc, #268]	@ (8001448 <SystemClock_Config+0x154>)
 800133c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <SystemClock_Config+0x154>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800134e:	bf00      	nop
 8001350:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <SystemClock_Config+0x154>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800135c:	d1f8      	bne.n	8001350 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <SystemClock_Config+0x158>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001364:	4a39      	ldr	r2, [pc, #228]	@ (800144c <SystemClock_Config+0x158>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800136e:	4b37      	ldr	r3, [pc, #220]	@ (800144c <SystemClock_Config+0x158>)
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <SystemClock_Config+0x154>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a30      	ldr	r2, [pc, #192]	@ (8001448 <SystemClock_Config+0x154>)
 8001386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b2e      	ldr	r3, [pc, #184]	@ (8001448 <SystemClock_Config+0x154>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <SystemClock_Config+0x150>)
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <SystemClock_Config+0x150>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <SystemClock_Config+0x150>)
 80013a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013ae:	bf00      	nop
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <SystemClock_Config+0x154>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013bc:	d1f8      	bne.n	80013b0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013be:	2301      	movs	r3, #1
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013cc:	2302      	movs	r3, #2
 80013ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80013d4:	2378      	movs	r3, #120	@ 0x78
 80013d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80013dc:	230f      	movs	r3, #15
 80013de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013e4:	230c      	movs	r3, #12
 80013e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fe03 	bl	8005000 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001400:	f000 f855 	bl	80014ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	233f      	movs	r3, #63	@ 0x3f
 8001406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2303      	movs	r3, #3
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001410:	2308      	movs	r3, #8
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001414:	2340      	movs	r3, #64	@ 0x40
 8001416:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001418:	2340      	movs	r3, #64	@ 0x40
 800141a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800141c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2104      	movs	r1, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f004 fa41 	bl	80058b4 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001438:	f000 f839 	bl	80014ae <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3778      	adds	r7, #120	@ 0x78
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58000400 	.word	0x58000400
 8001448:	58024800 	.word	0x58024800
 800144c:	58024400 	.word	0x58024400

08001450 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0b0      	sub	sp, #192	@ 0xc0
 8001454:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	22c0      	movs	r2, #192	@ 0xc0
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f009 f822 	bl	800a4a6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001462:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001472:	2313      	movs	r3, #19
 8001474:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001482:	23c0      	movs	r3, #192	@ 0xc0
 8001484:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001486:	2320      	movs	r3, #32
 8001488:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fd98 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014a2:	f000 f804 	bl	80014ae <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	37c0      	adds	r7, #192	@ 0xc0
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b2:	b672      	cpsid	i
}
 80014b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b6:	bf00      	nop
 80014b8:	e7fd      	b.n	80014b6 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_MspInit+0x30>)
 80014c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c8:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_MspInit+0x30>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_MspInit+0x30>)
 80014d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58024400 	.word	0x58024400

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <NMI_Handler+0x4>

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <UsageFault_Handler+0x4>

08001518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 fb45 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_char_start();
 800156e:	f7ff f9df 	bl	8000930 <ESPE_USART_char_start>
	ESPE_DMA_end_transmission();
 8001572:	f7ff fa9d 	bl	8000ab0 <ESPE_DMA_end_transmission>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	ESPE_DMA_end_transmission();
 8001580:	f7ff fa96 	bl	8000ab0 <ESPE_DMA_end_transmission>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <DMA2_Stream0_IRQHandler+0x14>)
 8001586:	f002 f891 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000914 	.word	0x24000914

08001594 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	//ESPE_DMA_Trigger_Pretrigger();
	ESPE_DMA_Dual_ADC();
 8001598:	f7ff fac0 	bl	8000b1c <ESPE_DMA_Dual_ADC>
	ESPE_DMA_data_manipulation();
 800159c:	f7ff fa68 	bl	8000a70 <ESPE_DMA_data_manipulation>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015a8:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <SystemInit+0xe4>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ae:	4a36      	ldr	r2, [pc, #216]	@ (8001688 <SystemInit+0xe4>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015b8:	4b34      	ldr	r3, [pc, #208]	@ (800168c <SystemInit+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	2b06      	cmp	r3, #6
 80015c2:	d807      	bhi.n	80015d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <SystemInit+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 030f 	bic.w	r3, r3, #15
 80015cc:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <SystemInit+0xe8>)
 80015ce:	f043 0307 	orr.w	r3, r3, #7
 80015d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <SystemInit+0xec>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001690 <SystemInit+0xec>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <SystemInit+0xec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <SystemInit+0xec>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4929      	ldr	r1, [pc, #164]	@ (8001690 <SystemInit+0xec>)
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <SystemInit+0xf0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <SystemInit+0xe8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <SystemInit+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 030f 	bic.w	r3, r3, #15
 8001606:	4a21      	ldr	r2, [pc, #132]	@ (800168c <SystemInit+0xe8>)
 8001608:	f043 0307 	orr.w	r3, r3, #7
 800160c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001614:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <SystemInit+0xec>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800161a:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <SystemInit+0xec>)
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <SystemInit+0xf4>)
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <SystemInit+0xec>)
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <SystemInit+0xf8>)
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <SystemInit+0xec>)
 800162e:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <SystemInit+0xfc>)
 8001630:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <SystemInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <SystemInit+0xec>)
 800163a:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <SystemInit+0xfc>)
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <SystemInit+0xec>)
 8001646:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <SystemInit+0xfc>)
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <SystemInit+0xec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <SystemInit+0xec>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <SystemInit+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <SystemInit+0x100>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <SystemInit+0x104>)
 8001668:	4013      	ands	r3, r2
 800166a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800166e:	d202      	bcs.n	8001676 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001670:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <SystemInit+0x108>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <SystemInit+0x10c>)
 8001678:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800167c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00
 800168c:	52002000 	.word	0x52002000
 8001690:	58024400 	.word	0x58024400
 8001694:	eaf6ed7f 	.word	0xeaf6ed7f
 8001698:	02020200 	.word	0x02020200
 800169c:	01ff0000 	.word	0x01ff0000
 80016a0:	01010280 	.word	0x01010280
 80016a4:	5c001000 	.word	0x5c001000
 80016a8:	ffff0000 	.word	0xffff0000
 80016ac:	51008108 	.word	0x51008108
 80016b0:	52004000 	.word	0x52004000

080016b4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <MX_TIM6_Init+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <MX_TIM6_Init+0x64>)
 80016e6:	f007 f96f 	bl	80089c8 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016f0:	f7ff fedd 	bl	80014ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_TIM6_Init+0x64>)
 8001702:	f007 fa5f 	bl	8008bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800170c:	f7ff fecf 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	24000834 	.word	0x24000834
 800171c:	40001000 	.word	0x40001000

08001720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_TIM_Base_MspInit+0x3c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_TIM_Base_MspInit+0x40>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001738:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <HAL_TIM_Base_MspInit+0x40>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001742:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <HAL_TIM_Base_MspInit+0x40>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40001000 	.word	0x40001000
 8001760:	58024400 	.word	0x58024400

08001764 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <MX_USART3_UART_Init+0x94>)
 800176c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017ae:	f007 fa97 	bl	8008ce0 <HAL_UART_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017b8:	f7ff fe79 	bl	80014ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017c0:	f008 fa9f 	bl	8009d02 <HAL_UARTEx_SetTxFifoThreshold>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ca:	f7ff fe70 	bl	80014ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017d2:	f008 fad4 	bl	8009d7e <HAL_UARTEx_SetRxFifoThreshold>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f7ff fe67 	bl	80014ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_USART3_UART_Init+0x90>)
 80017e2:	f008 fa55 	bl	8009c90 <HAL_UARTEx_DisableFifoMode>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f7ff fe5f 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	24000880 	.word	0x24000880
 80017f8:	40004800 	.word	0x40004800

080017fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	22c0      	movs	r2, #192	@ 0xc0
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fe42 	bl	800a4a6 <memset>
  if(uartHandle->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a41      	ldr	r2, [pc, #260]	@ (800192c <HAL_UART_MspInit+0x130>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d17b      	bne.n	8001924 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800182c:	f04f 0202 	mov.w	r2, #2
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fbc2 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800184e:	f7ff fe2e 	bl	80014ae <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_UART_MspInit+0x134>)
 8001854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001858:	4a35      	ldr	r2, [pc, #212]	@ (8001930 <HAL_UART_MspInit+0x134>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001862:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <HAL_UART_MspInit+0x134>)
 8001864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001870:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_UART_MspInit+0x134>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_UART_MspInit+0x134>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_UART_MspInit+0x134>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800188e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a8:	2307      	movs	r3, #7
 80018aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018b2:	4619      	mov	r1, r3
 80018b4:	481f      	ldr	r0, [pc, #124]	@ (8001934 <HAL_UART_MspInit+0x138>)
 80018b6:	f003 f85f 	bl	8004978 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018bc:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <HAL_UART_MspInit+0x140>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018c2:	222e      	movs	r2, #46	@ 0x2e
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018c8:	2240      	movs	r2, #64	@ 0x40
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80018f8:	480f      	ldr	r0, [pc, #60]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 80018fa:	f001 fb7b 	bl	8002ff4 <HAL_DMA_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001904:	f7ff fdd3 	bl	80014ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 800190c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_UART_MspInit+0x13c>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2027      	movs	r0, #39	@ 0x27
 800191a:	f001 fb36 	bl	8002f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800191e:	2027      	movs	r0, #39	@ 0x27
 8001920:	f001 fb4d 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001924:	bf00      	nop
 8001926:	37e8      	adds	r7, #232	@ 0xe8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004800 	.word	0x40004800
 8001930:	58024400 	.word	0x58024400
 8001934:	58020c00 	.word	0x58020c00
 8001938:	24000914 	.word	0x24000914
 800193c:	40020410 	.word	0x40020410

08001940 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001948:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800194c:	2209      	movs	r2, #9
 800194e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001952:	2202      	movs	r2, #2
 8001954:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001958:	2200      	movs	r2, #0
 800195a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800195e:	2202      	movs	r2, #2
 8001960:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001964:	2201      	movs	r2, #1
 8001966:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800196a:	2200      	movs	r2, #0
 800196c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001970:	2200      	movs	r2, #0
 8001972:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001976:	2201      	movs	r2, #1
 8001978:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800197c:	2201      	movs	r2, #1
 800197e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001982:	2200      	movs	r2, #0
 8001984:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001988:	f003 f9bf 	bl	8004d0a <HAL_PCD_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001992:	f7ff fd8c 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2400098c 	.word	0x2400098c
 80019a0:	40080000 	.word	0x40080000

080019a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ba      	sub	sp, #232	@ 0xe8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	22c0      	movs	r2, #192	@ 0xc0
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f008 fd6e 	bl	800a4a6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <HAL_PCD_MspInit+0xec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d159      	bne.n	8001a88 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80019e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f004 faed 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80019f8:	f7ff fd59 	bl	80014ae <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80019fc:	f003 faf0 	bl	8004fe0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a1e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4814      	ldr	r0, [pc, #80]	@ (8001a98 <HAL_PCD_MspInit+0xf4>)
 8001a46:	f002 ff97 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <HAL_PCD_MspInit+0xf4>)
 8001a66:	f002 ff87 	bl	8004978 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a70:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_PCD_MspInit+0xf0>)
 8001a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	37e8      	adds	r7, #232	@ 0xe8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40080000 	.word	0x40080000
 8001a94:	58024400 	.word	0x58024400
 8001a98:	58020000 	.word	0x58020000

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa0:	f7ff fd80 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f008 fcf5 	bl	800a4b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ace:	f7ff fbb9 	bl	8001244 <main>
  bx  lr
 8001ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001adc:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001ae0:	0800a568 	.word	0x0800a568
  ldr r2, =_sbss
 8001ae4:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001ae8:	24000e74 	.word	0x24000e74

08001aec <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af6:	2003      	movs	r0, #3
 8001af8:	f001 fa3c 	bl	8002f74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001afc:	f004 f890 	bl	8005c20 <HAL_RCC_GetSysClockFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_Init+0x68>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	4913      	ldr	r1, [pc, #76]	@ (8001b5c <HAL_Init+0x6c>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_Init+0x68>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	4a0e      	ldr	r2, [pc, #56]	@ (8001b5c <HAL_Init+0x6c>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_Init+0x70>)
 8001b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <HAL_Init+0x74>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f814 	bl	8001b68 <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e002      	b.n	8001b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4a:	f7ff fcb7 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	0800a518 	.word	0x0800a518
 8001b60:	2400000c 	.word	0x2400000c
 8001b64:	24000008 	.word	0x24000008

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e021      	b.n	8001bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_InitTick+0x64>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_InitTick+0x60>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fa21 	bl	8002fda <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f001 f9eb 	bl	8002f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_InitTick+0x68>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24000014 	.word	0x24000014
 8001bcc:	24000008 	.word	0x24000008
 8001bd0:	24000010 	.word	0x24000010

08001bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	24000014 	.word	0x24000014
 8001bf8:	24000e70 	.word	0x24000e70

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	24000e70 	.word	0x24000e70

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ffee 	bl	8001bfc <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	24000014 	.word	0x24000014

08001c5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetREVID+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0c1b      	lsrs	r3, r3, #16
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	5c001000 	.word	0x5c001000

08001c74 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	4904      	ldr	r1, [pc, #16]	@ (8001c9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	58000400 	.word	0x58000400

08001ca0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3360      	adds	r3, #96	@ 0x60
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3360      	adds	r3, #96	@ 0x60
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	601a      	str	r2, [r3, #0]
  }
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3330      	adds	r3, #48	@ 0x30
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	211f      	movs	r1, #31
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 011f 	and.w	r1, r3, #31
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	431a      	orrs	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3314      	adds	r3, #20
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0e5b      	lsrs	r3, r3, #25
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0d1b      	lsrs	r3, r3, #20
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2107      	movs	r1, #7
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0d1b      	lsrs	r3, r3, #20
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0318 	and.w	r3, r3, #24
 8001e82:	4908      	ldr	r1, [pc, #32]	@ (8001ea4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e84:	40d9      	lsrs	r1, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	400b      	ands	r3, r1
 8001e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	000fffff 	.word	0x000fffff

08001ea8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6093      	str	r3, [r2, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	5fffffc0 	.word	0x5fffffc0

08001ecc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	6fffffc0 	.word	0x6fffffc0

08001f1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <LL_ADC_IsEnabled+0x18>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_ADC_IsEnabled+0x1a>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e18f      	b.n	80022f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe feed 	bl	8000dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff67 	bl	8001ecc <LL_ADC_IsDeepPowerDownEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff4d 	bl	8001ea8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff82 	bl	8001f1c <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d114      	bne.n	8002048 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff66 	bl	8001ef4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002028:	4b87      	ldr	r3, [pc, #540]	@ (8002248 <HAL_ADC_Init+0x290>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	4a87      	ldr	r2, [pc, #540]	@ (800224c <HAL_ADC_Init+0x294>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800203a:	e002      	b.n	8002042 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3b01      	subs	r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff65 	bl	8001f1c <LL_ADC_IsInternalRegulatorEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff76 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 800207e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8129 	bne.w	80022e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8125 	bne.w	80022e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800209e:	f043 0202 	orr.w	r2, r3, #2
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff4a 	bl	8001f44 <LL_ADC_IsEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d136      	bne.n	8002124 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a65      	ldr	r2, [pc, #404]	@ (8002250 <HAL_ADC_Init+0x298>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x112>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <HAL_ADC_Init+0x29c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10e      	bne.n	80020e8 <HAL_ADC_Init+0x130>
 80020ca:	4861      	ldr	r0, [pc, #388]	@ (8002250 <HAL_ADC_Init+0x298>)
 80020cc:	f7ff ff3a 	bl	8001f44 <LL_ADC_IsEnabled>
 80020d0:	4604      	mov	r4, r0
 80020d2:	4860      	ldr	r0, [pc, #384]	@ (8002254 <HAL_ADC_Init+0x29c>)
 80020d4:	f7ff ff36 	bl	8001f44 <LL_ADC_IsEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	4323      	orrs	r3, r4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e008      	b.n	80020fa <HAL_ADC_Init+0x142>
 80020e8:	485b      	ldr	r0, [pc, #364]	@ (8002258 <HAL_ADC_Init+0x2a0>)
 80020ea:	f7ff ff2b 	bl	8001f44 <LL_ADC_IsEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a53      	ldr	r2, [pc, #332]	@ (8002250 <HAL_ADC_Init+0x298>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Init+0x15a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_ADC_Init+0x29c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x15e>
 8002112:	4a52      	ldr	r2, [pc, #328]	@ (800225c <HAL_ADC_Init+0x2a4>)
 8002114:	e000      	b.n	8002118 <HAL_ADC_Init+0x160>
 8002116:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_ADC_Init+0x2a8>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f7ff fdbe 	bl	8001ca0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002124:	f7ff fd9a 	bl	8001c5c <HAL_GetREVID>
 8002128:	4603      	mov	r3, r0
 800212a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800212e:	4293      	cmp	r3, r2
 8002130:	d914      	bls.n	800215c <HAL_ADC_Init+0x1a4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d110      	bne.n	800215c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7d5b      	ldrb	r3, [r3, #21]
 800213e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002144:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800214a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7f1b      	ldrb	r3, [r3, #28]
 8002150:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002152:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002154:	f043 030c 	orr.w	r3, r3, #12
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e00d      	b.n	8002178 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7d5b      	ldrb	r3, [r3, #21]
 8002160:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002166:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800216c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7f1b      	ldrb	r3, [r3, #28]
 8002172:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7f1b      	ldrb	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	3b01      	subs	r3, #1
 8002186:	045b      	lsls	r3, r3, #17
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_ADC_Init+0x2ac>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	69b9      	ldr	r1, [r7, #24]
 80021ba:	430b      	orrs	r3, r1
 80021bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fed1 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 80021c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fede 	bl	8001f90 <LL_ADC_INJ_IsConversionOngoing>
 80021d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d15f      	bne.n	800229c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15c      	bne.n	800229c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7d1b      	ldrb	r3, [r3, #20]
 80021e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_ADC_Init+0x2b0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800220a:	2b01      	cmp	r3, #1
 800220c:	d130      	bne.n	8002270 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	4b14      	ldr	r3, [pc, #80]	@ (800226c <HAL_ADC_Init+0x2b4>)
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002222:	3a01      	subs	r2, #1
 8002224:	0411      	lsls	r1, r2, #16
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002236:	430a      	orrs	r2, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	e01c      	b.n	8002280 <HAL_ADC_Init+0x2c8>
 8002246:	bf00      	nop
 8002248:	24000008 	.word	0x24000008
 800224c:	053e2d63 	.word	0x053e2d63
 8002250:	40022000 	.word	0x40022000
 8002254:	40022100 	.word	0x40022100
 8002258:	58026000 	.word	0x58026000
 800225c:	40022300 	.word	0x40022300
 8002260:	58026300 	.word	0x58026300
 8002264:	fff0c003 	.word	0xfff0c003
 8002268:	ffffbffc 	.word	0xffffbffc
 800226c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fb8c 	bl	80029b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d10c      	bne.n	80022be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f023 010f 	bic.w	r1, r3, #15
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80022bc:	e007      	b.n	80022ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020f 	bic.w	r2, r2, #15
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80022de:	e007      	b.n	80022f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	@ 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}
 80022fa:	bf00      	nop

080022fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b0a1      	sub	sp, #132	@ 0x84
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a65      	ldr	r2, [pc, #404]	@ (80024ac <HAL_ADC_ConfigChannel+0x1b0>)
 8002316:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x2a>
 8002322:	2302      	movs	r3, #2
 8002324:	e32e      	b.n	8002984 <HAL_ADC_ConfigChannel+0x688>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe19 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8313 	bne.w	8002966 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db2c      	blt.n	80023a2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002350:	2b00      	cmp	r3, #0
 8002352:	d108      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x6a>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	e016      	b.n	8002394 <HAL_ADC_ConfigChannel+0x98>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002376:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2201      	movs	r2, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	69d1      	ldr	r1, [r2, #28]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	430b      	orrs	r3, r1
 80023a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff fcfe 	bl	8001db0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fdd6 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 80023be:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fde3 	bl	8001f90 <LL_ADC_INJ_IsConversionOngoing>
 80023ca:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 80b8 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 80b4 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f7ff fd0d 	bl	8001e08 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ee:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_ADC_ConfigChannel+0x1b4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023fa:	d10b      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x118>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	e01d      	b.n	8002450 <HAL_ADC_ConfigChannel+0x154>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_ADC_ConfigChannel+0x13e>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	e00a      	b.n	8002450 <HAL_ADC_ConfigChannel+0x154>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b04      	cmp	r3, #4
 8002458:	d02c      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6919      	ldr	r1, [r3, #16]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002468:	f7ff fc4e 	bl	8001d08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6919      	ldr	r1, [r3, #16]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7e5b      	ldrb	r3, [r3, #25]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x186>
 800247c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002480:	e000      	b.n	8002484 <HAL_ADC_ConfigChannel+0x188>
 8002482:	2300      	movs	r3, #0
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fc78 	bl	8001d7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	7e1b      	ldrb	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d102      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1a4>
 800249a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800249e:	e000      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1a6>
 80024a0:	2300      	movs	r3, #0
 80024a2:	461a      	mov	r2, r3
 80024a4:	f7ff fc50 	bl	8001d48 <LL_ADC_SetDataRightShift>
 80024a8:	e04c      	b.n	8002544 <HAL_ADC_ConfigChannel+0x248>
 80024aa:	bf00      	nop
 80024ac:	47ff0000 	.word	0x47ff0000
 80024b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d107      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800251e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002542:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fcfb 	bl	8001f44 <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 8211 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff fc7c 	bl	8001e60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4aa1      	ldr	r2, [pc, #644]	@ (80027f4 <HAL_ADC_ConfigChannel+0x4f8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	f040 812e 	bne.w	80027d0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2a0>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	3301      	adds	r3, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b09      	cmp	r3, #9
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e019      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x2d4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80025b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	bf94      	ite	ls
 80025ca:	2301      	movls	r3, #1
 80025cc:	2300      	movhi	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d079      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x2f4>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ee:	e015      	b.n	800261c <HAL_ADC_ConfigChannel+0x320>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002600:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800260c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_ADC_ConfigChannel+0x340>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	e017      	b.n	800266c <HAL_ADC_ConfigChannel+0x370>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800264a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800264e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x396>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	051b      	lsls	r3, r3, #20
 8002690:	e018      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x3c8>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c4:	430b      	orrs	r3, r1
 80026c6:	e07e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x3e8>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	069b      	lsls	r3, r3, #26
 80026de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e2:	e015      	b.n	8002710 <HAL_ADC_ConfigChannel+0x414>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	069b      	lsls	r3, r3, #26
 800270c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x434>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	e017      	b.n	8002760 <HAL_ADC_ConfigChannel+0x464>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	61bb      	str	r3, [r7, #24]
  return result;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	ea42 0103 	orr.w	r1, r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_ADC_ConfigChannel+0x490>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	3301      	adds	r3, #1
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	3b1e      	subs	r3, #30
 8002784:	051b      	lsls	r3, r3, #20
 8002786:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800278a:	e01b      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x4c8>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	60fb      	str	r3, [r7, #12]
  return result;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e003      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f003 021f 	and.w	r2, r3, #31
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	3b1e      	subs	r3, #30
 80027be:	051b      	lsls	r3, r3, #20
 80027c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c4:	430b      	orrs	r3, r1
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	6892      	ldr	r2, [r2, #8]
 80027ca:	4619      	mov	r1, r3
 80027cc:	f7ff fb1c 	bl	8001e08 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f280 80cf 	bge.w	8002978 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a06      	ldr	r2, [pc, #24]	@ (80027f8 <HAL_ADC_ConfigChannel+0x4fc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x4f2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_ADC_ConfigChannel+0x500>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x508>
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_ADC_ConfigChannel+0x504>)
 80027f0:	e009      	b.n	8002806 <HAL_ADC_ConfigChannel+0x50a>
 80027f2:	bf00      	nop
 80027f4:	47ff0000 	.word	0x47ff0000
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40022100 	.word	0x40022100
 8002800:	40022300 	.word	0x40022300
 8002804:	4b61      	ldr	r3, [pc, #388]	@ (800298c <HAL_ADC_ConfigChannel+0x690>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fa70 	bl	8001cec <LL_ADC_GetCommonPathInternalCh>
 800280c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5f      	ldr	r2, [pc, #380]	@ (8002990 <HAL_ADC_ConfigChannel+0x694>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x526>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a5d      	ldr	r2, [pc, #372]	@ (8002994 <HAL_ADC_ConfigChannel+0x698>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10e      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x544>
 8002822:	485b      	ldr	r0, [pc, #364]	@ (8002990 <HAL_ADC_ConfigChannel+0x694>)
 8002824:	f7ff fb8e 	bl	8001f44 <LL_ADC_IsEnabled>
 8002828:	4604      	mov	r4, r0
 800282a:	485a      	ldr	r0, [pc, #360]	@ (8002994 <HAL_ADC_ConfigChannel+0x698>)
 800282c:	f7ff fb8a 	bl	8001f44 <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	4323      	orrs	r3, r4
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e008      	b.n	8002852 <HAL_ADC_ConfigChannel+0x556>
 8002840:	4855      	ldr	r0, [pc, #340]	@ (8002998 <HAL_ADC_ConfigChannel+0x69c>)
 8002842:	f7ff fb7f 	bl	8001f44 <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d07d      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a50      	ldr	r2, [pc, #320]	@ (800299c <HAL_ADC_ConfigChannel+0x6a0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d130      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x5c6>
 8002860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d12b      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <HAL_ADC_ConfigChannel+0x69c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 8081 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a45      	ldr	r2, [pc, #276]	@ (8002990 <HAL_ADC_ConfigChannel+0x694>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_ADC_ConfigChannel+0x58e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <HAL_ADC_ConfigChannel+0x698>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x592>
 800288a:	4a45      	ldr	r2, [pc, #276]	@ (80029a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x594>
 800288e:	4a3f      	ldr	r2, [pc, #252]	@ (800298c <HAL_ADC_ConfigChannel+0x690>)
 8002890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002892:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7ff fa14 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800289e:	4b41      	ldr	r3, [pc, #260]	@ (80029a4 <HAL_ADC_ConfigChannel+0x6a8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	4a40      	ldr	r2, [pc, #256]	@ (80029a8 <HAL_ADC_ConfigChannel+0x6ac>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	3301      	adds	r3, #1
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028b2:	e002      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c0:	e05a      	b.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a39      	ldr	r2, [pc, #228]	@ (80029ac <HAL_ADC_ConfigChannel+0x6b0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d11e      	bne.n	800290a <HAL_ADC_ConfigChannel+0x60e>
 80028cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d119      	bne.n	800290a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2f      	ldr	r2, [pc, #188]	@ (8002998 <HAL_ADC_ConfigChannel+0x69c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d14b      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_ADC_ConfigChannel+0x694>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x5f8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_ADC_ConfigChannel+0x698>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x5fc>
 80028f4:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <HAL_ADC_ConfigChannel+0x6a4>)
 80028f6:	e000      	b.n	80028fa <HAL_ADC_ConfigChannel+0x5fe>
 80028f8:	4a24      	ldr	r2, [pc, #144]	@ (800298c <HAL_ADC_ConfigChannel+0x690>)
 80028fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f7ff f9df 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002908:	e036      	b.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a28      	ldr	r2, [pc, #160]	@ (80029b0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d131      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
 8002914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d12c      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_ADC_ConfigChannel+0x69c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d127      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_ADC_ConfigChannel+0x694>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_ADC_ConfigChannel+0x640>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_ADC_ConfigChannel+0x698>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x644>
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800293e:	e000      	b.n	8002942 <HAL_ADC_ConfigChannel+0x646>
 8002940:	4a12      	ldr	r2, [pc, #72]	@ (800298c <HAL_ADC_ConfigChannel+0x690>)
 8002942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f7ff f9bb 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
 8002950:	e012      	b.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002964:	e008      	b.n	8002978 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002980:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002984:	4618      	mov	r0, r3
 8002986:	3784      	adds	r7, #132	@ 0x84
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}
 800298c:	58026300 	.word	0x58026300
 8002990:	40022000 	.word	0x40022000
 8002994:	40022100 	.word	0x40022100
 8002998:	58026000 	.word	0x58026000
 800299c:	cb840000 	.word	0xcb840000
 80029a0:	40022300 	.word	0x40022300
 80029a4:	24000008 	.word	0x24000008
 80029a8:	053e2d63 	.word	0x053e2d63
 80029ac:	c7520000 	.word	0xc7520000
 80029b0:	cfb80000 	.word	0xcfb80000

080029b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7a      	ldr	r2, [pc, #488]	@ (8002bac <ADC_ConfigureBoostMode+0x1f8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x1c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a79      	ldr	r2, [pc, #484]	@ (8002bb0 <ADC_ConfigureBoostMode+0x1fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d109      	bne.n	80029e4 <ADC_ConfigureBoostMode+0x30>
 80029d0:	4b78      	ldr	r3, [pc, #480]	@ (8002bb4 <ADC_ConfigureBoostMode+0x200>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <ADC_ConfigureBoostMode+0x42>
 80029e4:	4b74      	ldr	r3, [pc, #464]	@ (8002bb8 <ADC_ConfigureBoostMode+0x204>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029fa:	f003 fa8b 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 80029fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a08:	d010      	beq.n	8002a2c <ADC_ConfigureBoostMode+0x78>
 8002a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a0e:	d873      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x144>
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a14:	d002      	beq.n	8002a1c <ADC_ConfigureBoostMode+0x68>
 8002a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a1a:	d16d      	bne.n	8002af8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
        break;
 8002a2a:	e068      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
        break;
 8002a32:	e064      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a34:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	f004 fcd0 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a4a:	d051      	beq.n	8002af0 <ADC_ConfigureBoostMode+0x13c>
 8002a4c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a50:	d854      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a52:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a56:	d047      	beq.n	8002ae8 <ADC_ConfigureBoostMode+0x134>
 8002a58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a5c:	d84e      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a5e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a62:	d03d      	beq.n	8002ae0 <ADC_ConfigureBoostMode+0x12c>
 8002a64:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a68:	d848      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a6e:	d033      	beq.n	8002ad8 <ADC_ConfigureBoostMode+0x124>
 8002a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a74:	d842      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a76:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a7a:	d029      	beq.n	8002ad0 <ADC_ConfigureBoostMode+0x11c>
 8002a7c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a80:	d83c      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a86:	d01a      	beq.n	8002abe <ADC_ConfigureBoostMode+0x10a>
 8002a88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a8c:	d836      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a8e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a92:	d014      	beq.n	8002abe <ADC_ConfigureBoostMode+0x10a>
 8002a94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a98:	d830      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a9e:	d00e      	beq.n	8002abe <ADC_ConfigureBoostMode+0x10a>
 8002aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aa4:	d82a      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002aa6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002aaa:	d008      	beq.n	8002abe <ADC_ConfigureBoostMode+0x10a>
 8002aac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ab0:	d824      	bhi.n	8002afc <ADC_ConfigureBoostMode+0x148>
 8002ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ab6:	d002      	beq.n	8002abe <ADC_ConfigureBoostMode+0x10a>
 8002ab8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002abc:	d11e      	bne.n	8002afc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0c9b      	lsrs	r3, r3, #18
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	60fb      	str	r3, [r7, #12]
        break;
 8002ace:	e016      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]
        break;
 8002ad6:	e012      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	60fb      	str	r3, [r7, #12]
        break;
 8002ade:	e00e      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	60fb      	str	r3, [r7, #12]
        break;
 8002ae6:	e00a      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	09db      	lsrs	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
        break;
 8002aee:	e006      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	60fb      	str	r3, [r7, #12]
        break;
 8002af6:	e002      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
        break;
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002afc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002afe:	f7ff f8ad 	bl	8001c5c <HAL_GetREVID>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d815      	bhi.n	8002b38 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bbc <ADC_ConfigureBoostMode+0x208>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d908      	bls.n	8002b26 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002b24:	e03e      	b.n	8002ba4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	e035      	b.n	8002ba4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <ADC_ConfigureBoostMode+0x20c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d808      	bhi.n	8002b58 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	e025      	b.n	8002ba4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <ADC_ConfigureBoostMode+0x210>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d80a      	bhi.n	8002b76 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	e016      	b.n	8002ba4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <ADC_ConfigureBoostMode+0x214>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d80a      	bhi.n	8002b94 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b90:	609a      	str	r2, [r3, #8]
}
 8002b92:	e007      	b.n	8002ba4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ba2:	609a      	str	r2, [r3, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40022100 	.word	0x40022100
 8002bb4:	40022300 	.word	0x40022300
 8002bb8:	58026300 	.word	0x58026300
 8002bbc:	01312d00 	.word	0x01312d00
 8002bc0:	005f5e10 	.word	0x005f5e10
 8002bc4:	00bebc20 	.word	0x00bebc20
 8002bc8:	017d7840 	.word	0x017d7840

08002bcc <LL_ADC_IsEnabled>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <LL_ADC_IsEnabled+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_ADC_IsEnabled+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b09f      	sub	sp, #124	@ 0x7c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0be      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c50:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	e001      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e09d      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ffb9 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002c80:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ffb3 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d17f      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d17c      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a47      	ldr	r2, [pc, #284]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a46      	ldr	r2, [pc, #280]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cae:	e000      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d039      	beq.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ccc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a38      	ldr	r2, [pc, #224]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10e      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ce2:	4836      	ldr	r0, [pc, #216]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ce4:	f7ff ff72 	bl	8002bcc <LL_ADC_IsEnabled>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	4835      	ldr	r0, [pc, #212]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cec:	f7ff ff6e 	bl	8002bcc <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4323      	orrs	r3, r4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e008      	b.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002d00:	4832      	ldr	r0, [pc, #200]	@ (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d02:	f7ff ff63 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d047      	beq.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	6892      	ldr	r2, [r2, #8]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2e:	e03a      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10e      	bne.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002d50:	481a      	ldr	r0, [pc, #104]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d52:	f7ff ff3b 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d56:	4604      	mov	r4, r0
 8002d58:	4819      	ldr	r0, [pc, #100]	@ (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d5a:	f7ff ff37 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4323      	orrs	r3, r4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	e008      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d6e:	4817      	ldr	r0, [pc, #92]	@ (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d70:	f7ff ff2c 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d8e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d90:	e009      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002da4:	e000      	b.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002db0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	377c      	adds	r7, #124	@ 0x7c
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40022100 	.word	0x40022100
 8002dc4:	40022300 	.word	0x40022300
 8002dc8:	58026300 	.word	0x58026300
 8002dcc:	58026000 	.word	0x58026000
 8002dd0:	fffff0e0 	.word	0xfffff0e0

08002dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x40>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x40>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00
 8002e18:	05fa0000 	.word	0x05fa0000

08002e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <__NVIC_GetPriorityGrouping+0x18>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 0307 	and.w	r3, r3, #7
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db0b      	blt.n	8002e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4907      	ldr	r1, [pc, #28]	@ (8002e70 <__NVIC_EnableIRQ+0x38>)
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2001      	movs	r0, #1
 8002e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	6039      	str	r1, [r7, #0]
 8002e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db0a      	blt.n	8002e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	490c      	ldr	r1, [pc, #48]	@ (8002ec0 <__NVIC_SetPriority+0x4c>)
 8002e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e9c:	e00a      	b.n	8002eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4908      	ldr	r1, [pc, #32]	@ (8002ec4 <__NVIC_SetPriority+0x50>)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	761a      	strb	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	@ 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	bf28      	it	cs
 8002ee6:	2304      	movcs	r3, #4
 8002ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d902      	bls.n	8002ef8 <NVIC_EncodePriority+0x30>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	e000      	b.n	8002efa <NVIC_EncodePriority+0x32>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43d9      	mvns	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	4313      	orrs	r3, r2
         );
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	@ 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f40:	d301      	bcc.n	8002f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00f      	b.n	8002f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <SysTick_Config+0x40>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4e:	210f      	movs	r1, #15
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f7ff ff8e 	bl	8002e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <SysTick_Config+0x40>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5e:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <SysTick_Config+0x40>)
 8002f60:	2207      	movs	r2, #7
 8002f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000e010 	.word	0xe000e010

08002f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff29 	bl	8002dd4 <__NVIC_SetPriorityGrouping>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff40 	bl	8002e1c <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ff90 	bl	8002ec8 <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff5f 	bl	8002e74 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff33 	bl	8002e38 <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffa4 	bl	8002f30 <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7fe fdfe 	bl	8001bfc <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e316      	b.n	800363a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a66      	ldr	r2, [pc, #408]	@ (80031ac <HAL_DMA_Init+0x1b8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d04a      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a65      	ldr	r2, [pc, #404]	@ (80031b0 <HAL_DMA_Init+0x1bc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d045      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a63      	ldr	r2, [pc, #396]	@ (80031b4 <HAL_DMA_Init+0x1c0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d040      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a62      	ldr	r2, [pc, #392]	@ (80031b8 <HAL_DMA_Init+0x1c4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d03b      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a60      	ldr	r2, [pc, #384]	@ (80031bc <HAL_DMA_Init+0x1c8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d036      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5f      	ldr	r2, [pc, #380]	@ (80031c0 <HAL_DMA_Init+0x1cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d031      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5d      	ldr	r2, [pc, #372]	@ (80031c4 <HAL_DMA_Init+0x1d0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02c      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_DMA_Init+0x1d4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d027      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5a      	ldr	r2, [pc, #360]	@ (80031cc <HAL_DMA_Init+0x1d8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d022      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a59      	ldr	r2, [pc, #356]	@ (80031d0 <HAL_DMA_Init+0x1dc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d01d      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a57      	ldr	r2, [pc, #348]	@ (80031d4 <HAL_DMA_Init+0x1e0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_DMA_Init+0x1e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a54      	ldr	r2, [pc, #336]	@ (80031dc <HAL_DMA_Init+0x1e8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a53      	ldr	r2, [pc, #332]	@ (80031e0 <HAL_DMA_Init+0x1ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_DMA_Init+0x1f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_DMA_Init+0xb8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_DMA_Init+0x1f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_DMA_Init+0xbc>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_DMA_Init+0xbe>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 813b 	beq.w	800332e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a37      	ldr	r2, [pc, #220]	@ (80031ac <HAL_DMA_Init+0x1b8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d04a      	beq.n	8003168 <HAL_DMA_Init+0x174>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a36      	ldr	r2, [pc, #216]	@ (80031b0 <HAL_DMA_Init+0x1bc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d045      	beq.n	8003168 <HAL_DMA_Init+0x174>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a34      	ldr	r2, [pc, #208]	@ (80031b4 <HAL_DMA_Init+0x1c0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d040      	beq.n	8003168 <HAL_DMA_Init+0x174>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a33      	ldr	r2, [pc, #204]	@ (80031b8 <HAL_DMA_Init+0x1c4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d03b      	beq.n	8003168 <HAL_DMA_Init+0x174>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a31      	ldr	r2, [pc, #196]	@ (80031bc <HAL_DMA_Init+0x1c8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d036      	beq.n	8003168 <HAL_DMA_Init+0x174>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a30      	ldr	r2, [pc, #192]	@ (80031c0 <HAL_DMA_Init+0x1cc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d031      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2e      	ldr	r2, [pc, #184]	@ (80031c4 <HAL_DMA_Init+0x1d0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02c      	beq.n	8003168 <HAL_DMA_Init+0x174>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2d      	ldr	r2, [pc, #180]	@ (80031c8 <HAL_DMA_Init+0x1d4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d027      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2b      	ldr	r2, [pc, #172]	@ (80031cc <HAL_DMA_Init+0x1d8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2a      	ldr	r2, [pc, #168]	@ (80031d0 <HAL_DMA_Init+0x1dc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01d      	beq.n	8003168 <HAL_DMA_Init+0x174>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	@ (80031d4 <HAL_DMA_Init+0x1e0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a27      	ldr	r2, [pc, #156]	@ (80031d8 <HAL_DMA_Init+0x1e4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a25      	ldr	r2, [pc, #148]	@ (80031dc <HAL_DMA_Init+0x1e8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_DMA_Init+0x174>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <HAL_DMA_Init+0x1ec>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_DMA_Init+0x174>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	@ (80031e4 <HAL_DMA_Init+0x1f0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_DMA_Init+0x174>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a21      	ldr	r2, [pc, #132]	@ (80031e8 <HAL_DMA_Init+0x1f4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <HAL_DMA_Init+0x186>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e007      	b.n	800318a <HAL_DMA_Init+0x196>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800318a:	e02f      	b.n	80031ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318c:	f7fe fd36 	bl	8001bfc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b05      	cmp	r3, #5
 8003198:	d928      	bls.n	80031ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e246      	b.n	800363a <HAL_DMA_Init+0x646>
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	40020040 	.word	0x40020040
 80031b8:	40020058 	.word	0x40020058
 80031bc:	40020070 	.word	0x40020070
 80031c0:	40020088 	.word	0x40020088
 80031c4:	400200a0 	.word	0x400200a0
 80031c8:	400200b8 	.word	0x400200b8
 80031cc:	40020410 	.word	0x40020410
 80031d0:	40020428 	.word	0x40020428
 80031d4:	40020440 	.word	0x40020440
 80031d8:	40020458 	.word	0x40020458
 80031dc:	40020470 	.word	0x40020470
 80031e0:	40020488 	.word	0x40020488
 80031e4:	400204a0 	.word	0x400204a0
 80031e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1c8      	bne.n	800318c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4b83      	ldr	r3, [pc, #524]	@ (8003414 <HAL_DMA_Init+0x420>)
 8003206:	4013      	ands	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003212:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4313      	orrs	r3, r2
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003250:	4b71      	ldr	r3, [pc, #452]	@ (8003418 <HAL_DMA_Init+0x424>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b71      	ldr	r3, [pc, #452]	@ (800341c <HAL_DMA_Init+0x428>)
 8003256:	4013      	ands	r3, r2
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800325c:	d328      	bcc.n	80032b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b28      	cmp	r3, #40	@ 0x28
 8003264:	d903      	bls.n	800326e <HAL_DMA_Init+0x27a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b2e      	cmp	r3, #46	@ 0x2e
 800326c:	d917      	bls.n	800329e <HAL_DMA_Init+0x2aa>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b3e      	cmp	r3, #62	@ 0x3e
 8003274:	d903      	bls.n	800327e <HAL_DMA_Init+0x28a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b42      	cmp	r3, #66	@ 0x42
 800327c:	d90f      	bls.n	800329e <HAL_DMA_Init+0x2aa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b46      	cmp	r3, #70	@ 0x46
 8003284:	d903      	bls.n	800328e <HAL_DMA_Init+0x29a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b48      	cmp	r3, #72	@ 0x48
 800328c:	d907      	bls.n	800329e <HAL_DMA_Init+0x2aa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b4e      	cmp	r3, #78	@ 0x4e
 8003294:	d905      	bls.n	80032a2 <HAL_DMA_Init+0x2ae>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b52      	cmp	r3, #82	@ 0x52
 800329c:	d801      	bhi.n	80032a2 <HAL_DMA_Init+0x2ae>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_Init+0x2b0>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d117      	bne.n	800330a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f001 f9b9 	bl	8004664 <DMA_CheckFifoParam>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2240      	movs	r2, #64	@ 0x40
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e197      	b.n	800363a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f001 f8f4 	bl	8004500 <DMA_CalcBaseAndBitshift>
 8003318:	4603      	mov	r3, r0
 800331a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	223f      	movs	r2, #63	@ 0x3f
 8003326:	409a      	lsls	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	e0cd      	b.n	80034ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3b      	ldr	r2, [pc, #236]	@ (8003420 <HAL_DMA_Init+0x42c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Init+0x38a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a39      	ldr	r2, [pc, #228]	@ (8003424 <HAL_DMA_Init+0x430>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Init+0x38a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a38      	ldr	r2, [pc, #224]	@ (8003428 <HAL_DMA_Init+0x434>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Init+0x38a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a36      	ldr	r2, [pc, #216]	@ (800342c <HAL_DMA_Init+0x438>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Init+0x38a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a35      	ldr	r2, [pc, #212]	@ (8003430 <HAL_DMA_Init+0x43c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Init+0x38a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a33      	ldr	r2, [pc, #204]	@ (8003434 <HAL_DMA_Init+0x440>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Init+0x38a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_DMA_Init+0x444>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Init+0x38a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a30      	ldr	r2, [pc, #192]	@ (800343c <HAL_DMA_Init+0x448>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_DMA_Init+0x38e>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_DMA_Init+0x390>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8097 	beq.w	80034b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a24      	ldr	r2, [pc, #144]	@ (8003420 <HAL_DMA_Init+0x42c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d021      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_DMA_Init+0x430>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01c      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	@ (8003428 <HAL_DMA_Init+0x434>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d017      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_DMA_Init+0x438>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d012      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003430 <HAL_DMA_Init+0x43c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00d      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <HAL_DMA_Init+0x440>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d008      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <HAL_DMA_Init+0x444>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA_Init+0x3e4>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_DMA_Init+0x448>)
 80033d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_DMA_Init+0x44c>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d021      	beq.n	8003444 <HAL_DMA_Init+0x450>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b80      	cmp	r3, #128	@ 0x80
 8003406:	d102      	bne.n	800340e <HAL_DMA_Init+0x41a>
 8003408:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800340c:	e01b      	b.n	8003446 <HAL_DMA_Init+0x452>
 800340e:	2300      	movs	r3, #0
 8003410:	e019      	b.n	8003446 <HAL_DMA_Init+0x452>
 8003412:	bf00      	nop
 8003414:	fe10803f 	.word	0xfe10803f
 8003418:	5c001000 	.word	0x5c001000
 800341c:	ffff0000 	.word	0xffff0000
 8003420:	58025408 	.word	0x58025408
 8003424:	5802541c 	.word	0x5802541c
 8003428:	58025430 	.word	0x58025430
 800342c:	58025444 	.word	0x58025444
 8003430:	58025458 	.word	0x58025458
 8003434:	5802546c 	.word	0x5802546c
 8003438:	58025480 	.word	0x58025480
 800343c:	58025494 	.word	0x58025494
 8003440:	fffe000f 	.word	0xfffe000f
 8003444:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68d2      	ldr	r2, [r2, #12]
 800344a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800344c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800345c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800346c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003474:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b6e      	ldr	r3, [pc, #440]	@ (8003644 <HAL_DMA_Init+0x650>)
 800348c:	4413      	add	r3, r2
 800348e:	4a6e      	ldr	r2, [pc, #440]	@ (8003648 <HAL_DMA_Init+0x654>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f001 f82f 	bl	8004500 <DMA_CalcBaseAndBitshift>
 80034a2:	4603      	mov	r3, r0
 80034a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	e008      	b.n	80034ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2240      	movs	r2, #64	@ 0x40
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2203      	movs	r2, #3
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0b7      	b.n	800363a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5f      	ldr	r2, [pc, #380]	@ (800364c <HAL_DMA_Init+0x658>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d072      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_DMA_Init+0x65c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d06d      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003654 <HAL_DMA_Init+0x660>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d068      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003658 <HAL_DMA_Init+0x664>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d063      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a59      	ldr	r2, [pc, #356]	@ (800365c <HAL_DMA_Init+0x668>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05e      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a57      	ldr	r2, [pc, #348]	@ (8003660 <HAL_DMA_Init+0x66c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d059      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a56      	ldr	r2, [pc, #344]	@ (8003664 <HAL_DMA_Init+0x670>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d054      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_DMA_Init+0x674>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04f      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a53      	ldr	r2, [pc, #332]	@ (800366c <HAL_DMA_Init+0x678>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a51      	ldr	r2, [pc, #324]	@ (8003670 <HAL_DMA_Init+0x67c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a50      	ldr	r2, [pc, #320]	@ (8003674 <HAL_DMA_Init+0x680>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4e      	ldr	r2, [pc, #312]	@ (8003678 <HAL_DMA_Init+0x684>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <HAL_DMA_Init+0x688>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4b      	ldr	r2, [pc, #300]	@ (8003680 <HAL_DMA_Init+0x68c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4a      	ldr	r2, [pc, #296]	@ (8003684 <HAL_DMA_Init+0x690>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a48      	ldr	r2, [pc, #288]	@ (8003688 <HAL_DMA_Init+0x694>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a47      	ldr	r2, [pc, #284]	@ (800368c <HAL_DMA_Init+0x698>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a45      	ldr	r2, [pc, #276]	@ (8003690 <HAL_DMA_Init+0x69c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a44      	ldr	r2, [pc, #272]	@ (8003694 <HAL_DMA_Init+0x6a0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a42      	ldr	r2, [pc, #264]	@ (8003698 <HAL_DMA_Init+0x6a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a41      	ldr	r2, [pc, #260]	@ (800369c <HAL_DMA_Init+0x6a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3f      	ldr	r2, [pc, #252]	@ (80036a0 <HAL_DMA_Init+0x6ac>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3e      	ldr	r2, [pc, #248]	@ (80036a4 <HAL_DMA_Init+0x6b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Init+0x5c6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3c      	ldr	r2, [pc, #240]	@ (80036a8 <HAL_DMA_Init+0x6b4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Init+0x5ca>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_Init+0x5cc>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d032      	beq.n	800362a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 f8c9 	bl	800475c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b80      	cmp	r3, #128	@ 0x80
 80035d0:	d102      	bne.n	80035d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_DMA_Init+0x624>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d80c      	bhi.n	8003618 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f001 f946 	bl	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e008      	b.n	800362a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	a7fdabf8 	.word	0xa7fdabf8
 8003648:	cccccccd 	.word	0xcccccccd
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020040 	.word	0x40020040
 8003658:	40020058 	.word	0x40020058
 800365c:	40020070 	.word	0x40020070
 8003660:	40020088 	.word	0x40020088
 8003664:	400200a0 	.word	0x400200a0
 8003668:	400200b8 	.word	0x400200b8
 800366c:	40020410 	.word	0x40020410
 8003670:	40020428 	.word	0x40020428
 8003674:	40020440 	.word	0x40020440
 8003678:	40020458 	.word	0x40020458
 800367c:	40020470 	.word	0x40020470
 8003680:	40020488 	.word	0x40020488
 8003684:	400204a0 	.word	0x400204a0
 8003688:	400204b8 	.word	0x400204b8
 800368c:	58025408 	.word	0x58025408
 8003690:	5802541c 	.word	0x5802541c
 8003694:	58025430 	.word	0x58025430
 8003698:	58025444 	.word	0x58025444
 800369c:	58025458 	.word	0x58025458
 80036a0:	5802546c 	.word	0x5802546c
 80036a4:	58025480 	.word	0x58025480
 80036a8:	58025494 	.word	0x58025494

080036ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b8:	4b67      	ldr	r3, [pc, #412]	@ (8003858 <HAL_DMA_IRQHandler+0x1ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a67      	ldr	r2, [pc, #412]	@ (800385c <HAL_DMA_IRQHandler+0x1b0>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003860 <HAL_DMA_IRQHandler+0x1b4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003864 <HAL_DMA_IRQHandler+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003868 <HAL_DMA_IRQHandler+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5a      	ldr	r2, [pc, #360]	@ (800386c <HAL_DMA_IRQHandler+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a59      	ldr	r2, [pc, #356]	@ (8003870 <HAL_DMA_IRQHandler+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a57      	ldr	r2, [pc, #348]	@ (8003874 <HAL_DMA_IRQHandler+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a56      	ldr	r2, [pc, #344]	@ (8003878 <HAL_DMA_IRQHandler+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a54      	ldr	r2, [pc, #336]	@ (800387c <HAL_DMA_IRQHandler+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a53      	ldr	r2, [pc, #332]	@ (8003880 <HAL_DMA_IRQHandler+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a51      	ldr	r2, [pc, #324]	@ (8003884 <HAL_DMA_IRQHandler+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a50      	ldr	r2, [pc, #320]	@ (8003888 <HAL_DMA_IRQHandler+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4e      	ldr	r2, [pc, #312]	@ (800388c <HAL_DMA_IRQHandler+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4d      	ldr	r2, [pc, #308]	@ (8003890 <HAL_DMA_IRQHandler+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4b      	ldr	r2, [pc, #300]	@ (8003894 <HAL_DMA_IRQHandler+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4a      	ldr	r2, [pc, #296]	@ (8003898 <HAL_DMA_IRQHandler+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a48      	ldr	r2, [pc, #288]	@ (800389c <HAL_DMA_IRQHandler+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_DMA_IRQHandler+0xd6>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_DMA_IRQHandler+0xd8>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 842b 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2208      	movs	r2, #8
 8003794:	409a      	lsls	r2, r3
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80a2 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_DMA_IRQHandler+0x1b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <HAL_DMA_IRQHandler+0x1b8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_DMA_IRQHandler+0x1bc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d040      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <HAL_DMA_IRQHandler+0x1c0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <HAL_DMA_IRQHandler+0x1c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <HAL_DMA_IRQHandler+0x1c8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <HAL_DMA_IRQHandler+0x1cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_DMA_IRQHandler+0x1d0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <HAL_DMA_IRQHandler+0x1d4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <HAL_DMA_IRQHandler+0x1d8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <HAL_DMA_IRQHandler+0x1dc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	@ (800388c <HAL_DMA_IRQHandler+0x1e0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <HAL_DMA_IRQHandler+0x1e4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_DMA_IRQHandler+0x1e8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_DMA_IRQHandler+0x1ec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	@ (800389c <HAL_DMA_IRQHandler+0x1f0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d12f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x1f4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e02e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x208>
 8003856:	bf00      	nop
 8003858:	24000008 	.word	0x24000008
 800385c:	1b4e81b5 	.word	0x1b4e81b5
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06e      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a69      	ldr	r2, [pc, #420]	@ (8003aa4 <HAL_DMA_IRQHandler+0x3f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	@ (8003aa8 <HAL_DMA_IRQHandler+0x3fc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_DMA_IRQHandler+0x400>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a64      	ldr	r2, [pc, #400]	@ (8003ab0 <HAL_DMA_IRQHandler+0x404>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_DMA_IRQHandler+0x408>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a61      	ldr	r2, [pc, #388]	@ (8003ab8 <HAL_DMA_IRQHandler+0x40c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_DMA_IRQHandler+0x410>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5e      	ldr	r2, [pc, #376]	@ (8003ac0 <HAL_DMA_IRQHandler+0x414>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_DMA_IRQHandler+0x418>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac8 <HAL_DMA_IRQHandler+0x41c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_DMA_IRQHandler+0x420>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_DMA_IRQHandler+0x424>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_DMA_IRQHandler+0x428>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a55      	ldr	r2, [pc, #340]	@ (8003ad8 <HAL_DMA_IRQHandler+0x42c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a54      	ldr	r2, [pc, #336]	@ (8003adc <HAL_DMA_IRQHandler+0x430>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <HAL_DMA_IRQHandler+0x434>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10a      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x304>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e003      	b.n	80039b8 <HAL_DMA_IRQHandler+0x30c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f043 0202 	orr.w	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2204      	movs	r2, #4
 80039e2:	409a      	lsls	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808f 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa4 <HAL_DMA_IRQHandler+0x3f8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <HAL_DMA_IRQHandler+0x3fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <HAL_DMA_IRQHandler+0x400>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a27      	ldr	r2, [pc, #156]	@ (8003ab0 <HAL_DMA_IRQHandler+0x404>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a26      	ldr	r2, [pc, #152]	@ (8003ab4 <HAL_DMA_IRQHandler+0x408>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a24      	ldr	r2, [pc, #144]	@ (8003ab8 <HAL_DMA_IRQHandler+0x40c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <HAL_DMA_IRQHandler+0x410>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a21      	ldr	r2, [pc, #132]	@ (8003ac0 <HAL_DMA_IRQHandler+0x414>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a20      	ldr	r2, [pc, #128]	@ (8003ac4 <HAL_DMA_IRQHandler+0x418>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac8 <HAL_DMA_IRQHandler+0x41c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <HAL_DMA_IRQHandler+0x420>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <HAL_DMA_IRQHandler+0x424>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <HAL_DMA_IRQHandler+0x428>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	@ (8003ad8 <HAL_DMA_IRQHandler+0x42c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	@ (8003adc <HAL_DMA_IRQHandler+0x430>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a15      	ldr	r2, [pc, #84]	@ (8003ae0 <HAL_DMA_IRQHandler+0x434>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12a      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x438>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e023      	b.n	8003aec <HAL_DMA_IRQHandler+0x440>
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2204      	movs	r2, #4
 8003afa:	409a      	lsls	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2210      	movs	r2, #16
 8003b16:	409a      	lsls	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a6 	beq.w	8003c6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a85      	ldr	r2, [pc, #532]	@ (8003d3c <HAL_DMA_IRQHandler+0x690>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a83      	ldr	r2, [pc, #524]	@ (8003d40 <HAL_DMA_IRQHandler+0x694>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d045      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a82      	ldr	r2, [pc, #520]	@ (8003d44 <HAL_DMA_IRQHandler+0x698>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d040      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a80      	ldr	r2, [pc, #512]	@ (8003d48 <HAL_DMA_IRQHandler+0x69c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d4c <HAL_DMA_IRQHandler+0x6a0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d036      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7d      	ldr	r2, [pc, #500]	@ (8003d50 <HAL_DMA_IRQHandler+0x6a4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d031      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7c      	ldr	r2, [pc, #496]	@ (8003d54 <HAL_DMA_IRQHandler+0x6a8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d02c      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d58 <HAL_DMA_IRQHandler+0x6ac>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a79      	ldr	r2, [pc, #484]	@ (8003d5c <HAL_DMA_IRQHandler+0x6b0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a77      	ldr	r2, [pc, #476]	@ (8003d60 <HAL_DMA_IRQHandler+0x6b4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a76      	ldr	r2, [pc, #472]	@ (8003d64 <HAL_DMA_IRQHandler+0x6b8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a74      	ldr	r2, [pc, #464]	@ (8003d68 <HAL_DMA_IRQHandler+0x6bc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a73      	ldr	r2, [pc, #460]	@ (8003d6c <HAL_DMA_IRQHandler+0x6c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a71      	ldr	r2, [pc, #452]	@ (8003d70 <HAL_DMA_IRQHandler+0x6c4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a70      	ldr	r2, [pc, #448]	@ (8003d74 <HAL_DMA_IRQHandler+0x6c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d78 <HAL_DMA_IRQHandler+0x6cc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x52c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e009      	b.n	8003bec <HAL_DMA_IRQHandler+0x540>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03e      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d024      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e01f      	b.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e016      	b.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2220      	movs	r2, #32
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8110 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <HAL_DMA_IRQHandler+0x690>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2b      	ldr	r2, [pc, #172]	@ (8003d40 <HAL_DMA_IRQHandler+0x694>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	@ (8003d44 <HAL_DMA_IRQHandler+0x698>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a28      	ldr	r2, [pc, #160]	@ (8003d48 <HAL_DMA_IRQHandler+0x69c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <HAL_DMA_IRQHandler+0x6a0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a25      	ldr	r2, [pc, #148]	@ (8003d50 <HAL_DMA_IRQHandler+0x6a4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <HAL_DMA_IRQHandler+0x6a8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_DMA_IRQHandler+0x6ac>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	@ (8003d5c <HAL_DMA_IRQHandler+0x6b0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_DMA_IRQHandler+0x6b4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <HAL_DMA_IRQHandler+0x6b8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <HAL_DMA_IRQHandler+0x6bc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <HAL_DMA_IRQHandler+0x6c0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	@ (8003d70 <HAL_DMA_IRQHandler+0x6c4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <HAL_DMA_IRQHandler+0x6c8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_DMA_IRQHandler+0x6cc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d12b      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x6d0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e02a      	b.n	8003d90 <HAL_DMA_IRQHandler+0x6e4>
 8003d3a:	bf00      	nop
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8087 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2220      	movs	r2, #32
 8003da0:	409a      	lsls	r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d139      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0216 	bic.w	r2, r2, #22
 8003dc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x736>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0208 	bic.w	r2, r2, #8
 8003df0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	223f      	movs	r2, #63	@ 0x3f
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 834a 	beq.w	80044b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
          }
          return;
 8003e24:	e344      	b.n	80044b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e027      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e01e      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8306 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8088 	beq.w	8003fcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7a      	ldr	r2, [pc, #488]	@ (80040b4 <HAL_DMA_IRQHandler+0xa08>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04a      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a79      	ldr	r2, [pc, #484]	@ (80040b8 <HAL_DMA_IRQHandler+0xa0c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d045      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a77      	ldr	r2, [pc, #476]	@ (80040bc <HAL_DMA_IRQHandler+0xa10>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d040      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a76      	ldr	r2, [pc, #472]	@ (80040c0 <HAL_DMA_IRQHandler+0xa14>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d03b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a74      	ldr	r2, [pc, #464]	@ (80040c4 <HAL_DMA_IRQHandler+0xa18>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d036      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a73      	ldr	r2, [pc, #460]	@ (80040c8 <HAL_DMA_IRQHandler+0xa1c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d031      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_DMA_IRQHandler+0xa20>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d02c      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a70      	ldr	r2, [pc, #448]	@ (80040d0 <HAL_DMA_IRQHandler+0xa24>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d027      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6e      	ldr	r2, [pc, #440]	@ (80040d4 <HAL_DMA_IRQHandler+0xa28>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6d      	ldr	r2, [pc, #436]	@ (80040d8 <HAL_DMA_IRQHandler+0xa2c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01d      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80040dc <HAL_DMA_IRQHandler+0xa30>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6a      	ldr	r2, [pc, #424]	@ (80040e0 <HAL_DMA_IRQHandler+0xa34>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_DMA_IRQHandler+0xa38>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a67      	ldr	r2, [pc, #412]	@ (80040e8 <HAL_DMA_IRQHandler+0xa3c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a65      	ldr	r2, [pc, #404]	@ (80040ec <HAL_DMA_IRQHandler+0xa40>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a64      	ldr	r2, [pc, #400]	@ (80040f0 <HAL_DMA_IRQHandler+0xa44>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <HAL_DMA_IRQHandler+0x8ca>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e007      	b.n	8003f86 <HAL_DMA_IRQHandler+0x8da>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d307      	bcc.n	8003fa2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f2      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x8da>
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fa2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003fba:	e003      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8272 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e26c      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a43      	ldr	r2, [pc, #268]	@ (80040f4 <HAL_DMA_IRQHandler+0xa48>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a42      	ldr	r2, [pc, #264]	@ (80040f8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a40      	ldr	r2, [pc, #256]	@ (80040fc <HAL_DMA_IRQHandler+0xa50>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3f      	ldr	r2, [pc, #252]	@ (8004100 <HAL_DMA_IRQHandler+0xa54>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3d      	ldr	r2, [pc, #244]	@ (8004104 <HAL_DMA_IRQHandler+0xa58>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3c      	ldr	r2, [pc, #240]	@ (8004108 <HAL_DMA_IRQHandler+0xa5c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3a      	ldr	r2, [pc, #232]	@ (800410c <HAL_DMA_IRQHandler+0xa60>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a39      	ldr	r2, [pc, #228]	@ (8004110 <HAL_DMA_IRQHandler+0xa64>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_DMA_IRQHandler+0x988>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x98a>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 823f 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2204      	movs	r2, #4
 800404e:	409a      	lsls	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80cd 	beq.w	80041f4 <HAL_DMA_IRQHandler+0xb48>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80c7 	beq.w	80041f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2204      	movs	r2, #4
 8004070:	409a      	lsls	r2, r3
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d049      	beq.n	8004114 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8210 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409c:	e20a      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8206 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b0:	e200      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
 80040b2:	bf00      	nop
 80040b4:	40020010 	.word	0x40020010
 80040b8:	40020028 	.word	0x40020028
 80040bc:	40020040 	.word	0x40020040
 80040c0:	40020058 	.word	0x40020058
 80040c4:	40020070 	.word	0x40020070
 80040c8:	40020088 	.word	0x40020088
 80040cc:	400200a0 	.word	0x400200a0
 80040d0:	400200b8 	.word	0x400200b8
 80040d4:	40020410 	.word	0x40020410
 80040d8:	40020428 	.word	0x40020428
 80040dc:	40020440 	.word	0x40020440
 80040e0:	40020458 	.word	0x40020458
 80040e4:	40020470 	.word	0x40020470
 80040e8:	40020488 	.word	0x40020488
 80040ec:	400204a0 	.word	0x400204a0
 80040f0:	400204b8 	.word	0x400204b8
 80040f4:	58025408 	.word	0x58025408
 80040f8:	5802541c 	.word	0x5802541c
 80040fc:	58025430 	.word	0x58025430
 8004100:	58025444 	.word	0x58025444
 8004104:	58025458 	.word	0x58025458
 8004108:	5802546c 	.word	0x5802546c
 800410c:	58025480 	.word	0x58025480
 8004110:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d160      	bne.n	80041e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7f      	ldr	r2, [pc, #508]	@ (8004320 <HAL_DMA_IRQHandler+0xc74>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d04a      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7d      	ldr	r2, [pc, #500]	@ (8004324 <HAL_DMA_IRQHandler+0xc78>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d045      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7c      	ldr	r2, [pc, #496]	@ (8004328 <HAL_DMA_IRQHandler+0xc7c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d040      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7a      	ldr	r2, [pc, #488]	@ (800432c <HAL_DMA_IRQHandler+0xc80>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03b      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a79      	ldr	r2, [pc, #484]	@ (8004330 <HAL_DMA_IRQHandler+0xc84>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d036      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a77      	ldr	r2, [pc, #476]	@ (8004334 <HAL_DMA_IRQHandler+0xc88>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d031      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a76      	ldr	r2, [pc, #472]	@ (8004338 <HAL_DMA_IRQHandler+0xc8c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d02c      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_DMA_IRQHandler+0xc90>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d027      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a73      	ldr	r2, [pc, #460]	@ (8004340 <HAL_DMA_IRQHandler+0xc94>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a71      	ldr	r2, [pc, #452]	@ (8004344 <HAL_DMA_IRQHandler+0xc98>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a70      	ldr	r2, [pc, #448]	@ (8004348 <HAL_DMA_IRQHandler+0xc9c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6e      	ldr	r2, [pc, #440]	@ (800434c <HAL_DMA_IRQHandler+0xca0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6d      	ldr	r2, [pc, #436]	@ (8004350 <HAL_DMA_IRQHandler+0xca4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004354 <HAL_DMA_IRQHandler+0xca8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004358 <HAL_DMA_IRQHandler+0xcac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a68      	ldr	r2, [pc, #416]	@ (800435c <HAL_DMA_IRQHandler+0xcb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <HAL_DMA_IRQHandler+0xb24>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0208 	bic.w	r2, r2, #8
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e007      	b.n	80041e0 <HAL_DMA_IRQHandler+0xb34>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8165 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f2:	e15f      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2202      	movs	r2, #2
 80041fe:	409a      	lsls	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80c5 	beq.w	8004394 <HAL_DMA_IRQHandler+0xce8>
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80bf 	beq.w	8004394 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2202      	movs	r2, #2
 8004220:	409a      	lsls	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d018      	beq.n	8004262 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 813a 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800424c:	e134      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8130 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004260:	e12a      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8089 	bne.w	8004380 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	@ (8004320 <HAL_DMA_IRQHandler+0xc74>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04a      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <HAL_DMA_IRQHandler+0xc78>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d045      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	@ (8004328 <HAL_DMA_IRQHandler+0xc7c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	@ (800432c <HAL_DMA_IRQHandler+0xc80>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d03b      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a25      	ldr	r2, [pc, #148]	@ (8004330 <HAL_DMA_IRQHandler+0xc84>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	@ (8004334 <HAL_DMA_IRQHandler+0xc88>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	@ (8004338 <HAL_DMA_IRQHandler+0xc8c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d02c      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a20      	ldr	r2, [pc, #128]	@ (800433c <HAL_DMA_IRQHandler+0xc90>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d027      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <HAL_DMA_IRQHandler+0xc94>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <HAL_DMA_IRQHandler+0xc98>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01d      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <HAL_DMA_IRQHandler+0xc9c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	@ (800434c <HAL_DMA_IRQHandler+0xca0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <HAL_DMA_IRQHandler+0xca4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <HAL_DMA_IRQHandler+0xca8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <HAL_DMA_IRQHandler+0xcac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <HAL_DMA_IRQHandler+0xcb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d128      	bne.n	8004360 <HAL_DMA_IRQHandler+0xcb4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0214 	bic.w	r2, r2, #20
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e027      	b.n	8004370 <HAL_DMA_IRQHandler+0xcc4>
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020a 	bic.w	r2, r2, #10
 800436e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8097 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004392:	e091      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2208      	movs	r2, #8
 800439e:	409a      	lsls	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8088 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8082 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a41      	ldr	r2, [pc, #260]	@ (80044c0 <HAL_DMA_IRQHandler+0xe14>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d04a      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3f      	ldr	r2, [pc, #252]	@ (80044c4 <HAL_DMA_IRQHandler+0xe18>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d045      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3e      	ldr	r2, [pc, #248]	@ (80044c8 <HAL_DMA_IRQHandler+0xe1c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d040      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3c      	ldr	r2, [pc, #240]	@ (80044cc <HAL_DMA_IRQHandler+0xe20>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d03b      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	@ (80044d0 <HAL_DMA_IRQHandler+0xe24>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d036      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a39      	ldr	r2, [pc, #228]	@ (80044d4 <HAL_DMA_IRQHandler+0xe28>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d031      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a38      	ldr	r2, [pc, #224]	@ (80044d8 <HAL_DMA_IRQHandler+0xe2c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d02c      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <HAL_DMA_IRQHandler+0xe30>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d027      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a35      	ldr	r2, [pc, #212]	@ (80044e0 <HAL_DMA_IRQHandler+0xe34>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d022      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a33      	ldr	r2, [pc, #204]	@ (80044e4 <HAL_DMA_IRQHandler+0xe38>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01d      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a32      	ldr	r2, [pc, #200]	@ (80044e8 <HAL_DMA_IRQHandler+0xe3c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	@ (80044ec <HAL_DMA_IRQHandler+0xe40>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2f      	ldr	r2, [pc, #188]	@ (80044f0 <HAL_DMA_IRQHandler+0xe44>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2d      	ldr	r2, [pc, #180]	@ (80044f4 <HAL_DMA_IRQHandler+0xe48>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <HAL_DMA_IRQHandler+0xe4c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2a      	ldr	r2, [pc, #168]	@ (80044fc <HAL_DMA_IRQHandler+0xe50>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <HAL_DMA_IRQHandler+0xdbc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 021c 	bic.w	r2, r2, #28
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e007      	b.n	8004478 <HAL_DMA_IRQHandler+0xdcc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 020e 	bic.w	r2, r2, #14
 8004476:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
 80044ae:	e004      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044ba:	3728      	adds	r7, #40	@ 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8

08004500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a42      	ldr	r2, [pc, #264]	@ (8004618 <DMA_CalcBaseAndBitshift+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04a      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a41      	ldr	r2, [pc, #260]	@ (800461c <DMA_CalcBaseAndBitshift+0x11c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d045      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3f      	ldr	r2, [pc, #252]	@ (8004620 <DMA_CalcBaseAndBitshift+0x120>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d040      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3e      	ldr	r2, [pc, #248]	@ (8004624 <DMA_CalcBaseAndBitshift+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d03b      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3c      	ldr	r2, [pc, #240]	@ (8004628 <DMA_CalcBaseAndBitshift+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d036      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a3b      	ldr	r2, [pc, #236]	@ (800462c <DMA_CalcBaseAndBitshift+0x12c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d031      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a39      	ldr	r2, [pc, #228]	@ (8004630 <DMA_CalcBaseAndBitshift+0x130>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a38      	ldr	r2, [pc, #224]	@ (8004634 <DMA_CalcBaseAndBitshift+0x134>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d027      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a36      	ldr	r2, [pc, #216]	@ (8004638 <DMA_CalcBaseAndBitshift+0x138>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a35      	ldr	r2, [pc, #212]	@ (800463c <DMA_CalcBaseAndBitshift+0x13c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a33      	ldr	r2, [pc, #204]	@ (8004640 <DMA_CalcBaseAndBitshift+0x140>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a32      	ldr	r2, [pc, #200]	@ (8004644 <DMA_CalcBaseAndBitshift+0x144>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a30      	ldr	r2, [pc, #192]	@ (8004648 <DMA_CalcBaseAndBitshift+0x148>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2f      	ldr	r2, [pc, #188]	@ (800464c <DMA_CalcBaseAndBitshift+0x14c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <DMA_CalcBaseAndBitshift+0x150>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xa8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004654 <DMA_CalcBaseAndBitshift+0x154>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <DMA_CalcBaseAndBitshift+0xac>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <DMA_CalcBaseAndBitshift+0xae>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d024      	beq.n	80045fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3b10      	subs	r3, #16
 80045ba:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <DMA_CalcBaseAndBitshift+0x158>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	4a24      	ldr	r2, [pc, #144]	@ (800465c <DMA_CalcBaseAndBitshift+0x15c>)
 80045cc:	5cd3      	ldrb	r3, [r2, r3]
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d908      	bls.n	80045ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004660 <DMA_CalcBaseAndBitshift+0x160>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80045ea:	e00d      	b.n	8004608 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <DMA_CalcBaseAndBitshift+0x160>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fa:	e005      	b.n	8004608 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40020010 	.word	0x40020010
 800461c:	40020028 	.word	0x40020028
 8004620:	40020040 	.word	0x40020040
 8004624:	40020058 	.word	0x40020058
 8004628:	40020070 	.word	0x40020070
 800462c:	40020088 	.word	0x40020088
 8004630:	400200a0 	.word	0x400200a0
 8004634:	400200b8 	.word	0x400200b8
 8004638:	40020410 	.word	0x40020410
 800463c:	40020428 	.word	0x40020428
 8004640:	40020440 	.word	0x40020440
 8004644:	40020458 	.word	0x40020458
 8004648:	40020470 	.word	0x40020470
 800464c:	40020488 	.word	0x40020488
 8004650:	400204a0 	.word	0x400204a0
 8004654:	400204b8 	.word	0x400204b8
 8004658:	aaaaaaab 	.word	0xaaaaaaab
 800465c:	0800a528 	.word	0x0800a528
 8004660:	fffffc00 	.word	0xfffffc00

08004664 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d120      	bne.n	80046ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	2b03      	cmp	r3, #3
 800467e:	d858      	bhi.n	8004732 <DMA_CheckFifoParam+0xce>
 8004680:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <DMA_CheckFifoParam+0x24>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	08004699 	.word	0x08004699
 800468c:	080046ab 	.word	0x080046ab
 8004690:	08004699 	.word	0x08004699
 8004694:	08004733 	.word	0x08004733
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d048      	beq.n	8004736 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a8:	e045      	b.n	8004736 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046b2:	d142      	bne.n	800473a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046b8:	e03f      	b.n	800473a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c2:	d123      	bne.n	800470c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d838      	bhi.n	800473e <DMA_CheckFifoParam+0xda>
 80046cc:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <DMA_CheckFifoParam+0x70>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046eb 	.word	0x080046eb
 80046dc:	080046e5 	.word	0x080046e5
 80046e0:	080046fd 	.word	0x080046fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
        break;
 80046e8:	e030      	b.n	800474c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d025      	beq.n	8004742 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046fa:	e022      	b.n	8004742 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800470a:	e01c      	b.n	8004746 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	2b02      	cmp	r3, #2
 8004712:	d902      	bls.n	800471a <DMA_CheckFifoParam+0xb6>
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004718:	e018      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        break;
 800471e:	e015      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
    break;
 8004730:	e00b      	b.n	800474a <DMA_CheckFifoParam+0xe6>
        break;
 8004732:	bf00      	nop
 8004734:	e00a      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        break;
 8004736:	bf00      	nop
 8004738:	e008      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        break;
 800473a:	bf00      	nop
 800473c:	e006      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        break;
 800473e:	bf00      	nop
 8004740:	e004      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <DMA_CheckFifoParam+0xe8>
        break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <DMA_CheckFifoParam+0xe8>
    break;
 800474a:	bf00      	nop
    }
  }

  return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a38      	ldr	r2, [pc, #224]	@ (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	@ (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a35      	ldr	r2, [pc, #212]	@ (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a33      	ldr	r2, [pc, #204]	@ (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a32      	ldr	r2, [pc, #200]	@ (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01a      	beq.n	80047fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3b08      	subs	r3, #8
 80047cc:	4a28      	ldr	r2, [pc, #160]	@ (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4b26      	ldr	r3, [pc, #152]	@ (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a24      	ldr	r2, [pc, #144]	@ (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047f8:	e024      	b.n	8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	3b10      	subs	r3, #16
 8004802:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d806      	bhi.n	8004822 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d902      	bls.n	8004822 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3308      	adds	r3, #8
 8004820:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a16      	ldr	r2, [pc, #88]	@ (800488c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004834:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	58025408 	.word	0x58025408
 8004854:	5802541c 	.word	0x5802541c
 8004858:	58025430 	.word	0x58025430
 800485c:	58025444 	.word	0x58025444
 8004860:	58025458 	.word	0x58025458
 8004864:	5802546c 	.word	0x5802546c
 8004868:	58025480 	.word	0x58025480
 800486c:	58025494 	.word	0x58025494
 8004870:	cccccccd 	.word	0xcccccccd
 8004874:	16009600 	.word	0x16009600
 8004878:	58025880 	.word	0x58025880
 800487c:	aaaaaaab 	.word	0xaaaaaaab
 8004880:	400204b8 	.word	0x400204b8
 8004884:	4002040f 	.word	0x4002040f
 8004888:	10008200 	.word	0x10008200
 800488c:	40020880 	.word	0x40020880

08004890 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d04a      	beq.n	800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d847      	bhi.n	800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a25      	ldr	r2, [pc, #148]	@ (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a24      	ldr	r2, [pc, #144]	@ (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01d      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a21      	ldr	r2, [pc, #132]	@ (8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4b17      	ldr	r3, [pc, #92]	@ (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	461a      	mov	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a15      	ldr	r2, [pc, #84]	@ (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004918:	671a      	str	r2, [r3, #112]	@ 0x70
 800491a:	e009      	b.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a11      	ldr	r2, [pc, #68]	@ (8004974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800492e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	58025408 	.word	0x58025408
 800494c:	5802541c 	.word	0x5802541c
 8004950:	58025430 	.word	0x58025430
 8004954:	58025444 	.word	0x58025444
 8004958:	58025458 	.word	0x58025458
 800495c:	5802546c 	.word	0x5802546c
 8004960:	58025480 	.word	0x58025480
 8004964:	58025494 	.word	0x58025494
 8004968:	1600963f 	.word	0x1600963f
 800496c:	58025940 	.word	0x58025940
 8004970:	1000823f 	.word	0x1000823f
 8004974:	40020940 	.word	0x40020940

08004978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	@ 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004986:	4b89      	ldr	r3, [pc, #548]	@ (8004bac <HAL_GPIO_Init+0x234>)
 8004988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800498a:	e194      	b.n	8004cb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2101      	movs	r1, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8186 	beq.w	8004cb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d005      	beq.n	80049bc <HAL_GPIO_Init+0x44>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d130      	bne.n	8004a1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	2203      	movs	r2, #3
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049f2:	2201      	movs	r2, #1
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 0201 	and.w	r2, r3, #1
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d017      	beq.n	8004a5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	2203      	movs	r2, #3
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d123      	bne.n	8004aae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	220f      	movs	r2, #15
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	08da      	lsrs	r2, r3, #3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3208      	adds	r2, #8
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0203 	and.w	r2, r3, #3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80e0 	beq.w	8004cb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af0:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb0 <HAL_GPIO_Init+0x238>)
 8004af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004af6:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb0 <HAL_GPIO_Init+0x238>)
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004b00:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <HAL_GPIO_Init+0x238>)
 8004b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0e:	4a29      	ldr	r2, [pc, #164]	@ (8004bb4 <HAL_GPIO_Init+0x23c>)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	220f      	movs	r2, #15
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	@ (8004bb8 <HAL_GPIO_Init+0x240>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d052      	beq.n	8004be0 <HAL_GPIO_Init+0x268>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <HAL_GPIO_Init+0x244>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d031      	beq.n	8004ba6 <HAL_GPIO_Init+0x22e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc0 <HAL_GPIO_Init+0x248>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02b      	beq.n	8004ba2 <HAL_GPIO_Init+0x22a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <HAL_GPIO_Init+0x24c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d025      	beq.n	8004b9e <HAL_GPIO_Init+0x226>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <HAL_GPIO_Init+0x250>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01f      	beq.n	8004b9a <HAL_GPIO_Init+0x222>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <HAL_GPIO_Init+0x254>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d019      	beq.n	8004b96 <HAL_GPIO_Init+0x21e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <HAL_GPIO_Init+0x258>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_Init+0x21a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <HAL_GPIO_Init+0x25c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00d      	beq.n	8004b8e <HAL_GPIO_Init+0x216>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <HAL_GPIO_Init+0x260>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <HAL_GPIO_Init+0x212>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <HAL_GPIO_Init+0x264>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_GPIO_Init+0x20e>
 8004b82:	2309      	movs	r3, #9
 8004b84:	e02d      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b86:	230a      	movs	r3, #10
 8004b88:	e02b      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	e029      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b8e:	2307      	movs	r3, #7
 8004b90:	e027      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b92:	2306      	movs	r3, #6
 8004b94:	e025      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b96:	2305      	movs	r3, #5
 8004b98:	e023      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e021      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e01f      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e01d      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e01b      	b.n	8004be2 <HAL_GPIO_Init+0x26a>
 8004baa:	bf00      	nop
 8004bac:	58000080 	.word	0x58000080
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	58000400 	.word	0x58000400
 8004bb8:	58020000 	.word	0x58020000
 8004bbc:	58020400 	.word	0x58020400
 8004bc0:	58020800 	.word	0x58020800
 8004bc4:	58020c00 	.word	0x58020c00
 8004bc8:	58021000 	.word	0x58021000
 8004bcc:	58021400 	.word	0x58021400
 8004bd0:	58021800 	.word	0x58021800
 8004bd4:	58021c00 	.word	0x58021c00
 8004bd8:	58022000 	.word	0x58022000
 8004bdc:	58022400 	.word	0x58022400
 8004be0:	2300      	movs	r3, #0
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	f002 0203 	and.w	r2, r2, #3
 8004be8:	0092      	lsls	r2, r2, #2
 8004bea:	4093      	lsls	r3, r2
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bf2:	4938      	ldr	r1, [pc, #224]	@ (8004cd4 <HAL_GPIO_Init+0x35c>)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f ae63 	bne.w	800498c <HAL_GPIO_Init+0x14>
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	3724      	adds	r7, #36	@ 0x24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	58000400 	.word	0x58000400

08004cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce8:	787b      	ldrb	r3, [r7, #1]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cf4:	e003      	b.n	8004cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0fe      	b.n	8004f1a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fc fe37 	bl	80019a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f005 f91a 	bl	8009f7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7c1a      	ldrb	r2, [r3, #16]
 8004d50:	f88d 2000 	strb.w	r2, [sp]
 8004d54:	3304      	adds	r3, #4
 8004d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d58:	f005 f89e 	bl	8009e98 <USB_CoreInit>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0d5      	b.n	8004f1a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 f912 	bl	8009f9e <USB_SetCurrentMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0c6      	b.n	8004f1a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e04a      	b.n	8004e28 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d92:	7bfa      	ldrb	r2, [r7, #15]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	3315      	adds	r3, #21
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3314      	adds	r3, #20
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	b298      	uxth	r0, r3
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	332e      	adds	r3, #46	@ 0x2e
 8004dce:	4602      	mov	r2, r0
 8004dd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3318      	adds	r3, #24
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	331c      	adds	r3, #28
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3320      	adds	r3, #32
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3324      	adds	r3, #36	@ 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	3301      	adds	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	791b      	ldrb	r3, [r3, #4]
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3af      	bcc.n	8004d92 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	e044      	b.n	8004ec2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d3b5      	bcc.n	8004e38 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7c1a      	ldrb	r2, [r3, #16]
 8004ed4:	f88d 2000 	strb.w	r2, [sp]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004edc:	f005 f8ac 	bl	800a038 <USB_DevInit>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e013      	b.n	8004f1a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7b1b      	ldrb	r3, [r3, #12]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f80b 	bl	8004f24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f005 fa67 	bl	800a3e6 <USB_DevDisconnect>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f52:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_PCDEx_ActivateLPM+0x44>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	10000003 	.word	0x10000003

08004f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f74:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <HAL_PWREx_ConfigSupply+0x70>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d00a      	beq.n	8004f96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f80:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <HAL_PWREx_ConfigSupply+0x70>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e01f      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e01d      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f96:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <HAL_PWREx_ConfigSupply+0x70>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f023 0207 	bic.w	r2, r3, #7
 8004f9e:	490f      	ldr	r1, [pc, #60]	@ (8004fdc <HAL_PWREx_ConfigSupply+0x70>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fa6:	f7fc fe29 	bl	8001bfc <HAL_GetTick>
 8004faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fac:	e009      	b.n	8004fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fae:	f7fc fe25 	bl	8001bfc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fbc:	d901      	bls.n	8004fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e007      	b.n	8004fd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_PWREx_ConfigSupply+0x70>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fce:	d1ee      	bne.n	8004fae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	58024800 	.word	0x58024800

08004fe0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	60d3      	str	r3, [r2, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	58024800 	.word	0x58024800

08005000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	@ 0x30
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f000 bc48 	b.w	80058a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8088 	beq.w	8005132 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b99      	ldr	r3, [pc, #612]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800502c:	4b96      	ldr	r3, [pc, #600]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	2b10      	cmp	r3, #16
 8005036:	d007      	beq.n	8005048 <HAL_RCC_OscConfig+0x48>
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	2b18      	cmp	r3, #24
 800503c:	d111      	bne.n	8005062 <HAL_RCC_OscConfig+0x62>
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d10c      	bne.n	8005062 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	4b8f      	ldr	r3, [pc, #572]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d06d      	beq.n	8005130 <HAL_RCC_OscConfig+0x130>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d169      	bne.n	8005130 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f000 bc21 	b.w	80058a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x7a>
 800506c:	4b86      	ldr	r3, [pc, #536]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a85      	ldr	r2, [pc, #532]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e02e      	b.n	80050d8 <HAL_RCC_OscConfig+0xd8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x9c>
 8005082:	4b81      	ldr	r3, [pc, #516]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a80      	ldr	r2, [pc, #512]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b7e      	ldr	r3, [pc, #504]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a7d      	ldr	r2, [pc, #500]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e01d      	b.n	80050d8 <HAL_RCC_OscConfig+0xd8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0xc0>
 80050a6:	4b78      	ldr	r3, [pc, #480]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a77      	ldr	r2, [pc, #476]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b75      	ldr	r3, [pc, #468]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a74      	ldr	r2, [pc, #464]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0xd8>
 80050c0:	4b71      	ldr	r3, [pc, #452]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a70      	ldr	r2, [pc, #448]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6d      	ldr	r2, [pc, #436]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fc fd8c 	bl	8001bfc <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fc fd88 	bl	8001bfc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e3d4      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050fa:	4b63      	ldr	r3, [pc, #396]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0xe8>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fc fd78 	bl	8001bfc <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fc fd74 	bl	8001bfc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e3c0      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005122:	4b59      	ldr	r3, [pc, #356]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x110>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80ca 	beq.w	80052d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005140:	4b51      	ldr	r3, [pc, #324]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005148:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800514a:	4b4f      	ldr	r3, [pc, #316]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_RCC_OscConfig+0x166>
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b18      	cmp	r3, #24
 800515a:	d156      	bne.n	800520a <HAL_RCC_OscConfig+0x20a>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d151      	bne.n	800520a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005166:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x17e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e392      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800517e:	4b42      	ldr	r3, [pc, #264]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 0219 	bic.w	r2, r3, #25
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	493f      	ldr	r1, [pc, #252]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fc fd34 	bl	8001bfc <HAL_GetTick>
 8005194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005198:	f7fc fd30 	bl	8001bfc <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e37c      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051aa:	4b37      	ldr	r3, [pc, #220]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b6:	f7fc fd51 	bl	8001c5c <HAL_GetREVID>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d817      	bhi.n	80051f4 <HAL_RCC_OscConfig+0x1f4>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b40      	cmp	r3, #64	@ 0x40
 80051ca:	d108      	bne.n	80051de <HAL_RCC_OscConfig+0x1de>
 80051cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051dc:	e07a      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	031b      	lsls	r3, r3, #12
 80051ec:	4926      	ldr	r1, [pc, #152]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f2:	e06f      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f4:	4b24      	ldr	r3, [pc, #144]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	4921      	ldr	r1, [pc, #132]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	e064      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d047      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005212:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0219 	bic.w	r2, r3, #25
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	491a      	ldr	r1, [pc, #104]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fc fcea 	bl	8001bfc <HAL_GetTick>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522c:	f7fc fce6 	bl	8001bfc <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e332      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	f7fc fd07 	bl	8001c5c <HAL_GetREVID>
 800524e:	4603      	mov	r3, r0
 8005250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005254:	4293      	cmp	r3, r2
 8005256:	d819      	bhi.n	800528c <HAL_RCC_OscConfig+0x28c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d108      	bne.n	8005272 <HAL_RCC_OscConfig+0x272>
 8005260:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005268:	4a07      	ldr	r2, [pc, #28]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 800526a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800526e:	6053      	str	r3, [r2, #4]
 8005270:	e030      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	4901      	ldr	r1, [pc, #4]	@ (8005288 <HAL_RCC_OscConfig+0x288>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
 8005286:	e025      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
 8005288:	58024400 	.word	0x58024400
 800528c:	4b9a      	ldr	r3, [pc, #616]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	4997      	ldr	r1, [pc, #604]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	e018      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	4b95      	ldr	r3, [pc, #596]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a94      	ldr	r2, [pc, #592]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fc fca5 	bl	8001bfc <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fc fca1 	bl	8001bfc <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e2ed      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052c8:	4b8b      	ldr	r3, [pc, #556]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a9 	beq.w	8005434 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	4b85      	ldr	r3, [pc, #532]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052ec:	4b82      	ldr	r3, [pc, #520]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d007      	beq.n	8005308 <HAL_RCC_OscConfig+0x308>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b18      	cmp	r3, #24
 80052fc:	d13a      	bne.n	8005374 <HAL_RCC_OscConfig+0x374>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005308:	4b7b      	ldr	r3, [pc, #492]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_OscConfig+0x320>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2b80      	cmp	r3, #128	@ 0x80
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e2c1      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005320:	f7fc fc9c 	bl	8001c5c <HAL_GetREVID>
 8005324:	4603      	mov	r3, r0
 8005326:	f241 0203 	movw	r2, #4099	@ 0x1003
 800532a:	4293      	cmp	r3, r2
 800532c:	d817      	bhi.n	800535e <HAL_RCC_OscConfig+0x35e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	2b20      	cmp	r3, #32
 8005334:	d108      	bne.n	8005348 <HAL_RCC_OscConfig+0x348>
 8005336:	4b70      	ldr	r3, [pc, #448]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800533e:	4a6e      	ldr	r2, [pc, #440]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005344:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005346:	e075      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005348:	4b6b      	ldr	r3, [pc, #428]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	4968      	ldr	r1, [pc, #416]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800535c:	e06a      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800535e:	4b66      	ldr	r3, [pc, #408]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	4962      	ldr	r1, [pc, #392]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800536e:	4313      	orrs	r3, r2
 8005370:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005372:	e05f      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d042      	beq.n	8005402 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800537c:	4b5e      	ldr	r3, [pc, #376]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a5d      	ldr	r2, [pc, #372]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fc fc38 	bl	8001bfc <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005390:	f7fc fc34 	bl	8001bfc <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e280      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053a2:	4b55      	ldr	r3, [pc, #340]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ae:	f7fc fc55 	bl	8001c5c <HAL_GetREVID>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d817      	bhi.n	80053ec <HAL_RCC_OscConfig+0x3ec>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d108      	bne.n	80053d6 <HAL_RCC_OscConfig+0x3d6>
 80053c4:	4b4c      	ldr	r3, [pc, #304]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053cc:	4a4a      	ldr	r2, [pc, #296]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053d2:	6053      	str	r3, [r2, #4]
 80053d4:	e02e      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
 80053d6:	4b48      	ldr	r3, [pc, #288]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	069b      	lsls	r3, r3, #26
 80053e4:	4944      	ldr	r1, [pc, #272]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
 80053ea:	e023      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
 80053ec:	4b42      	ldr	r3, [pc, #264]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	061b      	lsls	r3, r3, #24
 80053fa:	493f      	ldr	r1, [pc, #252]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60cb      	str	r3, [r1, #12]
 8005400:	e018      	b.n	8005434 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005402:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fc fbf5 	bl	8001bfc <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005416:	f7fc fbf1 	bl	8001bfc <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e23d      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005428:	4b33      	ldr	r3, [pc, #204]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d036      	beq.n	80054ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d019      	beq.n	800547c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005448:	4b2b      	ldr	r3, [pc, #172]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800544a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544c:	4a2a      	ldr	r2, [pc, #168]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fc fbd2 	bl	8001bfc <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545c:	f7fc fbce 	bl	8001bfc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e21a      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800546e:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x45c>
 800547a:	e018      	b.n	80054ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547c:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 800547e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005480:	4a1d      	ldr	r2, [pc, #116]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fc fbb8 	bl	8001bfc <HAL_GetTick>
 800548c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005490:	f7fc fbb4 	bl	8001bfc <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e200      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054a2:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d039      	beq.n	800552e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01c      	beq.n	80054fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a0c      	ldr	r2, [pc, #48]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80054c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054ce:	f7fc fb95 	bl	8001bfc <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054d6:	f7fc fb91 	bl	8001bfc <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e1dd      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054e8:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <HAL_RCC_OscConfig+0x4f8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
 80054f4:	e01b      	b.n	800552e <HAL_RCC_OscConfig+0x52e>
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054fc:	4b9b      	ldr	r3, [pc, #620]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a9a      	ldr	r2, [pc, #616]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005506:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005508:	f7fc fb78 	bl	8001bfc <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005510:	f7fc fb74 	bl	8001bfc <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e1c0      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005522:	4b92      	ldr	r3, [pc, #584]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8081 	beq.w	800563e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800553c:	4b8c      	ldr	r3, [pc, #560]	@ (8005770 <HAL_RCC_OscConfig+0x770>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a8b      	ldr	r2, [pc, #556]	@ (8005770 <HAL_RCC_OscConfig+0x770>)
 8005542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005548:	f7fc fb58 	bl	8001bfc <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005550:	f7fc fb54 	bl	8001bfc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	@ 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e1a0      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005562:	4b83      	ldr	r3, [pc, #524]	@ (8005770 <HAL_RCC_OscConfig+0x770>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d106      	bne.n	8005584 <HAL_RCC_OscConfig+0x584>
 8005576:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557a:	4a7c      	ldr	r2, [pc, #496]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6713      	str	r3, [r2, #112]	@ 0x70
 8005582:	e02d      	b.n	80055e0 <HAL_RCC_OscConfig+0x5e0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10c      	bne.n	80055a6 <HAL_RCC_OscConfig+0x5a6>
 800558c:	4b77      	ldr	r3, [pc, #476]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	4a76      	ldr	r2, [pc, #472]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	@ 0x70
 8005598:	4b74      	ldr	r3, [pc, #464]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559c:	4a73      	ldr	r2, [pc, #460]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800559e:	f023 0304 	bic.w	r3, r3, #4
 80055a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x5e0>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x5c8>
 80055ae:	4b6f      	ldr	r3, [pc, #444]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	4a6e      	ldr	r2, [pc, #440]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ba:	4b6c      	ldr	r3, [pc, #432]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	4a6b      	ldr	r2, [pc, #428]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0x5e0>
 80055c8:	4b68      	ldr	r3, [pc, #416]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055cc:	4a67      	ldr	r2, [pc, #412]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d4:	4b65      	ldr	r3, [pc, #404]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d8:	4a64      	ldr	r2, [pc, #400]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc fb08 	bl	8001bfc <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fc fb04 	bl	8001bfc <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e14e      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005606:	4b59      	ldr	r3, [pc, #356]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ee      	beq.n	80055f0 <HAL_RCC_OscConfig+0x5f0>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fc faf2 	bl	8001bfc <HAL_GetTick>
 8005618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fc faee 	bl	8001bfc <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e138      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005632:	4b4e      	ldr	r3, [pc, #312]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ee      	bne.n	800561c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 812d 	beq.w	80058a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005648:	4b48      	ldr	r3, [pc, #288]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005650:	2b18      	cmp	r3, #24
 8005652:	f000 80bd 	beq.w	80057d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	2b02      	cmp	r3, #2
 800565c:	f040 809e 	bne.w	800579c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005660:	4b42      	ldr	r3, [pc, #264]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a41      	ldr	r2, [pc, #260]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800566a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fc fac6 	bl	8001bfc <HAL_GetTick>
 8005670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005674:	f7fc fac2 	bl	8001bfc <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e10e      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005686:	4b39      	ldr	r3, [pc, #228]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005696:	4b37      	ldr	r3, [pc, #220]	@ (8005774 <HAL_RCC_OscConfig+0x774>)
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056a2:	0112      	lsls	r2, r2, #4
 80056a4:	430a      	orrs	r2, r1
 80056a6:	4931      	ldr	r1, [pc, #196]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	3b01      	subs	r3, #1
 80056b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ba:	3b01      	subs	r3, #1
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	b29b      	uxth	r3, r3
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d4:	3b01      	subs	r3, #1
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056dc:	4923      	ldr	r1, [pc, #140]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056e2:	4b22      	ldr	r3, [pc, #136]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	4a21      	ldr	r2, [pc, #132]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056ee:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056f2:	4b21      	ldr	r3, [pc, #132]	@ (8005778 <HAL_RCC_OscConfig+0x778>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056fa:	00d2      	lsls	r2, r2, #3
 80056fc:	491b      	ldr	r1, [pc, #108]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005702:	4b1a      	ldr	r3, [pc, #104]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	f023 020c 	bic.w	r2, r3, #12
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	4917      	ldr	r1, [pc, #92]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005714:	4b15      	ldr	r3, [pc, #84]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	f023 0202 	bic.w	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	4912      	ldr	r1, [pc, #72]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005726:	4b11      	ldr	r3, [pc, #68]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	4a10      	ldr	r2, [pc, #64]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005732:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4a0d      	ldr	r2, [pc, #52]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800573e:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a0a      	ldr	r2, [pc, #40]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	4a07      	ldr	r2, [pc, #28]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a04      	ldr	r2, [pc, #16]	@ (800576c <HAL_RCC_OscConfig+0x76c>)
 800575c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fc fa4b 	bl	8001bfc <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005768:	e011      	b.n	800578e <HAL_RCC_OscConfig+0x78e>
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400
 8005770:	58024800 	.word	0x58024800
 8005774:	fffffc0c 	.word	0xfffffc0c
 8005778:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577c:	f7fc fa3e 	bl	8001bfc <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e08a      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800578e:	4b47      	ldr	r3, [pc, #284]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x77c>
 800579a:	e082      	b.n	80058a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b43      	ldr	r3, [pc, #268]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a42      	ldr	r2, [pc, #264]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 80057a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fc fa28 	bl	8001bfc <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fa24 	bl	8001bfc <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e070      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057c2:	4b3a      	ldr	r3, [pc, #232]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x7b0>
 80057ce:	e068      	b.n	80058a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057d0:	4b36      	ldr	r3, [pc, #216]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057d6:	4b35      	ldr	r3, [pc, #212]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d031      	beq.n	8005848 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f003 0203 	and.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d12a      	bne.n	8005848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d122      	bne.n	8005848 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d11a      	bne.n	8005848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	0a5b      	lsrs	r3, r3, #9
 8005816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d111      	bne.n	8005848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	0c1b      	lsrs	r3, r3, #16
 8005828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d108      	bne.n	8005848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005842:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e02b      	b.n	80058a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005856:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d01f      	beq.n	80058a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005862:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	4a11      	ldr	r2, [pc, #68]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800586e:	f7fc f9c5 	bl	8001bfc <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005874:	bf00      	nop
 8005876:	f7fc f9c1 	bl	8001bfc <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	4293      	cmp	r3, r2
 8005880:	d0f9      	beq.n	8005876 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005882:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005886:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_RCC_OscConfig+0x8b0>)
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800588e:	00d2      	lsls	r2, r2, #3
 8005890:	4906      	ldr	r1, [pc, #24]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005892:	4313      	orrs	r3, r2
 8005894:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_RCC_OscConfig+0x8ac>)
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3730      	adds	r7, #48	@ 0x30
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	58024400 	.word	0x58024400
 80058b0:	ffff0007 	.word	0xffff0007

080058b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e19c      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c8:	4b8a      	ldr	r3, [pc, #552]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d910      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b87      	ldr	r3, [pc, #540]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 020f 	bic.w	r2, r3, #15
 80058de:	4985      	ldr	r1, [pc, #532]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b83      	ldr	r3, [pc, #524]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e184      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	4b7b      	ldr	r3, [pc, #492]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005914:	4b78      	ldr	r3, [pc, #480]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	4975      	ldr	r1, [pc, #468]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005922:	4313      	orrs	r3, r2
 8005924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	4b70      	ldr	r3, [pc, #448]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800593e:	429a      	cmp	r2, r3
 8005940:	d908      	bls.n	8005954 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005942:	4b6d      	ldr	r3, [pc, #436]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	496a      	ldr	r1, [pc, #424]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005950:	4313      	orrs	r3, r2
 8005952:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	4b64      	ldr	r3, [pc, #400]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800596c:	429a      	cmp	r2, r3
 800596e:	d908      	bls.n	8005982 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005970:	4b61      	ldr	r3, [pc, #388]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	495e      	ldr	r1, [pc, #376]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 800597e:	4313      	orrs	r3, r2
 8005980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d010      	beq.n	80059b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	4b59      	ldr	r3, [pc, #356]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800599a:	429a      	cmp	r2, r3
 800599c:	d908      	bls.n	80059b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800599e:	4b56      	ldr	r3, [pc, #344]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	4953      	ldr	r1, [pc, #332]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	4b4d      	ldr	r3, [pc, #308]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d908      	bls.n	80059de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059cc:	4b4a      	ldr	r3, [pc, #296]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f023 020f 	bic.w	r2, r3, #15
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4947      	ldr	r1, [pc, #284]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d055      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059ea:	4b43      	ldr	r3, [pc, #268]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4940      	ldr	r1, [pc, #256]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a04:	4b3c      	ldr	r3, [pc, #240]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d121      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0f6      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a1c:	4b36      	ldr	r3, [pc, #216]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d115      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0ea      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d107      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a34:	4b30      	ldr	r3, [pc, #192]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0de      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a44:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d6      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a54:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f023 0207 	bic.w	r2, r3, #7
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4925      	ldr	r1, [pc, #148]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a66:	f7fc f8c9 	bl	8001bfc <HAL_GetTick>
 8005a6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6e:	f7fc f8c5 	bl	8001bfc <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0be      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a84:	4b1c      	ldr	r3, [pc, #112]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d1eb      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d010      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d208      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab2:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f023 020f 	bic.w	r2, r3, #15
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	490e      	ldr	r1, [pc, #56]	@ (8005af8 <HAL_RCC_ClockConfig+0x244>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d214      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 020f 	bic.w	r2, r3, #15
 8005ada:	4906      	ldr	r1, [pc, #24]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b04      	ldr	r3, [pc, #16]	@ (8005af4 <HAL_RCC_ClockConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e086      	b.n	8005c02 <HAL_RCC_ClockConfig+0x34e>
 8005af4:	52002000 	.word	0x52002000
 8005af8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d208      	bcs.n	8005b2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b18:	4b3c      	ldr	r3, [pc, #240]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	4939      	ldr	r1, [pc, #228]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d010      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	4b34      	ldr	r3, [pc, #208]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d208      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b46:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	492e      	ldr	r1, [pc, #184]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	4b28      	ldr	r3, [pc, #160]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d208      	bcs.n	8005b86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b74:	4b25      	ldr	r3, [pc, #148]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	4922      	ldr	r1, [pc, #136]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d208      	bcs.n	8005bb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4917      	ldr	r1, [pc, #92]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bb4:	f000 f834 	bl	8005c20 <HAL_RCC_GetSysClockFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	4912      	ldr	r1, [pc, #72]	@ (8005c10 <HAL_RCC_ClockConfig+0x35c>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005c0c <HAL_RCC_ClockConfig+0x358>)
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4a0d      	ldr	r2, [pc, #52]	@ (8005c10 <HAL_RCC_ClockConfig+0x35c>)
 8005bdc:	5cd3      	ldrb	r3, [r2, r3]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
 8005be8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <HAL_RCC_ClockConfig+0x360>)
 8005bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bec:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <HAL_RCC_ClockConfig+0x364>)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <HAL_RCC_ClockConfig+0x368>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fb ffb6 	bl	8001b68 <HAL_InitTick>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	0800a518 	.word	0x0800a518
 8005c14:	2400000c 	.word	0x2400000c
 8005c18:	24000008 	.word	0x24000008
 8005c1c:	24000010 	.word	0x24000010

08005c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c26:	4bb3      	ldr	r3, [pc, #716]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c2e:	2b18      	cmp	r3, #24
 8005c30:	f200 8155 	bhi.w	8005ede <HAL_RCC_GetSysClockFreq+0x2be>
 8005c34:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005ca1 	.word	0x08005ca1
 8005c40:	08005edf 	.word	0x08005edf
 8005c44:	08005edf 	.word	0x08005edf
 8005c48:	08005edf 	.word	0x08005edf
 8005c4c:	08005edf 	.word	0x08005edf
 8005c50:	08005edf 	.word	0x08005edf
 8005c54:	08005edf 	.word	0x08005edf
 8005c58:	08005edf 	.word	0x08005edf
 8005c5c:	08005cc7 	.word	0x08005cc7
 8005c60:	08005edf 	.word	0x08005edf
 8005c64:	08005edf 	.word	0x08005edf
 8005c68:	08005edf 	.word	0x08005edf
 8005c6c:	08005edf 	.word	0x08005edf
 8005c70:	08005edf 	.word	0x08005edf
 8005c74:	08005edf 	.word	0x08005edf
 8005c78:	08005edf 	.word	0x08005edf
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	08005edf 	.word	0x08005edf
 8005c84:	08005edf 	.word	0x08005edf
 8005c88:	08005edf 	.word	0x08005edf
 8005c8c:	08005edf 	.word	0x08005edf
 8005c90:	08005edf 	.word	0x08005edf
 8005c94:	08005edf 	.word	0x08005edf
 8005c98:	08005edf 	.word	0x08005edf
 8005c9c:	08005cd3 	.word	0x08005cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca0:	4b94      	ldr	r3, [pc, #592]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cac:	4b91      	ldr	r3, [pc, #580]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	08db      	lsrs	r3, r3, #3
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	4a90      	ldr	r2, [pc, #576]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cbe:	e111      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cc2:	61bb      	str	r3, [r7, #24]
      break;
 8005cc4:	e10e      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cc8:	61bb      	str	r3, [r7, #24]
      break;
 8005cca:	e10b      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005cce:	61bb      	str	r3, [r7, #24]
      break;
 8005cd0:	e108      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cd2:	4b88      	ldr	r3, [pc, #544]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005cdc:	4b85      	ldr	r3, [pc, #532]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ce6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ce8:	4b82      	ldr	r3, [pc, #520]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cf2:	4b80      	ldr	r3, [pc, #512]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf6:	08db      	lsrs	r3, r3, #3
 8005cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80e1 	beq.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	f000 8083 	beq.w	8005e24 <HAL_RCC_GetSysClockFreq+0x204>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	f200 80a1 	bhi.w	8005e68 <HAL_RCC_GetSysClockFreq+0x248>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x114>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d056      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d32:	e099      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d34:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02d      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d40:	4b6c      	ldr	r3, [pc, #432]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	4b62      	ldr	r3, [pc, #392]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d9a:	e087      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dae:	4b51      	ldr	r3, [pc, #324]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dde:	e065      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b40      	ldr	r3, [pc, #256]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e22:	e043      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b2f      	ldr	r3, [pc, #188]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e66:	e021      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005eac:	4b11      	ldr	r3, [pc, #68]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	0a5b      	lsrs	r3, r3, #9
 8005eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed0:	ee17 3a90 	vmov	r3, s15
 8005ed4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ed6:	e005      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61bb      	str	r3, [r7, #24]
      break;
 8005edc:	e002      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005ede:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee0:	61bb      	str	r3, [r7, #24]
      break;
 8005ee2:	bf00      	nop
  }

  return sysclockfreq;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	@ 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	58024400 	.word	0x58024400
 8005ef8:	03d09000 	.word	0x03d09000
 8005efc:	003d0900 	.word	0x003d0900
 8005f00:	007a1200 	.word	0x007a1200
 8005f04:	46000000 	.word	0x46000000
 8005f08:	4c742400 	.word	0x4c742400
 8005f0c:	4a742400 	.word	0x4a742400
 8005f10:	4af42400 	.word	0x4af42400

08005f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f1a:	f7ff fe81 	bl	8005c20 <HAL_RCC_GetSysClockFreq>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	490f      	ldr	r1, [pc, #60]	@ (8005f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f2c:	5ccb      	ldrb	r3, [r1, r3]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f38:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	4a09      	ldr	r2, [pc, #36]	@ (8005f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f42:	5cd3      	ldrb	r3, [r2, r3]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	4a07      	ldr	r2, [pc, #28]	@ (8005f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f52:	4a07      	ldr	r2, [pc, #28]	@ (8005f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	58024400 	.word	0x58024400
 8005f68:	0800a518 	.word	0x0800a518
 8005f6c:	2400000c 	.word	0x2400000c
 8005f70:	24000008 	.word	0x24000008

08005f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f78:	f7ff ffcc 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	091b      	lsrs	r3, r3, #4
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4904      	ldr	r1, [pc, #16]	@ (8005f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	0800a518 	.word	0x0800a518

08005fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fa4:	f7ff ffb6 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	@ (8005fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	0800a518 	.word	0x0800a518

08005fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b0ca      	sub	sp, #296	@ 0x128
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8005ff6:	d049      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006002:	d02f      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006008:	d828      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800600a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800600e:	d01a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006014:	d822      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800601a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800601e:	d007      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006020:	e01c      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006022:	4bb8      	ldr	r3, [pc, #736]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006026:	4ab7      	ldr	r2, [pc, #732]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800602e:	e01a      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	3308      	adds	r3, #8
 8006036:	2102      	movs	r1, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f002 fb61 	bl	8008700 <RCCEx_PLL2_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006044:	e00f      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3328      	adds	r3, #40	@ 0x28
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f002 fc08 	bl	8008864 <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006062:	e000      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800606e:	4ba5      	ldr	r3, [pc, #660]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006072:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607c:	4aa1      	ldr	r2, [pc, #644]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6513      	str	r3, [r2, #80]	@ 0x50
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	ea58 0309 	orrs.w	r3, r8, r9
 80060a0:	d047      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d82a      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060ac:	a201      	add	r2, pc, #4	@ (adr r2, 80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060c9 	.word	0x080060c9
 80060b8:	080060d7 	.word	0x080060d7
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	0800610b 	.word	0x0800610b
 80060c4:	0800610b 	.word	0x0800610b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a8d      	ldr	r2, [pc, #564]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060d4:	e01a      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	3308      	adds	r3, #8
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fb0e 	bl	8008700 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ea:	e00f      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	3328      	adds	r3, #40	@ 0x28
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f002 fbb5 	bl	8008864 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006100:	e004      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800610a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006114:	4b7b      	ldr	r3, [pc, #492]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f023 0107 	bic.w	r1, r3, #7
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	4a78      	ldr	r2, [pc, #480]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006124:	430b      	orrs	r3, r1
 8006126:	6513      	str	r3, [r2, #80]	@ 0x50
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800613e:	f04f 0b00 	mov.w	fp, #0
 8006142:	ea5a 030b 	orrs.w	r3, sl, fp
 8006146:	d04c      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006152:	d030      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006158:	d829      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	d02d      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800615e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006160:	d825      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006162:	2b80      	cmp	r3, #128	@ 0x80
 8006164:	d018      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d821      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d007      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006172:	e01c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a62      	ldr	r2, [pc, #392]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006180:	e01c      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3308      	adds	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fab8 	bl	8008700 <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006196:	e011      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 fb5f 	bl	8008864 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061ac:	e006      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b4:	e002      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80061f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d053      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800620a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800620e:	d035      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006214:	d82e      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006216:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800621a:	d031      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800621c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006220:	d828      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006226:	d01a      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622c:	d822      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006236:	d007      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006238:	e01c      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623a:	4b32      	ldr	r3, [pc, #200]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	4a31      	ldr	r2, [pc, #196]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006246:	e01c      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624c:	3308      	adds	r3, #8
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f002 fa55 	bl	8008700 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800625c:	e011      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	3328      	adds	r3, #40	@ 0x28
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f002 fafc 	bl	8008864 <RCCEx_PLL3_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006272:	e006      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800628a:	4b1e      	ldr	r3, [pc, #120]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800629a:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80062c4:	460b      	mov	r3, r1
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d056      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d6:	d038      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062dc:	d831      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e2:	d034      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e8:	d82b      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ee:	d01d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f4:	d825      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006300:	e01f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4ba2      	ldr	r3, [pc, #648]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	4aa1      	ldr	r2, [pc, #644]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006314:	e01c      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	3308      	adds	r3, #8
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f002 f9ee 	bl	8008700 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800632a:	e011      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006330:	3328      	adds	r3, #40	@ 0x28
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f002 fa95 	bl	8008864 <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006340:	e006      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800634e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006358:	4b8e      	ldr	r3, [pc, #568]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006368:	4a8a      	ldr	r2, [pc, #552]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800636a:	430b      	orrs	r3, r1
 800636c:	6593      	str	r3, [r2, #88]	@ 0x58
 800636e:	e003      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800638e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d03a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639e:	2b30      	cmp	r3, #48	@ 0x30
 80063a0:	d01f      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063a2:	2b30      	cmp	r3, #48	@ 0x30
 80063a4:	d819      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d00c      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d815      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d019      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d111      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4b77      	ldr	r3, [pc, #476]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4a76      	ldr	r2, [pc, #472]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063c2:	e011      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	3308      	adds	r3, #8
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 f997 	bl	8008700 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063f0:	4b68      	ldr	r3, [pc, #416]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	4a65      	ldr	r2, [pc, #404]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006400:	430b      	orrs	r3, r1
 8006402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800641a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006424:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d051      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006438:	d035      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800643a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643e:	d82e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006444:	d031      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800645c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006460:	d007      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b4b      	ldr	r3, [pc, #300]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a4a      	ldr	r2, [pc, #296]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006470:	e01c      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f002 f940 	bl	8008700 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006486:	e011      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f002 f9e7 	bl	8008864 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064b4:	4b37      	ldr	r3, [pc, #220]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c2:	4a34      	ldr	r2, [pc, #208]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d056      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064fc:	d033      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006502:	d82c      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006508:	d02f      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800650a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800650e:	d826      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006514:	d02b      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800651a:	d820      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800651c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006520:	d012      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006526:	d81a      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d022      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d115      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	3308      	adds	r3, #8
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f002 f8e0 	bl	8008700 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006546:	e015      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f002 f987 	bl	8008864 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800655c:	e00a      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006566:	bf00      	nop
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800658a:	4a02      	ldr	r2, [pc, #8]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006590:	e006      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006592:	bf00      	nop
 8006594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	d055      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065cc:	d033      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d2:	d82c      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d02f      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065de:	d826      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e4:	d02b      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ea:	d820      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d012      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f6:	d81a      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d022      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006600:	d115      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	3308      	adds	r3, #8
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f002 f878 	bl	8008700 <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006616:	e015      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	3328      	adds	r3, #40	@ 0x28
 800661e:	2101      	movs	r1, #1
 8006620:	4618      	mov	r0, r3
 8006622:	f002 f91f 	bl	8008864 <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800662c:	e00a      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006636:	bf00      	nop
 8006638:	e004      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663a:	bf00      	nop
 800663c:	e002      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800664c:	4ba3      	ldr	r3, [pc, #652]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006650:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800665c:	4a9f      	ldr	r2, [pc, #636]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800665e:	430b      	orrs	r3, r1
 8006660:	6593      	str	r3, [r2, #88]	@ 0x58
 8006662:	e003      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d037      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006696:	d00e      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d816      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d111      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b8c      	ldr	r3, [pc, #560]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	4a8b      	ldr	r2, [pc, #556]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 f81e 	bl	8008700 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066de:	4b7f      	ldr	r3, [pc, #508]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ec:	4a7b      	ldr	r2, [pc, #492]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d039      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006722:	2b03      	cmp	r3, #3
 8006724:	d81c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006726:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006769 	.word	0x08006769
 8006730:	0800673d 	.word	0x0800673d
 8006734:	0800674b 	.word	0x0800674b
 8006738:	08006769 	.word	0x08006769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673c:	4b67      	ldr	r3, [pc, #412]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	4a66      	ldr	r2, [pc, #408]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	3308      	adds	r3, #8
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 ffd4 	bl	8008700 <RCCEx_PLL2_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006772:	4b5a      	ldr	r3, [pc, #360]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006776:	f023 0103 	bic.w	r1, r3, #3
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006780:	4a56      	ldr	r2, [pc, #344]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006782:	430b      	orrs	r3, r1
 8006784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800679c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f000 809f 	beq.w	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4a      	ldr	r2, [pc, #296]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067be:	f7fb fa1d 	bl	8001bfc <HAL_GetTick>
 80067c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c6:	e00b      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c8:	f7fb fa18 	bl	8001bfc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b64      	cmp	r3, #100	@ 0x64
 80067d6:	d903      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067de:	e005      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e0:	4b3f      	ldr	r3, [pc, #252]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ed      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d179      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067f4:	4b39      	ldr	r3, [pc, #228]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006800:	4053      	eors	r3, r2
 8006802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4b34      	ldr	r3, [pc, #208]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006816:	4b31      	ldr	r3, [pc, #196]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	4a30      	ldr	r2, [pc, #192]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006820:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006822:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a2d      	ldr	r2, [pc, #180]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800682e:	4a2b      	ldr	r2, [pc, #172]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006834:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006842:	d118      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fb f9da 	bl	8001bfc <HAL_GetTick>
 8006848:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684c:	e00d      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fb f9d5 	bl	8001bfc <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686a:	4b1c      	ldr	r3, [pc, #112]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0eb      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	2b00      	cmp	r3, #0
 800687c:	d129      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800688a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800688e:	d10e      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006890:	4b12      	ldr	r3, [pc, #72]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068a0:	091a      	lsrs	r2, r3, #4
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	4a0d      	ldr	r2, [pc, #52]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6113      	str	r3, [r2, #16]
 80068ac:	e005      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068b8:	6113      	str	r3, [r2, #16]
 80068ba:	4b08      	ldr	r3, [pc, #32]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ca:	4a04      	ldr	r2, [pc, #16]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d0:	e00e      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80068da:	e009      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58024800 	.word	0x58024800
 80068e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 0301 	and.w	r3, r2, #1
 80068fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006900:	2300      	movs	r3, #0
 8006902:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006906:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	f000 8089 	beq.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006918:	2b28      	cmp	r3, #40	@ 0x28
 800691a:	d86b      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800691c:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	080069fd 	.word	0x080069fd
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069f5 	.word	0x080069f5
 8006938:	080069f5 	.word	0x080069f5
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069f5 	.word	0x080069f5
 8006944:	080069c9 	.word	0x080069c9
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069f5 	.word	0x080069f5
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069f5 	.word	0x080069f5
 8006964:	080069df 	.word	0x080069df
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069f5 	.word	0x080069f5
 8006978:	080069f5 	.word	0x080069f5
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069f5 	.word	0x080069f5
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069f5 	.word	0x080069f5
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069f5 	.word	0x080069f5
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	080069f5 	.word	0x080069f5
 80069c4:	080069fd 	.word	0x080069fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	3308      	adds	r3, #8
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fe95 	bl	8008700 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 ff3c 	bl	8008864 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a06:	4bbf      	ldr	r3, [pc, #764]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a14:	4abb      	ldr	r2, [pc, #748]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f002 0302 	and.w	r3, r2, #2
 8006a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4313      	orrs	r3, r2
 8006a42:	d041      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d824      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006a6d 	.word	0x08006a6d
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	3308      	adds	r3, #8
 8006a72:	2101      	movs	r1, #1
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 fe43 	bl	8008700 <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 feea 	bl	8008864 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aaa:	4b96      	ldr	r3, [pc, #600]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f023 0107 	bic.w	r1, r3, #7
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ab8:	4a92      	ldr	r2, [pc, #584]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f002 0304 	and.w	r3, r2, #4
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d044      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d825      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b15 	.word	0x08006b15
 8006b04:	08006b2b 	.word	0x08006b2b
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b49 	.word	0x08006b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 fdef 	bl	8008700 <RCCEx_PLL2_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b28:	e00f      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	3328      	adds	r3, #40	@ 0x28
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fe96 	bl	8008864 <RCCEx_PLL3_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b3e:	e004      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b52:	4b6c      	ldr	r3, [pc, #432]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	f023 0107 	bic.w	r1, r3, #7
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b62:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f002 0320 	and.w	r3, r2, #32
 8006b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d055      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b9e:	d033      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba4:	d82c      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d02f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d826      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bb6:	d02b      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bbc:	d820      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc8:	d81a      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd2:	d115      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3308      	adds	r3, #8
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fd8f 	bl	8008700 <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	3328      	adds	r3, #40	@ 0x28
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 fe36 	bl	8008864 <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c06:	e006      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c1e:	4b39      	ldr	r3, [pc, #228]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d058      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c6a:	d033      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c70:	d82c      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c76:	d02f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d826      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c82:	d02b      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c88:	d820      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8e:	d012      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c94:	d81a      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d022      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9e:	d115      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fd29 	bl	8008700 <RCCEx_PLL2_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e015      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3328      	adds	r3, #40	@ 0x28
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fdd0 	bl	8008864 <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd2:	e006      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10e      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cfa:	4a02      	ldr	r2, [pc, #8]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	d055      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d3c:	d033      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d42:	d82c      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d48:	d02f      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4e:	d826      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d54:	d02b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d5a:	d820      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d60:	d012      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d66:	d81a      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d022      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d70:	d115      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	3308      	adds	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fcc0 	bl	8008700 <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d86:	e015      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	3328      	adds	r3, #40	@ 0x28
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fd67 	bl	8008864 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dcc:	4a9d      	ldr	r2, [pc, #628]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dd2:	e003      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 0308 	and.w	r3, r2, #8
 8006de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006df2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006df6:	460b      	mov	r3, r1
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d01e      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2102      	movs	r1, #2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fd26 	bl	8008864 <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e24:	4b87      	ldr	r3, [pc, #540]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e34:	4a83      	ldr	r2, [pc, #524]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f002 0310 	and.w	r3, r2, #16
 8006e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d01e      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	3328      	adds	r3, #40	@ 0x28
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fcf7 	bl	8008864 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e82:	4b70      	ldr	r3, [pc, #448]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e92:	4a6c      	ldr	r2, [pc, #432]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d03e      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec4:	d022      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eca:	d81b      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed4:	d00b      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ed6:	e015      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006edc:	3308      	adds	r3, #8
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fc0d 	bl	8008700 <RCCEx_PLL2_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006eec:	e00f      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	3328      	adds	r3, #40	@ 0x28
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fcb4 	bl	8008864 <RCCEx_PLL3_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f02:	e004      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f0a:	e000      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f16:	4b4b      	ldr	r3, [pc, #300]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f26:	4a47      	ldr	r2, [pc, #284]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f2c:	e003      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f44:	2300      	movs	r3, #0
 8006f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	d03b      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f5e:	d01f      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f64:	d818      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f70:	d007      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f72:	e011      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f74:	4b33      	ldr	r3, [pc, #204]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	4a32      	ldr	r2, [pc, #200]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f80:	e00f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fc6a 	bl	8008864 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006faa:	4b26      	ldr	r3, [pc, #152]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fba:	4a22      	ldr	r2, [pc, #136]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fd8:	2300      	movs	r3, #0
 8006fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	d034      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff4:	d007      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ff6:	e011      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff8:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	4a11      	ldr	r2, [pc, #68]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007004:	e00e      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	3308      	adds	r3, #8
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 fb76 	bl	8008700 <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800701a:	e003      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800702c:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007030:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703a:	4a02      	ldr	r2, [pc, #8]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703c:	430b      	orrs	r3, r1
 800703e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007040:	e006      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800705c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800705e:	2300      	movs	r3, #0
 8007060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007062:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d00c      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	3328      	adds	r3, #40	@ 0x28
 8007072:	2102      	movs	r1, #2
 8007074:	4618      	mov	r0, r3
 8007076:	f001 fbf5 	bl	8008864 <RCCEx_PLL3_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007092:	663b      	str	r3, [r7, #96]	@ 0x60
 8007094:	2300      	movs	r3, #0
 8007096:	667b      	str	r3, [r7, #100]	@ 0x64
 8007098:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d038      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ae:	d018      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b4:	d811      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ba:	d014      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c0:	d80b      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d011      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ca:	d106      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070cc:	4bc3      	ldr	r3, [pc, #780]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	4ac2      	ldr	r2, [pc, #776]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070d8:	e008      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070f4:	4bb9      	ldr	r3, [pc, #740]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007104:	4ab5      	ldr	r2, [pc, #724]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007106:	430b      	orrs	r3, r1
 8007108:	6553      	str	r3, [r2, #84]	@ 0x54
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007120:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007122:	2300      	movs	r3, #0
 8007124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007126:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d009      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007130:	4baa      	ldr	r3, [pc, #680]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713e:	4aa7      	ldr	r2, [pc, #668]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007150:	653b      	str	r3, [r7, #80]	@ 0x50
 8007152:	2300      	movs	r3, #0
 8007154:	657b      	str	r3, [r7, #84]	@ 0x54
 8007156:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800715a:	460b      	mov	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	d00a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007160:	4b9e      	ldr	r3, [pc, #632]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007170:	4a9a      	ldr	r2, [pc, #616]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007184:	2300      	movs	r3, #0
 8007186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007188:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800718c:	460b      	mov	r3, r1
 800718e:	4313      	orrs	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007192:	4b92      	ldr	r3, [pc, #584]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007196:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a0:	4a8e      	ldr	r2, [pc, #568]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b4:	2300      	movs	r3, #0
 80071b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071c2:	4b86      	ldr	r3, [pc, #536]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	4a85      	ldr	r2, [pc, #532]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071cc:	6113      	str	r3, [r2, #16]
 80071ce:	4b83      	ldr	r3, [pc, #524]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d0:	6919      	ldr	r1, [r3, #16]
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071da:	4a80      	ldr	r2, [pc, #512]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071fc:	4b77      	ldr	r3, [pc, #476]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007200:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	4a74      	ldr	r2, [pc, #464]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800720c:	430b      	orrs	r3, r1
 800720e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800721c:	633b      	str	r3, [r7, #48]	@ 0x30
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
 8007222:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007226:	460b      	mov	r3, r1
 8007228:	4313      	orrs	r3, r2
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800722c:	4b6b      	ldr	r3, [pc, #428]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800723c:	4a67      	ldr	r2, [pc, #412]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800723e:	430b      	orrs	r3, r1
 8007240:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	2100      	movs	r1, #0
 800724c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007254:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007258:	460b      	mov	r3, r1
 800725a:	4313      	orrs	r3, r2
 800725c:	d011      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	3308      	adds	r3, #8
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fa4a 	bl	8008700 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	2100      	movs	r1, #0
 800728c:	6239      	str	r1, [r7, #32]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
 8007294:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007298:	460b      	mov	r3, r1
 800729a:	4313      	orrs	r3, r2
 800729c:	d011      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	3308      	adds	r3, #8
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fa2a 	bl	8008700 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	2100      	movs	r1, #0
 80072cc:	61b9      	str	r1, [r7, #24]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072d8:	460b      	mov	r3, r1
 80072da:	4313      	orrs	r3, r2
 80072dc:	d011      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e2:	3308      	adds	r3, #8
 80072e4:	2102      	movs	r1, #2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fa0a 	bl	8008700 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	2100      	movs	r1, #0
 800730c:	6139      	str	r1, [r7, #16]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d011      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	3328      	adds	r3, #40	@ 0x28
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f001 fa9c 	bl	8008864 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	2100      	movs	r1, #0
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	f003 0310 	and.w	r3, r3, #16
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d011      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fa7c 	bl	8008864 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	2100      	movs	r1, #0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d011      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	3328      	adds	r3, #40	@ 0x28
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fa5c 	bl	8008864 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80073c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80073d6:	46bd      	mov	sp, r7
 80073d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073dc:	58024400 	.word	0x58024400

080073e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	@ 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80073f2:	430b      	orrs	r3, r1
 80073f4:	f040 8094 	bne.w	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	2b04      	cmp	r3, #4
 8007406:	f200 8087 	bhi.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007425 	.word	0x08007425
 8007414:	0800744d 	.word	0x0800744d
 8007418:	08007475 	.word	0x08007475
 800741c:	08007511 	.word	0x08007511
 8007420:	0800749d 	.word	0x0800749d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007424:	4b93      	ldr	r3, [pc, #588]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007430:	d108      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f810 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800743c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007440:	f000 bd45 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007448:	f000 bd41 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800744c:	4b89      	ldr	r3, [pc, #548]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007458:	d108      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745a:	f107 0318 	add.w	r3, r7, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fd54 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007468:	f000 bd31 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007470:	f000 bd2d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007474:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800747c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007480:	d108      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fe94 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007490:	f000 bd1d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	f000 bd19 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800749c:	4b75      	ldr	r3, [pc, #468]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a6:	4b73      	ldr	r3, [pc, #460]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d10c      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b8:	4b6e      	ldr	r3, [pc, #440]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	08db      	lsrs	r3, r3, #3
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	4a6d      	ldr	r2, [pc, #436]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ca:	e01f      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074cc:	4b69      	ldr	r3, [pc, #420]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d8:	d106      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e0:	d102      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074e2:	4b66      	ldr	r3, [pc, #408]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e6:	e011      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e8:	4b62      	ldr	r3, [pc, #392]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074fe:	4b60      	ldr	r3, [pc, #384]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007502:	e003      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007508:	f000 bce1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800750c:	f000 bcdf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007510:	4b5c      	ldr	r3, [pc, #368]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	f000 bcdb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751c:	f000 bcd7 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007524:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007528:	430b      	orrs	r3, r1
 800752a:	f040 80ad 	bne.w	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800752e:	4b51      	ldr	r3, [pc, #324]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007532:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007536:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753e:	d056      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007546:	f200 8090 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2bc0      	cmp	r3, #192	@ 0xc0
 800754e:	f000 8088 	beq.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2bc0      	cmp	r3, #192	@ 0xc0
 8007556:	f200 8088 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	2b80      	cmp	r3, #128	@ 0x80
 800755e:	d032      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	f200 8081 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2b40      	cmp	r3, #64	@ 0x40
 8007572:	d014      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007574:	e079      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007576:	4b3f      	ldr	r3, [pc, #252]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007582:	d108      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 ff67 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007592:	f000 bc9c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800759a:	f000 bc98 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800759e:	4b35      	ldr	r3, [pc, #212]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075aa:	d108      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ac:	f107 0318 	add.w	r3, r7, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fcab 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ba:	f000 bc88 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c2:	f000 bc84 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075c6:	4b2b      	ldr	r3, [pc, #172]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d2:	d108      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fdeb 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	f000 bc74 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ea:	f000 bc70 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ee:	4b21      	ldr	r3, [pc, #132]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b04      	cmp	r3, #4
 8007602:	d10c      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800760a:	4b1a      	ldr	r3, [pc, #104]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	08db      	lsrs	r3, r3, #3
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	4a18      	ldr	r2, [pc, #96]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800761c:	e01f      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762a:	d106      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007632:	d102      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007634:	4b11      	ldr	r3, [pc, #68]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007638:	e011      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800763a:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007650:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007654:	e003      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800765a:	f000 bc38 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800765e:	f000 bc36 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007662:	4b08      	ldr	r3, [pc, #32]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007666:	f000 bc32 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766e:	f000 bc2e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	003d0900 	.word	0x003d0900
 8007680:	007a1200 	.word	0x007a1200
 8007684:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007690:	430b      	orrs	r3, r1
 8007692:	f040 809c 	bne.w	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007696:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076a6:	d054      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ae:	f200 808b 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076b8:	f000 8083 	beq.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076c2:	f200 8081 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076cc:	d02f      	beq.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d4:	d878      	bhi.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076e2:	d012      	beq.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076e4:	e070      	b.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076f2:	d107      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 feaf 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007702:	e3e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	e3e1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800770a:	4b81      	ldr	r3, [pc, #516]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007716:	d107      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007718:	f107 0318 	add.w	r3, r7, #24
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fbf5 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007726:	e3d2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800772c:	e3cf      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800772e:	4b78      	ldr	r3, [pc, #480]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800773a:	d107      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fd37 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800774a:	e3c0      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007750:	e3bd      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007752:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800775c:	4b6c      	ldr	r3, [pc, #432]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d10c      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800776e:	4b68      	ldr	r3, [pc, #416]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	4a66      	ldr	r2, [pc, #408]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007780:	e01e      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007782:	4b63      	ldr	r3, [pc, #396]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778e:	d106      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007796:	d102      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007798:	4b5f      	ldr	r3, [pc, #380]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800779c:	e010      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800779e:	4b5c      	ldr	r3, [pc, #368]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077b4:	4b59      	ldr	r3, [pc, #356]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b8:	e002      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077be:	e386      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077c0:	e385      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077c2:	4b57      	ldr	r3, [pc, #348]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c6:	e382      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077cc:	e37f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077d6:	430b      	orrs	r3, r1
 80077d8:	f040 80a7 	bne.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80077e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ec:	d055      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077f4:	f200 8096 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077fe:	f000 8084 	beq.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007808:	f200 808c 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007812:	d030      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781a:	f200 8083 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800782a:	d012      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800782c:	e07a      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800782e:	4b38      	ldr	r3, [pc, #224]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783a:	d107      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fe0b 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784a:	e340      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e33d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007852:	4b2f      	ldr	r3, [pc, #188]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785e:	d107      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fb51 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e32e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e32b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007876:	4b26      	ldr	r3, [pc, #152]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007882:	d107      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fc93 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007892:	e31c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007898:	e319      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800789a:	4b1d      	ldr	r3, [pc, #116]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800789c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d10c      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b6:	4b16      	ldr	r3, [pc, #88]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	4a14      	ldr	r2, [pc, #80]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c8:	e01e      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ca:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d6:	d106      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	e010      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078fc:	4b07      	ldr	r3, [pc, #28]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007906:	e2e2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007908:	e2e1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790e:	e2de      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007910:	58024400 	.word	0x58024400
 8007914:	03d09000 	.word	0x03d09000
 8007918:	003d0900 	.word	0x003d0900
 800791c:	007a1200 	.word	0x007a1200
 8007920:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e2d1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800792a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007932:	430b      	orrs	r3, r1
 8007934:	f040 809c 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007938:	4b93      	ldr	r3, [pc, #588]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800793a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007940:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007948:	d054      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007950:	f200 808b 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800795a:	f000 8083 	beq.w	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007964:	f200 8081 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800796e:	d02f      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007976:	d878      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007984:	d012      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007986:	e070      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007988:	4b7f      	ldr	r3, [pc, #508]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007994:	d107      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fd5e 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a4:	e293      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079aa:	e290      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ac:	4b76      	ldr	r3, [pc, #472]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079b8:	d107      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ba:	f107 0318 	add.w	r3, r7, #24
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 faa4 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c8:	e281      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ce:	e27e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079dc:	d107      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fbe6 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ec:	e26f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f2:	e26c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079f4:	4b64      	ldr	r3, [pc, #400]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079fe:	4b62      	ldr	r3, [pc, #392]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d10c      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a10:	4b5d      	ldr	r3, [pc, #372]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a22:	e01e      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a24:	4b58      	ldr	r3, [pc, #352]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a30:	d106      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a38:	d102      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a3a:	4b55      	ldr	r3, [pc, #340]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3e:	e010      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a40:	4b51      	ldr	r3, [pc, #324]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5a:	e002      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a60:	e235      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a62:	e234      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a64:	4b4c      	ldr	r3, [pc, #304]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a68:	e231      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6e:	e22e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	f040 808f 	bne.w	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a7e:	4b42      	ldr	r3, [pc, #264]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a8e:	d06b      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a96:	d874      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a9e:	d056      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007aa6:	d86c      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007aae:	d03b      	beq.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ab6:	d864      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007abe:	d021      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac6:	d85c      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad4:	d004      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007ad6:	e054      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ad8:	f7fe fa4c 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8007adc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ade:	e1f6      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ae0:	4b29      	ldr	r3, [pc, #164]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aec:	d107      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aee:	f107 0318 	add.w	r3, r7, #24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fa0a 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afc:	e1e7      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b02:	e1e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b04:	4b20      	ldr	r3, [pc, #128]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b10:	d107      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b12:	f107 030c 	add.w	r3, r7, #12
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fb4c 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b20:	e1d5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b26:	e1d2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b28:	4b17      	ldr	r3, [pc, #92]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d109      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b34:	4b14      	ldr	r3, [pc, #80]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	4a13      	ldr	r2, [pc, #76]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b46:	e1c2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b4c:	e1bf      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5a:	d102      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b60:	e1b5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b66:	e1b2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b68:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b74:	d102      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b76:	4b07      	ldr	r3, [pc, #28]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7a:	e1a8      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b80:	e1a5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b86:	e1a2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b88:	58024400 	.word	0x58024400
 8007b8c:	03d09000 	.word	0x03d09000
 8007b90:	003d0900 	.word	0x003d0900
 8007b94:	007a1200 	.word	0x007a1200
 8007b98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	d173      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb8:	d02f      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc0:	d863      	bhi.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bce:	d012      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bd0:	e05b      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bd2:	4b92      	ldr	r3, [pc, #584]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bde:	d107      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be0:	f107 0318 	add.w	r3, r7, #24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f991 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bee:	e16e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf4:	e16b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bf6:	4b89      	ldr	r3, [pc, #548]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c02:	d107      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fad3 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c12:	e15c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c18:	e159      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c1a:	4b80      	ldr	r3, [pc, #512]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c24:	4b7d      	ldr	r3, [pc, #500]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d10c      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c36:	4b79      	ldr	r3, [pc, #484]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	08db      	lsrs	r3, r3, #3
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	4a77      	ldr	r2, [pc, #476]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c48:	e01e      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c4a:	4b74      	ldr	r3, [pc, #464]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c56:	d106      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c60:	4b70      	ldr	r3, [pc, #448]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e010      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c66:	4b6d      	ldr	r3, [pc, #436]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c80:	e002      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c86:	e122      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c88:	e121      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c8e:	e11e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	d133      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb2:	d012      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cb4:	e023      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb6:	4b59      	ldr	r3, [pc, #356]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fbc7 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd2:	e0fc      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd8:	e0f9      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cda:	4b50      	ldr	r3, [pc, #320]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce6:	d107      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce8:	f107 0318 	add.w	r3, r7, #24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 f90d 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf6:	e0ea      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfc:	e0e7      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d02:	e0e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	f040 808d 	bne.w	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d12:	4b42      	ldr	r3, [pc, #264]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d22:	d06b      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d2a:	d874      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d056      	beq.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d86c      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d42:	d03b      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d4a:	d864      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d52:	d021      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d5a:	d85c      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d68:	d004      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d6a:	e054      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d6c:	f000 f8b8 	bl	8007ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d72:	e0ac      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d82:	f107 0318 	add.w	r3, r7, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f8c0 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d90:	e09d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d96:	e09a      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d98:	4b20      	ldr	r3, [pc, #128]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fa02 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db4:	e08b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dba:	e088      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dbc:	4b17      	ldr	r3, [pc, #92]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d109      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc8:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	4a13      	ldr	r2, [pc, #76]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dda:	e078      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de0:	e075      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007de2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007df0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	e06b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e068      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e0a:	4b07      	ldr	r3, [pc, #28]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0e:	e05e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e14:	e05b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1a:	e058      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	03d09000 	.word	0x03d09000
 8007e24:	003d0900 	.word	0x003d0900
 8007e28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e34:	430b      	orrs	r3, r1
 8007e36:	d148      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e38:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e48:	d02a      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e50:	d838      	bhi.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e5e:	d00d      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e60:	e030      	b.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e62:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6e:	d102      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e70:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e74:	e02b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7a:	e028      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e7c:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e88:	d107      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fae4 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e98:	e019      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9e:	e016      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eac:	d107      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0318 	add.w	r3, r7, #24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f82a 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ebc:	e007      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec2:	e004      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e001      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3740      	adds	r7, #64	@ 0x40
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	007a1200 	.word	0x007a1200

08007ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ee4:	f7fe f816 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	091b      	lsrs	r3, r3, #4
 8007ef0:	f003 0307 	and.w	r3, r3, #7
 8007ef4:	4904      	ldr	r1, [pc, #16]	@ (8007f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ef6:	5ccb      	ldrb	r3, [r1, r3]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	58024400 	.word	0x58024400
 8007f08:	0800a518 	.word	0x0800a518

08007f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	@ 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f14:	4ba1      	ldr	r3, [pc, #644]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f1e:	4b9f      	ldr	r3, [pc, #636]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	0b1b      	lsrs	r3, r3, #12
 8007f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f2a:	4b9c      	ldr	r3, [pc, #624]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f36:	4b99      	ldr	r3, [pc, #612]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3a:	08db      	lsrs	r3, r3, #3
 8007f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8111 	beq.w	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f000 8083 	beq.w	8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	f200 80a1 	bhi.w	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d056      	beq.n	8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f76:	e099      	b.n	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f78:	4b88      	ldr	r3, [pc, #544]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d02d      	beq.n	8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f84:	4b85      	ldr	r3, [pc, #532]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	4a84      	ldr	r2, [pc, #528]	@ (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fae:	4b7b      	ldr	r3, [pc, #492]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fde:	e087      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008002:	ed97 6a03 	vldr	s12, [r7, #12]
 8008006:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800800a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008022:	e065      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008036:	4b59      	ldr	r3, [pc, #356]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a03 	vldr	s12, [r7, #12]
 800804a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008066:	e043      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008072:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807a:	4b48      	ldr	r3, [pc, #288]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808a:	ed97 6a03 	vldr	s12, [r7, #12]
 800808e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800809e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080aa:	e021      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080be:	4b37      	ldr	r3, [pc, #220]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080f0:	4b2a      	ldr	r3, [pc, #168]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	0a5b      	lsrs	r3, r3, #9
 80080f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810a:	edd7 6a07 	vldr	s13, [r7, #28]
 800810e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008116:	ee17 2a90 	vmov	r2, s15
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008138:	edd7 6a07 	vldr	s13, [r7, #28]
 800813c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008144:	ee17 2a90 	vmov	r2, s15
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800814c:	4b13      	ldr	r3, [pc, #76]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008166:	edd7 6a07 	vldr	s13, [r7, #28]
 800816a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008172:	ee17 2a90 	vmov	r2, s15
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800817a:	e008      	b.n	800818e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
}
 800818e:	bf00      	nop
 8008190:	3724      	adds	r7, #36	@ 0x24
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	58024400 	.word	0x58024400
 80081a0:	03d09000 	.word	0x03d09000
 80081a4:	46000000 	.word	0x46000000
 80081a8:	4c742400 	.word	0x4c742400
 80081ac:	4a742400 	.word	0x4a742400
 80081b0:	4af42400 	.word	0x4af42400

080081b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b089      	sub	sp, #36	@ 0x24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081bc:	4ba1      	ldr	r3, [pc, #644]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081c6:	4b9f      	ldr	r3, [pc, #636]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ca:	0d1b      	lsrs	r3, r3, #20
 80081cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081de:	4b99      	ldr	r3, [pc, #612]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8111 	beq.w	8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f000 8083 	beq.w	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b02      	cmp	r3, #2
 800820e:	f200 80a1 	bhi.w	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d056      	beq.n	80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800821e:	e099      	b.n	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008220:	4b88      	ldr	r3, [pc, #544]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d02d      	beq.n	8008288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800822c:	4b85      	ldr	r3, [pc, #532]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	08db      	lsrs	r3, r3, #3
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	4a84      	ldr	r2, [pc, #528]	@ (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008238:	fa22 f303 	lsr.w	r3, r2, r3
 800823c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	ee07 3a90 	vmov	s15, r3
 8008244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008256:	4b7b      	ldr	r3, [pc, #492]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008266:	ed97 6a03 	vldr	s12, [r7, #12]
 800826a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800826e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800827a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008286:	e087      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829a:	4b6a      	ldr	r3, [pc, #424]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ca:	e065      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082de:	4b59      	ldr	r3, [pc, #356]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800830e:	e043      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b48      	ldr	r3, [pc, #288]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008352:	e021      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b37      	ldr	r3, [pc, #220]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008398:	4b2a      	ldr	r3, [pc, #168]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800839a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839c:	0a5b      	lsrs	r3, r3, #9
 800839e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083be:	ee17 2a90 	vmov	r2, s15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ec:	ee17 2a90 	vmov	r2, s15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083f4:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	0e1b      	lsrs	r3, r3, #24
 80083fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800840a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800841a:	ee17 2a90 	vmov	r2, s15
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008422:	e008      	b.n	8008436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
}
 8008436:	bf00      	nop
 8008438:	3724      	adds	r7, #36	@ 0x24
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	58024400 	.word	0x58024400
 8008448:	03d09000 	.word	0x03d09000
 800844c:	46000000 	.word	0x46000000
 8008450:	4c742400 	.word	0x4c742400
 8008454:	4a742400 	.word	0x4a742400
 8008458:	4af42400 	.word	0x4af42400

0800845c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	@ 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008464:	4ba0      	ldr	r3, [pc, #640]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800846e:	4b9e      	ldr	r3, [pc, #632]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800847a:	4b9b      	ldr	r3, [pc, #620]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008484:	4b98      	ldr	r3, [pc, #608]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8111 	beq.w	80086ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	f000 8083 	beq.w	80085b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	f200 80a1 	bhi.w	80085fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d056      	beq.n	8008572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084c4:	e099      	b.n	80085fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c6:	4b88      	ldr	r3, [pc, #544]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02d      	beq.n	800852e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084d2:	4b85      	ldr	r3, [pc, #532]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	08db      	lsrs	r3, r3, #3
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	4a83      	ldr	r2, [pc, #524]	@ (80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084de:	fa22 f303 	lsr.w	r3, r2, r3
 80084e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fc:	4b7a      	ldr	r3, [pc, #488]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008510:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008528:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800852c:	e087      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800853c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008540:	4b69      	ldr	r3, [pc, #420]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	ed97 6a03 	vldr	s12, [r7, #12]
 8008554:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008560:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008570:	e065      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008584:	4b58      	ldr	r3, [pc, #352]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	ed97 6a03 	vldr	s12, [r7, #12]
 8008598:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b4:	e043      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80086fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c8:	4b47      	ldr	r3, [pc, #284]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f8:	e021      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008604:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860c:	4b36      	ldr	r3, [pc, #216]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008620:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800863c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800863e:	4b2a      	ldr	r3, [pc, #168]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800866c:	4b1e      	ldr	r3, [pc, #120]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800869a:	4b13      	ldr	r3, [pc, #76]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c0:	ee17 2a90 	vmov	r2, s15
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086c8:	e008      	b.n	80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	3724      	adds	r7, #36	@ 0x24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	58024400 	.word	0x58024400
 80086ec:	03d09000 	.word	0x03d09000
 80086f0:	46000000 	.word	0x46000000
 80086f4:	4c742400 	.word	0x4c742400
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	4af42400 	.word	0x4af42400

08008700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800870e:	4b53      	ldr	r3, [pc, #332]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d101      	bne.n	800871e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e099      	b.n	8008852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800871e:	4b4f      	ldr	r3, [pc, #316]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a4e      	ldr	r2, [pc, #312]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008724:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872a:	f7f9 fa67 	bl	8001bfc <HAL_GetTick>
 800872e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008730:	e008      	b.n	8008744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008732:	f7f9 fa63 	bl	8001bfc <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e086      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008744:	4b45      	ldr	r3, [pc, #276]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008750:	4b42      	ldr	r3, [pc, #264]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008754:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	493f      	ldr	r1, [pc, #252]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	628b      	str	r3, [r1, #40]	@ 0x28
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	3b01      	subs	r3, #1
 800876a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	3b01      	subs	r3, #1
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	b29b      	uxth	r3, r3
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	3b01      	subs	r3, #1
 800878e:	061b      	lsls	r3, r3, #24
 8008790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008794:	4931      	ldr	r1, [pc, #196]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008796:	4313      	orrs	r3, r2
 8008798:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800879a:	4b30      	ldr	r3, [pc, #192]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	492d      	ldr	r1, [pc, #180]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087ac:	4b2b      	ldr	r3, [pc, #172]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	f023 0220 	bic.w	r2, r3, #32
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	4928      	ldr	r1, [pc, #160]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087be:	4b27      	ldr	r3, [pc, #156]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4a26      	ldr	r2, [pc, #152]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ca:	4b24      	ldr	r3, [pc, #144]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ce:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <RCCEx_PLL2_Config+0x160>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	69d2      	ldr	r2, [r2, #28]
 80087d6:	00d2      	lsls	r2, r2, #3
 80087d8:	4920      	ldr	r1, [pc, #128]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087de:	4b1f      	ldr	r3, [pc, #124]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	4a1e      	ldr	r2, [pc, #120]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e4:	f043 0310 	orr.w	r3, r3, #16
 80087e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087f0:	4b1a      	ldr	r3, [pc, #104]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	4a19      	ldr	r2, [pc, #100]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087fc:	e00f      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008804:	4b15      	ldr	r3, [pc, #84]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	4a14      	ldr	r2, [pc, #80]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 800880a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800880e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008810:	e005      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008812:	4b12      	ldr	r3, [pc, #72]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	4a11      	ldr	r2, [pc, #68]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800881c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800881e:	4b0f      	ldr	r3, [pc, #60]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a0e      	ldr	r2, [pc, #56]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882a:	f7f9 f9e7 	bl	8001bfc <HAL_GetTick>
 800882e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008830:	e008      	b.n	8008844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008832:	f7f9 f9e3 	bl	8001bfc <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e006      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008844:	4b05      	ldr	r3, [pc, #20]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	ffff0007 	.word	0xffff0007

08008864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008872:	4b53      	ldr	r3, [pc, #332]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d101      	bne.n	8008882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e099      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008882:	4b4f      	ldr	r3, [pc, #316]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a4e      	ldr	r2, [pc, #312]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800888c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800888e:	f7f9 f9b5 	bl	8001bfc <HAL_GetTick>
 8008892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008894:	e008      	b.n	80088a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008896:	f7f9 f9b1 	bl	8001bfc <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e086      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a8:	4b45      	ldr	r3, [pc, #276]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f0      	bne.n	8008896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088b4:	4b42      	ldr	r3, [pc, #264]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	493f      	ldr	r1, [pc, #252]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	025b      	lsls	r3, r3, #9
 80088da:	b29b      	uxth	r3, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088f8:	4931      	ldr	r1, [pc, #196]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088fe:	4b30      	ldr	r3, [pc, #192]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	492d      	ldr	r1, [pc, #180]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008910:	4b2b      	ldr	r3, [pc, #172]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	4928      	ldr	r1, [pc, #160]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008922:	4b27      	ldr	r3, [pc, #156]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	4a26      	ldr	r2, [pc, #152]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800892c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800892e:	4b24      	ldr	r3, [pc, #144]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008932:	4b24      	ldr	r3, [pc, #144]	@ (80089c4 <RCCEx_PLL3_Config+0x160>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	69d2      	ldr	r2, [r2, #28]
 800893a:	00d2      	lsls	r2, r2, #3
 800893c:	4920      	ldr	r1, [pc, #128]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008942:	4b1f      	ldr	r3, [pc, #124]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	4a1e      	ldr	r2, [pc, #120]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008954:	4b1a      	ldr	r3, [pc, #104]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800895a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800895e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008960:	e00f      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008968:	4b15      	ldr	r3, [pc, #84]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a14      	ldr	r2, [pc, #80]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008974:	e005      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008976:	4b12      	ldr	r3, [pc, #72]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	4a11      	ldr	r2, [pc, #68]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800897c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008982:	4b0f      	ldr	r3, [pc, #60]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a0e      	ldr	r2, [pc, #56]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800898c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800898e:	f7f9 f935 	bl	8001bfc <HAL_GetTick>
 8008992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008994:	e008      	b.n	80089a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008996:	f7f9 f931 	bl	8001bfc <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e006      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a8:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	ffff0007 	.word	0xffff0007

080089c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e049      	b.n	8008a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f8 fe96 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f000 f836 	bl	8008a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	@ (8008ba4 <TIM_Base_SetConfig+0x12c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d013      	beq.n	8008ab8 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a96:	d00f      	beq.n	8008ab8 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a43      	ldr	r2, [pc, #268]	@ (8008ba8 <TIM_Base_SetConfig+0x130>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00b      	beq.n	8008ab8 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a42      	ldr	r2, [pc, #264]	@ (8008bac <TIM_Base_SetConfig+0x134>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d007      	beq.n	8008ab8 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a41      	ldr	r2, [pc, #260]	@ (8008bb0 <TIM_Base_SetConfig+0x138>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d003      	beq.n	8008ab8 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a40      	ldr	r2, [pc, #256]	@ (8008bb4 <TIM_Base_SetConfig+0x13c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d108      	bne.n	8008aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a35      	ldr	r2, [pc, #212]	@ (8008ba4 <TIM_Base_SetConfig+0x12c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d01f      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad8:	d01b      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a32      	ldr	r2, [pc, #200]	@ (8008ba8 <TIM_Base_SetConfig+0x130>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d017      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a31      	ldr	r2, [pc, #196]	@ (8008bac <TIM_Base_SetConfig+0x134>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d013      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a30      	ldr	r2, [pc, #192]	@ (8008bb0 <TIM_Base_SetConfig+0x138>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00f      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2f      	ldr	r2, [pc, #188]	@ (8008bb4 <TIM_Base_SetConfig+0x13c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00b      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a2e      	ldr	r2, [pc, #184]	@ (8008bb8 <TIM_Base_SetConfig+0x140>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d007      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2d      	ldr	r2, [pc, #180]	@ (8008bbc <TIM_Base_SetConfig+0x144>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc0 <TIM_Base_SetConfig+0x148>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d108      	bne.n	8008b24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a16      	ldr	r2, [pc, #88]	@ (8008ba4 <TIM_Base_SetConfig+0x12c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00f      	beq.n	8008b70 <TIM_Base_SetConfig+0xf8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a18      	ldr	r2, [pc, #96]	@ (8008bb4 <TIM_Base_SetConfig+0x13c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00b      	beq.n	8008b70 <TIM_Base_SetConfig+0xf8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	@ (8008bb8 <TIM_Base_SetConfig+0x140>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d007      	beq.n	8008b70 <TIM_Base_SetConfig+0xf8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a16      	ldr	r2, [pc, #88]	@ (8008bbc <TIM_Base_SetConfig+0x144>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_Base_SetConfig+0xf8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a15      	ldr	r2, [pc, #84]	@ (8008bc0 <TIM_Base_SetConfig+0x148>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d103      	bne.n	8008b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d105      	bne.n	8008b96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f023 0201 	bic.w	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	611a      	str	r2, [r3, #16]
  }
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40000400 	.word	0x40000400
 8008bac:	40000800 	.word	0x40000800
 8008bb0:	40000c00 	.word	0x40000c00
 8008bb4:	40010400 	.word	0x40010400
 8008bb8:	40014000 	.word	0x40014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	40014800 	.word	0x40014800

08008bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e06d      	b.n	8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a30      	ldr	r2, [pc, #192]	@ (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d108      	bne.n	8008c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a20      	ldr	r2, [pc, #128]	@ (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d022      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4e:	d01d      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1d      	ldr	r2, [pc, #116]	@ (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d018      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a16      	ldr	r2, [pc, #88]	@ (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a15      	ldr	r2, [pc, #84]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d10c      	bne.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40010400 	.word	0x40010400
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40001800 	.word	0x40001800
 8008cdc:	40014000 	.word	0x40014000

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e042      	b.n	8008d78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f8 fd79 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2224      	movs	r2, #36	@ 0x24
 8008d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fd90 	bl	8009850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f825 	bl	8008d80 <UART_SetConfig>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e01b      	b.n	8008d78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fe0f 	bl	8009994 <UART_CheckIdleState>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d84:	b092      	sub	sp, #72	@ 0x48
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4bbe      	ldr	r3, [pc, #760]	@ (80090a8 <UART_SetConfig+0x328>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4ab3      	ldr	r2, [pc, #716]	@ (80090ac <UART_SetConfig+0x32c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de8:	4313      	orrs	r3, r2
 8008dea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	4baf      	ldr	r3, [pc, #700]	@ (80090b0 <UART_SetConfig+0x330>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	6812      	ldr	r2, [r2, #0]
 8008dfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	f023 010f 	bic.w	r1, r3, #15
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4aa6      	ldr	r2, [pc, #664]	@ (80090b4 <UART_SetConfig+0x334>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d177      	bne.n	8008f10 <UART_SetConfig+0x190>
 8008e20:	4ba5      	ldr	r3, [pc, #660]	@ (80090b8 <UART_SetConfig+0x338>)
 8008e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e28:	2b28      	cmp	r3, #40	@ 0x28
 8008e2a:	d86d      	bhi.n	8008f08 <UART_SetConfig+0x188>
 8008e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <UART_SetConfig+0xb4>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008ed9 	.word	0x08008ed9
 8008e38:	08008f09 	.word	0x08008f09
 8008e3c:	08008f09 	.word	0x08008f09
 8008e40:	08008f09 	.word	0x08008f09
 8008e44:	08008f09 	.word	0x08008f09
 8008e48:	08008f09 	.word	0x08008f09
 8008e4c:	08008f09 	.word	0x08008f09
 8008e50:	08008f09 	.word	0x08008f09
 8008e54:	08008ee1 	.word	0x08008ee1
 8008e58:	08008f09 	.word	0x08008f09
 8008e5c:	08008f09 	.word	0x08008f09
 8008e60:	08008f09 	.word	0x08008f09
 8008e64:	08008f09 	.word	0x08008f09
 8008e68:	08008f09 	.word	0x08008f09
 8008e6c:	08008f09 	.word	0x08008f09
 8008e70:	08008f09 	.word	0x08008f09
 8008e74:	08008ee9 	.word	0x08008ee9
 8008e78:	08008f09 	.word	0x08008f09
 8008e7c:	08008f09 	.word	0x08008f09
 8008e80:	08008f09 	.word	0x08008f09
 8008e84:	08008f09 	.word	0x08008f09
 8008e88:	08008f09 	.word	0x08008f09
 8008e8c:	08008f09 	.word	0x08008f09
 8008e90:	08008f09 	.word	0x08008f09
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008f09 	.word	0x08008f09
 8008e9c:	08008f09 	.word	0x08008f09
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008f09 	.word	0x08008f09
 8008ea8:	08008f09 	.word	0x08008f09
 8008eac:	08008f09 	.word	0x08008f09
 8008eb0:	08008f09 	.word	0x08008f09
 8008eb4:	08008ef9 	.word	0x08008ef9
 8008eb8:	08008f09 	.word	0x08008f09
 8008ebc:	08008f09 	.word	0x08008f09
 8008ec0:	08008f09 	.word	0x08008f09
 8008ec4:	08008f09 	.word	0x08008f09
 8008ec8:	08008f09 	.word	0x08008f09
 8008ecc:	08008f09 	.word	0x08008f09
 8008ed0:	08008f09 	.word	0x08008f09
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e222      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e21e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008ee8:	2308      	movs	r3, #8
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e21a      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e216      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e212      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f00:	2340      	movs	r3, #64	@ 0x40
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e20e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e20a      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a69      	ldr	r2, [pc, #420]	@ (80090bc <UART_SetConfig+0x33c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d130      	bne.n	8008f7c <UART_SetConfig+0x1fc>
 8008f1a:	4b67      	ldr	r3, [pc, #412]	@ (80090b8 <UART_SetConfig+0x338>)
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	d826      	bhi.n	8008f74 <UART_SetConfig+0x1f4>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <UART_SetConfig+0x1ac>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f45 	.word	0x08008f45
 8008f30:	08008f4d 	.word	0x08008f4d
 8008f34:	08008f55 	.word	0x08008f55
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e1ec      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e1e8      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e1e4      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f5c:	2310      	movs	r3, #16
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e1e0      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f64:	2320      	movs	r3, #32
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e1dc      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f6c:	2340      	movs	r3, #64	@ 0x40
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e1d8      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e1d4      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a4f      	ldr	r2, [pc, #316]	@ (80090c0 <UART_SetConfig+0x340>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d130      	bne.n	8008fe8 <UART_SetConfig+0x268>
 8008f86:	4b4c      	ldr	r3, [pc, #304]	@ (80090b8 <UART_SetConfig+0x338>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b05      	cmp	r3, #5
 8008f90:	d826      	bhi.n	8008fe0 <UART_SetConfig+0x260>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0x218>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	08008fc1 	.word	0x08008fc1
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fd9 	.word	0x08008fd9
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e1b6      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e1b2      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e1ae      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e1aa      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e1a6      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fd8:	2340      	movs	r3, #64	@ 0x40
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e1a2      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fe0:	2380      	movs	r3, #128	@ 0x80
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e19e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a35      	ldr	r2, [pc, #212]	@ (80090c4 <UART_SetConfig+0x344>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d130      	bne.n	8009054 <UART_SetConfig+0x2d4>
 8008ff2:	4b31      	ldr	r3, [pc, #196]	@ (80090b8 <UART_SetConfig+0x338>)
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d826      	bhi.n	800904c <UART_SetConfig+0x2cc>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <UART_SetConfig+0x284>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	0800901d 	.word	0x0800901d
 8009008:	08009025 	.word	0x08009025
 800900c:	0800902d 	.word	0x0800902d
 8009010:	08009035 	.word	0x08009035
 8009014:	0800903d 	.word	0x0800903d
 8009018:	08009045 	.word	0x08009045
 800901c:	2300      	movs	r3, #0
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e180      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009024:	2304      	movs	r3, #4
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e17c      	b.n	8009326 <UART_SetConfig+0x5a6>
 800902c:	2308      	movs	r3, #8
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e178      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009034:	2310      	movs	r3, #16
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e174      	b.n	8009326 <UART_SetConfig+0x5a6>
 800903c:	2320      	movs	r3, #32
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e170      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009044:	2340      	movs	r3, #64	@ 0x40
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e16c      	b.n	8009326 <UART_SetConfig+0x5a6>
 800904c:	2380      	movs	r3, #128	@ 0x80
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e168      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1b      	ldr	r2, [pc, #108]	@ (80090c8 <UART_SetConfig+0x348>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d142      	bne.n	80090e4 <UART_SetConfig+0x364>
 800905e:	4b16      	ldr	r3, [pc, #88]	@ (80090b8 <UART_SetConfig+0x338>)
 8009060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b05      	cmp	r3, #5
 8009068:	d838      	bhi.n	80090dc <UART_SetConfig+0x35c>
 800906a:	a201      	add	r2, pc, #4	@ (adr r2, 8009070 <UART_SetConfig+0x2f0>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009089 	.word	0x08009089
 8009074:	08009091 	.word	0x08009091
 8009078:	08009099 	.word	0x08009099
 800907c:	080090a1 	.word	0x080090a1
 8009080:	080090cd 	.word	0x080090cd
 8009084:	080090d5 	.word	0x080090d5
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e14a      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009090:	2304      	movs	r3, #4
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009096:	e146      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009098:	2308      	movs	r3, #8
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e142      	b.n	8009326 <UART_SetConfig+0x5a6>
 80090a0:	2310      	movs	r3, #16
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e13e      	b.n	8009326 <UART_SetConfig+0x5a6>
 80090a8:	cfff69f3 	.word	0xcfff69f3
 80090ac:	58000c00 	.word	0x58000c00
 80090b0:	11fff4ff 	.word	0x11fff4ff
 80090b4:	40011000 	.word	0x40011000
 80090b8:	58024400 	.word	0x58024400
 80090bc:	40004400 	.word	0x40004400
 80090c0:	40004800 	.word	0x40004800
 80090c4:	40004c00 	.word	0x40004c00
 80090c8:	40005000 	.word	0x40005000
 80090cc:	2320      	movs	r3, #32
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e128      	b.n	8009326 <UART_SetConfig+0x5a6>
 80090d4:	2340      	movs	r3, #64	@ 0x40
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e124      	b.n	8009326 <UART_SetConfig+0x5a6>
 80090dc:	2380      	movs	r3, #128	@ 0x80
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e120      	b.n	8009326 <UART_SetConfig+0x5a6>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4acb      	ldr	r2, [pc, #812]	@ (8009418 <UART_SetConfig+0x698>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d176      	bne.n	80091dc <UART_SetConfig+0x45c>
 80090ee:	4bcb      	ldr	r3, [pc, #812]	@ (800941c <UART_SetConfig+0x69c>)
 80090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090f6:	2b28      	cmp	r3, #40	@ 0x28
 80090f8:	d86c      	bhi.n	80091d4 <UART_SetConfig+0x454>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x380>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	080091a5 	.word	0x080091a5
 8009104:	080091d5 	.word	0x080091d5
 8009108:	080091d5 	.word	0x080091d5
 800910c:	080091d5 	.word	0x080091d5
 8009110:	080091d5 	.word	0x080091d5
 8009114:	080091d5 	.word	0x080091d5
 8009118:	080091d5 	.word	0x080091d5
 800911c:	080091d5 	.word	0x080091d5
 8009120:	080091ad 	.word	0x080091ad
 8009124:	080091d5 	.word	0x080091d5
 8009128:	080091d5 	.word	0x080091d5
 800912c:	080091d5 	.word	0x080091d5
 8009130:	080091d5 	.word	0x080091d5
 8009134:	080091d5 	.word	0x080091d5
 8009138:	080091d5 	.word	0x080091d5
 800913c:	080091d5 	.word	0x080091d5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091d5 	.word	0x080091d5
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091d5 	.word	0x080091d5
 8009150:	080091d5 	.word	0x080091d5
 8009154:	080091d5 	.word	0x080091d5
 8009158:	080091d5 	.word	0x080091d5
 800915c:	080091d5 	.word	0x080091d5
 8009160:	080091bd 	.word	0x080091bd
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080091d5 	.word	0x080091d5
 8009170:	080091d5 	.word	0x080091d5
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091d5 	.word	0x080091d5
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091c5 	.word	0x080091c5
 8009184:	080091d5 	.word	0x080091d5
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091d5 	.word	0x080091d5
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091d5 	.word	0x080091d5
 8009198:	080091d5 	.word	0x080091d5
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e0bc      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b2:	e0b8      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e0b4      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e0b0      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091c4:	2320      	movs	r3, #32
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e0ac      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091cc:	2340      	movs	r3, #64	@ 0x40
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e0a8      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091d4:	2380      	movs	r3, #128	@ 0x80
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e0a4      	b.n	8009326 <UART_SetConfig+0x5a6>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a8f      	ldr	r2, [pc, #572]	@ (8009420 <UART_SetConfig+0x6a0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d130      	bne.n	8009248 <UART_SetConfig+0x4c8>
 80091e6:	4b8d      	ldr	r3, [pc, #564]	@ (800941c <UART_SetConfig+0x69c>)
 80091e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d826      	bhi.n	8009240 <UART_SetConfig+0x4c0>
 80091f2:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <UART_SetConfig+0x478>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009211 	.word	0x08009211
 80091fc:	08009219 	.word	0x08009219
 8009200:	08009221 	.word	0x08009221
 8009204:	08009229 	.word	0x08009229
 8009208:	08009231 	.word	0x08009231
 800920c:	08009239 	.word	0x08009239
 8009210:	2300      	movs	r3, #0
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e086      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009218:	2304      	movs	r3, #4
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e082      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009220:	2308      	movs	r3, #8
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009226:	e07e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009228:	2310      	movs	r3, #16
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922e:	e07a      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009230:	2320      	movs	r3, #32
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e076      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009238:	2340      	movs	r3, #64	@ 0x40
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e072      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e06e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a75      	ldr	r2, [pc, #468]	@ (8009424 <UART_SetConfig+0x6a4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d130      	bne.n	80092b4 <UART_SetConfig+0x534>
 8009252:	4b72      	ldr	r3, [pc, #456]	@ (800941c <UART_SetConfig+0x69c>)
 8009254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b05      	cmp	r3, #5
 800925c:	d826      	bhi.n	80092ac <UART_SetConfig+0x52c>
 800925e:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <UART_SetConfig+0x4e4>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	0800927d 	.word	0x0800927d
 8009268:	08009285 	.word	0x08009285
 800926c:	0800928d 	.word	0x0800928d
 8009270:	08009295 	.word	0x08009295
 8009274:	0800929d 	.word	0x0800929d
 8009278:	080092a5 	.word	0x080092a5
 800927c:	2300      	movs	r3, #0
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e050      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e04c      	b.n	8009326 <UART_SetConfig+0x5a6>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009292:	e048      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e044      	b.n	8009326 <UART_SetConfig+0x5a6>
 800929c:	2320      	movs	r3, #32
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e040      	b.n	8009326 <UART_SetConfig+0x5a6>
 80092a4:	2340      	movs	r3, #64	@ 0x40
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e03c      	b.n	8009326 <UART_SetConfig+0x5a6>
 80092ac:	2380      	movs	r3, #128	@ 0x80
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e038      	b.n	8009326 <UART_SetConfig+0x5a6>
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009428 <UART_SetConfig+0x6a8>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d130      	bne.n	8009320 <UART_SetConfig+0x5a0>
 80092be:	4b57      	ldr	r3, [pc, #348]	@ (800941c <UART_SetConfig+0x69c>)
 80092c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d826      	bhi.n	8009318 <UART_SetConfig+0x598>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <UART_SetConfig+0x550>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092e9 	.word	0x080092e9
 80092d4:	080092f1 	.word	0x080092f1
 80092d8:	080092f9 	.word	0x080092f9
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009309 	.word	0x08009309
 80092e4:	08009311 	.word	0x08009311
 80092e8:	2302      	movs	r3, #2
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ee:	e01a      	b.n	8009326 <UART_SetConfig+0x5a6>
 80092f0:	2304      	movs	r3, #4
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f6:	e016      	b.n	8009326 <UART_SetConfig+0x5a6>
 80092f8:	2308      	movs	r3, #8
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fe:	e012      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009300:	2310      	movs	r3, #16
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e00e      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009308:	2320      	movs	r3, #32
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e00a      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009310:	2340      	movs	r3, #64	@ 0x40
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e006      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e002      	b.n	8009326 <UART_SetConfig+0x5a6>
 8009320:	2380      	movs	r3, #128	@ 0x80
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a3f      	ldr	r2, [pc, #252]	@ (8009428 <UART_SetConfig+0x6a8>)
 800932c:	4293      	cmp	r3, r2
 800932e:	f040 80f8 	bne.w	8009522 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009332:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009336:	2b20      	cmp	r3, #32
 8009338:	dc46      	bgt.n	80093c8 <UART_SetConfig+0x648>
 800933a:	2b02      	cmp	r3, #2
 800933c:	f2c0 8082 	blt.w	8009444 <UART_SetConfig+0x6c4>
 8009340:	3b02      	subs	r3, #2
 8009342:	2b1e      	cmp	r3, #30
 8009344:	d87e      	bhi.n	8009444 <UART_SetConfig+0x6c4>
 8009346:	a201      	add	r2, pc, #4	@ (adr r2, 800934c <UART_SetConfig+0x5cc>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	080093cf 	.word	0x080093cf
 8009350:	08009445 	.word	0x08009445
 8009354:	080093d7 	.word	0x080093d7
 8009358:	08009445 	.word	0x08009445
 800935c:	08009445 	.word	0x08009445
 8009360:	08009445 	.word	0x08009445
 8009364:	080093e7 	.word	0x080093e7
 8009368:	08009445 	.word	0x08009445
 800936c:	08009445 	.word	0x08009445
 8009370:	08009445 	.word	0x08009445
 8009374:	08009445 	.word	0x08009445
 8009378:	08009445 	.word	0x08009445
 800937c:	08009445 	.word	0x08009445
 8009380:	08009445 	.word	0x08009445
 8009384:	080093f7 	.word	0x080093f7
 8009388:	08009445 	.word	0x08009445
 800938c:	08009445 	.word	0x08009445
 8009390:	08009445 	.word	0x08009445
 8009394:	08009445 	.word	0x08009445
 8009398:	08009445 	.word	0x08009445
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009445 	.word	0x08009445
 80093a4:	08009445 	.word	0x08009445
 80093a8:	08009445 	.word	0x08009445
 80093ac:	08009445 	.word	0x08009445
 80093b0:	08009445 	.word	0x08009445
 80093b4:	08009445 	.word	0x08009445
 80093b8:	08009445 	.word	0x08009445
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009437 	.word	0x08009437
 80093c8:	2b40      	cmp	r3, #64	@ 0x40
 80093ca:	d037      	beq.n	800943c <UART_SetConfig+0x6bc>
 80093cc:	e03a      	b.n	8009444 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093ce:	f7fe fd87 	bl	8007ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 80093d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d4:	e03c      	b.n	8009450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fd96 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e4:	e034      	b.n	8009450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e6:	f107 0318 	add.w	r3, r7, #24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fee2 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f4:	e02c      	b.n	8009450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093f6:	4b09      	ldr	r3, [pc, #36]	@ (800941c <UART_SetConfig+0x69c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d016      	beq.n	8009430 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009402:	4b06      	ldr	r3, [pc, #24]	@ (800941c <UART_SetConfig+0x69c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	08db      	lsrs	r3, r3, #3
 8009408:	f003 0303 	and.w	r3, r3, #3
 800940c:	4a07      	ldr	r2, [pc, #28]	@ (800942c <UART_SetConfig+0x6ac>)
 800940e:	fa22 f303 	lsr.w	r3, r2, r3
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009414:	e01c      	b.n	8009450 <UART_SetConfig+0x6d0>
 8009416:	bf00      	nop
 8009418:	40011400 	.word	0x40011400
 800941c:	58024400 	.word	0x58024400
 8009420:	40007800 	.word	0x40007800
 8009424:	40007c00 	.word	0x40007c00
 8009428:	58000c00 	.word	0x58000c00
 800942c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009430:	4b9d      	ldr	r3, [pc, #628]	@ (80096a8 <UART_SetConfig+0x928>)
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009434:	e00c      	b.n	8009450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009436:	4b9d      	ldr	r3, [pc, #628]	@ (80096ac <UART_SetConfig+0x92c>)
 8009438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943a:	e009      	b.n	8009450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009442:	e005      	b.n	8009450 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800944e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 81de 	beq.w	8009814 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a94      	ldr	r2, [pc, #592]	@ (80096b0 <UART_SetConfig+0x930>)
 800945e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009462:	461a      	mov	r2, r3
 8009464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009466:	fbb3 f3f2 	udiv	r3, r3, r2
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	4413      	add	r3, r2
 8009476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009478:	429a      	cmp	r2, r3
 800947a:	d305      	bcc.n	8009488 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009484:	429a      	cmp	r2, r3
 8009486:	d903      	bls.n	8009490 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800948e:	e1c1      	b.n	8009814 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009492:	2200      	movs	r2, #0
 8009494:	60bb      	str	r3, [r7, #8]
 8009496:	60fa      	str	r2, [r7, #12]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949c:	4a84      	ldr	r2, [pc, #528]	@ (80096b0 <UART_SetConfig+0x930>)
 800949e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2200      	movs	r2, #0
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094b2:	f7f6 ff11 	bl	80002d8 <__aeabi_uldivmod>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4610      	mov	r0, r2
 80094bc:	4619      	mov	r1, r3
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	020b      	lsls	r3, r1, #8
 80094c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094cc:	0202      	lsls	r2, r0, #8
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	6849      	ldr	r1, [r1, #4]
 80094d2:	0849      	lsrs	r1, r1, #1
 80094d4:	2000      	movs	r0, #0
 80094d6:	460c      	mov	r4, r1
 80094d8:	4605      	mov	r5, r0
 80094da:	eb12 0804 	adds.w	r8, r2, r4
 80094de:	eb43 0905 	adc.w	r9, r3, r5
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	469a      	mov	sl, r3
 80094ea:	4693      	mov	fp, r2
 80094ec:	4652      	mov	r2, sl
 80094ee:	465b      	mov	r3, fp
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f6 fef0 	bl	80002d8 <__aeabi_uldivmod>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4613      	mov	r3, r2
 80094fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009506:	d308      	bcc.n	800951a <UART_SetConfig+0x79a>
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800950e:	d204      	bcs.n	800951a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009516:	60da      	str	r2, [r3, #12]
 8009518:	e17c      	b.n	8009814 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009520:	e178      	b.n	8009814 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800952a:	f040 80c5 	bne.w	80096b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800952e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009532:	2b20      	cmp	r3, #32
 8009534:	dc48      	bgt.n	80095c8 <UART_SetConfig+0x848>
 8009536:	2b00      	cmp	r3, #0
 8009538:	db7b      	blt.n	8009632 <UART_SetConfig+0x8b2>
 800953a:	2b20      	cmp	r3, #32
 800953c:	d879      	bhi.n	8009632 <UART_SetConfig+0x8b2>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <UART_SetConfig+0x7c4>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	080095cf 	.word	0x080095cf
 8009548:	080095d7 	.word	0x080095d7
 800954c:	08009633 	.word	0x08009633
 8009550:	08009633 	.word	0x08009633
 8009554:	080095df 	.word	0x080095df
 8009558:	08009633 	.word	0x08009633
 800955c:	08009633 	.word	0x08009633
 8009560:	08009633 	.word	0x08009633
 8009564:	080095ef 	.word	0x080095ef
 8009568:	08009633 	.word	0x08009633
 800956c:	08009633 	.word	0x08009633
 8009570:	08009633 	.word	0x08009633
 8009574:	08009633 	.word	0x08009633
 8009578:	08009633 	.word	0x08009633
 800957c:	08009633 	.word	0x08009633
 8009580:	08009633 	.word	0x08009633
 8009584:	080095ff 	.word	0x080095ff
 8009588:	08009633 	.word	0x08009633
 800958c:	08009633 	.word	0x08009633
 8009590:	08009633 	.word	0x08009633
 8009594:	08009633 	.word	0x08009633
 8009598:	08009633 	.word	0x08009633
 800959c:	08009633 	.word	0x08009633
 80095a0:	08009633 	.word	0x08009633
 80095a4:	08009633 	.word	0x08009633
 80095a8:	08009633 	.word	0x08009633
 80095ac:	08009633 	.word	0x08009633
 80095b0:	08009633 	.word	0x08009633
 80095b4:	08009633 	.word	0x08009633
 80095b8:	08009633 	.word	0x08009633
 80095bc:	08009633 	.word	0x08009633
 80095c0:	08009633 	.word	0x08009633
 80095c4:	08009625 	.word	0x08009625
 80095c8:	2b40      	cmp	r3, #64	@ 0x40
 80095ca:	d02e      	beq.n	800962a <UART_SetConfig+0x8aa>
 80095cc:	e031      	b.n	8009632 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ce:	f7fc fcd1 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 80095d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095d4:	e033      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d6:	f7fc fce3 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 80095da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095dc:	e02f      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fc92 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ec:	e027      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ee:	f107 0318 	add.w	r3, r7, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fdde 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fc:	e01f      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095fe:	4b2d      	ldr	r3, [pc, #180]	@ (80096b4 <UART_SetConfig+0x934>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800960a:	4b2a      	ldr	r3, [pc, #168]	@ (80096b4 <UART_SetConfig+0x934>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	08db      	lsrs	r3, r3, #3
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	4a24      	ldr	r2, [pc, #144]	@ (80096a8 <UART_SetConfig+0x928>)
 8009616:	fa22 f303 	lsr.w	r3, r2, r3
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800961c:	e00f      	b.n	800963e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800961e:	4b22      	ldr	r3, [pc, #136]	@ (80096a8 <UART_SetConfig+0x928>)
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009622:	e00c      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009624:	4b21      	ldr	r3, [pc, #132]	@ (80096ac <UART_SetConfig+0x92c>)
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009628:	e009      	b.n	800963e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009630:	e005      	b.n	800963e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800963c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800963e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80e7 	beq.w	8009814 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	4a19      	ldr	r2, [pc, #100]	@ (80096b0 <UART_SetConfig+0x930>)
 800964c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009650:	461a      	mov	r2, r3
 8009652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009654:	fbb3 f3f2 	udiv	r3, r3, r2
 8009658:	005a      	lsls	r2, r3, #1
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	441a      	add	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	fbb2 f3f3 	udiv	r3, r2, r3
 800966a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	2b0f      	cmp	r3, #15
 8009670:	d916      	bls.n	80096a0 <UART_SetConfig+0x920>
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009678:	d212      	bcs.n	80096a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	b29b      	uxth	r3, r3
 800967e:	f023 030f 	bic.w	r3, r3, #15
 8009682:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	085b      	lsrs	r3, r3, #1
 8009688:	b29b      	uxth	r3, r3
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	b29a      	uxth	r2, r3
 8009690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009692:	4313      	orrs	r3, r2
 8009694:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800969c:	60da      	str	r2, [r3, #12]
 800969e:	e0b9      	b.n	8009814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096a6:	e0b5      	b.n	8009814 <UART_SetConfig+0xa94>
 80096a8:	03d09000 	.word	0x03d09000
 80096ac:	003d0900 	.word	0x003d0900
 80096b0:	0800a530 	.word	0x0800a530
 80096b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096bc:	2b20      	cmp	r3, #32
 80096be:	dc49      	bgt.n	8009754 <UART_SetConfig+0x9d4>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	db7c      	blt.n	80097be <UART_SetConfig+0xa3e>
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d87a      	bhi.n	80097be <UART_SetConfig+0xa3e>
 80096c8:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <UART_SetConfig+0x950>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	08009763 	.word	0x08009763
 80096d8:	080097bf 	.word	0x080097bf
 80096dc:	080097bf 	.word	0x080097bf
 80096e0:	0800976b 	.word	0x0800976b
 80096e4:	080097bf 	.word	0x080097bf
 80096e8:	080097bf 	.word	0x080097bf
 80096ec:	080097bf 	.word	0x080097bf
 80096f0:	0800977b 	.word	0x0800977b
 80096f4:	080097bf 	.word	0x080097bf
 80096f8:	080097bf 	.word	0x080097bf
 80096fc:	080097bf 	.word	0x080097bf
 8009700:	080097bf 	.word	0x080097bf
 8009704:	080097bf 	.word	0x080097bf
 8009708:	080097bf 	.word	0x080097bf
 800970c:	080097bf 	.word	0x080097bf
 8009710:	0800978b 	.word	0x0800978b
 8009714:	080097bf 	.word	0x080097bf
 8009718:	080097bf 	.word	0x080097bf
 800971c:	080097bf 	.word	0x080097bf
 8009720:	080097bf 	.word	0x080097bf
 8009724:	080097bf 	.word	0x080097bf
 8009728:	080097bf 	.word	0x080097bf
 800972c:	080097bf 	.word	0x080097bf
 8009730:	080097bf 	.word	0x080097bf
 8009734:	080097bf 	.word	0x080097bf
 8009738:	080097bf 	.word	0x080097bf
 800973c:	080097bf 	.word	0x080097bf
 8009740:	080097bf 	.word	0x080097bf
 8009744:	080097bf 	.word	0x080097bf
 8009748:	080097bf 	.word	0x080097bf
 800974c:	080097bf 	.word	0x080097bf
 8009750:	080097b1 	.word	0x080097b1
 8009754:	2b40      	cmp	r3, #64	@ 0x40
 8009756:	d02e      	beq.n	80097b6 <UART_SetConfig+0xa36>
 8009758:	e031      	b.n	80097be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800975a:	f7fc fc0b 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 800975e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009760:	e033      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009762:	f7fc fc1d 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8009766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009768:	e02f      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fbcc 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009778:	e027      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800977a:	f107 0318 	add.w	r3, r7, #24
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fd18 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e01f      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800978a:	4b2d      	ldr	r3, [pc, #180]	@ (8009840 <UART_SetConfig+0xac0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009796:	4b2a      	ldr	r3, [pc, #168]	@ (8009840 <UART_SetConfig+0xac0>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	08db      	lsrs	r3, r3, #3
 800979c:	f003 0303 	and.w	r3, r3, #3
 80097a0:	4a28      	ldr	r2, [pc, #160]	@ (8009844 <UART_SetConfig+0xac4>)
 80097a2:	fa22 f303 	lsr.w	r3, r2, r3
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097a8:	e00f      	b.n	80097ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80097aa:	4b26      	ldr	r3, [pc, #152]	@ (8009844 <UART_SetConfig+0xac4>)
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ae:	e00c      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097b0:	4b25      	ldr	r3, [pc, #148]	@ (8009848 <UART_SetConfig+0xac8>)
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b4:	e009      	b.n	80097ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097bc:	e005      	b.n	80097ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097c8:	bf00      	nop
    }

    if (pclk != 0U)
 80097ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d021      	beq.n	8009814 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d4:	4a1d      	ldr	r2, [pc, #116]	@ (800984c <UART_SetConfig+0xacc>)
 80097d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097da:	461a      	mov	r2, r3
 80097dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097de:	fbb3 f2f2 	udiv	r2, r3, r2
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	085b      	lsrs	r3, r3, #1
 80097e8:	441a      	add	r2, r3
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	2b0f      	cmp	r3, #15
 80097f8:	d909      	bls.n	800980e <UART_SetConfig+0xa8e>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009800:	d205      	bcs.n	800980e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	b29a      	uxth	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60da      	str	r2, [r3, #12]
 800980c:	e002      	b.n	8009814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2201      	movs	r2, #1
 8009818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2201      	movs	r2, #1
 8009820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2200      	movs	r2, #0
 8009828:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2200      	movs	r2, #0
 800982e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009830:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009834:	4618      	mov	r0, r3
 8009836:	3748      	adds	r7, #72	@ 0x48
 8009838:	46bd      	mov	sp, r7
 800983a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
 8009844:	03d09000 	.word	0x03d09000
 8009848:	003d0900 	.word	0x003d0900
 800984c:	0800a530 	.word	0x0800a530

08009850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01a      	beq.n	8009966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800994a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800994e:	d10a      	bne.n	8009966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	605a      	str	r2, [r3, #4]
  }
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b098      	sub	sp, #96	@ 0x60
 8009998:	af02      	add	r7, sp, #8
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099a4:	f7f8 f92a 	bl	8001bfc <HAL_GetTick>
 80099a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0308 	and.w	r3, r3, #8
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d12f      	bne.n	8009a18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c0:	2200      	movs	r2, #0
 80099c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f88e 	bl	8009ae8 <UART_WaitOnFlagUntilTimeout>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d022      	beq.n	8009a18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80099f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e063      	b.n	8009ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0304 	and.w	r3, r3, #4
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d149      	bne.n	8009aba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f857 	bl	8009ae8 <UART_WaitOnFlagUntilTimeout>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d03c      	beq.n	8009aba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a66:	e841 2300 	strex	r3, r2, [r1]
 8009a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1e6      	bne.n	8009a40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3308      	adds	r3, #8
 8009a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f023 0301 	bic.w	r3, r3, #1
 8009a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a92:	61fa      	str	r2, [r7, #28]
 8009a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	69b9      	ldr	r1, [r7, #24]
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e5      	bne.n	8009a72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e012      	b.n	8009ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3758      	adds	r7, #88	@ 0x58
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	4613      	mov	r3, r2
 8009af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af8:	e04f      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d04b      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b02:	f7f8 f87b 	bl	8001bfc <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d302      	bcc.n	8009b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e04e      	b.n	8009bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0304 	and.w	r3, r3, #4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d037      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b80      	cmp	r3, #128	@ 0x80
 8009b2e:	d034      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b40      	cmp	r3, #64	@ 0x40
 8009b34:	d031      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f003 0308 	and.w	r3, r3, #8
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d110      	bne.n	8009b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f839 	bl	8009bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2208      	movs	r2, #8
 8009b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e029      	b.n	8009bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b74:	d111      	bne.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 f81f 	bl	8009bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e00f      	b.n	8009bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	69da      	ldr	r2, [r3, #28]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d0a0      	beq.n	8009afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b095      	sub	sp, #84	@ 0x54
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e6      	bne.n	8009bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	4b1e      	ldr	r3, [pc, #120]	@ (8009c8c <UART_EndRxTransfer+0xc8>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d118      	bne.n	8009c6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f023 0310 	bic.w	r3, r3, #16
 8009c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c58:	61bb      	str	r3, [r7, #24]
 8009c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6979      	ldr	r1, [r7, #20]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	613b      	str	r3, [r7, #16]
   return(result);
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e6      	bne.n	8009c3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c80:	bf00      	nop
 8009c82:	3754      	adds	r7, #84	@ 0x54
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	effffffe 	.word	0xeffffffe

08009c90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e027      	b.n	8009cf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2224      	movs	r2, #36	@ 0x24
 8009cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0201 	bic.w	r2, r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009cd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d16:	2302      	movs	r3, #2
 8009d18:	e02d      	b.n	8009d76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2224      	movs	r2, #36	@ 0x24
 8009d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0201 	bic.w	r2, r2, #1
 8009d40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f850 	bl	8009dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e02d      	b.n	8009df2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2224      	movs	r2, #36	@ 0x24
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0201 	bic.w	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f812 	bl	8009dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d108      	bne.n	8009e1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e1c:	e031      	b.n	8009e82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e1e:	2310      	movs	r3, #16
 8009e20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e22:	2310      	movs	r3, #16
 8009e24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	0e5b      	lsrs	r3, r3, #25
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	0f5b      	lsrs	r3, r3, #29
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	7b3a      	ldrb	r2, [r7, #12]
 8009e4a:	4911      	ldr	r1, [pc, #68]	@ (8009e90 <UARTEx_SetNbDataToProcess+0x94>)
 8009e4c:	5c8a      	ldrb	r2, [r1, r2]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e52:	7b3a      	ldrb	r2, [r7, #12]
 8009e54:	490f      	ldr	r1, [pc, #60]	@ (8009e94 <UARTEx_SetNbDataToProcess+0x98>)
 8009e56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	7b7a      	ldrb	r2, [r7, #13]
 8009e68:	4909      	ldr	r1, [pc, #36]	@ (8009e90 <UARTEx_SetNbDataToProcess+0x94>)
 8009e6a:	5c8a      	ldrb	r2, [r1, r2]
 8009e6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e70:	7b7a      	ldrb	r2, [r7, #13]
 8009e72:	4908      	ldr	r1, [pc, #32]	@ (8009e94 <UARTEx_SetNbDataToProcess+0x98>)
 8009e74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	0800a548 	.word	0x0800a548
 8009e94:	0800a550 	.word	0x0800a550

08009e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e98:	b084      	sub	sp, #16
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	f107 001c 	add.w	r0, r7, #28
 8009ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009eaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d121      	bne.n	8009ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8009f74 <USB_CoreInit+0xdc>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d105      	bne.n	8009eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 faaa 	bl	800a444 <USB_CoreReset>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]
 8009ef4:	e01b      	b.n	8009f2e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa9e 	bl	800a444 <USB_CoreReset>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f20:	e005      	b.n	8009f2e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f2e:	7fbb      	ldrb	r3, [r7, #30]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d116      	bne.n	8009f62 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f42:	4b0d      	ldr	r3, [pc, #52]	@ (8009f78 <USB_CoreInit+0xe0>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f043 0206 	orr.w	r2, r3, #6
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f043 0220 	orr.w	r2, r3, #32
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f6e:	b004      	add	sp, #16
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	ffbdffbf 	.word	0xffbdffbf
 8009f78:	03ee0000 	.word	0x03ee0000

08009f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f023 0201 	bic.w	r2, r3, #1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d115      	bne.n	8009fec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009fcc:	200a      	movs	r0, #10
 8009fce:	f7f7 fe21 	bl	8001c14 <HAL_Delay>
      ms += 10U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	330a      	adds	r3, #10
 8009fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa25 	bl	800a428 <USB_GetMode>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d01e      	beq.n	800a022 <USB_SetCurrentMode+0x84>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009fe8:	d9f0      	bls.n	8009fcc <USB_SetCurrentMode+0x2e>
 8009fea:	e01a      	b.n	800a022 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d115      	bne.n	800a01e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ffe:	200a      	movs	r0, #10
 800a000:	f7f7 fe08 	bl	8001c14 <HAL_Delay>
      ms += 10U;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	330a      	adds	r3, #10
 800a008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa0c 	bl	800a428 <USB_GetMode>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <USB_SetCurrentMode+0x84>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2bc7      	cmp	r3, #199	@ 0xc7
 800a01a:	d9f0      	bls.n	8009ffe <USB_SetCurrentMode+0x60>
 800a01c:	e001      	b.n	800a022 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e005      	b.n	800a02e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2bc8      	cmp	r3, #200	@ 0xc8
 800a026:	d101      	bne.n	800a02c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a038:	b084      	sub	sp, #16
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b086      	sub	sp, #24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a052:	2300      	movs	r3, #0
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	e009      	b.n	800a06c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	3340      	adds	r3, #64	@ 0x40
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	2200      	movs	r2, #0
 800a064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b0e      	cmp	r3, #14
 800a070:	d9f2      	bls.n	800a058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a072:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a076:	2b00      	cmp	r3, #0
 800a078:	d11c      	bne.n	800a0b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a088:	f043 0302 	orr.w	r3, r3, #2
 800a08c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a092:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	e005      	b.n	800a0c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d10d      	bne.n	800a0f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d104      	bne.n	800a0e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f968 	bl	800a3b4 <USB_SetDevSpeed>
 800a0e4:	e008      	b.n	800a0f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f963 	bl	800a3b4 <USB_SetDevSpeed>
 800a0ee:	e003      	b.n	800a0f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0f0:	2103      	movs	r1, #3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f95e 	bl	800a3b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0f8:	2110      	movs	r1, #16
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f8fa 	bl	800a2f4 <USB_FlushTxFifo>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f924 	bl	800a358 <USB_FlushRxFifo>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a120:	461a      	mov	r2, r3
 800a122:	2300      	movs	r3, #0
 800a124:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12c:	461a      	mov	r2, r3
 800a12e:	2300      	movs	r3, #0
 800a130:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a138:	461a      	mov	r2, r3
 800a13a:	2300      	movs	r3, #0
 800a13c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a13e:	2300      	movs	r3, #0
 800a140:	613b      	str	r3, [r7, #16]
 800a142:	e043      	b.n	800a1cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a15a:	d118      	bne.n	800a18e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16e:	461a      	mov	r2, r3
 800a170:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e013      	b.n	800a1a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	461a      	mov	r2, r3
 800a186:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	e008      	b.n	800a1a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19a:	461a      	mov	r2, r3
 800a19c:	2300      	movs	r3, #0
 800a19e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d3b5      	bcc.n	800a144 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
 800a1dc:	e043      	b.n	800a266 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1f4:	d118      	bne.n	800a228 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a208:	461a      	mov	r2, r3
 800a20a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	e013      	b.n	800a23a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21e:	461a      	mov	r2, r3
 800a220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e008      	b.n	800a23a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a234:	461a      	mov	r2, r3
 800a236:	2300      	movs	r3, #0
 800a238:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a246:	461a      	mov	r2, r3
 800a248:	2300      	movs	r3, #0
 800a24a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	015a      	lsls	r2, r3, #5
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a258:	461a      	mov	r2, r3
 800a25a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a25e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3301      	adds	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a26a:	461a      	mov	r2, r3
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d3b5      	bcc.n	800a1de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a284:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a292:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f043 0210 	orr.w	r2, r3, #16
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699a      	ldr	r2, [r3, #24]
 800a2ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ec <USB_DevInit+0x2b4>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d005      	beq.n	800a2c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	f043 0208 	orr.w	r2, r3, #8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d105      	bne.n	800a2dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699a      	ldr	r2, [r3, #24]
 800a2d4:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <USB_DevInit+0x2b8>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2e8:	b004      	add	sp, #16
 800a2ea:	4770      	bx	lr
 800a2ec:	803c3800 	.word	0x803c3800
 800a2f0:	40000004 	.word	0x40000004

0800a2f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3301      	adds	r3, #1
 800a306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a30e:	d901      	bls.n	800a314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e01b      	b.n	800a34c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	daf2      	bge.n	800a302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	019b      	lsls	r3, r3, #6
 800a324:	f043 0220 	orr.w	r2, r3, #32
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a338:	d901      	bls.n	800a33e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e006      	b.n	800a34c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b20      	cmp	r3, #32
 800a348:	d0f0      	beq.n	800a32c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a370:	d901      	bls.n	800a376 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e018      	b.n	800a3a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	daf2      	bge.n	800a364 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2210      	movs	r2, #16
 800a386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a394:	d901      	bls.n	800a39a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e006      	b.n	800a3a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0310 	and.w	r3, r3, #16
 800a3a2:	2b10      	cmp	r3, #16
 800a3a4:	d0f0      	beq.n	800a388 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	f003 0301 	and.w	r3, r3, #1
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a45c:	d901      	bls.n	800a462 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e01b      	b.n	800a49a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	daf2      	bge.n	800a450 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f043 0201 	orr.w	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a486:	d901      	bls.n	800a48c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e006      	b.n	800a49a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b01      	cmp	r3, #1
 800a496:	d0f0      	beq.n	800a47a <USB_CoreReset+0x36>

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <memset>:
 800a4a6:	4402      	add	r2, r0
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d100      	bne.n	800a4b0 <memset+0xa>
 800a4ae:	4770      	bx	lr
 800a4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b4:	e7f9      	b.n	800a4aa <memset+0x4>
	...

0800a4b8 <__libc_init_array>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	4d0d      	ldr	r5, [pc, #52]	@ (800a4f0 <__libc_init_array+0x38>)
 800a4bc:	4c0d      	ldr	r4, [pc, #52]	@ (800a4f4 <__libc_init_array+0x3c>)
 800a4be:	1b64      	subs	r4, r4, r5
 800a4c0:	10a4      	asrs	r4, r4, #2
 800a4c2:	2600      	movs	r6, #0
 800a4c4:	42a6      	cmp	r6, r4
 800a4c6:	d109      	bne.n	800a4dc <__libc_init_array+0x24>
 800a4c8:	4d0b      	ldr	r5, [pc, #44]	@ (800a4f8 <__libc_init_array+0x40>)
 800a4ca:	4c0c      	ldr	r4, [pc, #48]	@ (800a4fc <__libc_init_array+0x44>)
 800a4cc:	f000 f818 	bl	800a500 <_init>
 800a4d0:	1b64      	subs	r4, r4, r5
 800a4d2:	10a4      	asrs	r4, r4, #2
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	42a6      	cmp	r6, r4
 800a4d8:	d105      	bne.n	800a4e6 <__libc_init_array+0x2e>
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e0:	4798      	blx	r3
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	e7ee      	b.n	800a4c4 <__libc_init_array+0xc>
 800a4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ea:	4798      	blx	r3
 800a4ec:	3601      	adds	r6, #1
 800a4ee:	e7f2      	b.n	800a4d6 <__libc_init_array+0x1e>
 800a4f0:	0800a560 	.word	0x0800a560
 800a4f4:	0800a560 	.word	0x0800a560
 800a4f8:	0800a560 	.word	0x0800a560
 800a4fc:	0800a564 	.word	0x0800a564

0800a500 <_init>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr

0800a50c <_fini>:
 800a50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50e:	bf00      	nop
 800a510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a512:	bc08      	pop	{r3}
 800a514:	469e      	mov	lr, r3
 800a516:	4770      	bx	lr
