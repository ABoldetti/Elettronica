
echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e98  08005e98  00006e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  08005ee0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c4  24000020  08005f00  00007020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005e4  08005f00  000075e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013ab1  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002998  00000000  00000000  0001aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd8  00000000  00000000  0001d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a93  00000000  00000000  0001e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036d2a  00000000  00000000  0001ed03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014083  00000000  00000000  00055a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157b49  00000000  00000000  00069ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c15f9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038c4  00000000  00000000  001c163c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001c4f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005e80 	.word	0x08005e80

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08005e80 	.word	0x08005e80

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <inizializzo_USART>:
uint8_t flag = 0;

//Zona definizione variabili, vettori globali


void inizializzo_USART(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//Accendo la trasmissione

	USART3 ->CR1 |= USART_CR1_TE;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <inizializzo_USART+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <inizializzo_USART+0x40>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <inizializzo_USART+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <inizializzo_USART+0x40>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <inizializzo_USART+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <inizializzo_USART+0x40>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione

	//Accendo USART
	USART3 ->CR1 |= USART_CR1_UE;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <inizializzo_USART+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <inizializzo_USART+0x40>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004800 	.word	0x40004800

0800060c <ESPE_USART_interrupt>:


//Zona definizione di funzioni
void ESPE_USART_interrupt(void){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 8000610:	4b67      	ldr	r3, [pc, #412]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d031      	beq.n	8000680 <ESPE_USART_interrupt+0x74>
		if ( USART3 -> RDR != '\r'){
 800061c:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d00d      	beq.n	8000640 <ESPE_USART_interrupt+0x34>
			*(str+indice) = USART3 -> RDR;
 8000624:	4b62      	ldr	r3, [pc, #392]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000626:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000628:	4b62      	ldr	r3, [pc, #392]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a62      	ldr	r2, [pc, #392]	@ (80007b8 <ESPE_USART_interrupt+0x1ac>)
 800062e:	4413      	add	r3, r2
 8000630:	b2ca      	uxtb	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
			indice++;
 8000634:	4b5f      	ldr	r3, [pc, #380]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a5e      	ldr	r2, [pc, #376]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e01f      	b.n	8000680 <ESPE_USART_interrupt+0x74>
		}else{
			if (*str == 's' && indice == 1 ){
 8000640:	4b5d      	ldr	r3, [pc, #372]	@ (80007b8 <ESPE_USART_interrupt+0x1ac>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b73      	cmp	r3, #115	@ 0x73
 8000646:	d10a      	bne.n	800065e <ESPE_USART_interrupt+0x52>
 8000648:	4b5a      	ldr	r3, [pc, #360]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d106      	bne.n	800065e <ESPE_USART_interrupt+0x52>
				flag = 1;
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <ESPE_USART_interrupt+0x1b0>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
				indice = 0;
 8000656:	4b57      	ldr	r3, [pc, #348]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	e010      	b.n	8000680 <ESPE_USART_interrupt+0x74>
			}else{
				len = indice;
 800065e:	4b55      	ldr	r3, [pc, #340]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a57      	ldr	r2, [pc, #348]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 8000664:	6013      	str	r3, [r2, #0]
				indice = 1;
 8000666:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
				USART3 -> CR1 |= USART_CR1_TCIE;
 800066c:	4b50      	ldr	r3, [pc, #320]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a4f      	ldr	r2, [pc, #316]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000676:	6013      	str	r3, [r2, #0]
				USART3 -> TDR = *(str);
 8000678:	4b4f      	ldr	r3, [pc, #316]	@ (80007b8 <ESPE_USART_interrupt+0x1ac>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800067e:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
	}
	if( USART3 ->ISR & USART_ISR_TC){
 8000680:	4b4b      	ldr	r3, [pc, #300]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000688:	2b00      	cmp	r3, #0
 800068a:	d02f      	beq.n	80006ec <ESPE_USART_interrupt+0xe0>
		if (len != 0 && indice < len){
 800068c:	4b4c      	ldr	r3, [pc, #304]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d012      	beq.n	80006ba <ESPE_USART_interrupt+0xae>
 8000694:	4b47      	ldr	r3, [pc, #284]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b49      	ldr	r3, [pc, #292]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d20c      	bcs.n	80006ba <ESPE_USART_interrupt+0xae>
			USART3->TDR = *(str+indice);
 80006a0:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a44      	ldr	r2, [pc, #272]	@ (80007b8 <ESPE_USART_interrupt+0x1ac>)
 80006a6:	4413      	add	r3, r2
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4b41      	ldr	r3, [pc, #260]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
			indice++;
 80006ae:	4b41      	ldr	r3, [pc, #260]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a3f      	ldr	r2, [pc, #252]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e018      	b.n	80006ec <ESPE_USART_interrupt+0xe0>
		}else{
			if(indice == len && len != 0){
 80006ba:	4b3e      	ldr	r3, [pc, #248]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b40      	ldr	r3, [pc, #256]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d112      	bne.n	80006ec <ESPE_USART_interrupt+0xe0>
 80006c6:	4b3e      	ldr	r3, [pc, #248]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00e      	beq.n	80006ec <ESPE_USART_interrupt+0xe0>
				USART3 -> TDR = '\r';
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006d0:	220d      	movs	r2, #13
 80006d2:	629a      	str	r2, [r3, #40]	@ 0x28
				len = 0;
 80006d4:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <ESPE_USART_interrupt+0x1b4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
				indice = 0;
 80006da:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
				USART3 -> CR1 ^= USART_CR1_TCIE;
 80006e0:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006e6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80006ea:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if( flag){
 80006ec:	4b33      	ldr	r3, [pc, #204]	@ (80007bc <ESPE_USART_interrupt+0x1b0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d022      	beq.n	800073a <ESPE_USART_interrupt+0x12e>
		USART3 -> CR1 |= USART_CR1_TCIE;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a2d      	ldr	r2, [pc, #180]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80006fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006fe:	6013      	str	r3, [r2, #0]
		if (indice < lunghezza_stringa){
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b0c      	cmp	r3, #12
 8000706:	d80c      	bhi.n	8000722 <ESPE_USART_interrupt+0x116>
			USART3 -> TDR = *(stringa + indice);
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2d      	ldr	r2, [pc, #180]	@ (80007c4 <ESPE_USART_interrupt+0x1b8>)
 800070e:	4413      	add	r3, r2
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
			indice++;
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e00b      	b.n	800073a <ESPE_USART_interrupt+0x12e>
		}else{
			flag = 0;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <ESPE_USART_interrupt+0x1b0>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
			indice = 0;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <ESPE_USART_interrupt+0x1a8>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
			USART3 -> CR1 ^= USART_CR1_TCIE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000734:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000738:	6013      	str	r3, [r2, #0]

		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a1c      	ldr	r2, [pc, #112]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000750:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6193      	str	r3, [r2, #24]


	//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
		USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6213      	str	r3, [r2, #32]
		USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000774:	6213      	str	r3, [r2, #32]
		USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6193      	str	r3, [r2, #24]
		//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
			USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6213      	str	r3, [r2, #32]
			USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 8000794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000798:	6213      	str	r3, [r2, #32]
			USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800079a:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <ESPE_USART_interrupt+0x1a4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40004800 	.word	0x40004800
 80007b4:	2400003c 	.word	0x2400003c
 80007b8:	24000044 	.word	0x24000044
 80007bc:	24000064 	.word	0x24000064
 80007c0:	24000040 	.word	0x24000040
 80007c4:	24000000 	.word	0x24000000

080007c8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b83      	ldr	r3, [pc, #524]	@ (80009ec <MX_GPIO_Init+0x224>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	4a81      	ldr	r2, [pc, #516]	@ (80009ec <MX_GPIO_Init+0x224>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ee:	4b7f      	ldr	r3, [pc, #508]	@ (80009ec <MX_GPIO_Init+0x224>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fc:	4b7b      	ldr	r3, [pc, #492]	@ (80009ec <MX_GPIO_Init+0x224>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000802:	4a7a      	ldr	r2, [pc, #488]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080c:	4b77      	ldr	r3, [pc, #476]	@ (80009ec <MX_GPIO_Init+0x224>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b74      	ldr	r3, [pc, #464]	@ (80009ec <MX_GPIO_Init+0x224>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	4a72      	ldr	r2, [pc, #456]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082a:	4b70      	ldr	r3, [pc, #448]	@ (80009ec <MX_GPIO_Init+0x224>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b6c      	ldr	r3, [pc, #432]	@ (80009ec <MX_GPIO_Init+0x224>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083e:	4a6b      	ldr	r2, [pc, #428]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000848:	4b68      	ldr	r3, [pc, #416]	@ (80009ec <MX_GPIO_Init+0x224>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b65      	ldr	r3, [pc, #404]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	4a63      	ldr	r2, [pc, #396]	@ (80009ec <MX_GPIO_Init+0x224>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000874:	4b5d      	ldr	r3, [pc, #372]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	4a5c      	ldr	r2, [pc, #368]	@ (80009ec <MX_GPIO_Init+0x224>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000884:	4b59      	ldr	r3, [pc, #356]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <MX_GPIO_Init+0x224>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a54      	ldr	r2, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x224>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b52      	ldr	r3, [pc, #328]	@ (80009ec <MX_GPIO_Init+0x224>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008b6:	484e      	ldr	r0, [pc, #312]	@ (80009f0 <MX_GPIO_Init+0x228>)
 80008b8:	f000 ff2c 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c2:	484c      	ldr	r0, [pc, #304]	@ (80009f4 <MX_GPIO_Init+0x22c>)
 80008c4:	f000 ff26 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	484a      	ldr	r0, [pc, #296]	@ (80009f8 <MX_GPIO_Init+0x230>)
 80008ce:	f000 ff21 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4845      	ldr	r0, [pc, #276]	@ (80009fc <MX_GPIO_Init+0x234>)
 80008e8:	f000 fd64 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008ec:	2332      	movs	r3, #50	@ 0x32
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fc:	230b      	movs	r3, #11
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	483d      	ldr	r0, [pc, #244]	@ (80009fc <MX_GPIO_Init+0x234>)
 8000908:	f000 fd54 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800090c:	2386      	movs	r3, #134	@ 0x86
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4836      	ldr	r0, [pc, #216]	@ (8000a00 <MX_GPIO_Init+0x238>)
 8000928:	f000 fd44 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800092c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482a      	ldr	r0, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0x228>)
 8000946:	f000 fd35 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095c:	230b      	movs	r3, #11
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0x228>)
 8000968:	f000 fd24 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481b      	ldr	r0, [pc, #108]	@ (80009f4 <MX_GPIO_Init+0x22c>)
 8000986:	f000 fd15 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0x23c>)
 80009a0:	f000 fd08 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009a4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b6:	230b      	movs	r3, #11
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <MX_GPIO_Init+0x23c>)
 80009c2:	f000 fcf7 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_GPIO_Init+0x230>)
 80009de:	f000 fce9 	bl	80013b4 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020400 	.word	0x58020400
 80009f4:	58020c00 	.word	0x58020c00
 80009f8:	58021000 	.word	0x58021000
 80009fc:	58020800 	.word	0x58020800
 8000a00:	58020000 	.word	0x58020000
 8000a04:	58021800 	.word	0x58021800

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 fb00 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f80a 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f7ff fed8 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a18:	f000 f964 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a1c:	f000 fa20 	bl	8000e60 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  inizializzo_USART();
 8000a20:	f7ff fdd2 	bl	80005c8 <inizializzo_USART>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <main+0x1c>

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	@ 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	224c      	movs	r2, #76	@ 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 f9f5 	bl	8005e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 f9ef 	bl	8005e26 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f000 ffad 	bl	80019a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b33      	ldr	r3, [pc, #204]	@ (8000b20 <SystemClock_Config+0xf8>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <SystemClock_Config+0xf8>)
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a5e:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <SystemClock_Config+0xf8>)
 8000a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <SystemClock_Config+0xfc>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a70:	4a2c      	ldr	r2, [pc, #176]	@ (8000b24 <SystemClock_Config+0xfc>)
 8000a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <SystemClock_Config+0xfc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a84:	bf00      	nop
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <SystemClock_Config+0xfc>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a92:	d1f8      	bne.n	8000a86 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a94:	2303      	movs	r3, #3
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2340      	movs	r3, #64	@ 0x40
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ffb2 	bl	8001a3c <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ade:	f000 f823 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	233f      	movs	r3, #63	@ 0x3f
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fbf2 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b12:	f000 f809 	bl	8000b28 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3770      	adds	r7, #112	@ 0x70
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58000400 	.word	0x58000400
 8000b24:	58024800 	.word	0x58024800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	58024400 	.word	0x58024400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 fa99 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_interrupt();
 8000bca:	f7ff fd1f 	bl	800060c <ESPE_USART_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <SystemInit+0xe4>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a36      	ldr	r2, [pc, #216]	@ (8000cb8 <SystemInit+0xe4>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be8:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <SystemInit+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d807      	bhi.n	8000c04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf4:	4b31      	ldr	r3, [pc, #196]	@ (8000cbc <SystemInit+0xe8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 030f 	bic.w	r3, r3, #15
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8000cbc <SystemInit+0xe8>)
 8000bfe:	f043 0307 	orr.w	r3, r3, #7
 8000c02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c04:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <SystemInit+0xec>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc0 <SystemInit+0xec>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <SystemInit+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <SystemInit+0xec>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4929      	ldr	r1, [pc, #164]	@ (8000cc0 <SystemInit+0xec>)
 8000c1c:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <SystemInit+0xf0>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <SystemInit+0xe8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <SystemInit+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f023 030f 	bic.w	r3, r3, #15
 8000c36:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <SystemInit+0xe8>)
 8000c38:	f043 0307 	orr.w	r3, r3, #7
 8000c3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <SystemInit+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <SystemInit+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <SystemInit+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <SystemInit+0xec>)
 8000c52:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc8 <SystemInit+0xf4>)
 8000c54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <SystemInit+0xec>)
 8000c58:	4a1c      	ldr	r2, [pc, #112]	@ (8000ccc <SystemInit+0xf8>)
 8000c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <SystemInit+0xec>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <SystemInit+0xfc>)
 8000c60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c62:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <SystemInit+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <SystemInit+0xec>)
 8000c6a:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <SystemInit+0xfc>)
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <SystemInit+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <SystemInit+0xec>)
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <SystemInit+0xfc>)
 8000c78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <SystemInit+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <SystemInit+0xec>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <SystemInit+0xec>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <SystemInit+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <SystemInit+0x100>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <SystemInit+0x104>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c9e:	d202      	bcs.n	8000ca6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <SystemInit+0x108>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <SystemInit+0x10c>)
 8000ca8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	52002000 	.word	0x52002000
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cc8:	02020200 	.word	0x02020200
 8000ccc:	01ff0000 	.word	0x01ff0000
 8000cd0:	01010280 	.word	0x01010280
 8000cd4:	5c001000 	.word	0x5c001000
 8000cd8:	ffff0000 	.word	0xffff0000
 8000cdc:	51008108 	.word	0x51008108
 8000ce0:	52004000 	.word	0x52004000

08000ce4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <MX_USART3_UART_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f003 fc97 	bl	8004660 <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d38:	f7ff fef6 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d40:	f004 fc9f 	bl	8005682 <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f7ff feed 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d52:	f004 fcd4 	bl	80056fe <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f7ff fee4 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d62:	f004 fc55 	bl	8005610 <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f7ff fedc 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000068 	.word	0x24000068
 8000d78:	40004800 	.word	0x40004800

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	22c0      	movs	r2, #192	@ 0xc0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 f842 	bl	8005e26 <memset>
  if(uartHandle->Instance==USART3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d14e      	bne.n	8000e4a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dac:	f04f 0202 	mov.w	r2, #2
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fe20 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dce:	f7ff feab 	bl	8000b28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000de2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <HAL_UART_MspInit+0xe0>)
 8000e36:	f000 fabd 	bl	80013b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2027      	movs	r0, #39	@ 0x27
 8000e40:	f000 fa83 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e44:	2027      	movs	r0, #39	@ 0x27
 8000e46:	f000 fa9a 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	37e8      	adds	r7, #232	@ 0xe8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004800 	.word	0x40004800
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020c00 	.word	0x58020c00

08000e60 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea8:	f000 fc4d 	bl	8001746 <HAL_PCD_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000eb2:	f7ff fe39 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240000fc 	.word	0x240000fc
 8000ec0:	40080000 	.word	0x40080000

08000ec4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	22c0      	movs	r2, #192	@ 0xc0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 ff9e 	bl	8005e26 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a30      	ldr	r2, [pc, #192]	@ (8000fb0 <HAL_PCD_MspInit+0xec>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d159      	bne.n	8000fa8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ef4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fd7b 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f18:	f7ff fe06 	bl	8000b28 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f1c:	f000 fd7e 	bl	8001a1c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a23      	ldr	r2, [pc, #140]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f3e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <HAL_PCD_MspInit+0xf4>)
 8000f66:	f000 fa25 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <HAL_PCD_MspInit+0xf4>)
 8000f86:	f000 fa15 	bl	80013b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_PCD_MspInit+0xf0>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	37e8      	adds	r7, #232	@ 0xe8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40080000 	.word	0x40080000
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020000 	.word	0x58020000

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fe08 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f004 ff25 	bl	8005e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fd0b 	bl	8000a08 <main>
  bx  lr
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ffc:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001000:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8001004:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001008:	240005e4 	.word	0x240005e4

0800100c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC3_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f98c 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800101c:	f001 fb1e 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8001020:	4602      	mov	r2, r0
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	4913      	ldr	r1, [pc, #76]	@ (800107c <HAL_Init+0x6c>)
 800102e:	5ccb      	ldrb	r3, [r1, r3]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_Init+0x6c>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_Init+0x70>)
 8001052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001054:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_Init+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f814 	bl	8001088 <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e002      	b.n	8001070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fd63 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	08005e98 	.word	0x08005e98
 8001080:	24000014 	.word	0x24000014
 8001084:	24000010 	.word	0x24000010

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e021      	b.n	80010e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_InitTick+0x64>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f971 	bl	800139a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d0:	f000 f93b 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x68>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2400001c 	.word	0x2400001c
 80010ec:	24000010 	.word	0x24000010
 80010f0:	24000018 	.word	0x24000018

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400001c 	.word	0x2400001c
 8001118:	240005e0 	.word	0x240005e0

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	240005e0 	.word	0x240005e0

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2400001c 	.word	0x2400001c

0800117c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_GetREVID+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0c1b      	lsrs	r3, r3, #16
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	5c001000 	.word	0x5c001000

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff40 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa4 	bl	80012f0 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013c2:	4b89      	ldr	r3, [pc, #548]	@ (80015e8 <HAL_GPIO_Init+0x234>)
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013c6:	e194      	b.n	80016f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8186 	beq.w	80016ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x44>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	69b9      	ldr	r1, [r7, #24]
 80014e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80e0 	beq.w	80016ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <HAL_GPIO_Init+0x238>)
 800152e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001532:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <HAL_GPIO_Init+0x238>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_GPIO_Init+0x238>)
 800153e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154a:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <HAL_GPIO_Init+0x23c>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a20      	ldr	r2, [pc, #128]	@ (80015f4 <HAL_GPIO_Init+0x240>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d052      	beq.n	800161c <HAL_GPIO_Init+0x268>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <HAL_GPIO_Init+0x244>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d031      	beq.n	80015e2 <HAL_GPIO_Init+0x22e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_GPIO_Init+0x248>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x22a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_GPIO_Init+0x24c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x226>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_GPIO_Init+0x250>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x222>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1b      	ldr	r2, [pc, #108]	@ (8001608 <HAL_GPIO_Init+0x254>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x21e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_GPIO_Init+0x258>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x21a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a19      	ldr	r2, [pc, #100]	@ (8001610 <HAL_GPIO_Init+0x25c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x216>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_GPIO_Init+0x260>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x212>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <HAL_GPIO_Init+0x264>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x20e>
 80015be:	2309      	movs	r3, #9
 80015c0:	e02d      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015c2:	230a      	movs	r3, #10
 80015c4:	e02b      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015c6:	2308      	movs	r3, #8
 80015c8:	e029      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e027      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e025      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e023      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e021      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015da:	2303      	movs	r3, #3
 80015dc:	e01f      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015de:	2302      	movs	r3, #2
 80015e0:	e01d      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e01b      	b.n	800161e <HAL_GPIO_Init+0x26a>
 80015e6:	bf00      	nop
 80015e8:	58000080 	.word	0x58000080
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58000400 	.word	0x58000400
 80015f4:	58020000 	.word	0x58020000
 80015f8:	58020400 	.word	0x58020400
 80015fc:	58020800 	.word	0x58020800
 8001600:	58020c00 	.word	0x58020c00
 8001604:	58021000 	.word	0x58021000
 8001608:	58021400 	.word	0x58021400
 800160c:	58021800 	.word	0x58021800
 8001610:	58021c00 	.word	0x58021c00
 8001614:	58022000 	.word	0x58022000
 8001618:	58022400 	.word	0x58022400
 800161c:	2300      	movs	r3, #0
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162e:	4938      	ldr	r1, [pc, #224]	@ (8001710 <HAL_GPIO_Init+0x35c>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001662:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f47f ae63 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	3724      	adds	r7, #36	@ 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	58000400 	.word	0x58000400

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af02      	add	r7, sp, #8
 800174c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0fe      	b.n	8001956 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fba9 	bl	8000ec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f004 f8bc 	bl	80058fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7c1a      	ldrb	r2, [r3, #16]
 800178c:	f88d 2000 	strb.w	r2, [sp]
 8001790:	3304      	adds	r3, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	f004 f840 	bl	8005818 <USB_CoreInit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0d5      	b.n	8001956 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 f8b4 	bl	800591e <USB_SetCurrentMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0c6      	b.n	8001956 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e04a      	b.n	8001864 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3315      	adds	r3, #21
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3314      	adds	r3, #20
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	b298      	uxth	r0, r3
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	332e      	adds	r3, #46	@ 0x2e
 800180a:	4602      	mov	r2, r0
 800180c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3318      	adds	r3, #24
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	331c      	adds	r3, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3320      	adds	r3, #32
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3324      	adds	r3, #36	@ 0x24
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	3301      	adds	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	791b      	ldrb	r3, [r3, #4]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3af      	bcc.n	80017ce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e044      	b.n	80018fe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3b5      	bcc.n	8001874 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7c1a      	ldrb	r2, [r3, #16]
 8001910:	f88d 2000 	strb.w	r2, [sp]
 8001914:	3304      	adds	r3, #4
 8001916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001918:	f004 f84e 	bl	80059b8 <USB_DevInit>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e013      	b.n	8001956 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f80b 	bl	8001960 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fa09 	bl	8005d66 <USB_DevDisconnect>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001990:	4313      	orrs	r3, r2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	10000003 	.word	0x10000003

080019a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_PWREx_ConfigSupply+0x70>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d00a      	beq.n	80019d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_PWREx_ConfigSupply+0x70>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01f      	b.n	8001a0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e01d      	b.n	8001a0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_PWREx_ConfigSupply+0x70>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	490f      	ldr	r1, [pc, #60]	@ (8001a18 <HAL_PWREx_ConfigSupply+0x70>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019e2:	f7ff fb9b 	bl	800111c <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019e8:	e009      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ea:	f7ff fb97 	bl	800111c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019f8:	d901      	bls.n	80019fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e007      	b.n	8001a0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_PWREx_ConfigSupply+0x70>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0a:	d1ee      	bne.n	80019ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024800 	.word	0x58024800

08001a1c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	58024800 	.word	0x58024800

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f000 bc48 	b.w	80022e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8088 	beq.w	8001b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5e:	4b99      	ldr	r3, [pc, #612]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a68:	4b96      	ldr	r3, [pc, #600]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d007      	beq.n	8001a84 <HAL_RCC_OscConfig+0x48>
 8001a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a76:	2b18      	cmp	r3, #24
 8001a78:	d111      	bne.n	8001a9e <HAL_RCC_OscConfig+0x62>
 8001a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b8f      	ldr	r3, [pc, #572]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d06d      	beq.n	8001b6c <HAL_RCC_OscConfig+0x130>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d169      	bne.n	8001b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f000 bc21 	b.w	80022e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x7a>
 8001aa8:	4b86      	ldr	r3, [pc, #536]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a85      	ldr	r2, [pc, #532]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0xd8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x9c>
 8001abe:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a80      	ldr	r2, [pc, #512]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7d      	ldr	r2, [pc, #500]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xd8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001ae2:	4b78      	ldr	r3, [pc, #480]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b75      	ldr	r3, [pc, #468]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a74      	ldr	r2, [pc, #464]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xd8>
 8001afc:	4b71      	ldr	r3, [pc, #452]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a70      	ldr	r2, [pc, #448]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6d      	ldr	r2, [pc, #436]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fafe 	bl	800111c <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fafa 	bl	800111c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e3d4      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b36:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff faea 	bl	800111c <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fae6 	bl	800111c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e3c0      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b5e:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x110>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80ca 	beq.w	8001d10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7c:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b86:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x166>
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	2b18      	cmp	r3, #24
 8001b96:	d156      	bne.n	8001c46 <HAL_RCC_OscConfig+0x20a>
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d151      	bne.n	8001c46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba2:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e392      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bba:	4b42      	ldr	r3, [pc, #264]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0219 	bic.w	r2, r3, #25
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	493f      	ldr	r1, [pc, #252]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff faa6 	bl	800111c <HAL_GetTick>
 8001bd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7ff faa2 	bl	800111c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e37c      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	f7ff fac3 	bl	800117c <HAL_GetREVID>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d817      	bhi.n	8001c30 <HAL_RCC_OscConfig+0x1f4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b40      	cmp	r3, #64	@ 0x40
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1de>
 8001c08:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c10:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	e07a      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	031b      	lsls	r3, r3, #12
 8001c28:	4926      	ldr	r1, [pc, #152]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2e:	e06f      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4921      	ldr	r1, [pc, #132]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c44:	e064      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d047      	beq.n	8001cde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0219 	bic.w	r2, r3, #25
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	491a      	ldr	r1, [pc, #104]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fa5c 	bl	800111c <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fa58 	bl	800111c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e332      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	f7ff fa79 	bl	800117c <HAL_GetREVID>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d819      	bhi.n	8001cc8 <HAL_RCC_OscConfig+0x28c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b40      	cmp	r3, #64	@ 0x40
 8001c9a:	d108      	bne.n	8001cae <HAL_RCC_OscConfig+0x272>
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001caa:	6053      	str	r3, [r2, #4]
 8001cac:	e030      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	031b      	lsls	r3, r3, #12
 8001cbc:	4901      	ldr	r1, [pc, #4]	@ (8001cc4 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
 8001cc2:	e025      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	4997      	ldr	r1, [pc, #604]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e018      	b.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b95      	ldr	r3, [pc, #596]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a94      	ldr	r2, [pc, #592]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff fa17 	bl	800111c <HAL_GetTick>
 8001cee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fa13 	bl	800111c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e2ed      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d04:	4b8b      	ldr	r3, [pc, #556]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a9 	beq.w	8001e70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4b85      	ldr	r3, [pc, #532]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d28:	4b82      	ldr	r3, [pc, #520]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d007      	beq.n	8001d44 <HAL_RCC_OscConfig+0x308>
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b18      	cmp	r3, #24
 8001d38:	d13a      	bne.n	8001db0 <HAL_RCC_OscConfig+0x374>
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d135      	bne.n	8001db0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d44:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x320>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b80      	cmp	r3, #128	@ 0x80
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e2c1      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d5c:	f7ff fa0e 	bl	800117c <HAL_GetREVID>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d817      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x35e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x348>
 8001d72:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d82:	e075      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	4968      	ldr	r1, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d98:	e06a      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d9a:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	4962      	ldr	r1, [pc, #392]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dae:	e05f      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d042      	beq.n	8001e3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f9aa 	bl	800111c <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f9a6 	bl	800111c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e280      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dde:	4b55      	ldr	r3, [pc, #340]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dea:	f7ff f9c7 	bl	800117c <HAL_GetREVID>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d817      	bhi.n	8001e28 <HAL_RCC_OscConfig+0x3ec>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d108      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3d6>
 8001e00:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e08:	4a4a      	ldr	r2, [pc, #296]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e0e:	6053      	str	r3, [r2, #4]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
 8001e12:	4b48      	ldr	r3, [pc, #288]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	4944      	ldr	r1, [pc, #272]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e023      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
 8001e28:	4b42      	ldr	r3, [pc, #264]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	493f      	ldr	r1, [pc, #252]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
 8001e3c:	e018      	b.n	8001e70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3c      	ldr	r2, [pc, #240]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f967 	bl	800111c <HAL_GetTick>
 8001e4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e52:	f7ff f963 	bl	800111c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e23d      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e64:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d036      	beq.n	8001eea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d019      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e84:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e88:	4a2a      	ldr	r2, [pc, #168]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f944 	bl	800111c <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff f940 	bl	800111c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e21a      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x45c>
 8001eb6:	e018      	b.n	8001eea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f92a 	bl	800111c <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f926 	bl	800111c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e200      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d039      	beq.n	8001f6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f907 	bl	800111c <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f12:	f7ff f903 	bl	800111c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1dd      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4d6>
 8001f30:	e01b      	b.n	8001f6a <HAL_RCC_OscConfig+0x52e>
 8001f32:	bf00      	nop
 8001f34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f38:	4b9b      	ldr	r3, [pc, #620]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a9a      	ldr	r2, [pc, #616]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f44:	f7ff f8ea 	bl	800111c <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4c:	f7ff f8e6 	bl	800111c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1c0      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f5e:	4b92      	ldr	r3, [pc, #584]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8081 	beq.w	800207a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f78:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_RCC_OscConfig+0x770>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a8b      	ldr	r2, [pc, #556]	@ (80021ac <HAL_RCC_OscConfig+0x770>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f84:	f7ff f8ca 	bl	800111c <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7ff f8c6 	bl	800111c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1a0      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9e:	4b83      	ldr	r3, [pc, #524]	@ (80021ac <HAL_RCC_OscConfig+0x770>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x584>
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbe:	e02d      	b.n	800201c <HAL_RCC_OscConfig+0x5e0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5a6>
 8001fc8:	4b77      	ldr	r3, [pc, #476]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fcc:	4a76      	ldr	r2, [pc, #472]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd4:	4b74      	ldr	r3, [pc, #464]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a73      	ldr	r2, [pc, #460]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x5e0>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x5c8>
 8001fea:	4b6f      	ldr	r3, [pc, #444]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	4a6e      	ldr	r2, [pc, #440]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0x5e0>
 8002004:	4b68      	ldr	r3, [pc, #416]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002008:	4a67      	ldr	r2, [pc, #412]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002010:	4b65      	ldr	r3, [pc, #404]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a64      	ldr	r2, [pc, #400]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f87a 	bl	800111c <HAL_GetTick>
 8002028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f876 	bl	800111c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e14e      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002042:	4b59      	ldr	r3, [pc, #356]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x5f0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff f864 	bl	800111c <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7ff f860 	bl	800111c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e138      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206e:	4b4e      	ldr	r3, [pc, #312]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 812d 	beq.w	80022de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002084:	4b48      	ldr	r3, [pc, #288]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800208c:	2b18      	cmp	r3, #24
 800208e:	f000 80bd 	beq.w	800220c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	2b02      	cmp	r3, #2
 8002098:	f040 809e 	bne.w	80021d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b42      	ldr	r3, [pc, #264]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a41      	ldr	r2, [pc, #260]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff f838 	bl	800111c <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f834 	bl	800111c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e10e      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c2:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b36      	ldr	r3, [pc, #216]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 80020d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020d2:	4b37      	ldr	r3, [pc, #220]	@ (80021b0 <HAL_RCC_OscConfig+0x774>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4931      	ldr	r1, [pc, #196]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	3b01      	subs	r3, #1
 80020ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f6:	3b01      	subs	r3, #1
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002102:	3b01      	subs	r3, #1
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	3b01      	subs	r3, #1
 8002112:	061b      	lsls	r3, r3, #24
 8002114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002118:	4923      	ldr	r1, [pc, #140]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800211e:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800212a:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800212c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800212e:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <HAL_RCC_OscConfig+0x778>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002136:	00d2      	lsls	r2, r2, #3
 8002138:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f023 020c 	bic.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4917      	ldr	r1, [pc, #92]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	f023 0202 	bic.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	4912      	ldr	r1, [pc, #72]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_RCC_OscConfig+0x76c>)
 8002198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe ffbd 	bl	800111c <HAL_GetTick>
 80021a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a4:	e011      	b.n	80021ca <HAL_RCC_OscConfig+0x78e>
 80021a6:	bf00      	nop
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58024800 	.word	0x58024800
 80021b0:	fffffc0c 	.word	0xfffffc0c
 80021b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe ffb0 	bl	800111c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e08a      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x77c>
 80021d6:	e082      	b.n	80022de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff9a 	bl	800111c <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe ff96 	bl	800111c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e070      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fe:	4b3a      	ldr	r3, [pc, #232]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x7b0>
 800220a:	e068      	b.n	80022de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800220c:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002212:	4b35      	ldr	r3, [pc, #212]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	2b01      	cmp	r3, #1
 800221e:	d031      	beq.n	8002284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0203 	and.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d12a      	bne.n	8002284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d122      	bne.n	8002284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d11a      	bne.n	8002284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0a5b      	lsrs	r3, r3, #9
 8002252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d111      	bne.n	8002284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0e1b      	lsrs	r3, r3, #24
 8002276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e02b      	b.n	80022e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002288:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002292:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	d01f      	beq.n	80022de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	4a11      	ldr	r2, [pc, #68]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022aa:	f7fe ff37 	bl	800111c <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022b0:	bf00      	nop
 80022b2:	f7fe ff33 	bl	800111c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d0f9      	beq.n	80022b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_RCC_OscConfig+0x8b0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ca:	00d2      	lsls	r2, r2, #3
 80022cc:	4906      	ldr	r1, [pc, #24]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022d2:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_RCC_OscConfig+0x8ac>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3730      	adds	r7, #48	@ 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	58024400 	.word	0x58024400
 80022ec:	ffff0007 	.word	0xffff0007

080022f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e19c      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b8a      	ldr	r3, [pc, #552]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d910      	bls.n	8002334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b87      	ldr	r3, [pc, #540]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 020f 	bic.w	r2, r3, #15
 800231a:	4985      	ldr	r1, [pc, #532]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b83      	ldr	r3, [pc, #524]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e184      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	4b7b      	ldr	r3, [pc, #492]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800234c:	429a      	cmp	r2, r3
 800234e:	d908      	bls.n	8002362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002350:	4b78      	ldr	r3, [pc, #480]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4975      	ldr	r1, [pc, #468]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 800235e:	4313      	orrs	r3, r2
 8002360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b70      	ldr	r3, [pc, #448]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800237a:	429a      	cmp	r2, r3
 800237c:	d908      	bls.n	8002390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800237e:	4b6d      	ldr	r3, [pc, #436]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	496a      	ldr	r1, [pc, #424]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 800238c:	4313      	orrs	r3, r2
 800238e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d908      	bls.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023ac:	4b61      	ldr	r3, [pc, #388]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	495e      	ldr	r1, [pc, #376]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d908      	bls.n	80023ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023da:	4b56      	ldr	r3, [pc, #344]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4953      	ldr	r1, [pc, #332]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	429a      	cmp	r2, r3
 8002406:	d908      	bls.n	800241a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b4a      	ldr	r3, [pc, #296]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4947      	ldr	r1, [pc, #284]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002416:	4313      	orrs	r3, r2
 8002418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d055      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002426:	4b43      	ldr	r3, [pc, #268]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4940      	ldr	r1, [pc, #256]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002434:	4313      	orrs	r3, r2
 8002436:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002440:	4b3c      	ldr	r3, [pc, #240]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d121      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0f6      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d107      	bne.n	8002468 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002458:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d115      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0ea      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002470:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0de      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002480:	4b2c      	ldr	r3, [pc, #176]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0d6      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4925      	ldr	r1, [pc, #148]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a2:	f7fe fe3b 	bl	800111c <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024aa:	f7fe fe37 	bl	800111c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0be      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d1eb      	bne.n	80024aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d208      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	490e      	ldr	r1, [pc, #56]	@ (8002534 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d214      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 020f 	bic.w	r2, r3, #15
 8002516:	4906      	ldr	r1, [pc, #24]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <HAL_RCC_ClockConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e086      	b.n	800263e <HAL_RCC_ClockConfig+0x34e>
 8002530:	52002000 	.word	0x52002000
 8002534:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002550:	429a      	cmp	r2, r3
 8002552:	d208      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002554:	4b3c      	ldr	r3, [pc, #240]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4939      	ldr	r1, [pc, #228]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002562:	4313      	orrs	r3, r2
 8002564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800257e:	429a      	cmp	r2, r3
 8002580:	d208      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	492e      	ldr	r1, [pc, #184]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d208      	bcs.n	80025c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4922      	ldr	r1, [pc, #136]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025da:	429a      	cmp	r2, r3
 80025dc:	d208      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4917      	ldr	r1, [pc, #92]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025f0:	f000 f834 	bl	800265c <HAL_RCC_GetSysClockFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	4912      	ldr	r1, [pc, #72]	@ (800264c <HAL_RCC_ClockConfig+0x35c>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_RCC_ClockConfig+0x358>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <HAL_RCC_ClockConfig+0x35c>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <HAL_RCC_ClockConfig+0x360>)
 8002626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <HAL_RCC_ClockConfig+0x364>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_ClockConfig+0x368>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fd28 	bl	8001088 <HAL_InitTick>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	58024400 	.word	0x58024400
 800264c:	08005e98 	.word	0x08005e98
 8002650:	24000014 	.word	0x24000014
 8002654:	24000010 	.word	0x24000010
 8002658:	24000018 	.word	0x24000018

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	@ 0x24
 8002660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002662:	4bb3      	ldr	r3, [pc, #716]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800266a:	2b18      	cmp	r3, #24
 800266c:	f200 8155 	bhi.w	800291a <HAL_RCC_GetSysClockFreq+0x2be>
 8002670:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	080026dd 	.word	0x080026dd
 800267c:	0800291b 	.word	0x0800291b
 8002680:	0800291b 	.word	0x0800291b
 8002684:	0800291b 	.word	0x0800291b
 8002688:	0800291b 	.word	0x0800291b
 800268c:	0800291b 	.word	0x0800291b
 8002690:	0800291b 	.word	0x0800291b
 8002694:	0800291b 	.word	0x0800291b
 8002698:	08002703 	.word	0x08002703
 800269c:	0800291b 	.word	0x0800291b
 80026a0:	0800291b 	.word	0x0800291b
 80026a4:	0800291b 	.word	0x0800291b
 80026a8:	0800291b 	.word	0x0800291b
 80026ac:	0800291b 	.word	0x0800291b
 80026b0:	0800291b 	.word	0x0800291b
 80026b4:	0800291b 	.word	0x0800291b
 80026b8:	08002709 	.word	0x08002709
 80026bc:	0800291b 	.word	0x0800291b
 80026c0:	0800291b 	.word	0x0800291b
 80026c4:	0800291b 	.word	0x0800291b
 80026c8:	0800291b 	.word	0x0800291b
 80026cc:	0800291b 	.word	0x0800291b
 80026d0:	0800291b 	.word	0x0800291b
 80026d4:	0800291b 	.word	0x0800291b
 80026d8:	0800270f 	.word	0x0800270f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026dc:	4b94      	ldr	r3, [pc, #592]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026e8:	4b91      	ldr	r3, [pc, #580]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	4a90      	ldr	r2, [pc, #576]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026fa:	e111      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026fe:	61bb      	str	r3, [r7, #24]
      break;
 8002700:	e10e      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002702:	4b8d      	ldr	r3, [pc, #564]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002704:	61bb      	str	r3, [r7, #24]
      break;
 8002706:	e10b      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002708:	4b8c      	ldr	r3, [pc, #560]	@ (800293c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800270a:	61bb      	str	r3, [r7, #24]
      break;
 800270c:	e108      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800270e:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002718:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002722:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002724:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800272e:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80e1 	beq.w	8002914 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b02      	cmp	r3, #2
 8002756:	f000 8083 	beq.w	8002860 <HAL_RCC_GetSysClockFreq+0x204>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b02      	cmp	r3, #2
 800275e:	f200 80a1 	bhi.w	80028a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x114>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d056      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x1c0>
 800276e:	e099      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002770:	4b6f      	ldr	r3, [pc, #444]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d02d      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800277c:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	4a6b      	ldr	r2, [pc, #428]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a6:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027d6:	e087      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002944 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800281a:	e065      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002948 <HAL_RCC_GetSysClockFreq+0x2ec>
 800282a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282e:	4b40      	ldr	r3, [pc, #256]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002842:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800284a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800285e:	e043      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800294c <HAL_RCC_GetSysClockFreq+0x2f0>
 800286e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002872:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002882:	ed97 6a02 	vldr	s12, [r7, #8]
 8002886:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002940 <HAL_RCC_GetSysClockFreq+0x2e4>
 800288a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028a2:	e021      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002948 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	0a5b      	lsrs	r3, r3, #9
 80028ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028f2:	3301      	adds	r3, #1
 80028f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002900:	edd7 6a07 	vldr	s13, [r7, #28]
 8002904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290c:	ee17 3a90 	vmov	r3, s15
 8002910:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800291c:	61bb      	str	r3, [r7, #24]
      break;
 800291e:	bf00      	nop
  }

  return sysclockfreq;
 8002920:	69bb      	ldr	r3, [r7, #24]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	58024400 	.word	0x58024400
 8002934:	03d09000 	.word	0x03d09000
 8002938:	003d0900 	.word	0x003d0900
 800293c:	007a1200 	.word	0x007a1200
 8002940:	46000000 	.word	0x46000000
 8002944:	4c742400 	.word	0x4c742400
 8002948:	4a742400 	.word	0x4a742400
 800294c:	4af42400 	.word	0x4af42400

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002956:	f7ff fe81 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490f      	ldr	r1, [pc, #60]	@ (80029a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800298c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800298e:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	58024400 	.word	0x58024400
 80029a4:	08005e98 	.word	0x08005e98
 80029a8:	24000014 	.word	0x24000014
 80029ac:	24000010 	.word	0x24000010

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80029b4:	f7ff ffcc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4904      	ldr	r1, [pc, #16]	@ (80029d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	58024400 	.word	0x58024400
 80029d8:	08005e98 	.word	0x08005e98

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80029e0:	f7ff ffb6 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4904      	ldr	r1, [pc, #16]	@ (8002a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	58024400 	.word	0x58024400
 8002a04:	08005e98 	.word	0x08005e98

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a0c:	b0ca      	sub	sp, #296	@ 0x128
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	ea54 0305 	orrs.w	r3, r4, r5
 8002a32:	d049      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a3e:	d02f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a44:	d828      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a4a:	d01a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a50:	d822      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5a:	d007      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5e:	4bb8      	ldr	r3, [pc, #736]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4ab7      	ldr	r2, [pc, #732]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a6a:	e01a      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a70:	3308      	adds	r3, #8
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fc8f 	bl	8004398 <RCCEx_PLL2_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a80:	e00f      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a86:	3328      	adds	r3, #40	@ 0x28
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 fd36 	bl	80044fc <RCCEx_PLL3_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a96:	e004      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002aaa:	4ba5      	ldr	r3, [pc, #660]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aba:	430b      	orrs	r3, r1
 8002abc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002abe:	e003      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ad4:	f04f 0900 	mov.w	r9, #0
 8002ad8:	ea58 0309 	orrs.w	r3, r8, r9
 8002adc:	d047      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d82a      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b05 	.word	0x08002b05
 8002af4:	08002b13 	.word	0x08002b13
 8002af8:	08002b29 	.word	0x08002b29
 8002afc:	08002b47 	.word	0x08002b47
 8002b00:	08002b47 	.word	0x08002b47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b04:	4b8e      	ldr	r3, [pc, #568]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	4a8d      	ldr	r2, [pc, #564]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b10:	e01a      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b16:	3308      	adds	r3, #8
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fc3c 	bl	8004398 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b26:	e00f      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	3328      	adds	r3, #40	@ 0x28
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fce3 	bl	80044fc <RCCEx_PLL3_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b3c:	e004      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b44:	e000      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b50:	4b7b      	ldr	r3, [pc, #492]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	f023 0107 	bic.w	r1, r3, #7
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	4a78      	ldr	r2, [pc, #480]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b64:	e003      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b7a:	f04f 0b00 	mov.w	fp, #0
 8002b7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b82:	d04c      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b8e:	d030      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b94:	d829      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b98:	d02d      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b9c:	d825      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ba0:	d018      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d821      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002bae:	e01c      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb0:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	4a62      	ldr	r2, [pc, #392]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fbe6 	bl	8004398 <RCCEx_PLL2_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd8:	3328      	adds	r3, #40	@ 0x28
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fc8d 	bl	80044fc <RCCEx_PLL3_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002be8:	e006      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c00:	4b4f      	ldr	r3, [pc, #316]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c14:	e003      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	d053      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c4a:	d035      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c50:	d82e      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c56:	d031      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c5c:	d828      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c62:	d01a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c68:	d822      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c72:	d007      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c76:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	4a31      	ldr	r2, [pc, #196]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c82:	e01c      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c88:	3308      	adds	r3, #8
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fb83 	bl	8004398 <RCCEx_PLL2_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c98:	e011      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9e:	3328      	adds	r3, #40	@ 0x28
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 fc2a 	bl	80044fc <RCCEx_PLL3_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cae:	e006      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cdc:	e003      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002cf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002d00:	460b      	mov	r3, r1
 8002d02:	4313      	orrs	r3, r2
 8002d04:	d056      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d12:	d038      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d18:	d831      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d1e:	d034      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002d20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d24:	d82b      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d2a:	d01d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d30:	d825      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d3c:	e01f      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d44:	4ba2      	ldr	r3, [pc, #648]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	4aa1      	ldr	r2, [pc, #644]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d50:	e01c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d56:	3308      	adds	r3, #8
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fb1c 	bl	8004398 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d66:	e011      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6c:	3328      	adds	r3, #40	@ 0x28
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fbc3 	bl	80044fc <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d94:	4b8e      	ldr	r3, [pc, #568]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002da4:	4a8a      	ldr	r2, [pc, #552]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002da6:	430b      	orrs	r3, r1
 8002da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002daa:	e003      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002dca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	d03a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	2b30      	cmp	r3, #48	@ 0x30
 8002ddc:	d01f      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002dde:	2b30      	cmp	r3, #48	@ 0x30
 8002de0:	d819      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d00c      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d815      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d019      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d111      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df2:	4b77      	ldr	r3, [pc, #476]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	4a76      	ldr	r2, [pc, #472]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dfe:	e011      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e04:	3308      	adds	r3, #8
 8002e06:	2102      	movs	r1, #2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fac5 	bl	8004398 <RCCEx_PLL2_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e1c:	e002      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e2c:	4b68      	ldr	r3, [pc, #416]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	4a65      	ldr	r2, [pc, #404]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e40:	e003      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4313      	orrs	r3, r2
 8002e68:	d051      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e74:	d035      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e7a:	d82e      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e80:	d031      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e86:	d828      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e8c:	d01a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e92:	d822      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e9c:	d007      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e9e:	e01c      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fa6e 	bl	8004398 <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ec2:	e011      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	3328      	adds	r3, #40	@ 0x28
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fb15 	bl	80044fc <RCCEx_PLL3_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ef0:	4b37      	ldr	r3, [pc, #220]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efe:	4a34      	ldr	r2, [pc, #208]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f04:	e003      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	d056      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f38:	d033      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f3e:	d82c      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f44:	d02f      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f4a:	d826      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f50:	d02b      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f56:	d820      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f5c:	d012      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f62:	d81a      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6c:	d115      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f72:	3308      	adds	r3, #8
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fa0e 	bl	8004398 <RCCEx_PLL2_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f82:	e015      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f88:	3328      	adds	r3, #40	@ 0x28
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fab5 	bl	80044fc <RCCEx_PLL3_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fa0:	e006      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fa2:	bf00      	nop
 8002fa4:	e004      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc6:	4a02      	ldr	r2, [pc, #8]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fce:	bf00      	nop
 8002fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	d055      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003008:	d033      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800300a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800300e:	d82c      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003014:	d02f      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301a:	d826      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800301c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003020:	d02b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003022:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003026:	d820      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800302c:	d012      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800302e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003032:	d81a      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800303c:	d115      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003042:	3308      	adds	r3, #8
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f9a6 	bl	8004398 <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003052:	e015      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003058:	3328      	adds	r3, #40	@ 0x28
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fa4d 	bl	80044fc <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003068:	e00a      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003088:	4ba3      	ldr	r3, [pc, #652]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003098:	4a9f      	ldr	r2, [pc, #636]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309a:	430b      	orrs	r3, r1
 800309c:	6593      	str	r3, [r2, #88]	@ 0x58
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80030b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80030be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030c2:	460b      	mov	r3, r1
 80030c4:	4313      	orrs	r3, r2
 80030c6:	d037      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d2:	d00e      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d8:	d816      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d018      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80030de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030e2:	d111      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030f0:	e00f      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f6:	3308      	adds	r3, #8
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f94c 	bl	8004398 <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003106:	e004      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800311a:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800311c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a7b      	ldr	r2, [pc, #492]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800312a:	430b      	orrs	r3, r1
 800312c:	6513      	str	r3, [r2, #80]	@ 0x50
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800314e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003152:	460b      	mov	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	d039      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315e:	2b03      	cmp	r3, #3
 8003160:	d81c      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	080031a5 	.word	0x080031a5
 800316c:	08003179 	.word	0x08003179
 8003170:	08003187 	.word	0x08003187
 8003174:	080031a5 	.word	0x080031a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003178:	4b67      	ldr	r3, [pc, #412]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	4a66      	ldr	r2, [pc, #408]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800317e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003184:	e00f      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318a:	3308      	adds	r3, #8
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f902 	bl	8004398 <RCCEx_PLL2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b2:	f023 0103 	bic.w	r1, r3, #3
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f000 809f 	beq.w	800332c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ee:	4b4b      	ldr	r3, [pc, #300]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4a      	ldr	r2, [pc, #296]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031fa:	f7fd ff8f 	bl	800111c <HAL_GetTick>
 80031fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003202:	e00b      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd ff8a 	bl	800111c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	@ 0x64
 8003212:	d903      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800321c:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ed      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322c:	2b00      	cmp	r3, #0
 800322e:	d179      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003230:	4b39      	ldr	r3, [pc, #228]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800323c:	4053      	eors	r3, r2
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003246:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800324e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	4a30      	ldr	r2, [pc, #192]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325e:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	4a2d      	ldr	r2, [pc, #180]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003268:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800326a:	4a2b      	ldr	r2, [pc, #172]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003270:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800327a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327e:	d118      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd ff4c 	bl	800111c <HAL_GetTick>
 8003284:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003288:	e00d      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd ff47 	bl	800111c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	f241 3388 	movw	r3, #5000	@ 0x1388
 800329a:	429a      	cmp	r2, r3
 800329c:	d903      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80032a4:	e005      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0eb      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d129      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ca:	d10e      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80032cc:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032dc:	091a      	lsrs	r2, r3, #4
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6113      	str	r3, [r2, #16]
 80032e8:	e005      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032f4:	6113      	str	r3, [r2, #16]
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	e00e      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800330e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003318:	58024400 	.word	0x58024400
 800331c:	58024800 	.word	0x58024800
 8003320:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f002 0301 	and.w	r3, r2, #1
 8003338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003342:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003346:	460b      	mov	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	f000 8089 	beq.w	8003460 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003354:	2b28      	cmp	r3, #40	@ 0x28
 8003356:	d86b      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003439 	.word	0x08003439
 8003364:	08003431 	.word	0x08003431
 8003368:	08003431 	.word	0x08003431
 800336c:	08003431 	.word	0x08003431
 8003370:	08003431 	.word	0x08003431
 8003374:	08003431 	.word	0x08003431
 8003378:	08003431 	.word	0x08003431
 800337c:	08003431 	.word	0x08003431
 8003380:	08003405 	.word	0x08003405
 8003384:	08003431 	.word	0x08003431
 8003388:	08003431 	.word	0x08003431
 800338c:	08003431 	.word	0x08003431
 8003390:	08003431 	.word	0x08003431
 8003394:	08003431 	.word	0x08003431
 8003398:	08003431 	.word	0x08003431
 800339c:	08003431 	.word	0x08003431
 80033a0:	0800341b 	.word	0x0800341b
 80033a4:	08003431 	.word	0x08003431
 80033a8:	08003431 	.word	0x08003431
 80033ac:	08003431 	.word	0x08003431
 80033b0:	08003431 	.word	0x08003431
 80033b4:	08003431 	.word	0x08003431
 80033b8:	08003431 	.word	0x08003431
 80033bc:	08003431 	.word	0x08003431
 80033c0:	08003439 	.word	0x08003439
 80033c4:	08003431 	.word	0x08003431
 80033c8:	08003431 	.word	0x08003431
 80033cc:	08003431 	.word	0x08003431
 80033d0:	08003431 	.word	0x08003431
 80033d4:	08003431 	.word	0x08003431
 80033d8:	08003431 	.word	0x08003431
 80033dc:	08003431 	.word	0x08003431
 80033e0:	08003439 	.word	0x08003439
 80033e4:	08003431 	.word	0x08003431
 80033e8:	08003431 	.word	0x08003431
 80033ec:	08003431 	.word	0x08003431
 80033f0:	08003431 	.word	0x08003431
 80033f4:	08003431 	.word	0x08003431
 80033f8:	08003431 	.word	0x08003431
 80033fc:	08003431 	.word	0x08003431
 8003400:	08003439 	.word	0x08003439
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	3308      	adds	r3, #8
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 ffc3 	bl	8004398 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003418:	e00f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	3328      	adds	r3, #40	@ 0x28
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f86a 	bl	80044fc <RCCEx_PLL3_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003442:	4bbf      	ldr	r3, [pc, #764]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003450:	4abb      	ldr	r2, [pc, #748]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6553      	str	r3, [r2, #84]	@ 0x54
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 0302 	and.w	r3, r2, #2
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003476:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d041      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003486:	2b05      	cmp	r3, #5
 8003488:	d824      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034a9 	.word	0x080034a9
 8003498:	080034bf 	.word	0x080034bf
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034dd 	.word	0x080034dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	3308      	adds	r3, #8
 80034ae:	2101      	movs	r1, #1
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 ff71 	bl	8004398 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034bc:	e00f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	3328      	adds	r3, #40	@ 0x28
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 f818 	bl	80044fc <RCCEx_PLL3_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034d2:	e004      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034e6:	4b96      	ldr	r3, [pc, #600]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	f023 0107 	bic.w	r1, r3, #7
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034f4:	4a92      	ldr	r2, [pc, #584]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80034fa:	e003      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f002 0304 	and.w	r3, r2, #4
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800351a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d044      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352c:	2b05      	cmp	r3, #5
 800352e:	d825      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003530:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	08003585 	.word	0x08003585
 800353c:	08003551 	.word	0x08003551
 8003540:	08003567 	.word	0x08003567
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f000 ff1d 	bl	8004398 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003564:	e00f      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	3328      	adds	r3, #40	@ 0x28
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ffc4 	bl	80044fc <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800358e:	4b6c      	ldr	r3, [pc, #432]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	f023 0107 	bic.w	r1, r3, #7
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359e:	4a68      	ldr	r2, [pc, #416]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a4:	e003      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f002 0320 	and.w	r3, r2, #32
 80035ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035c8:	460b      	mov	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	d055      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035da:	d033      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80035dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e0:	d82c      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e6:	d02f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ec:	d826      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035f2:	d02b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80035f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035f8:	d820      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035fe:	d012      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003604:	d81a      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d022      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800360a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800360e:	d115      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	3308      	adds	r3, #8
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f000 febd 	bl	8004398 <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003624:	e015      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	3328      	adds	r3, #40	@ 0x28
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ff64 	bl	80044fc <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800363a:	e00a      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003642:	e006      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003644:	bf00      	nop
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800365c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003690:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d058      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036a6:	d033      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80036a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036ac:	d82c      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b2:	d02f      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b8:	d826      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036be:	d02b      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80036c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036c4:	d820      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ca:	d012      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80036cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d0:	d81a      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d022      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036da:	d115      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	3308      	adds	r3, #8
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fe57 	bl	8004398 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036f0:	e015      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f6:	3328      	adds	r3, #40	@ 0x28
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fefe 	bl	80044fc <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003706:	e00a      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003736:	4a02      	ldr	r2, [pc, #8]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6593      	str	r3, [r2, #88]	@ 0x58
 800373c:	e006      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003762:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d055      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003774:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003778:	d033      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800377a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800377e:	d82c      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003784:	d02f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378a:	d826      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800378c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003790:	d02b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003792:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003796:	d820      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800379c:	d012      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800379e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a2:	d81a      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ac:	d115      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3308      	adds	r3, #8
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fdee 	bl	8004398 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037c2:	e015      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3328      	adds	r3, #40	@ 0x28
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fe95 	bl	80044fc <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037d8:	e00a      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003808:	4a9d      	ldr	r2, [pc, #628]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800380a:	430b      	orrs	r3, r1
 800380c:	6593      	str	r3, [r2, #88]	@ 0x58
 800380e:	e003      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f002 0308 	and.w	r3, r2, #8
 8003824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800382e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d01e      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003844:	d10c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	3328      	adds	r3, #40	@ 0x28
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fe54 	bl	80044fc <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003860:	4b87      	ldr	r3, [pc, #540]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003870:	4a83      	ldr	r2, [pc, #524]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003872:	430b      	orrs	r3, r1
 8003874:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f002 0310 	and.w	r3, r2, #16
 8003882:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800388c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003890:	460b      	mov	r3, r1
 8003892:	4313      	orrs	r3, r2
 8003894:	d01e      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800389e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a2:	d10c      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	3328      	adds	r3, #40	@ 0x28
 80038aa:	2102      	movs	r1, #2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fe25 	bl	80044fc <RCCEx_PLL3_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d03e      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003900:	d022      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003906:	d81b      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d00b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003912:	e015      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	3308      	adds	r3, #8
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fd3b 	bl	8004398 <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2102      	movs	r1, #2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fde2 	bl	80044fc <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003952:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003962:	4a47      	ldr	r2, [pc, #284]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6593      	str	r3, [r2, #88]	@ 0x58
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800397e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003980:	2300      	movs	r3, #0
 8003982:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003984:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003988:	460b      	mov	r3, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	d03b      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800399a:	d01f      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800399c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039a0:	d818      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80039a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ac:	d007      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4b33      	ldr	r3, [pc, #204]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	4a32      	ldr	r2, [pc, #200]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	3328      	adds	r3, #40	@ 0x28
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd98 	bl	80044fc <RCCEx_PLL3_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e6:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	4a22      	ldr	r2, [pc, #136]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a14:	2300      	movs	r3, #0
 8003a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	d034      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a30:	d007      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003a32:	e011      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4a11      	ldr	r2, [pc, #68]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a40:	e00e      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	3308      	adds	r3, #8
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fca4 	bl	8004398 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a76:	4a02      	ldr	r2, [pc, #8]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7c:	e006      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	3328      	adds	r3, #40	@ 0x28
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd23 	bl	80044fc <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d038      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aea:	d018      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003aec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af0:	d811      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af6:	d014      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afc:	d80b      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d011      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b06:	d106      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4bc3      	ldr	r3, [pc, #780]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4ac2      	ldr	r2, [pc, #776]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1c:	e004      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b30:	4bb9      	ldr	r3, [pc, #740]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b40:	4ab5      	ldr	r2, [pc, #724]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b5e:	2300      	movs	r3, #0
 8003b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b6c:	4baa      	ldr	r3, [pc, #680]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	4aa7      	ldr	r2, [pc, #668]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b8e:	2300      	movs	r3, #0
 8003b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bac:	4a9a      	ldr	r2, [pc, #616]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bce:	4b92      	ldr	r3, [pc, #584]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003bee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfe:	4b86      	ldr	r3, [pc, #536]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4a85      	ldr	r2, [pc, #532]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c08:	6113      	str	r3, [r2, #16]
 8003c0a:	4b83      	ldr	r3, [pc, #524]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0c:	6919      	ldr	r1, [r3, #16]
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c16:	4a80      	ldr	r2, [pc, #512]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c38:	4b77      	ldr	r3, [pc, #476]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	4a74      	ldr	r2, [pc, #464]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c68:	4b6b      	ldr	r3, [pc, #428]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c78:	4a67      	ldr	r2, [pc, #412]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	2100      	movs	r1, #0
 8003c88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb78 	bl	8004398 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6239      	str	r1, [r7, #32]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	3308      	adds	r3, #8
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb58 	bl	8004398 <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	2100      	movs	r1, #0
 8003d08:	61b9      	str	r1, [r7, #24]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d011      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1e:	3308      	adds	r3, #8
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb38 	bl	8004398 <RCCEx_PLL2_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	2100      	movs	r1, #0
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d011      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fbca 	bl	80044fc <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	2100      	movs	r1, #0
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d011      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	3328      	adds	r3, #40	@ 0x28
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fbaa 	bl	80044fc <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d011      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	3328      	adds	r3, #40	@ 0x28
 8003de0:	2102      	movs	r1, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb8a 	bl	80044fc <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003dfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003e12:	46bd      	mov	sp, r7
 8003e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e18:	58024400 	.word	0x58024400

08003e1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e20:	f7fe fd96 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4904      	ldr	r1, [pc, #16]	@ (8003e44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	58024400 	.word	0x58024400
 8003e44:	08005e98 	.word	0x08005e98

08003e48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	@ 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e50:	4ba1      	ldr	r3, [pc, #644]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003e5a:	4b9f      	ldr	r3, [pc, #636]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	0b1b      	lsrs	r3, r3, #12
 8003e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e66:	4b9c      	ldr	r3, [pc, #624]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e72:	4b99      	ldr	r3, [pc, #612]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8111 	beq.w	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	f000 8083 	beq.w	8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	f200 80a1 	bhi.w	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d056      	beq.n	8003f60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003eb2:	e099      	b.n	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eb4:	4b88      	ldr	r3, [pc, #544]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02d      	beq.n	8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ec0:	4b85      	ldr	r3, [pc, #532]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	4a84      	ldr	r2, [pc, #528]	@ (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eea:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003efe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f1a:	e087      	b.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f5e:	e065      	b.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa2:	e043      	b.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b48      	ldr	r3, [pc, #288]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe6:	e021      	b.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a03 	vldr	s12, [r7, #12]
 800400e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800402c:	4b2a      	ldr	r3, [pc, #168]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	0a5b      	lsrs	r3, r3, #9
 8004032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004046:	edd7 6a07 	vldr	s13, [r7, #28]
 800404a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004052:	ee17 2a90 	vmov	r2, s15
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800405a:	4b1f      	ldr	r3, [pc, #124]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004074:	edd7 6a07 	vldr	s13, [r7, #28]
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 2a90 	vmov	r2, s15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004088:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800409e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ae:	ee17 2a90 	vmov	r2, s15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	3724      	adds	r7, #36	@ 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
 80040dc:	03d09000 	.word	0x03d09000
 80040e0:	46000000 	.word	0x46000000
 80040e4:	4c742400 	.word	0x4c742400
 80040e8:	4a742400 	.word	0x4a742400
 80040ec:	4af42400 	.word	0x4af42400

080040f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	@ 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004102:	4b9f      	ldr	r3, [pc, #636]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	0d1b      	lsrs	r3, r3, #20
 8004108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800410c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800410e:	4b9c      	ldr	r3, [pc, #624]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800411a:	4b99      	ldr	r3, [pc, #612]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8111 	beq.w	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b02      	cmp	r3, #2
 8004142:	f000 8083 	beq.w	800424c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b02      	cmp	r3, #2
 800414a:	f200 80a1 	bhi.w	8004290 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d056      	beq.n	8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800415a:	e099      	b.n	8004290 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800415c:	4b88      	ldr	r3, [pc, #544]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02d      	beq.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004168:	4b85      	ldr	r3, [pc, #532]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	4a84      	ldr	r2, [pc, #528]	@ (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041c2:	e087      	b.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004206:	e065      	b.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b59      	ldr	r3, [pc, #356]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	ed97 6a03 	vldr	s12, [r7, #12]
 800422e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800424a:	e043      	b.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b48      	ldr	r3, [pc, #288]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004272:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800428e:	e021      	b.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80042d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	0a5b      	lsrs	r3, r3, #9
 80042da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fa:	ee17 2a90 	vmov	r2, s15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004302:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004328:	ee17 2a90 	vmov	r2, s15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004330:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800434a:	edd7 6a07 	vldr	s13, [r7, #28]
 800434e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004356:	ee17 2a90 	vmov	r2, s15
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	3724      	adds	r7, #36	@ 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	03d09000 	.word	0x03d09000
 8004388:	46000000 	.word	0x46000000
 800438c:	4c742400 	.word	0x4c742400
 8004390:	4a742400 	.word	0x4a742400
 8004394:	4af42400 	.word	0x4af42400

08004398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043a6:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d101      	bne.n	80043b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e099      	b.n	80044ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043b6:	4b4f      	ldr	r3, [pc, #316]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4e      	ldr	r2, [pc, #312]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c2:	f7fc feab 	bl	800111c <HAL_GetTick>
 80043c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043c8:	e008      	b.n	80043dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043ca:	f7fc fea7 	bl	800111c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e086      	b.n	80044ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043dc:	4b45      	ldr	r3, [pc, #276]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043e8:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	493f      	ldr	r1, [pc, #252]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	3b01      	subs	r3, #1
 8004402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	3b01      	subs	r3, #1
 800440c:	025b      	lsls	r3, r3, #9
 800440e:	b29b      	uxth	r3, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	3b01      	subs	r3, #1
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800442c:	4931      	ldr	r1, [pc, #196]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004432:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	492d      	ldr	r1, [pc, #180]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004444:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f023 0220 	bic.w	r2, r3, #32
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4928      	ldr	r1, [pc, #160]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004456:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004466:	4b24      	ldr	r3, [pc, #144]	@ (80044f8 <RCCEx_PLL2_Config+0x160>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	69d2      	ldr	r2, [r2, #28]
 800446e:	00d2      	lsls	r2, r2, #3
 8004470:	4920      	ldr	r1, [pc, #128]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004476:	4b1f      	ldr	r3, [pc, #124]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800447c:	f043 0310 	orr.w	r3, r3, #16
 8004480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004488:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800448e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004494:	e00f      	b.n	80044b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044a8:	e005      	b.n	80044b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044aa:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	4a11      	ldr	r2, [pc, #68]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c2:	f7fc fe2b 	bl	800111c <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044c8:	e008      	b.n	80044dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044ca:	f7fc fe27 	bl	800111c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e006      	b.n	80044ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <RCCEx_PLL2_Config+0x15c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	ffff0007 	.word	0xffff0007

080044fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800450a:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b03      	cmp	r3, #3
 8004514:	d101      	bne.n	800451a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e099      	b.n	800464e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800451a:	4b4f      	ldr	r3, [pc, #316]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a4e      	ldr	r2, [pc, #312]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fc fdf9 	bl	800111c <HAL_GetTick>
 800452a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800452c:	e008      	b.n	8004540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800452e:	f7fc fdf5 	bl	800111c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e086      	b.n	800464e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004540:	4b45      	ldr	r3, [pc, #276]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800454c:	4b42      	ldr	r3, [pc, #264]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	051b      	lsls	r3, r3, #20
 800455a:	493f      	ldr	r1, [pc, #252]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	3b01      	subs	r3, #1
 8004566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	3b01      	subs	r3, #1
 8004570:	025b      	lsls	r3, r3, #9
 8004572:	b29b      	uxth	r3, r3
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	3b01      	subs	r3, #1
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004590:	4931      	ldr	r1, [pc, #196]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004596:	4b30      	ldr	r3, [pc, #192]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	492d      	ldr	r1, [pc, #180]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	4928      	ldr	r1, [pc, #160]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045ba:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045be:	4a26      	ldr	r2, [pc, #152]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045c6:	4b24      	ldr	r3, [pc, #144]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <RCCEx_PLL3_Config+0x160>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	69d2      	ldr	r2, [r2, #28]
 80045d2:	00d2      	lsls	r2, r2, #3
 80045d4:	4920      	ldr	r1, [pc, #128]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045da:	4b1f      	ldr	r3, [pc, #124]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 80045f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045f8:	e00f      	b.n	800461a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004600:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800460a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800460c:	e005      	b.n	800461a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fc fd79 	bl	800111c <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800462c:	e008      	b.n	8004640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800462e:	f7fc fd75 	bl	800111c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e006      	b.n	800464e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <RCCEx_PLL3_Config+0x15c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
 800465c:	ffff0007 	.word	0xffff0007

08004660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e042      	b.n	80046f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fc fb79 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2224      	movs	r2, #36	@ 0x24
 800468e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fd90 	bl	80051d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f825 	bl	8004700 <UART_SetConfig>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01b      	b.n	80046f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fe0f 	bl	8005314 <UART_CheckIdleState>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b092      	sub	sp, #72	@ 0x48
 8004706:	af00      	add	r7, sp, #0
 8004708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	431a      	orrs	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	431a      	orrs	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4313      	orrs	r3, r2
 8004726:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4bbe      	ldr	r3, [pc, #760]	@ (8004a28 <UART_SetConfig+0x328>)
 8004730:	4013      	ands	r3, r2
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004738:	430b      	orrs	r3, r1
 800473a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4ab3      	ldr	r2, [pc, #716]	@ (8004a2c <UART_SetConfig+0x32c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004768:	4313      	orrs	r3, r2
 800476a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	4baf      	ldr	r3, [pc, #700]	@ (8004a30 <UART_SetConfig+0x330>)
 8004774:	4013      	ands	r3, r2
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800477c:	430b      	orrs	r3, r1
 800477e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	f023 010f 	bic.w	r1, r3, #15
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4aa6      	ldr	r2, [pc, #664]	@ (8004a34 <UART_SetConfig+0x334>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d177      	bne.n	8004890 <UART_SetConfig+0x190>
 80047a0:	4ba5      	ldr	r3, [pc, #660]	@ (8004a38 <UART_SetConfig+0x338>)
 80047a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a8:	2b28      	cmp	r3, #40	@ 0x28
 80047aa:	d86d      	bhi.n	8004888 <UART_SetConfig+0x188>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <UART_SetConfig+0xb4>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	08004859 	.word	0x08004859
 80047b8:	08004889 	.word	0x08004889
 80047bc:	08004889 	.word	0x08004889
 80047c0:	08004889 	.word	0x08004889
 80047c4:	08004889 	.word	0x08004889
 80047c8:	08004889 	.word	0x08004889
 80047cc:	08004889 	.word	0x08004889
 80047d0:	08004889 	.word	0x08004889
 80047d4:	08004861 	.word	0x08004861
 80047d8:	08004889 	.word	0x08004889
 80047dc:	08004889 	.word	0x08004889
 80047e0:	08004889 	.word	0x08004889
 80047e4:	08004889 	.word	0x08004889
 80047e8:	08004889 	.word	0x08004889
 80047ec:	08004889 	.word	0x08004889
 80047f0:	08004889 	.word	0x08004889
 80047f4:	08004869 	.word	0x08004869
 80047f8:	08004889 	.word	0x08004889
 80047fc:	08004889 	.word	0x08004889
 8004800:	08004889 	.word	0x08004889
 8004804:	08004889 	.word	0x08004889
 8004808:	08004889 	.word	0x08004889
 800480c:	08004889 	.word	0x08004889
 8004810:	08004889 	.word	0x08004889
 8004814:	08004871 	.word	0x08004871
 8004818:	08004889 	.word	0x08004889
 800481c:	08004889 	.word	0x08004889
 8004820:	08004889 	.word	0x08004889
 8004824:	08004889 	.word	0x08004889
 8004828:	08004889 	.word	0x08004889
 800482c:	08004889 	.word	0x08004889
 8004830:	08004889 	.word	0x08004889
 8004834:	08004879 	.word	0x08004879
 8004838:	08004889 	.word	0x08004889
 800483c:	08004889 	.word	0x08004889
 8004840:	08004889 	.word	0x08004889
 8004844:	08004889 	.word	0x08004889
 8004848:	08004889 	.word	0x08004889
 800484c:	08004889 	.word	0x08004889
 8004850:	08004889 	.word	0x08004889
 8004854:	08004881 	.word	0x08004881
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e222      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e21e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e21a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e216      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004878:	2320      	movs	r3, #32
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e212      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004880:	2340      	movs	r3, #64	@ 0x40
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e20e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e20a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a69      	ldr	r2, [pc, #420]	@ (8004a3c <UART_SetConfig+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d130      	bne.n	80048fc <UART_SetConfig+0x1fc>
 800489a:	4b67      	ldr	r3, [pc, #412]	@ (8004a38 <UART_SetConfig+0x338>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d826      	bhi.n	80048f4 <UART_SetConfig+0x1f4>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x1ac>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048c5 	.word	0x080048c5
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	080048d5 	.word	0x080048d5
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e1ec      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e1e8      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e1e4      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e1e0      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048e4:	2320      	movs	r3, #32
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e1dc      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048ec:	2340      	movs	r3, #64	@ 0x40
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e1d8      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fa:	e1d4      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a4f      	ldr	r2, [pc, #316]	@ (8004a40 <UART_SetConfig+0x340>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d130      	bne.n	8004968 <UART_SetConfig+0x268>
 8004906:	4b4c      	ldr	r3, [pc, #304]	@ (8004a38 <UART_SetConfig+0x338>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b05      	cmp	r3, #5
 8004910:	d826      	bhi.n	8004960 <UART_SetConfig+0x260>
 8004912:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <UART_SetConfig+0x218>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004931 	.word	0x08004931
 800491c:	08004939 	.word	0x08004939
 8004920:	08004941 	.word	0x08004941
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e1b6      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e1b2      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e1ae      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e1aa      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004950:	2320      	movs	r3, #32
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e1a6      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004958:	2340      	movs	r3, #64	@ 0x40
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e1a2      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004960:	2380      	movs	r3, #128	@ 0x80
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e19e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a35      	ldr	r2, [pc, #212]	@ (8004a44 <UART_SetConfig+0x344>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d130      	bne.n	80049d4 <UART_SetConfig+0x2d4>
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <UART_SetConfig+0x338>)
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b05      	cmp	r3, #5
 800497c:	d826      	bhi.n	80049cc <UART_SetConfig+0x2cc>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <UART_SetConfig+0x284>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	0800499d 	.word	0x0800499d
 8004988:	080049a5 	.word	0x080049a5
 800498c:	080049ad 	.word	0x080049ad
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e180      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e17c      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e178      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e174      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049bc:	2320      	movs	r3, #32
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e170      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049c4:	2340      	movs	r3, #64	@ 0x40
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e16c      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e168      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a48 <UART_SetConfig+0x348>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d142      	bne.n	8004a64 <UART_SetConfig+0x364>
 80049de:	4b16      	ldr	r3, [pc, #88]	@ (8004a38 <UART_SetConfig+0x338>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d838      	bhi.n	8004a5c <UART_SetConfig+0x35c>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0x2f0>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a09 	.word	0x08004a09
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a4d 	.word	0x08004a4d
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e14a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e146      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e142      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e13e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a28:	cfff69f3 	.word	0xcfff69f3
 8004a2c:	58000c00 	.word	0x58000c00
 8004a30:	11fff4ff 	.word	0x11fff4ff
 8004a34:	40011000 	.word	0x40011000
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	40004800 	.word	0x40004800
 8004a44:	40004c00 	.word	0x40004c00
 8004a48:	40005000 	.word	0x40005000
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e128      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a54:	2340      	movs	r3, #64	@ 0x40
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e124      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a62:	e120      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4acb      	ldr	r2, [pc, #812]	@ (8004d98 <UART_SetConfig+0x698>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d176      	bne.n	8004b5c <UART_SetConfig+0x45c>
 8004a6e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a76:	2b28      	cmp	r3, #40	@ 0x28
 8004a78:	d86c      	bhi.n	8004b54 <UART_SetConfig+0x454>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0x380>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004b25 	.word	0x08004b25
 8004a84:	08004b55 	.word	0x08004b55
 8004a88:	08004b55 	.word	0x08004b55
 8004a8c:	08004b55 	.word	0x08004b55
 8004a90:	08004b55 	.word	0x08004b55
 8004a94:	08004b55 	.word	0x08004b55
 8004a98:	08004b55 	.word	0x08004b55
 8004a9c:	08004b55 	.word	0x08004b55
 8004aa0:	08004b2d 	.word	0x08004b2d
 8004aa4:	08004b55 	.word	0x08004b55
 8004aa8:	08004b55 	.word	0x08004b55
 8004aac:	08004b55 	.word	0x08004b55
 8004ab0:	08004b55 	.word	0x08004b55
 8004ab4:	08004b55 	.word	0x08004b55
 8004ab8:	08004b55 	.word	0x08004b55
 8004abc:	08004b55 	.word	0x08004b55
 8004ac0:	08004b35 	.word	0x08004b35
 8004ac4:	08004b55 	.word	0x08004b55
 8004ac8:	08004b55 	.word	0x08004b55
 8004acc:	08004b55 	.word	0x08004b55
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004b55 	.word	0x08004b55
 8004ad8:	08004b55 	.word	0x08004b55
 8004adc:	08004b55 	.word	0x08004b55
 8004ae0:	08004b3d 	.word	0x08004b3d
 8004ae4:	08004b55 	.word	0x08004b55
 8004ae8:	08004b55 	.word	0x08004b55
 8004aec:	08004b55 	.word	0x08004b55
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004b55 	.word	0x08004b55
 8004af8:	08004b55 	.word	0x08004b55
 8004afc:	08004b55 	.word	0x08004b55
 8004b00:	08004b45 	.word	0x08004b45
 8004b04:	08004b55 	.word	0x08004b55
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b55 	.word	0x08004b55
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b55 	.word	0x08004b55
 8004b1c:	08004b55 	.word	0x08004b55
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e0bc      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e0b8      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e0b4      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e0b0      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b44:	2320      	movs	r3, #32
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4a:	e0ac      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b4c:	2340      	movs	r3, #64	@ 0x40
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e0a8      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e0a4      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a8f      	ldr	r2, [pc, #572]	@ (8004da0 <UART_SetConfig+0x6a0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d130      	bne.n	8004bc8 <UART_SetConfig+0x4c8>
 8004b66:	4b8d      	ldr	r3, [pc, #564]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d826      	bhi.n	8004bc0 <UART_SetConfig+0x4c0>
 8004b72:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0x478>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b91 	.word	0x08004b91
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004ba1 	.word	0x08004ba1
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b96:	e086      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9e:	e082      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba6:	e07e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e07a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e076      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004bb8:	2340      	movs	r3, #64	@ 0x40
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e072      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc6:	e06e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a75      	ldr	r2, [pc, #468]	@ (8004da4 <UART_SetConfig+0x6a4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d130      	bne.n	8004c34 <UART_SetConfig+0x534>
 8004bd2:	4b72      	ldr	r3, [pc, #456]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d826      	bhi.n	8004c2c <UART_SetConfig+0x52c>
 8004bde:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <UART_SetConfig+0x4e4>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	08004c0d 	.word	0x08004c0d
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c02:	e050      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0a:	e04c      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e048      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e044      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e040      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c24:	2340      	movs	r3, #64	@ 0x40
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e03c      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c2c:	2380      	movs	r3, #128	@ 0x80
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e038      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5b      	ldr	r2, [pc, #364]	@ (8004da8 <UART_SetConfig+0x6a8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d130      	bne.n	8004ca0 <UART_SetConfig+0x5a0>
 8004c3e:	4b57      	ldr	r3, [pc, #348]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d826      	bhi.n	8004c98 <UART_SetConfig+0x598>
 8004c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <UART_SetConfig+0x550>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c79 	.word	0x08004c79
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e01a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e016      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e012      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e00e      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c88:	2320      	movs	r3, #32
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e00a      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c90:	2340      	movs	r3, #64	@ 0x40
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e006      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e002      	b.n	8004ca6 <UART_SetConfig+0x5a6>
 8004ca0:	2380      	movs	r3, #128	@ 0x80
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3f      	ldr	r2, [pc, #252]	@ (8004da8 <UART_SetConfig+0x6a8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	f040 80f8 	bne.w	8004ea2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	dc46      	bgt.n	8004d48 <UART_SetConfig+0x648>
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	f2c0 8082 	blt.w	8004dc4 <UART_SetConfig+0x6c4>
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	2b1e      	cmp	r3, #30
 8004cc4:	d87e      	bhi.n	8004dc4 <UART_SetConfig+0x6c4>
 8004cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <UART_SetConfig+0x5cc>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004d4f 	.word	0x08004d4f
 8004cd0:	08004dc5 	.word	0x08004dc5
 8004cd4:	08004d57 	.word	0x08004d57
 8004cd8:	08004dc5 	.word	0x08004dc5
 8004cdc:	08004dc5 	.word	0x08004dc5
 8004ce0:	08004dc5 	.word	0x08004dc5
 8004ce4:	08004d67 	.word	0x08004d67
 8004ce8:	08004dc5 	.word	0x08004dc5
 8004cec:	08004dc5 	.word	0x08004dc5
 8004cf0:	08004dc5 	.word	0x08004dc5
 8004cf4:	08004dc5 	.word	0x08004dc5
 8004cf8:	08004dc5 	.word	0x08004dc5
 8004cfc:	08004dc5 	.word	0x08004dc5
 8004d00:	08004dc5 	.word	0x08004dc5
 8004d04:	08004d77 	.word	0x08004d77
 8004d08:	08004dc5 	.word	0x08004dc5
 8004d0c:	08004dc5 	.word	0x08004dc5
 8004d10:	08004dc5 	.word	0x08004dc5
 8004d14:	08004dc5 	.word	0x08004dc5
 8004d18:	08004dc5 	.word	0x08004dc5
 8004d1c:	08004dc5 	.word	0x08004dc5
 8004d20:	08004dc5 	.word	0x08004dc5
 8004d24:	08004dc5 	.word	0x08004dc5
 8004d28:	08004dc5 	.word	0x08004dc5
 8004d2c:	08004dc5 	.word	0x08004dc5
 8004d30:	08004dc5 	.word	0x08004dc5
 8004d34:	08004dc5 	.word	0x08004dc5
 8004d38:	08004dc5 	.word	0x08004dc5
 8004d3c:	08004dc5 	.word	0x08004dc5
 8004d40:	08004dc5 	.word	0x08004dc5
 8004d44:	08004db7 	.word	0x08004db7
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	d037      	beq.n	8004dbc <UART_SetConfig+0x6bc>
 8004d4c:	e03a      	b.n	8004dc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d4e:	f7ff f865 	bl	8003e1c <HAL_RCCEx_GetD3PCLK1Freq>
 8004d52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d54:	e03c      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f874 	bl	8003e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d64:	e034      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d66:	f107 0318 	add.w	r3, r7, #24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff f9c0 	bl	80040f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d74:	e02c      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d76:	4b09      	ldr	r3, [pc, #36]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <UART_SetConfig+0x69c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	08db      	lsrs	r3, r3, #3
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	4a07      	ldr	r2, [pc, #28]	@ (8004dac <UART_SetConfig+0x6ac>)
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d94:	e01c      	b.n	8004dd0 <UART_SetConfig+0x6d0>
 8004d96:	bf00      	nop
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	40007800 	.word	0x40007800
 8004da4:	40007c00 	.word	0x40007c00
 8004da8:	58000c00 	.word	0x58000c00
 8004dac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b9d      	ldr	r3, [pc, #628]	@ (8005028 <UART_SetConfig+0x928>)
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db4:	e00c      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004db6:	4b9d      	ldr	r3, [pc, #628]	@ (800502c <UART_SetConfig+0x92c>)
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dba:	e009      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dc2:	e005      	b.n	8004dd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004dce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 81de 	beq.w	8005194 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	4a94      	ldr	r2, [pc, #592]	@ (8005030 <UART_SetConfig+0x930>)
 8004dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d305      	bcc.n	8004e08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d903      	bls.n	8004e10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e0e:	e1c1      	b.n	8005194 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e12:	2200      	movs	r2, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	60fa      	str	r2, [r7, #12]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	4a84      	ldr	r2, [pc, #528]	@ (8005030 <UART_SetConfig+0x930>)
 8004e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2200      	movs	r2, #0
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e32:	f7fb fa51 	bl	80002d8 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	020b      	lsls	r3, r1, #8
 8004e48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e4c:	0202      	lsls	r2, r0, #8
 8004e4e:	6979      	ldr	r1, [r7, #20]
 8004e50:	6849      	ldr	r1, [r1, #4]
 8004e52:	0849      	lsrs	r1, r1, #1
 8004e54:	2000      	movs	r0, #0
 8004e56:	460c      	mov	r4, r1
 8004e58:	4605      	mov	r5, r0
 8004e5a:	eb12 0804 	adds.w	r8, r2, r4
 8004e5e:	eb43 0905 	adc.w	r9, r3, r5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	469a      	mov	sl, r3
 8004e6a:	4693      	mov	fp, r2
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	465b      	mov	r3, fp
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fa30 	bl	80002d8 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e86:	d308      	bcc.n	8004e9a <UART_SetConfig+0x79a>
 8004e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e8e:	d204      	bcs.n	8004e9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	e17c      	b.n	8005194 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ea0:	e178      	b.n	8005194 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eaa:	f040 80c5 	bne.w	8005038 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004eae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	dc48      	bgt.n	8004f48 <UART_SetConfig+0x848>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db7b      	blt.n	8004fb2 <UART_SetConfig+0x8b2>
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d879      	bhi.n	8004fb2 <UART_SetConfig+0x8b2>
 8004ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <UART_SetConfig+0x7c4>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f4f 	.word	0x08004f4f
 8004ec8:	08004f57 	.word	0x08004f57
 8004ecc:	08004fb3 	.word	0x08004fb3
 8004ed0:	08004fb3 	.word	0x08004fb3
 8004ed4:	08004f5f 	.word	0x08004f5f
 8004ed8:	08004fb3 	.word	0x08004fb3
 8004edc:	08004fb3 	.word	0x08004fb3
 8004ee0:	08004fb3 	.word	0x08004fb3
 8004ee4:	08004f6f 	.word	0x08004f6f
 8004ee8:	08004fb3 	.word	0x08004fb3
 8004eec:	08004fb3 	.word	0x08004fb3
 8004ef0:	08004fb3 	.word	0x08004fb3
 8004ef4:	08004fb3 	.word	0x08004fb3
 8004ef8:	08004fb3 	.word	0x08004fb3
 8004efc:	08004fb3 	.word	0x08004fb3
 8004f00:	08004fb3 	.word	0x08004fb3
 8004f04:	08004f7f 	.word	0x08004f7f
 8004f08:	08004fb3 	.word	0x08004fb3
 8004f0c:	08004fb3 	.word	0x08004fb3
 8004f10:	08004fb3 	.word	0x08004fb3
 8004f14:	08004fb3 	.word	0x08004fb3
 8004f18:	08004fb3 	.word	0x08004fb3
 8004f1c:	08004fb3 	.word	0x08004fb3
 8004f20:	08004fb3 	.word	0x08004fb3
 8004f24:	08004fb3 	.word	0x08004fb3
 8004f28:	08004fb3 	.word	0x08004fb3
 8004f2c:	08004fb3 	.word	0x08004fb3
 8004f30:	08004fb3 	.word	0x08004fb3
 8004f34:	08004fb3 	.word	0x08004fb3
 8004f38:	08004fb3 	.word	0x08004fb3
 8004f3c:	08004fb3 	.word	0x08004fb3
 8004f40:	08004fb3 	.word	0x08004fb3
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d02e      	beq.n	8004faa <UART_SetConfig+0x8aa>
 8004f4c:	e031      	b.n	8004fb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f7fd fd2f 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8004f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f54:	e033      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f56:	f7fd fd41 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8004f5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f5c:	e02f      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe ff70 	bl	8003e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f6c:	e027      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6e:	f107 0318 	add.w	r3, r7, #24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff f8bc 	bl	80040f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f7c:	e01f      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <UART_SetConfig+0x934>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005034 <UART_SetConfig+0x934>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	4a24      	ldr	r2, [pc, #144]	@ (8005028 <UART_SetConfig+0x928>)
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f9c:	e00f      	b.n	8004fbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f9e:	4b22      	ldr	r3, [pc, #136]	@ (8005028 <UART_SetConfig+0x928>)
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa2:	e00c      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <UART_SetConfig+0x92c>)
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80e7 	beq.w	8005194 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	4a19      	ldr	r2, [pc, #100]	@ (8005030 <UART_SetConfig+0x930>)
 8004fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd8:	005a      	lsls	r2, r3, #1
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	441a      	add	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d916      	bls.n	8005020 <UART_SetConfig+0x920>
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff8:	d212      	bcs.n	8005020 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f023 030f 	bic.w	r3, r3, #15
 8005002:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	b29b      	uxth	r3, r3
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	b29a      	uxth	r2, r3
 8005010:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005012:	4313      	orrs	r3, r2
 8005014:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	e0b9      	b.n	8005194 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005026:	e0b5      	b.n	8005194 <UART_SetConfig+0xa94>
 8005028:	03d09000 	.word	0x03d09000
 800502c:	003d0900 	.word	0x003d0900
 8005030:	08005ea8 	.word	0x08005ea8
 8005034:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005038:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800503c:	2b20      	cmp	r3, #32
 800503e:	dc49      	bgt.n	80050d4 <UART_SetConfig+0x9d4>
 8005040:	2b00      	cmp	r3, #0
 8005042:	db7c      	blt.n	800513e <UART_SetConfig+0xa3e>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d87a      	bhi.n	800513e <UART_SetConfig+0xa3e>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0x950>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	080050db 	.word	0x080050db
 8005054:	080050e3 	.word	0x080050e3
 8005058:	0800513f 	.word	0x0800513f
 800505c:	0800513f 	.word	0x0800513f
 8005060:	080050eb 	.word	0x080050eb
 8005064:	0800513f 	.word	0x0800513f
 8005068:	0800513f 	.word	0x0800513f
 800506c:	0800513f 	.word	0x0800513f
 8005070:	080050fb 	.word	0x080050fb
 8005074:	0800513f 	.word	0x0800513f
 8005078:	0800513f 	.word	0x0800513f
 800507c:	0800513f 	.word	0x0800513f
 8005080:	0800513f 	.word	0x0800513f
 8005084:	0800513f 	.word	0x0800513f
 8005088:	0800513f 	.word	0x0800513f
 800508c:	0800513f 	.word	0x0800513f
 8005090:	0800510b 	.word	0x0800510b
 8005094:	0800513f 	.word	0x0800513f
 8005098:	0800513f 	.word	0x0800513f
 800509c:	0800513f 	.word	0x0800513f
 80050a0:	0800513f 	.word	0x0800513f
 80050a4:	0800513f 	.word	0x0800513f
 80050a8:	0800513f 	.word	0x0800513f
 80050ac:	0800513f 	.word	0x0800513f
 80050b0:	0800513f 	.word	0x0800513f
 80050b4:	0800513f 	.word	0x0800513f
 80050b8:	0800513f 	.word	0x0800513f
 80050bc:	0800513f 	.word	0x0800513f
 80050c0:	0800513f 	.word	0x0800513f
 80050c4:	0800513f 	.word	0x0800513f
 80050c8:	0800513f 	.word	0x0800513f
 80050cc:	0800513f 	.word	0x0800513f
 80050d0:	08005131 	.word	0x08005131
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d02e      	beq.n	8005136 <UART_SetConfig+0xa36>
 80050d8:	e031      	b.n	800513e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050da:	f7fd fc69 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 80050de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050e0:	e033      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e2:	f7fd fc7b 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 80050e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050e8:	e02f      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe feaa 	bl	8003e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f8:	e027      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050fa:	f107 0318 	add.w	r3, r7, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fff6 	bl	80040f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005108:	e01f      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800510a:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <UART_SetConfig+0xac0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005116:	4b2a      	ldr	r3, [pc, #168]	@ (80051c0 <UART_SetConfig+0xac0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	4a28      	ldr	r2, [pc, #160]	@ (80051c4 <UART_SetConfig+0xac4>)
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005128:	e00f      	b.n	800514a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800512a:	4b26      	ldr	r3, [pc, #152]	@ (80051c4 <UART_SetConfig+0xac4>)
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800512e:	e00c      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005130:	4b25      	ldr	r3, [pc, #148]	@ (80051c8 <UART_SetConfig+0xac8>)
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005134:	e009      	b.n	800514a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800513c:	e005      	b.n	800514a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005148:	bf00      	nop
    }

    if (pclk != 0U)
 800514a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <UART_SetConfig+0xacc>)
 8005156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515a:	461a      	mov	r2, r3
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	441a      	add	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d909      	bls.n	800518e <UART_SetConfig+0xa8e>
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005180:	d205      	bcs.n	800518e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005184:	b29a      	uxth	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e002      	b.n	8005194 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2201      	movs	r2, #1
 80051a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3748      	adds	r7, #72	@ 0x48
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400
 80051c4:	03d09000 	.word	0x03d09000
 80051c8:	003d0900 	.word	0x003d0900
 80051cc:	08005ea8 	.word	0x08005ea8

080051d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ce:	d10a      	bne.n	80052e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b098      	sub	sp, #96	@ 0x60
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005324:	f7fb fefa 	bl	800111c <HAL_GetTick>
 8005328:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d12f      	bne.n	8005398 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005338:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005340:	2200      	movs	r2, #0
 8005342:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f88e 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d022      	beq.n	8005398 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005366:	653b      	str	r3, [r7, #80]	@ 0x50
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	647b      	str	r3, [r7, #68]	@ 0x44
 8005372:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800537e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e063      	b.n	8005460 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d149      	bne.n	800543a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ae:	2200      	movs	r2, #0
 80053b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f857 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d03c      	beq.n	800543a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	623b      	str	r3, [r7, #32]
   return(result);
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	60fb      	str	r3, [r7, #12]
   return(result);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005412:	61fa      	str	r2, [r7, #28]
 8005414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	617b      	str	r3, [r7, #20]
   return(result);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e012      	b.n	8005460 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3758      	adds	r7, #88	@ 0x58
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	e04f      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005480:	d04b      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fb fe4b 	bl	800111c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <UART_WaitOnFlagUntilTimeout+0x30>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e04e      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d037      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b80      	cmp	r3, #128	@ 0x80
 80054ae:	d034      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d031      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d110      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2208      	movs	r2, #8
 80054ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f839 	bl	8005544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2208      	movs	r2, #8
 80054d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e029      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f4:	d111      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f81f 	bl	8005544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e00f      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	429a      	cmp	r2, r3
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	429a      	cmp	r2, r3
 8005536:	d0a0      	beq.n	800547a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b095      	sub	sp, #84	@ 0x54
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556a:	643b      	str	r3, [r7, #64]	@ 0x40
 800556c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005570:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	61fb      	str	r3, [r7, #28]
   return(result);
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	4b1e      	ldr	r3, [pc, #120]	@ (800560c <UART_EndRxTransfer+0xc8>)
 8005592:	4013      	ands	r3, r2
 8005594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d118      	bne.n	80055ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	613b      	str	r3, [r7, #16]
   return(result);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005600:	bf00      	nop
 8005602:	3754      	adds	r7, #84	@ 0x54
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	effffffe 	.word	0xeffffffe

08005610 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_UARTEx_DisableFifoMode+0x16>
 8005622:	2302      	movs	r3, #2
 8005624:	e027      	b.n	8005676 <HAL_UARTEx_DisableFifoMode+0x66>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2224      	movs	r2, #36	@ 0x24
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005654:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005696:	2302      	movs	r3, #2
 8005698:	e02d      	b.n	80056f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	@ 0x24
 80056a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f850 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005712:	2302      	movs	r3, #2
 8005714:	e02d      	b.n	8005772 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2224      	movs	r2, #36	@ 0x24
 8005722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f812 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800579c:	e031      	b.n	8005802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800579e:	2310      	movs	r3, #16
 80057a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057a2:	2310      	movs	r3, #16
 80057a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0e5b      	lsrs	r3, r3, #25
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	0f5b      	lsrs	r3, r3, #29
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	7b3a      	ldrb	r2, [r7, #12]
 80057ca:	4911      	ldr	r1, [pc, #68]	@ (8005810 <UARTEx_SetNbDataToProcess+0x94>)
 80057cc:	5c8a      	ldrb	r2, [r1, r2]
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057d2:	7b3a      	ldrb	r2, [r7, #12]
 80057d4:	490f      	ldr	r1, [pc, #60]	@ (8005814 <UARTEx_SetNbDataToProcess+0x98>)
 80057d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	7b7a      	ldrb	r2, [r7, #13]
 80057e8:	4909      	ldr	r1, [pc, #36]	@ (8005810 <UARTEx_SetNbDataToProcess+0x94>)
 80057ea:	5c8a      	ldrb	r2, [r1, r2]
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057f0:	7b7a      	ldrb	r2, [r7, #13]
 80057f2:	4908      	ldr	r1, [pc, #32]	@ (8005814 <UARTEx_SetNbDataToProcess+0x98>)
 80057f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	08005ec0 	.word	0x08005ec0
 8005814:	08005ec8 	.word	0x08005ec8

08005818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005818:	b084      	sub	sp, #16
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	f107 001c 	add.w	r0, r7, #28
 8005826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800582a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800582e:	2b01      	cmp	r3, #1
 8005830:	d121      	bne.n	8005876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	4b2c      	ldr	r3, [pc, #176]	@ (80058f4 <USB_CoreInit+0xdc>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800585a:	2b01      	cmp	r3, #1
 800585c:	d105      	bne.n	800586a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 faaa 	bl	8005dc4 <USB_CoreReset>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e01b      	b.n	80058ae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fa9e 	bl	8005dc4 <USB_CoreReset>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800588c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	@ 0x38
 80058a0:	e005      	b.n	80058ae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058ae:	7fbb      	ldrb	r3, [r7, #30]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d116      	bne.n	80058e2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <USB_CoreInit+0xe0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f043 0206 	orr.w	r2, r3, #6
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ee:	b004      	add	sp, #16
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	ffbdffbf 	.word	0xffbdffbf
 80058f8:	03ee0000 	.word	0x03ee0000

080058fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 0201 	bic.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d115      	bne.n	800596c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800594c:	200a      	movs	r0, #10
 800594e:	f7fb fbf1 	bl	8001134 <HAL_Delay>
      ms += 10U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	330a      	adds	r3, #10
 8005956:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa25 	bl	8005da8 <USB_GetMode>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d01e      	beq.n	80059a2 <USB_SetCurrentMode+0x84>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2bc7      	cmp	r3, #199	@ 0xc7
 8005968:	d9f0      	bls.n	800594c <USB_SetCurrentMode+0x2e>
 800596a:	e01a      	b.n	80059a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d115      	bne.n	800599e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800597e:	200a      	movs	r0, #10
 8005980:	f7fb fbd8 	bl	8001134 <HAL_Delay>
      ms += 10U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	330a      	adds	r3, #10
 8005988:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa0c 	bl	8005da8 <USB_GetMode>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <USB_SetCurrentMode+0x84>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2bc7      	cmp	r3, #199	@ 0xc7
 800599a:	d9f0      	bls.n	800597e <USB_SetCurrentMode+0x60>
 800599c:	e001      	b.n	80059a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e005      	b.n	80059ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80059a6:	d101      	bne.n	80059ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059b8:	b084      	sub	sp, #16
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	e009      	b.n	80059ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3340      	adds	r3, #64	@ 0x40
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	2200      	movs	r2, #0
 80059e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3301      	adds	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b0e      	cmp	r3, #14
 80059f0:	d9f2      	bls.n	80059d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11c      	bne.n	8005a34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e005      	b.n	8005a40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a46:	461a      	mov	r2, r3
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d10d      	bne.n	8005a70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f968 	bl	8005d34 <USB_SetDevSpeed>
 8005a64:	e008      	b.n	8005a78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f963 	bl	8005d34 <USB_SetDevSpeed>
 8005a6e:	e003      	b.n	8005a78 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a70:	2103      	movs	r1, #3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f95e 	bl	8005d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a78:	2110      	movs	r1, #16
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8fa 	bl	8005c74 <USB_FlushTxFifo>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f924 	bl	8005cd8 <USB_FlushRxFifo>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e043      	b.n	8005b4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ada:	d118      	bne.n	8005b0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aee:	461a      	mov	r2, r3
 8005af0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e013      	b.n	8005b20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e008      	b.n	8005b20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b50:	461a      	mov	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d3b5      	bcc.n	8005ac4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e043      	b.n	8005be6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b74:	d118      	bne.n	8005ba8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e013      	b.n	8005bba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e008      	b.n	8005bba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3301      	adds	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bea:	461a      	mov	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d3b5      	bcc.n	8005b5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d105      	bne.n	8005c28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f043 0210 	orr.w	r2, r3, #16
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <USB_DevInit+0x2b4>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f043 0208 	orr.w	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <USB_DevInit+0x2b8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c68:	b004      	add	sp, #16
 8005c6a:	4770      	bx	lr
 8005c6c:	803c3800 	.word	0x803c3800
 8005c70:	40000004 	.word	0x40000004

08005c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c8e:	d901      	bls.n	8005c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01b      	b.n	8005ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	daf2      	bge.n	8005c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	019b      	lsls	r3, r3, #6
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cb8:	d901      	bls.n	8005cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e006      	b.n	8005ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d0f0      	beq.n	8005cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e018      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	daf2      	bge.n	8005ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2210      	movs	r2, #16
 8005d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d14:	d901      	bls.n	8005d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e006      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d0f0      	beq.n	8005d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d54:	4313      	orrs	r3, r2
 8005d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d80:	f023 0303 	bic.w	r3, r3, #3
 8005d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0301 	and.w	r3, r3, #1
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ddc:	d901      	bls.n	8005de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e01b      	b.n	8005e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	daf2      	bge.n	8005dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e06:	d901      	bls.n	8005e0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e006      	b.n	8005e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d0f0      	beq.n	8005dfa <USB_CoreReset+0x36>

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <memset>:
 8005e26:	4402      	add	r2, r0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d100      	bne.n	8005e30 <memset+0xa>
 8005e2e:	4770      	bx	lr
 8005e30:	f803 1b01 	strb.w	r1, [r3], #1
 8005e34:	e7f9      	b.n	8005e2a <memset+0x4>
	...

08005e38 <__libc_init_array>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e70 <__libc_init_array+0x38>)
 8005e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e74 <__libc_init_array+0x3c>)
 8005e3e:	1b64      	subs	r4, r4, r5
 8005e40:	10a4      	asrs	r4, r4, #2
 8005e42:	2600      	movs	r6, #0
 8005e44:	42a6      	cmp	r6, r4
 8005e46:	d109      	bne.n	8005e5c <__libc_init_array+0x24>
 8005e48:	4d0b      	ldr	r5, [pc, #44]	@ (8005e78 <__libc_init_array+0x40>)
 8005e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e7c <__libc_init_array+0x44>)
 8005e4c:	f000 f818 	bl	8005e80 <_init>
 8005e50:	1b64      	subs	r4, r4, r5
 8005e52:	10a4      	asrs	r4, r4, #2
 8005e54:	2600      	movs	r6, #0
 8005e56:	42a6      	cmp	r6, r4
 8005e58:	d105      	bne.n	8005e66 <__libc_init_array+0x2e>
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e60:	4798      	blx	r3
 8005e62:	3601      	adds	r6, #1
 8005e64:	e7ee      	b.n	8005e44 <__libc_init_array+0xc>
 8005e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6a:	4798      	blx	r3
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	e7f2      	b.n	8005e56 <__libc_init_array+0x1e>
 8005e70:	08005ed8 	.word	0x08005ed8
 8005e74:	08005ed8 	.word	0x08005ed8
 8005e78:	08005ed8 	.word	0x08005ed8
 8005e7c:	08005edc 	.word	0x08005edc

08005e80 <_init>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr

08005e8c <_fini>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr
