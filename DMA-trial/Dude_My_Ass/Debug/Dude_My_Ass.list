
Dude_My_Ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a69c  0800a69c  0000b69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6dc  0800a6dc  0000b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6e4  0800a6e4  0000b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6e8  0800a6e8  0000b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  0800a6ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000055a0  24000018  0800a704  0000c018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240055b8  0800a704  0000c5b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c70  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004223  00000000  00000000  0002ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c0  00000000  00000000  00030ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000131c  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c481  00000000  00000000  00033abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000259e3  00000000  00000000  0006ff3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d093  00000000  00000000  00095920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002129b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006854  00000000  00000000  002129f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  0021924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a684 	.word	0x0800a684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800a684 	.word	0x0800a684

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <DMA_setup_ADC>:
unsigned char *pointer = (unsigned char *)(&index_stop);




void DMA_setup_ADC(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA1_Stream0 ->M0AR = (uint32_t) &DMA_data;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <DMA_setup_ADC+0x34>)
 80005d0:	60da      	str	r2, [r3, #12]
	DMA1_Stream0 ->PAR = (uint32_t) &(ADC3->DR);
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <DMA_setup_ADC+0x38>)
 80005d6:	609a      	str	r2, [r3, #8]
	DMA1_Stream0 ->NDTR = (uint16_t) vec_len;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80005de:	605a      	str	r2, [r3, #4]
	//ADC3->CFGR |= ADC_CFGR_DMNGT;
	DMA1_Stream0 ->CR |= DMA_SxCR_TCIE;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40020010 	.word	0x40020010
 80005fc:	24000034 	.word	0x24000034
 8000600:	58026040 	.word	0x58026040

08000604 <DMA_reset>:

void DMA_reset(void){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	DMA2->LIFCR = 0xffffffff;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <DMA_reset+0x30>)
 800060a:	f04f 32ff 	mov.w	r2, #4294967295
 800060e:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <DMA_reset+0x30>)
 8000612:	f04f 32ff 	mov.w	r2, #4294967295
 8000616:	60da      	str	r2, [r3, #12]

	DMA1->LIFCR = 0xffffffff;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <DMA_reset+0x34>)
 800061a:	f04f 32ff 	mov.w	r2, #4294967295
 800061e:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <DMA_reset+0x34>)
 8000622:	f04f 32ff 	mov.w	r2, #4294967295
 8000626:	60da      	str	r2, [r3, #12]

}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40020400 	.word	0x40020400
 8000638:	40020000 	.word	0x40020000

0800063c <DMA_setup_USART>:
void DMA_setup_USART(void){
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	DMA2_Stream0 ->M0AR = (uint32_t) &DMA_data;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <DMA_setup_USART+0x3c>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <DMA_setup_USART+0x40>)
 8000644:	60da      	str	r2, [r3, #12]
	DMA2_Stream0 ->PAR = (uint32_t) &(USART3->TDR);
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <DMA_setup_USART+0x3c>)
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <DMA_setup_USART+0x44>)
 800064a:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 ->NDTR = (uint16_t) vec_len*2;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <DMA_setup_USART+0x3c>)
 800064e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000652:	605a      	str	r2, [r3, #4]
	USART3->CR3 |= USART_CR3_DMAT;
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <DMA_setup_USART+0x48>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <DMA_setup_USART+0x48>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065e:	6093      	str	r3, [r2, #8]
	DMA2_Stream0->CR |=DMA_SxCR_TCIE;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <DMA_setup_USART+0x3c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <DMA_setup_USART+0x3c>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40020410 	.word	0x40020410
 800067c:	24000034 	.word	0x24000034
 8000680:	40004828 	.word	0x40004828
 8000684:	40004800 	.word	0x40004800

08000688 <ESPE_USART_init>:



void ESPE_USART_init(void){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

	//Accendo la trasmissione
	USART3 ->CR1 |= USART_CR1_TE;
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <ESPE_USART_init+0x34>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <ESPE_USART_init+0x34>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <ESPE_USART_init+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <ESPE_USART_init+0x34>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <ESPE_USART_init+0x34>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <ESPE_USART_init+0x34>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione


}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40004800 	.word	0x40004800

080006c0 <ESPE_ADC_init>:


//Queste sono le operazioni che dobbiamo fare, magari con una funzione, nel main(), prima del while(1) (va fatta una sola volta)
void ESPE_ADC_init(void){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 0 <<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 80006ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 0 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		//segna quali sono i canali in lettura per velocità massima
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC3 -> CR &= ~ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	4a25      	ldr	r2, [pc, #148]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006ec:	f023 031d 	bic.w	r3, r3, #29
 80006f0:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <ESPE_ADC_init+0xc0>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6093      	str	r3, [r2, #8]




	ADC3 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000704:	f023 031e 	bic.w	r3, r3, #30
 8000708:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;	//seleziona la modalità lineare di calibrazione (a 1)
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000714:	6093      	str	r3, [r2, #8]
	ADC3 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000718:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000728:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 800072a:	bf00      	nop
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dbfb      	blt.n	800072c <ESPE_ADC_init+0x6c>
	}



	ADC3->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 8000748:	bf00      	nop
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f9      	beq.n	800074a <ESPE_ADC_init+0x8a>
	}

	ADC3 -> CFGR |=(3<<ADC_CFGR_DMNGT_Pos);
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <ESPE_ADC_init+0xc0>)
 800075c:	f043 0303 	orr.w	r3, r3, #3
 8000760:	60d3      	str	r3, [r2, #12]

	ADC3 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4a06      	ldr	r2, [pc, #24]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6053      	str	r3, [r2, #4]

	ADC3 -> SMPR1 |= 0<<ADC_SMPR1_SMP0_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000770:	4a03      	ldr	r2, [pc, #12]	@ (8000780 <ESPE_ADC_init+0xc0>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	6153      	str	r3, [r2, #20]


}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58026000 	.word	0x58026000

08000784 <ESPE_TIM6_init>:

void ESPE_TIM6_init(void){
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <ESPE_TIM6_init+0x20>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->ARR = 10;
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <ESPE_TIM6_init+0x20>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC = 24;
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <ESPE_TIM6_init+0x20>)
 8000796:	2218      	movs	r2, #24
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40001000 	.word	0x40001000

080007a8 <ESPE_COMP_init>:

void ESPE_COMP_init(void){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	COMP2->CFGR |= COMP_CFGRx_EN;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <ESPE_COMP_init+0x34>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <ESPE_COMP_init+0x34>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
	DAC1 -> CR |= DAC_CR_EN1;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <ESPE_COMP_init+0x38>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <ESPE_COMP_init+0x38>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
	DAC1 -> DHR12R1 = 1200;										// soglia di trigger
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <ESPE_COMP_init+0x38>)
 80007c6:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80007ca:	609a      	str	r2, [r3, #8]
	DAC1 -> SWTRIGR = DAC_SWTRIGR_SWTRIG1;
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <ESPE_COMP_init+0x38>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	605a      	str	r2, [r3, #4]
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	58003810 	.word	0x58003810
 80007e0:	40007400 	.word	0x40007400

080007e4 <ESPE_USART_invert_mode>:



void ESPE_USART_invert_mode(void){
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	if(USART3 -> CR1 & USART_CR1_RXNEIE){
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0320 	and.w	r3, r3, #32
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00c      	beq.n	800080e <ESPE_USART_invert_mode+0x2a>
		USART3 -> CR1 &= ~USART_CR1_RXNEIE;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 80007fa:	f023 0320 	bic.w	r3, r3, #32
 80007fe:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 8000806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080a:	6013      	str	r3, [r2, #0]
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
		USART3 -> CR1 |= USART_CR1_RXNEIE;
		USART3 -> CR1 &= ~USART_CR1_TCIE;
	}
}
 800080c:	e011      	b.n	8000832 <ESPE_USART_invert_mode+0x4e>
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00b      	beq.n	8000832 <ESPE_USART_invert_mode+0x4e>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 &= ~USART_CR1_TCIE;
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <ESPE_USART_invert_mode+0x58>)
 800082c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40004800 	.word	0x40004800

08000840 <ESPE_USART_char_start>:


//Zona definizione di funzioni
void ESPE_USART_char_start(void){
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <ESPE_USART_char_start+0x1e>
		if ( USART3 -> RDR == char_trigger){
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000854:	2b65      	cmp	r3, #101	@ 0x65
 8000856:	d102      	bne.n	800085e <ESPE_USART_char_start+0x1e>
			//flag_USART = 1;
			flag_Trigger_EN = 1;
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <ESPE_USART_char_start+0x50>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]

		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <ESPE_USART_char_start+0x4c>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4a07      	ldr	r2, [pc, #28]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000874:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <ESPE_USART_char_start+0x4c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a04      	ldr	r2, [pc, #16]	@ (800088c <ESPE_USART_char_start+0x4c>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40004800 	.word	0x40004800
 8000890:	24004e56 	.word	0x24004e56

08000894 <ESPE_DMA_switch_mode>:


void ESPE_DMA_switch_mode(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	//if(flag_USART){
	if( flag_Triggered){
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <ESPE_DMA_switch_mode+0x34>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00f      	beq.n	80008c2 <ESPE_DMA_switch_mode+0x2e>
		TIM6_stop;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <ESPE_DMA_switch_mode+0x38>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a09      	ldr	r2, [pc, #36]	@ (80008cc <ESPE_DMA_switch_mode+0x38>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	6013      	str	r3, [r2, #0]
		DMA_reset();
 80008ae:	f7ff fea9 	bl	8000604 <DMA_reset>
		ESPE_USART_invert_mode();
 80008b2:	f7ff ff97 	bl	80007e4 <ESPE_USART_invert_mode>
		DMA_start_USART;
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <ESPE_DMA_switch_mode+0x3c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <ESPE_DMA_switch_mode+0x3c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6013      	str	r3, [r2, #0]
		//flag_USART = 0;

	}
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	24004e55 	.word	0x24004e55
 80008cc:	40001000 	.word	0x40001000
 80008d0:	40020410 	.word	0x40020410

080008d4 <ESPE_DMA_switch_back>:


void ESPE_DMA_switch_back(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	if( !(DMA2_Stream0 -> NDTR)){
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <ESPE_DMA_switch_back+0x48>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11a      	bne.n	8000916 <ESPE_DMA_switch_back+0x42>
		flag_Triggered = 0;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <ESPE_DMA_switch_back+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
		ESPE_USART_invert_mode();
 80008e6:	f7ff ff7d 	bl	80007e4 <ESPE_USART_invert_mode>
		DMA_stop_USART;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <ESPE_DMA_switch_back+0x48>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	@ (800091c <ESPE_DMA_switch_back+0x48>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6013      	str	r3, [r2, #0]
		DMA_reset();
 80008f6:	f7ff fe85 	bl	8000604 <DMA_reset>
		DMA2_Stream0 -> NDTR = 2*vec_len;
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <ESPE_DMA_switch_back+0x48>)
 80008fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000900:	605a      	str	r2, [r3, #4]
		index_stop = vec_len + 1;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <ESPE_DMA_switch_back+0x50>)
 8000904:	f242 7211 	movw	r2, #10001	@ 0x2711
 8000908:	801a      	strh	r2, [r3, #0]
		TIM6_start;
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <ESPE_DMA_switch_back+0x54>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <ESPE_DMA_switch_back+0x54>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6013      	str	r3, [r2, #0]

	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40020410 	.word	0x40020410
 8000920:	24004e55 	.word	0x24004e55
 8000924:	24000000 	.word	0x24000000
 8000928:	40001000 	.word	0x40001000

0800092c <ESPE_DMA_COMP_Trigger_Pretrigger>:
			}
			//TIM6_start;
		}
}

void ESPE_DMA_COMP_Trigger_Pretrigger(void){
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	if(!flag_Triggered && flag_Trigger_EN){
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <ESPE_DMA_COMP_Trigger_Pretrigger+0x8c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d139      	bne.n	80009ae <ESPE_DMA_COMP_Trigger_Pretrigger+0x82>
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <ESPE_DMA_COMP_Trigger_Pretrigger+0x90>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d034      	beq.n	80009ae <ESPE_DMA_COMP_Trigger_Pretrigger+0x82>
		if( flag_Pretriggered){
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x94>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d024      	beq.n	8000998 <ESPE_DMA_COMP_Trigger_Pretrigger+0x6c>
			if( COMP12 -> SR & COMP_SR_C2VAL){
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <ESPE_DMA_COMP_Trigger_Pretrigger+0x98>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d028      	beq.n	80009ac <ESPE_DMA_COMP_Trigger_Pretrigger+0x80>
				flag_Triggered = 1;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <ESPE_DMA_COMP_Trigger_Pretrigger+0x8c>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
				flag_Trigger_EN = 0;
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <ESPE_DMA_COMP_Trigger_Pretrigger+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
				flag_Pretriggered = 0;
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
				//index_stop = (DMA1_Stream0 ->NDTR + vec_len - data_len)%vec_len;
				index_stop = vec_len - (vec_len - DMA1_Stream0 -> NDTR + data_len +1)%vec_len;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <ESPE_DMA_COMP_Trigger_Pretrigger+0x9c>)
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	f644 2339 	movw	r3, #19001	@ 0x4a39
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <ESPE_DMA_COMP_Trigger_Pretrigger+0xa0>)
 8000978:	fba2 1203 	umull	r1, r2, r2, r3
 800097c:	0b52      	lsrs	r2, r2, #13
 800097e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000982:	fb01 f202 	mul.w	r2, r1, r2
 8000986:	1a9a      	subs	r2, r3, r2
 8000988:	b292      	uxth	r2, r2
 800098a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800098e:	1a9b      	subs	r3, r3, r2
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <ESPE_DMA_COMP_Trigger_Pretrigger+0xa4>)
 8000994:	801a      	strh	r2, [r3, #0]

			}
			return;
 8000996:	e009      	b.n	80009ac <ESPE_DMA_COMP_Trigger_Pretrigger+0x80>
		}
		if( !(COMP12-> SR & COMP_SR_C2VAL)){
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <ESPE_DMA_COMP_Trigger_Pretrigger+0x98>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d104      	bne.n	80009ae <ESPE_DMA_COMP_Trigger_Pretrigger+0x82>
			flag_Pretriggered = 1;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x94>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e000      	b.n	80009ae <ESPE_DMA_COMP_Trigger_Pretrigger+0x82>
			return;
 80009ac:	bf00      	nop
		}
	}
}
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	24004e55 	.word	0x24004e55
 80009bc:	24004e56 	.word	0x24004e56
 80009c0:	24004e54 	.word	0x24004e54
 80009c4:	58003800 	.word	0x58003800
 80009c8:	40020010 	.word	0x40020010
 80009cc:	d1b71759 	.word	0xd1b71759
 80009d0:	24000000 	.word	0x24000000

080009d4 <ESPE_DMA_data_manipulation>:


void ESPE_DMA_data_manipulation(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(flag_Triggered && DMA1_Stream0 ->NDTR == (index_stop)){
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <ESPE_DMA_data_manipulation+0x30>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00d      	beq.n	80009fe <ESPE_DMA_data_manipulation+0x2a>
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <ESPE_DMA_data_manipulation+0x34>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <ESPE_DMA_data_manipulation+0x38>)
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d107      	bne.n	80009fe <ESPE_DMA_data_manipulation+0x2a>
		TIM6_stop;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <ESPE_DMA_data_manipulation+0x3c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <ESPE_DMA_data_manipulation+0x3c>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	6013      	str	r3, [r2, #0]
		ESPE_DMA_switch_mode();
 80009fa:	f7ff ff4b 	bl	8000894 <ESPE_DMA_switch_mode>
	}
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24004e55 	.word	0x24004e55
 8000a08:	40020010 	.word	0x40020010
 8000a0c:	24000000 	.word	0x24000000
 8000a10:	40001000 	.word	0x40001000

08000a14 <ESPE_DMA_end_transmission>:

void ESPE_DMA_end_transmission(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	if( flag_Triggered){
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <ESPE_DMA_end_transmission+0x5c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d024      	beq.n	8000a6c <ESPE_DMA_end_transmission+0x58>
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000a22:	bf00      	nop
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <ESPE_DMA_end_transmission+0x60>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f9      	beq.n	8000a24 <ESPE_DMA_end_transmission+0x10>
		if(USART3 ->CR1 & USART_CR1_TCIE){
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <ESPE_DMA_end_transmission+0x60>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d017      	beq.n	8000a6c <ESPE_DMA_end_transmission+0x58>
			if( index_transmission < 2){
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <ESPE_DMA_end_transmission+0x64>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d80e      	bhi.n	8000a62 <ESPE_DMA_end_transmission+0x4e>
				USART3->TDR = pointer[index_transmission];
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <ESPE_DMA_end_transmission+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <ESPE_DMA_end_transmission+0x64>)
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <ESPE_DMA_end_transmission+0x60>)
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
				index_transmission ++;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <ESPE_DMA_end_transmission+0x64>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <ESPE_DMA_end_transmission+0x64>)
 8000a5e:	801a      	strh	r2, [r3, #0]
			}

		}
	}

}
 8000a60:	e004      	b.n	8000a6c <ESPE_DMA_end_transmission+0x58>
				index_transmission = 0;
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <ESPE_DMA_end_transmission+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	801a      	strh	r2, [r3, #0]
				ESPE_DMA_switch_back();
 8000a68:	f7ff ff34 	bl	80008d4 <ESPE_DMA_switch_back>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	24004e55 	.word	0x24004e55
 8000a74:	40004800 	.word	0x40004800
 8000a78:	24004e58 	.word	0x24004e58
 8000a7c:	24000004 	.word	0x24000004

08000a80 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a98:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000a9a:	4a30      	ldr	r2, [pc, #192]	@ (8000b5c <MX_ADC3_Init+0xdc>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000abc:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000aca:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000afa:	f001 f995 	bl	8001e28 <HAL_ADC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000b04:	f000 fbda 	bl	80012bc <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b0e:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000b10:	f001 f98a 	bl	8001e28 <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b1a:	f000 fbcf 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b22:	2306      	movs	r3, #6
 8000b24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b30:	2304      	movs	r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_ADC3_Init+0xd8>)
 8000b42:	f001 fb13 	bl	800216c <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b4c:	f000 fbb6 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	24004e5c 	.word	0x24004e5c
 8000b5c:	58026000 	.word	0x58026000

08000b60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0b4      	sub	sp, #208	@ 0xd0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	22c0      	movs	r2, #192	@ 0xc0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f009 fd5a 	bl	800a62a <memset>
  if(adcHandle->Instance==ADC3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a43      	ldr	r2, [pc, #268]	@ (8000c88 <HAL_ADC_MspInit+0x128>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d17e      	bne.n	8000c7e <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000b90:	2313      	movs	r3, #19
 8000b92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ba0:	23c0      	movs	r3, #192	@ 0xc0
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 faca 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000bc2:	f000 fb7b 	bl	80012bc <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b29      	ldr	r3, [pc, #164]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <HAL_ADC_MspInit+0x12c>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c02:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000c06:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000c0a:	f000 ff6b 	bl	8001ae4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c10:	4a20      	ldr	r2, [pc, #128]	@ (8000c94 <HAL_ADC_MspInit+0x134>)
 8000c12:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c16:	2273      	movs	r2, #115	@ 0x73
 8000c18:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c2c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c34:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c44:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c52:	480f      	ldr	r0, [pc, #60]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c54:	f002 fa90 	bl	8003178 <HAL_DMA_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000c5e:	f000 fb2d 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c66:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c68:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_ADC_MspInit+0x130>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	207f      	movs	r0, #127	@ 0x7f
 8000c74:	f002 f8e7 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c78:	207f      	movs	r0, #127	@ 0x7f
 8000c7a:	f002 f8fe 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	37d0      	adds	r7, #208	@ 0xd0
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	58026000 	.word	0x58026000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	24004ec0 	.word	0x24004ec0
 8000c94:	40020010 	.word	0x40020010

08000c98 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000c9e:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <MX_COMP2_Init+0x58>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000ca4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ca8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cbc:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_COMP2_Init+0x54>)
 8000cd8:	f001 feb0 	bl	8002a3c <HAL_COMP_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8000ce2:	f000 faeb 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24004f38 	.word	0x24004f38
 8000cf0:	58003810 	.word	0x58003810

08000cf4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <HAL_COMP_MspInit+0x80>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12a      	bne.n	8000d6c <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d1c:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_COMP_MspInit+0x84>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_COMP_MspInit+0x88>)
 8000d68:	f003 fec8 	bl	8004afc <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58003810 	.word	0x58003810
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58021000 	.word	0x58021000

08000d80 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2224      	movs	r2, #36	@ 0x24
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f009 fc4c 	bl	800a62a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_DAC1_Init+0x5c>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <MX_DAC1_Init+0x60>)
 8000d96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d98:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_DAC1_Init+0x5c>)
 8000d9a:	f002 f888 	bl	8002eae <HAL_DAC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000da4:	f000 fa8a 	bl	80012bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_DAC1_Init+0x5c>)
 8000dc4:	f002 f896 	bl	8002ef4 <HAL_DAC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 fa75 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24004f64 	.word	0x24004f64
 8000de0:	40007400 	.word	0x40007400

08000de4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <HAL_DAC_MspInit+0x3c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10e      	bne.n	8000e14 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_DAC_MspInit+0x40>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dfc:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_DAC_MspInit+0x40>)
 8000dfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_DAC_MspInit+0x40>)
 8000e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40007400 	.word	0x40007400
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_DMA_Init+0x6c>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200b      	movs	r0, #11
 8000e70:	f001 ffe9 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e74:	200b      	movs	r0, #11
 8000e76:	f002 f800 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2038      	movs	r0, #56	@ 0x38
 8000e80:	f001 ffe1 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e84:	2038      	movs	r0, #56	@ 0x38
 8000e86:	f001 fff8 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58024400 	.word	0x58024400

08000e98 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b83      	ldr	r3, [pc, #524]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a81      	ldr	r2, [pc, #516]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	4a7a      	ldr	r2, [pc, #488]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000edc:	4b77      	ldr	r3, [pc, #476]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b74      	ldr	r3, [pc, #464]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	4a72      	ldr	r2, [pc, #456]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efa:	4b70      	ldr	r3, [pc, #448]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b6c      	ldr	r3, [pc, #432]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f18:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f26:	4b65      	ldr	r3, [pc, #404]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a63      	ldr	r2, [pc, #396]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b61      	ldr	r3, [pc, #388]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b59      	ldr	r3, [pc, #356]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4b56      	ldr	r3, [pc, #344]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a54      	ldr	r2, [pc, #336]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b52      	ldr	r3, [pc, #328]	@ (80010bc <MX_GPIO_Init+0x224>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f86:	484e      	ldr	r0, [pc, #312]	@ (80010c0 <MX_GPIO_Init+0x228>)
 8000f88:	f003 ff68 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f92:	484c      	ldr	r0, [pc, #304]	@ (80010c4 <MX_GPIO_Init+0x22c>)
 8000f94:	f003 ff62 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	484a      	ldr	r0, [pc, #296]	@ (80010c8 <MX_GPIO_Init+0x230>)
 8000f9e:	f003 ff5d 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4845      	ldr	r0, [pc, #276]	@ (80010cc <MX_GPIO_Init+0x234>)
 8000fb8:	f003 fda0 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fbc:	2332      	movs	r3, #50	@ 0x32
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x234>)
 8000fd8:	f003 fd90 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fdc:	2386      	movs	r3, #134	@ 0x86
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fec:	230b      	movs	r3, #11
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4836      	ldr	r0, [pc, #216]	@ (80010d0 <MX_GPIO_Init+0x238>)
 8000ff8:	f003 fd80 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ffc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	482a      	ldr	r0, [pc, #168]	@ (80010c0 <MX_GPIO_Init+0x228>)
 8001016:	f003 fd71 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800101a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102c:	230b      	movs	r3, #11
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4822      	ldr	r0, [pc, #136]	@ (80010c0 <MX_GPIO_Init+0x228>)
 8001038:	f003 fd60 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800103c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <MX_GPIO_Init+0x22c>)
 8001056:	f003 fd51 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4819      	ldr	r0, [pc, #100]	@ (80010d4 <MX_GPIO_Init+0x23c>)
 8001070:	f003 fd44 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001074:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001086:	230b      	movs	r3, #11
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	@ (80010d4 <MX_GPIO_Init+0x23c>)
 8001092:	f003 fd33 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001096:	2302      	movs	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_GPIO_Init+0x230>)
 80010ae:	f003 fd25 	bl	8004afc <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	@ 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58020c00 	.word	0x58020c00
 80010c8:	58021000 	.word	0x58021000
 80010cc:	58020800 	.word	0x58020800
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58021800 	.word	0x58021800

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f000 fc1c 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f83e 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f7ff fed8 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e8:	f7ff fe9e 	bl	8000e28 <MX_DMA_Init>
  MX_ADC3_Init();
 80010ec:	f7ff fcc8 	bl	8000a80 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80010f0:	f000 fa4c 	bl	800158c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010f4:	f000 fb38 	bl	8001768 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80010f8:	f000 f9f0 	bl	80014dc <MX_TIM6_Init>
  MX_COMP2_Init();
 80010fc:	f7ff fdcc 	bl	8000c98 <MX_COMP2_Init>
  MX_DAC1_Init();
 8001100:	f7ff fe3e 	bl	8000d80 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  ESPE_TIM6_init();
 8001104:	f7ff fb3e 	bl	8000784 <ESPE_TIM6_init>
  ESPE_ADC_init();
 8001108:	f7ff fada 	bl	80006c0 <ESPE_ADC_init>
  ESPE_USART_init();
 800110c:	f7ff fabc 	bl	8000688 <ESPE_USART_init>
  ESPE_COMP_init();
 8001110:	f7ff fb4a 	bl	80007a8 <ESPE_COMP_init>
  DMA_setup_ADC();
 8001114:	f7ff fa58 	bl	80005c8 <DMA_setup_ADC>
  DMA_setup_USART();
 8001118:	f7ff fa90 	bl	800063c <DMA_setup_USART>
  USART_start;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <main+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <main+0x78>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
  TIM6_start;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <main+0x7c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <main+0x7c>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]
  ADC_start;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <main+0x80>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <main+0x80>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6093      	str	r3, [r2, #8]
  DMA_start_ADC;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <main+0x84>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a05      	ldr	r2, [pc, #20]	@ (800115c <main+0x84>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <main+0x74>
 8001150:	40004800 	.word	0x40004800
 8001154:	40001000 	.word	0x40001000
 8001158:	58026000 	.word	0x58026000
 800115c:	40020010 	.word	0x40020010

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b09e      	sub	sp, #120	@ 0x78
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116a:	224c      	movs	r2, #76	@ 0x4c
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 fa5b 	bl	800a62a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f009 fa54 	bl	800a62a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001182:	2002      	movs	r0, #2
 8001184:	f003 ffb4 	bl	80050f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b48      	ldr	r3, [pc, #288]	@ (80012b0 <SystemClock_Config+0x150>)
 800118e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001190:	4a47      	ldr	r2, [pc, #284]	@ (80012b0 <SystemClock_Config+0x150>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001198:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <SystemClock_Config+0x150>)
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <SystemClock_Config+0x154>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a43      	ldr	r2, [pc, #268]	@ (80012b4 <SystemClock_Config+0x154>)
 80011a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <SystemClock_Config+0x154>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ba:	bf00      	nop
 80011bc:	4b3d      	ldr	r3, [pc, #244]	@ (80012b4 <SystemClock_Config+0x154>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011c8:	d1f8      	bne.n	80011bc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <SystemClock_Config+0x158>)
 80011cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011d0:	4a39      	ldr	r2, [pc, #228]	@ (80012b8 <SystemClock_Config+0x158>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <SystemClock_Config+0x158>)
 80011dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <SystemClock_Config+0x154>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a30      	ldr	r2, [pc, #192]	@ (80012b4 <SystemClock_Config+0x154>)
 80011f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <SystemClock_Config+0x154>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <SystemClock_Config+0x150>)
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	4a2a      	ldr	r2, [pc, #168]	@ (80012b0 <SystemClock_Config+0x150>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800120e:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <SystemClock_Config+0x150>)
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800121a:	bf00      	nop
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <SystemClock_Config+0x154>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001228:	d1f8      	bne.n	800121c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122a:	2301      	movs	r3, #1
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800122e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001238:	2302      	movs	r3, #2
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001240:	2378      	movs	r3, #120	@ 0x78
 8001242:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001248:	230f      	movs	r3, #15
 800124a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001250:	230c      	movs	r3, #12
 8001252:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001254:	2300      	movs	r3, #0
 8001256:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001260:	4618      	mov	r0, r3
 8001262:	f003 ff8f 	bl	8005184 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800126c:	f000 f826 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	233f      	movs	r3, #63	@ 0x3f
 8001272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2303      	movs	r3, #3
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800127c:	2308      	movs	r3, #8
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001284:	2340      	movs	r3, #64	@ 0x40
 8001286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800128e:	2340      	movs	r3, #64	@ 0x40
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2104      	movs	r1, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f004 fbcd 	bl	8005a38 <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80012a4:	f000 f80a 	bl	80012bc <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3778      	adds	r7, #120	@ 0x78
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58000400 	.word	0x58000400
 80012b4:	58024800 	.word	0x58024800
 80012b8:	58024400 	.word	0x58024400

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_MspInit+0x54>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012d4:	4a11      	ldr	r2, [pc, #68]	@ (800131c <HAL_MspInit+0x54>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x54>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_MspInit+0x54>)
 80012ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_MspInit+0x54>)
 80012f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_MspInit+0x54>)
 80012fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800130a:	f000 fbdb 	bl	8001ac4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800130e:	2002      	movs	r0, #2
 8001310:	f000 fbc4 	bl	8001a9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 fb41 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <DMA1_Stream0_IRQHandler+0x10>)
 8001386:	f002 fa53 	bl	8003830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24004ec0 	.word	0x24004ec0

08001394 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_char_start();
 8001398:	f7ff fa52 	bl	8000840 <ESPE_USART_char_start>
	ESPE_DMA_end_transmission();
 800139c:	f7ff fb3a 	bl	8000a14 <ESPE_DMA_end_transmission>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	ESPE_DMA_end_transmission();
 80013a8:	f7ff fb34 	bl	8000a14 <ESPE_DMA_end_transmission>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <DMA2_Stream0_IRQHandler+0x14>)
 80013ae:	f002 fa3f 	bl	8003830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24005058 	.word	0x24005058

080013bc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	//ESPE_DMA_Trigger_Pretrigger();
	ESPE_DMA_COMP_Trigger_Pretrigger();
 80013c0:	f7ff fab4 	bl	800092c <ESPE_DMA_COMP_Trigger_Pretrigger>
	ESPE_DMA_data_manipulation();
 80013c4:	f7ff fb06 	bl	80009d4 <ESPE_DMA_data_manipulation>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d0:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <SystemInit+0xe4>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <SystemInit+0xe4>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e0:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <SystemInit+0xe8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d807      	bhi.n	80013fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <SystemInit+0xe8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 030f 	bic.w	r3, r3, #15
 80013f4:	4a2f      	ldr	r2, [pc, #188]	@ (80014b4 <SystemInit+0xe8>)
 80013f6:	f043 0307 	orr.w	r3, r3, #7
 80013fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <SystemInit+0xec>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a2d      	ldr	r2, [pc, #180]	@ (80014b8 <SystemInit+0xec>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001408:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <SystemInit+0xec>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <SystemInit+0xec>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4929      	ldr	r1, [pc, #164]	@ (80014b8 <SystemInit+0xec>)
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <SystemInit+0xf0>)
 8001416:	4013      	ands	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <SystemInit+0xe8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <SystemInit+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 030f 	bic.w	r3, r3, #15
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <SystemInit+0xe8>)
 8001430:	f043 0307 	orr.w	r3, r3, #7
 8001434:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <SystemInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <SystemInit+0xec>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <SystemInit+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <SystemInit+0xec>)
 800144a:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <SystemInit+0xf4>)
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <SystemInit+0xec>)
 8001450:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <SystemInit+0xf8>)
 8001452:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <SystemInit+0xec>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <SystemInit+0xfc>)
 8001458:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <SystemInit+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <SystemInit+0xec>)
 8001462:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <SystemInit+0xfc>)
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <SystemInit+0xec>)
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <SystemInit+0xfc>)
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <SystemInit+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <SystemInit+0xec>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <SystemInit+0xec>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001482:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <SystemInit+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <SystemInit+0x100>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <SystemInit+0x104>)
 8001490:	4013      	ands	r3, r2
 8001492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001496:	d202      	bcs.n	800149e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <SystemInit+0x108>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <SystemInit+0x10c>)
 80014a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	52002000 	.word	0x52002000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c0:	02020200 	.word	0x02020200
 80014c4:	01ff0000 	.word	0x01ff0000
 80014c8:	01010280 	.word	0x01010280
 80014cc:	5c001000 	.word	0x5c001000
 80014d0:	ffff0000 	.word	0xffff0000
 80014d4:	51008108 	.word	0x51008108
 80014d8:	52004000 	.word	0x52004000

080014dc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_TIM6_Init+0x64>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	@ (8001544 <MX_TIM6_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_TIM6_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_TIM6_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_TIM6_Init+0x64>)
 8001500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001504:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_TIM6_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_TIM6_Init+0x64>)
 800150e:	f007 fb1d 	bl	8008b4c <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001518:	f7ff fed0 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800151c:	2320      	movs	r3, #32
 800151e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_TIM6_Init+0x64>)
 800152a:	f007 fc0d 	bl	8008d48 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001534:	f7ff fec2 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	24004f78 	.word	0x24004f78
 8001544:	40001000 	.word	0x40001000

08001548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <HAL_TIM_Base_MspInit+0x3c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001560:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <HAL_TIM_Base_MspInit+0x40>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40001000 	.word	0x40001000
 8001588:	58024400 	.word	0x58024400

0800158c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <MX_USART3_UART_Init+0x90>)
 8001592:	4a23      	ldr	r2, [pc, #140]	@ (8001620 <MX_USART3_UART_Init+0x94>)
 8001594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <MX_USART3_UART_Init+0x90>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d4:	4811      	ldr	r0, [pc, #68]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015d6:	f007 fc45 	bl	8008e64 <HAL_UART_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015e0:	f7ff fe6c 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015e8:	f008 fc4d 	bl	8009e86 <HAL_UARTEx_SetTxFifoThreshold>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015f2:	f7ff fe63 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <MX_USART3_UART_Init+0x90>)
 80015fa:	f008 fc82 	bl	8009f02 <HAL_UARTEx_SetRxFifoThreshold>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001604:	f7ff fe5a 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_USART3_UART_Init+0x90>)
 800160a:	f008 fc03 	bl	8009e14 <HAL_UARTEx_DisableFifoMode>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001614:	f7ff fe52 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24004fc4 	.word	0x24004fc4
 8001620:	40004800 	.word	0x40004800

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0ba      	sub	sp, #232	@ 0xe8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	22c0      	movs	r2, #192	@ 0xc0
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f008 fff0 	bl	800a62a <memset>
  if(uartHandle->Instance==USART3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a41      	ldr	r2, [pc, #260]	@ (8001754 <HAL_UART_MspInit+0x130>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d17b      	bne.n	800174c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001654:	f04f 0202 	mov.w	r2, #2
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fd70 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001676:	f7ff fe21 	bl	80012bc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <HAL_UART_MspInit+0x134>)
 800167c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001680:	4a35      	ldr	r2, [pc, #212]	@ (8001758 <HAL_UART_MspInit+0x134>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001686:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <HAL_UART_MspInit+0x134>)
 800168c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_UART_MspInit+0x134>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169e:	4a2e      	ldr	r2, [pc, #184]	@ (8001758 <HAL_UART_MspInit+0x134>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <HAL_UART_MspInit+0x134>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016da:	4619      	mov	r1, r3
 80016dc:	481f      	ldr	r0, [pc, #124]	@ (800175c <HAL_UART_MspInit+0x138>)
 80016de:	f003 fa0d 	bl	8004afc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 80016e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <HAL_UART_MspInit+0x140>)
 80016e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 80016ea:	222e      	movs	r2, #46	@ 0x2e
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 80016f0:	2240      	movs	r2, #64	@ 0x40
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001720:	480f      	ldr	r0, [pc, #60]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001722:	f001 fd29 	bl	8003178 <HAL_DMA_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800172c:	f7ff fdc6 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001734:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_UART_MspInit+0x13c>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2027      	movs	r0, #39	@ 0x27
 8001742:	f001 fb80 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001746:	2027      	movs	r0, #39	@ 0x27
 8001748:	f001 fb97 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	37e8      	adds	r7, #232	@ 0xe8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004800 	.word	0x40004800
 8001758:	58024400 	.word	0x58024400
 800175c:	58020c00 	.word	0x58020c00
 8001760:	24005058 	.word	0x24005058
 8001764:	40020410 	.word	0x40020410

08001768 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001770:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001774:	2209      	movs	r2, #9
 8001776:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800177a:	2202      	movs	r2, #2
 800177c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001786:	2202      	movs	r2, #2
 8001788:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800178c:	2201      	movs	r2, #1
 800178e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017b0:	f003 fb6d 	bl	8004e8e <HAL_PCD_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017ba:	f7ff fd7f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	240050d0 	.word	0x240050d0
 80017c8:	40080000 	.word	0x40080000

080017cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ba      	sub	sp, #232	@ 0xe8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	22c0      	movs	r2, #192	@ 0xc0
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 ff1c 	bl	800a62a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a30      	ldr	r2, [pc, #192]	@ (80018b8 <HAL_PCD_MspInit+0xec>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d159      	bne.n	80018b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001808:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fc9b 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001820:	f7ff fd4c 	bl	80012bc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001824:	f003 fc9e 	bl	8005164 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001846:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800184a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001860:	230a      	movs	r3, #10
 8001862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800186a:	4619      	mov	r1, r3
 800186c:	4814      	ldr	r0, [pc, #80]	@ (80018c0 <HAL_PCD_MspInit+0xf4>)
 800186e:	f003 f945 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <HAL_PCD_MspInit+0xf4>)
 800188e:	f003 f935 	bl	8004afc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 8001894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 800189a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800189e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_PCD_MspInit+0xf0>)
 80018a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018b0:	bf00      	nop
 80018b2:	37e8      	adds	r7, #232	@ 0xe8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40080000 	.word	0x40080000
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58020000 	.word	0x58020000

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
	   ldr   sp, =_estack      /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f7ff fd80 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f008 fea3 	bl	800a63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff fbef 	bl	80010d8 <main>
  bx  lr
 80018fa:	4770      	bx	lr
	   ldr   sp, =_estack      /* set stack pointer */
 80018fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001900:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001904:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001908:	0800a6ec 	.word	0x0800a6ec
  ldr r2, =_sbss
 800190c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001910:	240055b8 	.word	0x240055b8

08001914 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191e:	2003      	movs	r0, #3
 8001920:	f001 fa86 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001924:	f004 fa3e 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_Init+0x68>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	4913      	ldr	r1, [pc, #76]	@ (8001984 <HAL_Init+0x6c>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_Init+0x68>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <HAL_Init+0x6c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <HAL_Init+0x70>)
 800195a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800195c:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <HAL_Init+0x74>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f814 	bl	8001990 <HAL_InitTick>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e002      	b.n	8001978 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001972:	f7ff fca9 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	58024400 	.word	0x58024400
 8001984:	0800a69c 	.word	0x0800a69c
 8001988:	2400000c 	.word	0x2400000c
 800198c:	24000008 	.word	0x24000008

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_InitTick+0x60>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e021      	b.n	80019e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_InitTick+0x64>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_InitTick+0x60>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fa6b 	bl	8002e96 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f001 fa35 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <HAL_InitTick+0x68>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24000014 	.word	0x24000014
 80019f4:	24000008 	.word	0x24000008
 80019f8:	24000010 	.word	0x24000010

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	24000014 	.word	0x24000014
 8001a20:	240055b4 	.word	0x240055b4

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	240055b4 	.word	0x240055b4

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	24000014 	.word	0x24000014

08001a84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetREVID+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	5c001000 	.word	0x5c001000

08001a9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 0202 	bic.w	r2, r3, #2
 8001aac:	4904      	ldr	r1, [pc, #16]	@ (8001ac0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	58003c00 	.word	0x58003c00

08001ac4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	58003c00 	.word	0x58003c00

08001ae4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	4904      	ldr	r1, [pc, #16]	@ (8001b0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	58000400 	.word	0x58000400

08001b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3360      	adds	r3, #96	@ 0x60
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3360      	adds	r3, #96	@ 0x60
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]
  }
}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3330      	adds	r3, #48	@ 0x30
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	211f      	movs	r1, #31
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	f003 011f 	and.w	r1, r3, #31
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3314      	adds	r3, #20
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0e5b      	lsrs	r3, r3, #25
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	0d1b      	lsrs	r3, r3, #20
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2107      	movs	r1, #7
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	401a      	ands	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	0d1b      	lsrs	r3, r3, #20
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0318 	and.w	r3, r3, #24
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf4:	40d9      	lsrs	r1, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	000fffff 	.word	0x000fffff

08001d18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6093      	str	r3, [r2, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	5fffffc0 	.word	0x5fffffc0

08001d3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	6fffffc0 	.word	0x6fffffc0

08001d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_IsEnabled+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_IsEnabled+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e18f      	b.n	8002162 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe fe85 	bl	8000b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff67 	bl	8001d3c <LL_ADC_IsDeepPowerDownEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff4d 	bl	8001d18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff82 	bl	8001d8c <LL_ADC_IsInternalRegulatorEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d114      	bne.n	8001eb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff66 	bl	8001d64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b87      	ldr	r3, [pc, #540]	@ (80020b8 <HAL_ADC_Init+0x290>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	4a87      	ldr	r2, [pc, #540]	@ (80020bc <HAL_ADC_Init+0x294>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff65 	bl	8001d8c <LL_ADC_IsInternalRegulatorEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff76 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001eee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 8129 	bne.w	8002150 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 8125 	bne.w	8002150 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f0e:	f043 0202 	orr.w	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff4a 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d136      	bne.n	8001f94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_ADC_Init+0x298>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d004      	beq.n	8001f3a <HAL_ADC_Init+0x112>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a63      	ldr	r2, [pc, #396]	@ (80020c4 <HAL_ADC_Init+0x29c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10e      	bne.n	8001f58 <HAL_ADC_Init+0x130>
 8001f3a:	4861      	ldr	r0, [pc, #388]	@ (80020c0 <HAL_ADC_Init+0x298>)
 8001f3c:	f7ff ff3a 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f40:	4604      	mov	r4, r0
 8001f42:	4860      	ldr	r0, [pc, #384]	@ (80020c4 <HAL_ADC_Init+0x29c>)
 8001f44:	f7ff ff36 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e008      	b.n	8001f6a <HAL_ADC_Init+0x142>
 8001f58:	485b      	ldr	r0, [pc, #364]	@ (80020c8 <HAL_ADC_Init+0x2a0>)
 8001f5a:	f7ff ff2b 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a53      	ldr	r2, [pc, #332]	@ (80020c0 <HAL_ADC_Init+0x298>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_Init+0x15a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	@ (80020c4 <HAL_ADC_Init+0x29c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x15e>
 8001f82:	4a52      	ldr	r2, [pc, #328]	@ (80020cc <HAL_ADC_Init+0x2a4>)
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_Init+0x160>
 8001f86:	4a52      	ldr	r2, [pc, #328]	@ (80020d0 <HAL_ADC_Init+0x2a8>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	f7ff fdbe 	bl	8001b10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f94:	f7ff fd76 	bl	8001a84 <HAL_GetREVID>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d914      	bls.n	8001fcc <HAL_ADC_Init+0x1a4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d110      	bne.n	8001fcc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7d5b      	ldrb	r3, [r3, #21]
 8001fae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7f1b      	ldrb	r3, [r3, #28]
 8001fc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc4:	f043 030c 	orr.w	r3, r3, #12
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e00d      	b.n	8001fe8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7d5b      	ldrb	r3, [r3, #21]
 8001fd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fdc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7f1b      	ldrb	r3, [r3, #28]
 8001fe2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	045b      	lsls	r3, r3, #17
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <HAL_ADC_Init+0x2ac>)
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	69b9      	ldr	r1, [r7, #24]
 800202a:	430b      	orrs	r3, r1
 800202c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fed1 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8002038:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fede 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 8002044:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d15f      	bne.n	800210c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d15c      	bne.n	800210c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7d1b      	ldrb	r3, [r3, #20]
 8002056:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_ADC_Init+0x2b0>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800207a:	2b01      	cmp	r3, #1
 800207c:	d130      	bne.n	80020e0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_ADC_Init+0x2b4>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002092:	3a01      	subs	r2, #1
 8002094:	0411      	lsls	r1, r2, #16
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020a6:	430a      	orrs	r2, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
 80020b4:	e01c      	b.n	80020f0 <HAL_ADC_Init+0x2c8>
 80020b6:	bf00      	nop
 80020b8:	24000008 	.word	0x24000008
 80020bc:	053e2d63 	.word	0x053e2d63
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40022100 	.word	0x40022100
 80020c8:	58026000 	.word	0x58026000
 80020cc:	40022300 	.word	0x40022300
 80020d0:	58026300 	.word	0x58026300
 80020d4:	fff0c003 	.word	0xfff0c003
 80020d8:	ffffbffc 	.word	0xffffbffc
 80020dc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fb8c 	bl	8002824 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10c      	bne.n	800212e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f023 010f 	bic.w	r1, r3, #15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
 800212c:	e007      	b.n	800213e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 020f 	bic.w	r2, r2, #15
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
 800214e:	e007      	b.n	8002160 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	f043 0210 	orr.w	r2, r3, #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002160:	7ffb      	ldrb	r3, [r7, #31]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop

0800216c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b0a1      	sub	sp, #132	@ 0x84
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a65      	ldr	r2, [pc, #404]	@ (800231c <HAL_ADC_ConfigChannel+0x1b0>)
 8002186:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x2a>
 8002192:	2302      	movs	r3, #2
 8002194:	e32e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x688>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe19 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8313 	bne.w	80027d6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db2c      	blt.n	8002212 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d108      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x6a>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2201      	movs	r2, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	e016      	b.n	8002204 <HAL_ADC_ConfigChannel+0x98>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80021f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2201      	movs	r2, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	69d1      	ldr	r1, [r2, #28]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	430b      	orrs	r3, r1
 8002210:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	f7ff fcfe 	bl	8001c20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fdd6 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 800222e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fde3 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 800223a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 80b8 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80b4 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fd0d 	bl	8001c78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800225e:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_ADC_ConfigChannel+0x1b4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x118>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	e01d      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x154>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x13e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	e00a      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x154>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d02c      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d8:	f7ff fc4e 	bl	8001b78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6919      	ldr	r1, [r3, #16]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	7e5b      	ldrb	r3, [r3, #25]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x186>
 80022ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022f0:	e000      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x188>
 80022f2:	2300      	movs	r3, #0
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fc78 	bl	8001bea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7e1b      	ldrb	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1a4>
 800230a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800230e:	e000      	b.n	8002312 <HAL_ADC_ConfigChannel+0x1a6>
 8002310:	2300      	movs	r3, #0
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fc50 	bl	8001bb8 <LL_ADC_SetDataRightShift>
 8002318:	e04c      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x248>
 800231a:	bf00      	nop
 800231c:	47ff0000 	.word	0x47ff0000
 8002320:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	069b      	lsls	r3, r3, #26
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002346:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800236a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800238e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fcfb 	bl	8001db4 <LL_ADC_IsEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8211 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff fc7c 	bl	8001cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4aa1      	ldr	r2, [pc, #644]	@ (8002664 <HAL_ADC_ConfigChannel+0x4f8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f040 812e 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_ConfigChannel+0x2a0>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2b09      	cmp	r3, #9
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e019      	b.n	8002440 <HAL_ADC_ConfigChannel+0x2d4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800241e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	bf94      	ite	ls
 800243a:	2301      	movls	r3, #1
 800243c:	2300      	movhi	r3, #0
 800243e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002440:	2b00      	cmp	r3, #0
 8002442:	d079      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x2f4>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245e:	e015      	b.n	800248c <HAL_ADC_ConfigChannel+0x320>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800246e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002470:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800247c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x340>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	e017      	b.n	80024dc <HAL_ADC_ConfigChannel+0x370>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80024c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x396>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	051b      	lsls	r3, r3, #20
 8002500:	e018      	b.n	8002534 <HAL_ADC_ConfigChannel+0x3c8>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800251e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
 8002536:	e07e      	b.n	8002636 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3e8>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x414>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x434>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x464>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	61bb      	str	r3, [r7, #24]
  return result;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x490>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	e01b      	b.n	8002634 <HAL_ADC_ConfigChannel+0x4c8>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  return result;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	3b1e      	subs	r3, #30
 800262e:	051b      	lsls	r3, r3, #20
 8002630:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	4619      	mov	r1, r3
 800263c:	f7ff fb1c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f280 80cf 	bge.w	80027e8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_ADC_ConfigChannel+0x4fc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_ADC_ConfigChannel+0x4f2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_ADC_ConfigChannel+0x500>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x508>
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_ADC_ConfigChannel+0x504>)
 8002660:	e009      	b.n	8002676 <HAL_ADC_ConfigChannel+0x50a>
 8002662:	bf00      	nop
 8002664:	47ff0000 	.word	0x47ff0000
 8002668:	40022000 	.word	0x40022000
 800266c:	40022100 	.word	0x40022100
 8002670:	40022300 	.word	0x40022300
 8002674:	4b61      	ldr	r3, [pc, #388]	@ (80027fc <HAL_ADC_ConfigChannel+0x690>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fa70 	bl	8001b5c <LL_ADC_GetCommonPathInternalCh>
 800267c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a5f      	ldr	r2, [pc, #380]	@ (8002800 <HAL_ADC_ConfigChannel+0x694>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x526>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5d      	ldr	r2, [pc, #372]	@ (8002804 <HAL_ADC_ConfigChannel+0x698>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10e      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x544>
 8002692:	485b      	ldr	r0, [pc, #364]	@ (8002800 <HAL_ADC_ConfigChannel+0x694>)
 8002694:	f7ff fb8e 	bl	8001db4 <LL_ADC_IsEnabled>
 8002698:	4604      	mov	r4, r0
 800269a:	485a      	ldr	r0, [pc, #360]	@ (8002804 <HAL_ADC_ConfigChannel+0x698>)
 800269c:	f7ff fb8a 	bl	8001db4 <LL_ADC_IsEnabled>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4323      	orrs	r3, r4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e008      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x556>
 80026b0:	4855      	ldr	r0, [pc, #340]	@ (8002808 <HAL_ADC_ConfigChannel+0x69c>)
 80026b2:	f7ff fb7f 	bl	8001db4 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07d      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a50      	ldr	r2, [pc, #320]	@ (800280c <HAL_ADC_ConfigChannel+0x6a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d130      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x5c6>
 80026d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12b      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4a      	ldr	r2, [pc, #296]	@ (8002808 <HAL_ADC_ConfigChannel+0x69c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f040 8081 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a45      	ldr	r2, [pc, #276]	@ (8002800 <HAL_ADC_ConfigChannel+0x694>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x58e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a43      	ldr	r2, [pc, #268]	@ (8002804 <HAL_ADC_ConfigChannel+0x698>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x592>
 80026fa:	4a45      	ldr	r2, [pc, #276]	@ (8002810 <HAL_ADC_ConfigChannel+0x6a4>)
 80026fc:	e000      	b.n	8002700 <HAL_ADC_ConfigChannel+0x594>
 80026fe:	4a3f      	ldr	r2, [pc, #252]	@ (80027fc <HAL_ADC_ConfigChannel+0x690>)
 8002700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7ff fa14 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270e:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <HAL_ADC_ConfigChannel+0x6a8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <HAL_ADC_ConfigChannel+0x6ac>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	3301      	adds	r3, #1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002722:	e002      	b.n	800272a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002730:	e05a      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a39      	ldr	r2, [pc, #228]	@ (800281c <HAL_ADC_ConfigChannel+0x6b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d11e      	bne.n	800277a <HAL_ADC_ConfigChannel+0x60e>
 800273c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800273e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d119      	bne.n	800277a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2f      	ldr	r2, [pc, #188]	@ (8002808 <HAL_ADC_ConfigChannel+0x69c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d14b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2a      	ldr	r2, [pc, #168]	@ (8002800 <HAL_ADC_ConfigChannel+0x694>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x5f8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_ADC_ConfigChannel+0x698>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x5fc>
 8002764:	4a2a      	ldr	r2, [pc, #168]	@ (8002810 <HAL_ADC_ConfigChannel+0x6a4>)
 8002766:	e000      	b.n	800276a <HAL_ADC_ConfigChannel+0x5fe>
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_ADC_ConfigChannel+0x690>)
 800276a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800276c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7ff f9df 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002778:	e036      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a28      	ldr	r2, [pc, #160]	@ (8002820 <HAL_ADC_ConfigChannel+0x6b4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d131      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
 8002784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d12c      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_ADC_ConfigChannel+0x69c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d127      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <HAL_ADC_ConfigChannel+0x694>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x640>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_ADC_ConfigChannel+0x698>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x644>
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_ADC_ConfigChannel+0x6a4>)
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x646>
 80027b0:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <HAL_ADC_ConfigChannel+0x690>)
 80027b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7ff f9bb 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
 80027c0:	e012      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027d4:	e008      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3784      	adds	r7, #132	@ 0x84
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	58026300 	.word	0x58026300
 8002800:	40022000 	.word	0x40022000
 8002804:	40022100 	.word	0x40022100
 8002808:	58026000 	.word	0x58026000
 800280c:	cb840000 	.word	0xcb840000
 8002810:	40022300 	.word	0x40022300
 8002814:	24000008 	.word	0x24000008
 8002818:	053e2d63 	.word	0x053e2d63
 800281c:	c7520000 	.word	0xc7520000
 8002820:	cfb80000 	.word	0xcfb80000

08002824 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a7a      	ldr	r2, [pc, #488]	@ (8002a1c <ADC_ConfigureBoostMode+0x1f8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <ADC_ConfigureBoostMode+0x1c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a79      	ldr	r2, [pc, #484]	@ (8002a20 <ADC_ConfigureBoostMode+0x1fc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <ADC_ConfigureBoostMode+0x30>
 8002840:	4b78      	ldr	r3, [pc, #480]	@ (8002a24 <ADC_ConfigureBoostMode+0x200>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e008      	b.n	8002866 <ADC_ConfigureBoostMode+0x42>
 8002854:	4b74      	ldr	r3, [pc, #464]	@ (8002a28 <ADC_ConfigureBoostMode+0x204>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01c      	beq.n	80028a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800286a:	f003 fc15 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 800286e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002878:	d010      	beq.n	800289c <ADC_ConfigureBoostMode+0x78>
 800287a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800287e:	d873      	bhi.n	8002968 <ADC_ConfigureBoostMode+0x144>
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002884:	d002      	beq.n	800288c <ADC_ConfigureBoostMode+0x68>
 8002886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800288a:	d16d      	bne.n	8002968 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e068      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	e064      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	f004 fe5a 	bl	8007564 <HAL_RCCEx_GetPeriphCLKFreq>
 80028b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028ba:	d051      	beq.n	8002960 <ADC_ConfigureBoostMode+0x13c>
 80028bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028c0:	d854      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028c2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028c6:	d047      	beq.n	8002958 <ADC_ConfigureBoostMode+0x134>
 80028c8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028cc:	d84e      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028ce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028d2:	d03d      	beq.n	8002950 <ADC_ConfigureBoostMode+0x12c>
 80028d4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028d8:	d848      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028de:	d033      	beq.n	8002948 <ADC_ConfigureBoostMode+0x124>
 80028e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028e4:	d842      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028ea:	d029      	beq.n	8002940 <ADC_ConfigureBoostMode+0x11c>
 80028ec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028f0:	d83c      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028f6:	d01a      	beq.n	800292e <ADC_ConfigureBoostMode+0x10a>
 80028f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028fc:	d836      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 80028fe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002902:	d014      	beq.n	800292e <ADC_ConfigureBoostMode+0x10a>
 8002904:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002908:	d830      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 800290a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290e:	d00e      	beq.n	800292e <ADC_ConfigureBoostMode+0x10a>
 8002910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002914:	d82a      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 8002916:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800291a:	d008      	beq.n	800292e <ADC_ConfigureBoostMode+0x10a>
 800291c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002920:	d824      	bhi.n	800296c <ADC_ConfigureBoostMode+0x148>
 8002922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002926:	d002      	beq.n	800292e <ADC_ConfigureBoostMode+0x10a>
 8002928:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800292c:	d11e      	bne.n	800296c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	60fb      	str	r3, [r7, #12]
        break;
 800293e:	e016      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
        break;
 8002946:	e012      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	60fb      	str	r3, [r7, #12]
        break;
 800294e:	e00e      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	60fb      	str	r3, [r7, #12]
        break;
 8002956:	e00a      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	09db      	lsrs	r3, r3, #7
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e006      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	60fb      	str	r3, [r7, #12]
        break;
 8002966:	e002      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800296c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800296e:	f7ff f889 	bl	8001a84 <HAL_GetREVID>
 8002972:	4603      	mov	r3, r0
 8002974:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002978:	4293      	cmp	r3, r2
 800297a:	d815      	bhi.n	80029a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <ADC_ConfigureBoostMode+0x208>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d908      	bls.n	8002996 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002992:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002994:	e03e      	b.n	8002a14 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a4:	609a      	str	r2, [r3, #8]
}
 80029a6:	e035      	b.n	8002a14 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <ADC_ConfigureBoostMode+0x20c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d808      	bhi.n	80029c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029c4:	609a      	str	r2, [r3, #8]
}
 80029c6:	e025      	b.n	8002a14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <ADC_ConfigureBoostMode+0x210>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d80a      	bhi.n	80029e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e2:	609a      	str	r2, [r3, #8]
}
 80029e4:	e016      	b.n	8002a14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <ADC_ConfigureBoostMode+0x214>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d80a      	bhi.n	8002a04 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	e007      	b.n	8002a14 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40022100 	.word	0x40022100
 8002a24:	40022300 	.word	0x40022300
 8002a28:	58026300 	.word	0x58026300
 8002a2c:	01312d00 	.word	0x01312d00
 8002a30:	005f5e10 	.word	0x005f5e10
 8002a34:	00bebc20 	.word	0x00bebc20
 8002a38:	017d7840 	.word	0x017d7840

08002a3c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	77fb      	strb	r3, [r7, #31]
 8002a56:	e10e      	b.n	8002c76 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a66:	d102      	bne.n	8002a6e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e103      	b.n	8002c76 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe f933 	bl	8000cf4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002aa2:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002aa8:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002aae:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002ab4:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <HAL_COMP_Init+0x244>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d108      	bne.n	8002aec <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0210 	orr.w	r2, r2, #16
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e007      	b.n	8002afc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0210 	bic.w	r2, r2, #16
 8002afa:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_COMP_Init+0xfc>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b10:	4b5c      	ldr	r3, [pc, #368]	@ (8002c84 <HAL_COMP_Init+0x248>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	4a5c      	ldr	r2, [pc, #368]	@ (8002c88 <HAL_COMP_Init+0x24c>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002b2a:	e002      	b.n	8002b32 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a53      	ldr	r2, [pc, #332]	@ (8002c8c <HAL_COMP_Init+0x250>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d102      	bne.n	8002b48 <HAL_COMP_Init+0x10c>
 8002b42:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b46:	e001      	b.n	8002b4c <HAL_COMP_Init+0x110>
 8002b48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b4c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d06d      	beq.n	8002c36 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
 8002b76:	e008      	b.n	8002b8a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	e008      	b.n	8002bba <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002be4:	e00a      	b.n	8002bfc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002c1c:	e021      	b.n	8002c62 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c22:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c2e:	4013      	ands	r3, r2
 8002c30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002c34:	e015      	b.n	8002c62 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c46:	4013      	ands	r3, r2
 8002c48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c50:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	f0e8cce1 	.word	0xf0e8cce1
 8002c84:	24000008 	.word	0x24000008
 8002c88:	053e2d63 	.word	0x053e2d63
 8002c8c:	5800380c 	.word	0x5800380c

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00
 8002cd4:	05fa0000 	.word	0x05fa0000

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	@ (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	@ (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	@ (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	@ 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff40 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff90 	bl	8002d84 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5f 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff33 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa4 	bl	8002dec <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e014      	b.n	8002eea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fd ff87 	bl	8000de4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_DAC_ConfigChannel+0x1e>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e12a      	b.n	800316c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	795b      	ldrb	r3, [r3, #5]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_DAC_ConfigChannel+0x2e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e124      	b.n	800316c <HAL_DAC_ConfigChannel+0x278>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d17a      	bne.n	800302c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f36:	f7fe fd75 	bl	8001a24 <HAL_GetTick>
 8002f3a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d13d      	bne.n	8002fbe <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f42:	e018      	b.n	8002f76 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f44:	f7fe fd6e 	bl	8001a24 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d911      	bls.n	8002f76 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f58:	4b86      	ldr	r3, [pc, #536]	@ (8003174 <HAL_DAC_ConfigChannel+0x280>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f043 0208 	orr.w	r2, r3, #8
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0fa      	b.n	800316c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8003174 <HAL_DAC_ConfigChannel+0x280>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1df      	bne.n	8002f44 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	6992      	ldr	r2, [r2, #24]
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f8e:	e020      	b.n	8002fd2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f90:	f7fe fd48 	bl	8001a24 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d90f      	bls.n	8002fbe <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da0a      	bge.n	8002fbe <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f043 0208 	orr.w	r2, r3, #8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0d6      	b.n	800316c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dbe3      	blt.n	8002f90 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	6992      	ldr	r2, [r2, #24]
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	ea02 0103 	and.w	r1, r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	21ff      	movs	r1, #255	@ 0xff
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	ea02 0103 	and.w	r1, r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d11d      	bne.n	8003070 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2207      	movs	r2, #7
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
 8003098:	e00f      	b.n	80030ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d102      	bne.n	80030a8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030a2:	2301      	movs	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a6:	e008      	b.n	80030ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030b0:	2301      	movs	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b4:	e001      	b.n	80030ba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	22c0      	movs	r2, #192	@ 0xc0
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800316c:	4618      	mov	r0, r3
 800316e:	3728      	adds	r7, #40	@ 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20008000 	.word	0x20008000

08003178 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7fe fc50 	bl	8001a24 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e316      	b.n	80037be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a66      	ldr	r2, [pc, #408]	@ (8003330 <HAL_DMA_Init+0x1b8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d04a      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a65      	ldr	r2, [pc, #404]	@ (8003334 <HAL_DMA_Init+0x1bc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d045      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a63      	ldr	r2, [pc, #396]	@ (8003338 <HAL_DMA_Init+0x1c0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d040      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a62      	ldr	r2, [pc, #392]	@ (800333c <HAL_DMA_Init+0x1c4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d03b      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a60      	ldr	r2, [pc, #384]	@ (8003340 <HAL_DMA_Init+0x1c8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d036      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003344 <HAL_DMA_Init+0x1cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d031      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003348 <HAL_DMA_Init+0x1d0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d02c      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5c      	ldr	r2, [pc, #368]	@ (800334c <HAL_DMA_Init+0x1d4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d027      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003350 <HAL_DMA_Init+0x1d8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a59      	ldr	r2, [pc, #356]	@ (8003354 <HAL_DMA_Init+0x1dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d01d      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a57      	ldr	r2, [pc, #348]	@ (8003358 <HAL_DMA_Init+0x1e0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a56      	ldr	r2, [pc, #344]	@ (800335c <HAL_DMA_Init+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a54      	ldr	r2, [pc, #336]	@ (8003360 <HAL_DMA_Init+0x1e8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a53      	ldr	r2, [pc, #332]	@ (8003364 <HAL_DMA_Init+0x1ec>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a51      	ldr	r2, [pc, #324]	@ (8003368 <HAL_DMA_Init+0x1f0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Init+0xb8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a50      	ldr	r2, [pc, #320]	@ (800336c <HAL_DMA_Init+0x1f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Init+0xbc>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_DMA_Init+0xbe>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 813b 	beq.w	80034b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a37      	ldr	r2, [pc, #220]	@ (8003330 <HAL_DMA_Init+0x1b8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d04a      	beq.n	80032ec <HAL_DMA_Init+0x174>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a36      	ldr	r2, [pc, #216]	@ (8003334 <HAL_DMA_Init+0x1bc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d045      	beq.n	80032ec <HAL_DMA_Init+0x174>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a34      	ldr	r2, [pc, #208]	@ (8003338 <HAL_DMA_Init+0x1c0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d040      	beq.n	80032ec <HAL_DMA_Init+0x174>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a33      	ldr	r2, [pc, #204]	@ (800333c <HAL_DMA_Init+0x1c4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d03b      	beq.n	80032ec <HAL_DMA_Init+0x174>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a31      	ldr	r2, [pc, #196]	@ (8003340 <HAL_DMA_Init+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d036      	beq.n	80032ec <HAL_DMA_Init+0x174>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a30      	ldr	r2, [pc, #192]	@ (8003344 <HAL_DMA_Init+0x1cc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d031      	beq.n	80032ec <HAL_DMA_Init+0x174>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <HAL_DMA_Init+0x1d0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02c      	beq.n	80032ec <HAL_DMA_Init+0x174>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2d      	ldr	r2, [pc, #180]	@ (800334c <HAL_DMA_Init+0x1d4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d027      	beq.n	80032ec <HAL_DMA_Init+0x174>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003350 <HAL_DMA_Init+0x1d8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <HAL_DMA_Init+0x1dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d01d      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a28      	ldr	r2, [pc, #160]	@ (8003358 <HAL_DMA_Init+0x1e0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a27      	ldr	r2, [pc, #156]	@ (800335c <HAL_DMA_Init+0x1e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	@ (8003360 <HAL_DMA_Init+0x1e8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <HAL_DMA_Init+0x1ec>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	@ (8003368 <HAL_DMA_Init+0x1f0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_DMA_Init+0x174>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	@ (800336c <HAL_DMA_Init+0x1f4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <HAL_DMA_Init+0x186>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e007      	b.n	800330e <HAL_DMA_Init+0x196>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800330e:	e02f      	b.n	8003370 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003310:	f7fe fb88 	bl	8001a24 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b05      	cmp	r3, #5
 800331c:	d928      	bls.n	8003370 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e246      	b.n	80037be <HAL_DMA_Init+0x646>
 8003330:	40020010 	.word	0x40020010
 8003334:	40020028 	.word	0x40020028
 8003338:	40020040 	.word	0x40020040
 800333c:	40020058 	.word	0x40020058
 8003340:	40020070 	.word	0x40020070
 8003344:	40020088 	.word	0x40020088
 8003348:	400200a0 	.word	0x400200a0
 800334c:	400200b8 	.word	0x400200b8
 8003350:	40020410 	.word	0x40020410
 8003354:	40020428 	.word	0x40020428
 8003358:	40020440 	.word	0x40020440
 800335c:	40020458 	.word	0x40020458
 8003360:	40020470 	.word	0x40020470
 8003364:	40020488 	.word	0x40020488
 8003368:	400204a0 	.word	0x400204a0
 800336c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1c8      	bne.n	8003310 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4b83      	ldr	r3, [pc, #524]	@ (8003598 <HAL_DMA_Init+0x420>)
 800338a:	4013      	ands	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003396:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d107      	bne.n	80033d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	4313      	orrs	r3, r2
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033d4:	4b71      	ldr	r3, [pc, #452]	@ (800359c <HAL_DMA_Init+0x424>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b71      	ldr	r3, [pc, #452]	@ (80035a0 <HAL_DMA_Init+0x428>)
 80033da:	4013      	ands	r3, r2
 80033dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e0:	d328      	bcc.n	8003434 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b28      	cmp	r3, #40	@ 0x28
 80033e8:	d903      	bls.n	80033f2 <HAL_DMA_Init+0x27a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80033f0:	d917      	bls.n	8003422 <HAL_DMA_Init+0x2aa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f8:	d903      	bls.n	8003402 <HAL_DMA_Init+0x28a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b42      	cmp	r3, #66	@ 0x42
 8003400:	d90f      	bls.n	8003422 <HAL_DMA_Init+0x2aa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b46      	cmp	r3, #70	@ 0x46
 8003408:	d903      	bls.n	8003412 <HAL_DMA_Init+0x29a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b48      	cmp	r3, #72	@ 0x48
 8003410:	d907      	bls.n	8003422 <HAL_DMA_Init+0x2aa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b4e      	cmp	r3, #78	@ 0x4e
 8003418:	d905      	bls.n	8003426 <HAL_DMA_Init+0x2ae>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b52      	cmp	r3, #82	@ 0x52
 8003420:	d801      	bhi.n	8003426 <HAL_DMA_Init+0x2ae>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_DMA_Init+0x2b0>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003432:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0307 	bic.w	r3, r3, #7
 800344a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	2b04      	cmp	r3, #4
 800345c:	d117      	bne.n	800348e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f001 f9b9 	bl	80047e8 <DMA_CheckFifoParam>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2240      	movs	r2, #64	@ 0x40
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e197      	b.n	80037be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f001 f8f4 	bl	8004684 <DMA_CalcBaseAndBitshift>
 800349c:	4603      	mov	r3, r0
 800349e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	223f      	movs	r2, #63	@ 0x3f
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e0cd      	b.n	800364e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <HAL_DMA_Init+0x42c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_DMA_Init+0x430>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_DMA_Init+0x434>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a36      	ldr	r2, [pc, #216]	@ (80035b0 <HAL_DMA_Init+0x438>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <HAL_DMA_Init+0x43c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <HAL_DMA_Init+0x440>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a32      	ldr	r2, [pc, #200]	@ (80035bc <HAL_DMA_Init+0x444>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_Init+0x38a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <HAL_DMA_Init+0x448>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_DMA_Init+0x38e>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_DMA_Init+0x390>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a24      	ldr	r2, [pc, #144]	@ (80035a4 <HAL_DMA_Init+0x42c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d021      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <HAL_DMA_Init+0x430>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01c      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <HAL_DMA_Init+0x434>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d017      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	@ (80035b0 <HAL_DMA_Init+0x438>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d012      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	@ (80035b4 <HAL_DMA_Init+0x43c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00d      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <HAL_DMA_Init+0x440>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d008      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	@ (80035bc <HAL_DMA_Init+0x444>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <HAL_DMA_Init+0x3e4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <HAL_DMA_Init+0x448>)
 800355a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <HAL_DMA_Init+0x44c>)
 8003578:	4013      	ands	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d021      	beq.n	80035c8 <HAL_DMA_Init+0x450>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b80      	cmp	r3, #128	@ 0x80
 800358a:	d102      	bne.n	8003592 <HAL_DMA_Init+0x41a>
 800358c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003590:	e01b      	b.n	80035ca <HAL_DMA_Init+0x452>
 8003592:	2300      	movs	r3, #0
 8003594:	e019      	b.n	80035ca <HAL_DMA_Init+0x452>
 8003596:	bf00      	nop
 8003598:	fe10803f 	.word	0xfe10803f
 800359c:	5c001000 	.word	0x5c001000
 80035a0:	ffff0000 	.word	0xffff0000
 80035a4:	58025408 	.word	0x58025408
 80035a8:	5802541c 	.word	0x5802541c
 80035ac:	58025430 	.word	0x58025430
 80035b0:	58025444 	.word	0x58025444
 80035b4:	58025458 	.word	0x58025458
 80035b8:	5802546c 	.word	0x5802546c
 80035bc:	58025480 	.word	0x58025480
 80035c0:	58025494 	.word	0x58025494
 80035c4:	fffe000f 	.word	0xfffe000f
 80035c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4b6e      	ldr	r3, [pc, #440]	@ (80037c8 <HAL_DMA_Init+0x650>)
 8003610:	4413      	add	r3, r2
 8003612:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_DMA_Init+0x654>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 f82f 	bl	8004684 <DMA_CalcBaseAndBitshift>
 8003626:	4603      	mov	r3, r0
 8003628:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2201      	movs	r2, #1
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	e008      	b.n	800364e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2240      	movs	r2, #64	@ 0x40
 8003640:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0b7      	b.n	80037be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5f      	ldr	r2, [pc, #380]	@ (80037d0 <HAL_DMA_Init+0x658>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d072      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5d      	ldr	r2, [pc, #372]	@ (80037d4 <HAL_DMA_Init+0x65c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d06d      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5c      	ldr	r2, [pc, #368]	@ (80037d8 <HAL_DMA_Init+0x660>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d068      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_DMA_Init+0x664>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d063      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a59      	ldr	r2, [pc, #356]	@ (80037e0 <HAL_DMA_Init+0x668>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d05e      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a57      	ldr	r2, [pc, #348]	@ (80037e4 <HAL_DMA_Init+0x66c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d059      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a56      	ldr	r2, [pc, #344]	@ (80037e8 <HAL_DMA_Init+0x670>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d054      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a54      	ldr	r2, [pc, #336]	@ (80037ec <HAL_DMA_Init+0x674>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04f      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a53      	ldr	r2, [pc, #332]	@ (80037f0 <HAL_DMA_Init+0x678>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04a      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a51      	ldr	r2, [pc, #324]	@ (80037f4 <HAL_DMA_Init+0x67c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d045      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a50      	ldr	r2, [pc, #320]	@ (80037f8 <HAL_DMA_Init+0x680>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d040      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	@ (80037fc <HAL_DMA_Init+0x684>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03b      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003800 <HAL_DMA_Init+0x688>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d036      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003804 <HAL_DMA_Init+0x68c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4a      	ldr	r2, [pc, #296]	@ (8003808 <HAL_DMA_Init+0x690>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d02c      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a48      	ldr	r2, [pc, #288]	@ (800380c <HAL_DMA_Init+0x694>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d027      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a47      	ldr	r2, [pc, #284]	@ (8003810 <HAL_DMA_Init+0x698>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a45      	ldr	r2, [pc, #276]	@ (8003814 <HAL_DMA_Init+0x69c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a44      	ldr	r2, [pc, #272]	@ (8003818 <HAL_DMA_Init+0x6a0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a42      	ldr	r2, [pc, #264]	@ (800381c <HAL_DMA_Init+0x6a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a41      	ldr	r2, [pc, #260]	@ (8003820 <HAL_DMA_Init+0x6a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3f      	ldr	r2, [pc, #252]	@ (8003824 <HAL_DMA_Init+0x6ac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3e      	ldr	r2, [pc, #248]	@ (8003828 <HAL_DMA_Init+0x6b0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_DMA_Init+0x5c6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3c      	ldr	r2, [pc, #240]	@ (800382c <HAL_DMA_Init+0x6b4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_DMA_Init+0x5ca>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_DMA_Init+0x5cc>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d032      	beq.n	80037ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 f8c9 	bl	80048e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b80      	cmp	r3, #128	@ 0x80
 8003754:	d102      	bne.n	800375c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003770:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <HAL_DMA_Init+0x624>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d80c      	bhi.n	800379c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f001 f946 	bl	8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	e008      	b.n	80037ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	a7fdabf8 	.word	0xa7fdabf8
 80037cc:	cccccccd 	.word	0xcccccccd
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	58025408 	.word	0x58025408
 8003814:	5802541c 	.word	0x5802541c
 8003818:	58025430 	.word	0x58025430
 800381c:	58025444 	.word	0x58025444
 8003820:	58025458 	.word	0x58025458
 8003824:	5802546c 	.word	0x5802546c
 8003828:	58025480 	.word	0x58025480
 800382c:	58025494 	.word	0x58025494

08003830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	@ 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800383c:	4b67      	ldr	r3, [pc, #412]	@ (80039dc <HAL_DMA_IRQHandler+0x1ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a67      	ldr	r2, [pc, #412]	@ (80039e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a9b      	lsrs	r3, r3, #10
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5f      	ldr	r2, [pc, #380]	@ (80039e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d04a      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5d      	ldr	r2, [pc, #372]	@ (80039e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d045      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5c      	ldr	r2, [pc, #368]	@ (80039ec <HAL_DMA_IRQHandler+0x1bc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d040      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5a      	ldr	r2, [pc, #360]	@ (80039f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d03b      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a59      	ldr	r2, [pc, #356]	@ (80039f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d036      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a57      	ldr	r2, [pc, #348]	@ (80039f8 <HAL_DMA_IRQHandler+0x1c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d031      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a56      	ldr	r2, [pc, #344]	@ (80039fc <HAL_DMA_IRQHandler+0x1cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d02c      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a54      	ldr	r2, [pc, #336]	@ (8003a00 <HAL_DMA_IRQHandler+0x1d0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d027      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a53      	ldr	r2, [pc, #332]	@ (8003a04 <HAL_DMA_IRQHandler+0x1d4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a51      	ldr	r2, [pc, #324]	@ (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01d      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a50      	ldr	r2, [pc, #320]	@ (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d018      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4d      	ldr	r2, [pc, #308]	@ (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a48      	ldr	r2, [pc, #288]	@ (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_DMA_IRQHandler+0xd6>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_DMA_IRQHandler+0xd8>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 842b 	beq.w	8004164 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2208      	movs	r2, #8
 8003918:	409a      	lsls	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80a2 	beq.w	8003a68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_DMA_IRQHandler+0x1b4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d045      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_DMA_IRQHandler+0x1bc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d03b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a27      	ldr	r2, [pc, #156]	@ (80039f8 <HAL_DMA_IRQHandler+0x1c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <HAL_DMA_IRQHandler+0x1cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <HAL_DMA_IRQHandler+0x1d0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <HAL_DMA_IRQHandler+0x1d4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d022      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d01d      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d018      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	@ (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d12f      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x1f4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf14      	ite	ne
 80039d2:	2301      	movne	r3, #1
 80039d4:	2300      	moveq	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e02e      	b.n	8003a38 <HAL_DMA_IRQHandler+0x208>
 80039da:	bf00      	nop
 80039dc:	24000008 	.word	0x24000008
 80039e0:	1b4e81b5 	.word	0x1b4e81b5
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2208      	movs	r2, #8
 8003a56:	409a      	lsls	r2, r3
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d06e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a69      	ldr	r2, [pc, #420]	@ (8003c28 <HAL_DMA_IRQHandler+0x3f8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a67      	ldr	r2, [pc, #412]	@ (8003c2c <HAL_DMA_IRQHandler+0x3fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a66      	ldr	r2, [pc, #408]	@ (8003c30 <HAL_DMA_IRQHandler+0x400>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a64      	ldr	r2, [pc, #400]	@ (8003c34 <HAL_DMA_IRQHandler+0x404>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_DMA_IRQHandler+0x408>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a61      	ldr	r2, [pc, #388]	@ (8003c3c <HAL_DMA_IRQHandler+0x40c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a60      	ldr	r2, [pc, #384]	@ (8003c40 <HAL_DMA_IRQHandler+0x410>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c44 <HAL_DMA_IRQHandler+0x414>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8003c48 <HAL_DMA_IRQHandler+0x418>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <HAL_DMA_IRQHandler+0x41c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c50 <HAL_DMA_IRQHandler+0x420>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a58      	ldr	r2, [pc, #352]	@ (8003c54 <HAL_DMA_IRQHandler+0x424>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a57      	ldr	r2, [pc, #348]	@ (8003c58 <HAL_DMA_IRQHandler+0x428>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a55      	ldr	r2, [pc, #340]	@ (8003c5c <HAL_DMA_IRQHandler+0x42c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a54      	ldr	r2, [pc, #336]	@ (8003c60 <HAL_DMA_IRQHandler+0x430>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a52      	ldr	r2, [pc, #328]	@ (8003c64 <HAL_DMA_IRQHandler+0x434>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10a      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x304>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e003      	b.n	8003b3c <HAL_DMA_IRQHandler+0x30c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2201      	movs	r2, #1
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2204      	movs	r2, #4
 8003b66:	409a      	lsls	r2, r3
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808f 	beq.w	8003c90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <HAL_DMA_IRQHandler+0x3f8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04a      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <HAL_DMA_IRQHandler+0x3fc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a29      	ldr	r2, [pc, #164]	@ (8003c30 <HAL_DMA_IRQHandler+0x400>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d040      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a27      	ldr	r2, [pc, #156]	@ (8003c34 <HAL_DMA_IRQHandler+0x404>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_DMA_IRQHandler+0x408>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d036      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a24      	ldr	r2, [pc, #144]	@ (8003c3c <HAL_DMA_IRQHandler+0x40c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_DMA_IRQHandler+0x410>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02c      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	@ (8003c44 <HAL_DMA_IRQHandler+0x414>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_DMA_IRQHandler+0x418>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c4c <HAL_DMA_IRQHandler+0x41c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <HAL_DMA_IRQHandler+0x420>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_DMA_IRQHandler+0x424>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_DMA_IRQHandler+0x428>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_DMA_IRQHandler+0x42c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_DMA_IRQHandler+0x430>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <HAL_DMA_IRQHandler+0x434>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x438>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e023      	b.n	8003c70 <HAL_DMA_IRQHandler+0x440>
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2210      	movs	r2, #16
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a6 	beq.w	8003df2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a85      	ldr	r2, [pc, #532]	@ (8003ec0 <HAL_DMA_IRQHandler+0x690>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a83      	ldr	r2, [pc, #524]	@ (8003ec4 <HAL_DMA_IRQHandler+0x694>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a82      	ldr	r2, [pc, #520]	@ (8003ec8 <HAL_DMA_IRQHandler+0x698>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a80      	ldr	r2, [pc, #512]	@ (8003ecc <HAL_DMA_IRQHandler+0x69c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6a0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6a4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8003edc <HAL_DMA_IRQHandler+0x6ac>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a79      	ldr	r2, [pc, #484]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6b0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a77      	ldr	r2, [pc, #476]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6b4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a76      	ldr	r2, [pc, #472]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a74      	ldr	r2, [pc, #464]	@ (8003eec <HAL_DMA_IRQHandler+0x6bc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a73      	ldr	r2, [pc, #460]	@ (8003ef0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a71      	ldr	r2, [pc, #452]	@ (8003ef4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a70      	ldr	r2, [pc, #448]	@ (8003ef8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_DMA_IRQHandler+0x6cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10a      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x52c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e009      	b.n	8003d70 <HAL_DMA_IRQHandler+0x540>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d024      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e01f      	b.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	e016      	b.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8110 	beq.w	8004028 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec0 <HAL_DMA_IRQHandler+0x690>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec4 <HAL_DMA_IRQHandler+0x694>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a29      	ldr	r2, [pc, #164]	@ (8003ec8 <HAL_DMA_IRQHandler+0x698>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a28      	ldr	r2, [pc, #160]	@ (8003ecc <HAL_DMA_IRQHandler+0x69c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a26      	ldr	r2, [pc, #152]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6a4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a23      	ldr	r2, [pc, #140]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6a8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a22      	ldr	r2, [pc, #136]	@ (8003edc <HAL_DMA_IRQHandler+0x6ac>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a20      	ldr	r2, [pc, #128]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6b0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6b8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <HAL_DMA_IRQHandler+0x6bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a19      	ldr	r2, [pc, #100]	@ (8003ef4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <HAL_DMA_IRQHandler+0x6cc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d12b      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x6d0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e02a      	b.n	8003f14 <HAL_DMA_IRQHandler+0x6e4>
 8003ebe:	bf00      	nop
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8087 	beq.w	8004028 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2220      	movs	r2, #32
 8003f24:	409a      	lsls	r2, r3
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d139      	bne.n	8003faa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0216 	bic.w	r2, r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x736>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	223f      	movs	r2, #63	@ 0x3f
 8003f80:	409a      	lsls	r2, r3
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 834a 	beq.w	8004634 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
          }
          return;
 8003fa8:	e344      	b.n	8004634 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02c      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e027      	b.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d023      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	e01e      	b.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0210 	bic.w	r2, r2, #16
 8004006:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8306 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8088 	beq.w	8004150 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7a      	ldr	r2, [pc, #488]	@ (8004238 <HAL_DMA_IRQHandler+0xa08>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d04a      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a79      	ldr	r2, [pc, #484]	@ (800423c <HAL_DMA_IRQHandler+0xa0c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d045      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a77      	ldr	r2, [pc, #476]	@ (8004240 <HAL_DMA_IRQHandler+0xa10>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d040      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a76      	ldr	r2, [pc, #472]	@ (8004244 <HAL_DMA_IRQHandler+0xa14>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d03b      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a74      	ldr	r2, [pc, #464]	@ (8004248 <HAL_DMA_IRQHandler+0xa18>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d036      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	@ (800424c <HAL_DMA_IRQHandler+0xa1c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d031      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a71      	ldr	r2, [pc, #452]	@ (8004250 <HAL_DMA_IRQHandler+0xa20>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d02c      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a70      	ldr	r2, [pc, #448]	@ (8004254 <HAL_DMA_IRQHandler+0xa24>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d027      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6e      	ldr	r2, [pc, #440]	@ (8004258 <HAL_DMA_IRQHandler+0xa28>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6d      	ldr	r2, [pc, #436]	@ (800425c <HAL_DMA_IRQHandler+0xa2c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004260 <HAL_DMA_IRQHandler+0xa30>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6a      	ldr	r2, [pc, #424]	@ (8004264 <HAL_DMA_IRQHandler+0xa34>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a68      	ldr	r2, [pc, #416]	@ (8004268 <HAL_DMA_IRQHandler+0xa38>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a67      	ldr	r2, [pc, #412]	@ (800426c <HAL_DMA_IRQHandler+0xa3c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	@ (8004270 <HAL_DMA_IRQHandler+0xa40>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a64      	ldr	r2, [pc, #400]	@ (8004274 <HAL_DMA_IRQHandler+0xa44>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <HAL_DMA_IRQHandler+0x8ca>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e007      	b.n	800410a <HAL_DMA_IRQHandler+0x8da>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004112:	429a      	cmp	r2, r3
 8004114:	d307      	bcc.n	8004126 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f2      	bne.n	800410a <HAL_DMA_IRQHandler+0x8da>
 8004124:	e000      	b.n	8004128 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004126:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800413e:	e003      	b.n	8004148 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8272 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e26c      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a43      	ldr	r2, [pc, #268]	@ (8004278 <HAL_DMA_IRQHandler+0xa48>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a42      	ldr	r2, [pc, #264]	@ (800427c <HAL_DMA_IRQHandler+0xa4c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a40      	ldr	r2, [pc, #256]	@ (8004280 <HAL_DMA_IRQHandler+0xa50>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3f      	ldr	r2, [pc, #252]	@ (8004284 <HAL_DMA_IRQHandler+0xa54>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3d      	ldr	r2, [pc, #244]	@ (8004288 <HAL_DMA_IRQHandler+0xa58>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3c      	ldr	r2, [pc, #240]	@ (800428c <HAL_DMA_IRQHandler+0xa5c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004290 <HAL_DMA_IRQHandler+0xa60>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a39      	ldr	r2, [pc, #228]	@ (8004294 <HAL_DMA_IRQHandler+0xa64>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x988>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_DMA_IRQHandler+0x98a>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 823f 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80cd 	beq.w	8004378 <HAL_DMA_IRQHandler+0xb48>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80c7 	beq.w	8004378 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2204      	movs	r2, #4
 80041f4:	409a      	lsls	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d049      	beq.n	8004298 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8210 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004220:	e20a      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8206 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004234:	e200      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
 8004236:	bf00      	nop
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
 8004278:	58025408 	.word	0x58025408
 800427c:	5802541c 	.word	0x5802541c
 8004280:	58025430 	.word	0x58025430
 8004284:	58025444 	.word	0x58025444
 8004288:	58025458 	.word	0x58025458
 800428c:	5802546c 	.word	0x5802546c
 8004290:	58025480 	.word	0x58025480
 8004294:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d160      	bne.n	8004364 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7f      	ldr	r2, [pc, #508]	@ (80044a4 <HAL_DMA_IRQHandler+0xc74>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a7d      	ldr	r2, [pc, #500]	@ (80044a8 <HAL_DMA_IRQHandler+0xc78>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7c      	ldr	r2, [pc, #496]	@ (80044ac <HAL_DMA_IRQHandler+0xc7c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7a      	ldr	r2, [pc, #488]	@ (80044b0 <HAL_DMA_IRQHandler+0xc80>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a79      	ldr	r2, [pc, #484]	@ (80044b4 <HAL_DMA_IRQHandler+0xc84>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a77      	ldr	r2, [pc, #476]	@ (80044b8 <HAL_DMA_IRQHandler+0xc88>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a76      	ldr	r2, [pc, #472]	@ (80044bc <HAL_DMA_IRQHandler+0xc8c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a74      	ldr	r2, [pc, #464]	@ (80044c0 <HAL_DMA_IRQHandler+0xc90>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a73      	ldr	r2, [pc, #460]	@ (80044c4 <HAL_DMA_IRQHandler+0xc94>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a71      	ldr	r2, [pc, #452]	@ (80044c8 <HAL_DMA_IRQHandler+0xc98>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a70      	ldr	r2, [pc, #448]	@ (80044cc <HAL_DMA_IRQHandler+0xc9c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <HAL_DMA_IRQHandler+0xca0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6d      	ldr	r2, [pc, #436]	@ (80044d4 <HAL_DMA_IRQHandler+0xca4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6b      	ldr	r2, [pc, #428]	@ (80044d8 <HAL_DMA_IRQHandler+0xca8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6a      	ldr	r2, [pc, #424]	@ (80044dc <HAL_DMA_IRQHandler+0xcac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a68      	ldr	r2, [pc, #416]	@ (80044e0 <HAL_DMA_IRQHandler+0xcb0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_DMA_IRQHandler+0xb24>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_DMA_IRQHandler+0xb34>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8165 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004376:	e15f      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2202      	movs	r2, #2
 8004382:	409a      	lsls	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80c5 	beq.w	8004518 <HAL_DMA_IRQHandler+0xce8>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80bf 	beq.w	8004518 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2202      	movs	r2, #2
 80043a4:	409a      	lsls	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 813a 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d0:	e134      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8130 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e4:	e12a      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 8089 	bne.w	8004504 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2b      	ldr	r2, [pc, #172]	@ (80044a4 <HAL_DMA_IRQHandler+0xc74>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04a      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a29      	ldr	r2, [pc, #164]	@ (80044a8 <HAL_DMA_IRQHandler+0xc78>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d045      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a28      	ldr	r2, [pc, #160]	@ (80044ac <HAL_DMA_IRQHandler+0xc7c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d040      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a26      	ldr	r2, [pc, #152]	@ (80044b0 <HAL_DMA_IRQHandler+0xc80>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d03b      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a25      	ldr	r2, [pc, #148]	@ (80044b4 <HAL_DMA_IRQHandler+0xc84>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d036      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <HAL_DMA_IRQHandler+0xc88>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d031      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_DMA_IRQHandler+0xc8c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d02c      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <HAL_DMA_IRQHandler+0xc90>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d027      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_DMA_IRQHandler+0xc94>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1d      	ldr	r2, [pc, #116]	@ (80044c8 <HAL_DMA_IRQHandler+0xc98>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_DMA_IRQHandler+0xc9c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <HAL_DMA_IRQHandler+0xca0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_DMA_IRQHandler+0xca4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a17      	ldr	r2, [pc, #92]	@ (80044d8 <HAL_DMA_IRQHandler+0xca8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a16      	ldr	r2, [pc, #88]	@ (80044dc <HAL_DMA_IRQHandler+0xcac>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_DMA_IRQHandler+0xc62>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <HAL_DMA_IRQHandler+0xcb0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d128      	bne.n	80044e4 <HAL_DMA_IRQHandler+0xcb4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0214 	bic.w	r2, r2, #20
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e027      	b.n	80044f4 <HAL_DMA_IRQHandler+0xcc4>
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 020a 	bic.w	r2, r2, #10
 80044f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8097 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004516:	e091      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8088 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8082 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a41      	ldr	r2, [pc, #260]	@ (8004644 <HAL_DMA_IRQHandler+0xe14>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3f      	ldr	r2, [pc, #252]	@ (8004648 <HAL_DMA_IRQHandler+0xe18>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a3e      	ldr	r2, [pc, #248]	@ (800464c <HAL_DMA_IRQHandler+0xe1c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3c      	ldr	r2, [pc, #240]	@ (8004650 <HAL_DMA_IRQHandler+0xe20>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a3b      	ldr	r2, [pc, #236]	@ (8004654 <HAL_DMA_IRQHandler+0xe24>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a39      	ldr	r2, [pc, #228]	@ (8004658 <HAL_DMA_IRQHandler+0xe28>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a38      	ldr	r2, [pc, #224]	@ (800465c <HAL_DMA_IRQHandler+0xe2c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a36      	ldr	r2, [pc, #216]	@ (8004660 <HAL_DMA_IRQHandler+0xe30>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a35      	ldr	r2, [pc, #212]	@ (8004664 <HAL_DMA_IRQHandler+0xe34>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a33      	ldr	r2, [pc, #204]	@ (8004668 <HAL_DMA_IRQHandler+0xe38>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a32      	ldr	r2, [pc, #200]	@ (800466c <HAL_DMA_IRQHandler+0xe3c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a30      	ldr	r2, [pc, #192]	@ (8004670 <HAL_DMA_IRQHandler+0xe40>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004674 <HAL_DMA_IRQHandler+0xe44>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004678 <HAL_DMA_IRQHandler+0xe48>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	@ (800467c <HAL_DMA_IRQHandler+0xe4c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004680 <HAL_DMA_IRQHandler+0xe50>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_IRQHandler+0xdbc>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 021c 	bic.w	r2, r2, #28
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_DMA_IRQHandler+0xdcc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 020e 	bic.w	r2, r2, #14
 80045fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
 8004632:	e004      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800463e:	3728      	adds	r7, #40	@ 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40020010 	.word	0x40020010
 8004648:	40020028 	.word	0x40020028
 800464c:	40020040 	.word	0x40020040
 8004650:	40020058 	.word	0x40020058
 8004654:	40020070 	.word	0x40020070
 8004658:	40020088 	.word	0x40020088
 800465c:	400200a0 	.word	0x400200a0
 8004660:	400200b8 	.word	0x400200b8
 8004664:	40020410 	.word	0x40020410
 8004668:	40020428 	.word	0x40020428
 800466c:	40020440 	.word	0x40020440
 8004670:	40020458 	.word	0x40020458
 8004674:	40020470 	.word	0x40020470
 8004678:	40020488 	.word	0x40020488
 800467c:	400204a0 	.word	0x400204a0
 8004680:	400204b8 	.word	0x400204b8

08004684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	@ (800479c <DMA_CalcBaseAndBitshift+0x118>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a41      	ldr	r2, [pc, #260]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3f      	ldr	r2, [pc, #252]	@ (80047a4 <DMA_CalcBaseAndBitshift+0x120>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3e      	ldr	r2, [pc, #248]	@ (80047a8 <DMA_CalcBaseAndBitshift+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ac <DMA_CalcBaseAndBitshift+0x128>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3b      	ldr	r2, [pc, #236]	@ (80047b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a39      	ldr	r2, [pc, #228]	@ (80047b4 <DMA_CalcBaseAndBitshift+0x130>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a38      	ldr	r2, [pc, #224]	@ (80047b8 <DMA_CalcBaseAndBitshift+0x134>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a36      	ldr	r2, [pc, #216]	@ (80047bc <DMA_CalcBaseAndBitshift+0x138>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a35      	ldr	r2, [pc, #212]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a33      	ldr	r2, [pc, #204]	@ (80047c4 <DMA_CalcBaseAndBitshift+0x140>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a32      	ldr	r2, [pc, #200]	@ (80047c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a30      	ldr	r2, [pc, #192]	@ (80047cc <DMA_CalcBaseAndBitshift+0x148>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2f      	ldr	r2, [pc, #188]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2d      	ldr	r2, [pc, #180]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x150>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <DMA_CalcBaseAndBitshift+0xa8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <DMA_CalcBaseAndBitshift+0xac>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <DMA_CalcBaseAndBitshift+0xae>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d024      	beq.n	8004780 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3b10      	subs	r3, #16
 800473e:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <DMA_CalcBaseAndBitshift+0x158>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	4a24      	ldr	r2, [pc, #144]	@ (80047e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004750:	5cd3      	ldrb	r3, [r2, r3]
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d908      	bls.n	8004770 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004766:	4013      	ands	r3, r2
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	659a      	str	r2, [r3, #88]	@ 0x58
 800476e:	e00d      	b.n	800478c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6593      	str	r3, [r2, #88]	@ 0x58
 800477e:	e005      	b.n	800478c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40020010 	.word	0x40020010
 80047a0:	40020028 	.word	0x40020028
 80047a4:	40020040 	.word	0x40020040
 80047a8:	40020058 	.word	0x40020058
 80047ac:	40020070 	.word	0x40020070
 80047b0:	40020088 	.word	0x40020088
 80047b4:	400200a0 	.word	0x400200a0
 80047b8:	400200b8 	.word	0x400200b8
 80047bc:	40020410 	.word	0x40020410
 80047c0:	40020428 	.word	0x40020428
 80047c4:	40020440 	.word	0x40020440
 80047c8:	40020458 	.word	0x40020458
 80047cc:	40020470 	.word	0x40020470
 80047d0:	40020488 	.word	0x40020488
 80047d4:	400204a0 	.word	0x400204a0
 80047d8:	400204b8 	.word	0x400204b8
 80047dc:	aaaaaaab 	.word	0xaaaaaaab
 80047e0:	0800a6ac 	.word	0x0800a6ac
 80047e4:	fffffc00 	.word	0xfffffc00

080047e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d120      	bne.n	800483e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	2b03      	cmp	r3, #3
 8004802:	d858      	bhi.n	80048b6 <DMA_CheckFifoParam+0xce>
 8004804:	a201      	add	r2, pc, #4	@ (adr r2, 800480c <DMA_CheckFifoParam+0x24>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800481d 	.word	0x0800481d
 8004810:	0800482f 	.word	0x0800482f
 8004814:	0800481d 	.word	0x0800481d
 8004818:	080048b7 	.word	0x080048b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d048      	beq.n	80048ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800482c:	e045      	b.n	80048ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004836:	d142      	bne.n	80048be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800483c:	e03f      	b.n	80048be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004846:	d123      	bne.n	8004890 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	2b03      	cmp	r3, #3
 800484e:	d838      	bhi.n	80048c2 <DMA_CheckFifoParam+0xda>
 8004850:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <DMA_CheckFifoParam+0x70>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	08004869 	.word	0x08004869
 800485c:	0800486f 	.word	0x0800486f
 8004860:	08004869 	.word	0x08004869
 8004864:	08004881 	.word	0x08004881
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
        break;
 800486c:	e030      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d025      	beq.n	80048c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800487e:	e022      	b.n	80048c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004888:	d11f      	bne.n	80048ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800488e:	e01c      	b.n	80048ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	2b02      	cmp	r3, #2
 8004896:	d902      	bls.n	800489e <DMA_CheckFifoParam+0xb6>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d003      	beq.n	80048a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800489c:	e018      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
        break;
 80048a2:	e015      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
    break;
 80048b4:	e00b      	b.n	80048ce <DMA_CheckFifoParam+0xe6>
        break;
 80048b6:	bf00      	nop
 80048b8:	e00a      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        break;
 80048ba:	bf00      	nop
 80048bc:	e008      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        break;
 80048be:	bf00      	nop
 80048c0:	e006      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        break;
 80048c2:	bf00      	nop
 80048c4:	e004      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        break;
 80048c6:	bf00      	nop
 80048c8:	e002      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
        break;
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
    break;
 80048ce:	bf00      	nop
    }
  }

  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a38      	ldr	r2, [pc, #224]	@ (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a36      	ldr	r2, [pc, #216]	@ (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01d      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a35      	ldr	r2, [pc, #212]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a33      	ldr	r2, [pc, #204]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a32      	ldr	r2, [pc, #200]	@ (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a30      	ldr	r2, [pc, #192]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2f      	ldr	r2, [pc, #188]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2d      	ldr	r2, [pc, #180]	@ (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01a      	beq.n	800497e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	3b08      	subs	r3, #8
 8004950:	4a28      	ldr	r2, [pc, #160]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4b26      	ldr	r3, [pc, #152]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a24      	ldr	r2, [pc, #144]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800496c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800497c:	e024      	b.n	80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	3b10      	subs	r3, #16
 8004986:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d806      	bhi.n	80049a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d902      	bls.n	80049a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3308      	adds	r3, #8
 80049a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4b18      	ldr	r3, [pc, #96]	@ (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	58025408 	.word	0x58025408
 80049d8:	5802541c 	.word	0x5802541c
 80049dc:	58025430 	.word	0x58025430
 80049e0:	58025444 	.word	0x58025444
 80049e4:	58025458 	.word	0x58025458
 80049e8:	5802546c 	.word	0x5802546c
 80049ec:	58025480 	.word	0x58025480
 80049f0:	58025494 	.word	0x58025494
 80049f4:	cccccccd 	.word	0xcccccccd
 80049f8:	16009600 	.word	0x16009600
 80049fc:	58025880 	.word	0x58025880
 8004a00:	aaaaaaab 	.word	0xaaaaaaab
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	4002040f 	.word	0x4002040f
 8004a0c:	10008200 	.word	0x10008200
 8004a10:	40020880 	.word	0x40020880

08004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04a      	beq.n	8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d847      	bhi.n	8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a22      	ldr	r2, [pc, #136]	@ (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a21      	ldr	r2, [pc, #132]	@ (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	@ (8004af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a9e:	e009      	b.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	@ (8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ab2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	58025408 	.word	0x58025408
 8004ad0:	5802541c 	.word	0x5802541c
 8004ad4:	58025430 	.word	0x58025430
 8004ad8:	58025444 	.word	0x58025444
 8004adc:	58025458 	.word	0x58025458
 8004ae0:	5802546c 	.word	0x5802546c
 8004ae4:	58025480 	.word	0x58025480
 8004ae8:	58025494 	.word	0x58025494
 8004aec:	1600963f 	.word	0x1600963f
 8004af0:	58025940 	.word	0x58025940
 8004af4:	1000823f 	.word	0x1000823f
 8004af8:	40020940 	.word	0x40020940

08004afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	@ 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b0a:	4b89      	ldr	r3, [pc, #548]	@ (8004d30 <HAL_GPIO_Init+0x234>)
 8004b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b0e:	e194      	b.n	8004e3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8186 	beq.w	8004e34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d005      	beq.n	8004b40 <HAL_GPIO_Init+0x44>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d130      	bne.n	8004ba2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b76:	2201      	movs	r2, #1
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 0201 	and.w	r2, r3, #1
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d017      	beq.n	8004bde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d123      	bne.n	8004c32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	08da      	lsrs	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3208      	adds	r2, #8
 8004bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	220f      	movs	r2, #15
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	08da      	lsrs	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3208      	adds	r2, #8
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0203 	and.w	r2, r3, #3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80e0 	beq.w	8004e34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c74:	4b2f      	ldr	r3, [pc, #188]	@ (8004d34 <HAL_GPIO_Init+0x238>)
 8004c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004d34 <HAL_GPIO_Init+0x238>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c84:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_GPIO_Init+0x238>)
 8004c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c92:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <HAL_GPIO_Init+0x23c>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a20      	ldr	r2, [pc, #128]	@ (8004d3c <HAL_GPIO_Init+0x240>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d052      	beq.n	8004d64 <HAL_GPIO_Init+0x268>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <HAL_GPIO_Init+0x244>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_GPIO_Init+0x22e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <HAL_GPIO_Init+0x248>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <HAL_GPIO_Init+0x22a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d48 <HAL_GPIO_Init+0x24c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d025      	beq.n	8004d22 <HAL_GPIO_Init+0x226>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d4c <HAL_GPIO_Init+0x250>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <HAL_GPIO_Init+0x222>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d50 <HAL_GPIO_Init+0x254>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d019      	beq.n	8004d1a <HAL_GPIO_Init+0x21e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d54 <HAL_GPIO_Init+0x258>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_GPIO_Init+0x21a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	@ (8004d58 <HAL_GPIO_Init+0x25c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00d      	beq.n	8004d12 <HAL_GPIO_Init+0x216>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_GPIO_Init+0x260>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <HAL_GPIO_Init+0x212>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <HAL_GPIO_Init+0x264>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_GPIO_Init+0x20e>
 8004d06:	2309      	movs	r3, #9
 8004d08:	e02d      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d0a:	230a      	movs	r3, #10
 8004d0c:	e02b      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e029      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d12:	2307      	movs	r3, #7
 8004d14:	e027      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e025      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e023      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e021      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e01f      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e01d      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01b      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d2e:	bf00      	nop
 8004d30:	58000080 	.word	0x58000080
 8004d34:	58024400 	.word	0x58024400
 8004d38:	58000400 	.word	0x58000400
 8004d3c:	58020000 	.word	0x58020000
 8004d40:	58020400 	.word	0x58020400
 8004d44:	58020800 	.word	0x58020800
 8004d48:	58020c00 	.word	0x58020c00
 8004d4c:	58021000 	.word	0x58021000
 8004d50:	58021400 	.word	0x58021400
 8004d54:	58021800 	.word	0x58021800
 8004d58:	58021c00 	.word	0x58021c00
 8004d5c:	58022000 	.word	0x58022000
 8004d60:	58022400 	.word	0x58022400
 8004d64:	2300      	movs	r3, #0
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	f002 0203 	and.w	r2, r2, #3
 8004d6c:	0092      	lsls	r2, r2, #2
 8004d6e:	4093      	lsls	r3, r2
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d76:	4938      	ldr	r1, [pc, #224]	@ (8004e58 <HAL_GPIO_Init+0x35c>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f ae63 	bne.w	8004b10 <HAL_GPIO_Init+0x14>
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3724      	adds	r7, #36	@ 0x24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	58000400 	.word	0x58000400

08004e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e78:	e003      	b.n	8004e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	041a      	lsls	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af02      	add	r7, sp, #8
 8004e94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0fe      	b.n	800509e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc fc89 	bl	80017cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 f91a 	bl	800a100 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7c1a      	ldrb	r2, [r3, #16]
 8004ed4:	f88d 2000 	strb.w	r2, [sp]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004edc:	f005 f89e 	bl	800a01c <USB_CoreInit>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0d5      	b.n	800509e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 f912 	bl	800a122 <USB_SetCurrentMode>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0c6      	b.n	800509e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
 8004f14:	e04a      	b.n	8004fac <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	3315      	adds	r3, #21
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3314      	adds	r3, #20
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f3e:	7bfa      	ldrb	r2, [r7, #15]
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	b298      	uxth	r0, r3
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	332e      	adds	r3, #46	@ 0x2e
 8004f52:	4602      	mov	r2, r0
 8004f54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3318      	adds	r3, #24
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f6a:	7bfa      	ldrb	r2, [r7, #15]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	331c      	adds	r3, #28
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f7e:	7bfa      	ldrb	r2, [r7, #15]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3320      	adds	r3, #32
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3324      	adds	r3, #36	@ 0x24
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3af      	bcc.n	8004f16 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e044      	b.n	8005046 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	3301      	adds	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	791b      	ldrb	r3, [r3, #4]
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	429a      	cmp	r2, r3
 800504e:	d3b5      	bcc.n	8004fbc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7c1a      	ldrb	r2, [r3, #16]
 8005058:	f88d 2000 	strb.w	r2, [sp]
 800505c:	3304      	adds	r3, #4
 800505e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005060:	f005 f8ac 	bl	800a1bc <USB_DevInit>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e013      	b.n	800509e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7b1b      	ldrb	r3, [r3, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f80b 	bl	80050a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f005 fa67 	bl	800a56a <USB_DevDisconnect>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050d6:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_PCDEx_ActivateLPM+0x44>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	10000003 	.word	0x10000003

080050f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050f8:	4b19      	ldr	r3, [pc, #100]	@ (8005160 <HAL_PWREx_ConfigSupply+0x70>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00a      	beq.n	800511a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005104:	4b16      	ldr	r3, [pc, #88]	@ (8005160 <HAL_PWREx_ConfigSupply+0x70>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e01f      	b.n	8005156 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e01d      	b.n	8005156 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800511a:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <HAL_PWREx_ConfigSupply+0x70>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 0207 	bic.w	r2, r3, #7
 8005122:	490f      	ldr	r1, [pc, #60]	@ (8005160 <HAL_PWREx_ConfigSupply+0x70>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800512a:	f7fc fc7b 	bl	8001a24 <HAL_GetTick>
 800512e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005130:	e009      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005132:	f7fc fc77 	bl	8001a24 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005140:	d901      	bls.n	8005146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_PWREx_ConfigSupply+0x70>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005152:	d1ee      	bne.n	8005132 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	58024800 	.word	0x58024800

08005164 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800516e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005172:	60d3      	str	r3, [r2, #12]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	58024800 	.word	0x58024800

08005184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	@ 0x30
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f000 bc48 	b.w	8005a28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8088 	beq.w	80052b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a6:	4b99      	ldr	r3, [pc, #612]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051b0:	4b96      	ldr	r3, [pc, #600]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d007      	beq.n	80051cc <HAL_RCC_OscConfig+0x48>
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051be:	2b18      	cmp	r3, #24
 80051c0:	d111      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62>
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d10c      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	4b8f      	ldr	r3, [pc, #572]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d06d      	beq.n	80052b4 <HAL_RCC_OscConfig+0x130>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d169      	bne.n	80052b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f000 bc21 	b.w	8005a28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x7a>
 80051f0:	4b86      	ldr	r3, [pc, #536]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a85      	ldr	r2, [pc, #532]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80051f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e02e      	b.n	800525c <HAL_RCC_OscConfig+0xd8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x9c>
 8005206:	4b81      	ldr	r3, [pc, #516]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a80      	ldr	r2, [pc, #512]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b7e      	ldr	r3, [pc, #504]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7d      	ldr	r2, [pc, #500]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e01d      	b.n	800525c <HAL_RCC_OscConfig+0xd8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0xc0>
 800522a:	4b78      	ldr	r3, [pc, #480]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a77      	ldr	r2, [pc, #476]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b75      	ldr	r3, [pc, #468]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a74      	ldr	r2, [pc, #464]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0xd8>
 8005244:	4b71      	ldr	r3, [pc, #452]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a70      	ldr	r2, [pc, #448]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b6e      	ldr	r3, [pc, #440]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a6d      	ldr	r2, [pc, #436]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800525a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc fbde 	bl	8001a24 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fc fbda 	bl	8001a24 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e3d4      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800527e:	4b63      	ldr	r3, [pc, #396]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fc fbca 	bl	8001a24 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fc fbc6 	bl	8001a24 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e3c0      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052a6:	4b59      	ldr	r3, [pc, #356]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x110>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80ca 	beq.w	8005458 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c4:	4b51      	ldr	r3, [pc, #324]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052ce:	4b4f      	ldr	r3, [pc, #316]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_RCC_OscConfig+0x166>
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2b18      	cmp	r3, #24
 80052de:	d156      	bne.n	800538e <HAL_RCC_OscConfig+0x20a>
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d151      	bne.n	800538e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ea:	4b48      	ldr	r3, [pc, #288]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_RCC_OscConfig+0x17e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e392      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005302:	4b42      	ldr	r3, [pc, #264]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 0219 	bic.w	r2, r3, #25
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	493f      	ldr	r1, [pc, #252]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fb86 	bl	8001a24 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fc fb82 	bl	8001a24 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e37c      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	f7fc fba3 	bl	8001a84 <HAL_GetREVID>
 800533e:	4603      	mov	r3, r0
 8005340:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005344:	4293      	cmp	r3, r2
 8005346:	d817      	bhi.n	8005378 <HAL_RCC_OscConfig+0x1f4>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d108      	bne.n	8005362 <HAL_RCC_OscConfig+0x1de>
 8005350:	4b2e      	ldr	r3, [pc, #184]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005358:	4a2c      	ldr	r2, [pc, #176]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800535a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005360:	e07a      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	031b      	lsls	r3, r3, #12
 8005370:	4926      	ldr	r1, [pc, #152]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005376:	e06f      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005378:	4b24      	ldr	r3, [pc, #144]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	4921      	ldr	r1, [pc, #132]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	e064      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d047      	beq.n	8005426 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005396:	4b1d      	ldr	r3, [pc, #116]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 0219 	bic.w	r2, r3, #25
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	491a      	ldr	r1, [pc, #104]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fc fb3c 	bl	8001a24 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b0:	f7fc fb38 	bl	8001a24 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e332      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	f7fc fb59 	bl	8001a84 <HAL_GetREVID>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053d8:	4293      	cmp	r3, r2
 80053da:	d819      	bhi.n	8005410 <HAL_RCC_OscConfig+0x28c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d108      	bne.n	80053f6 <HAL_RCC_OscConfig+0x272>
 80053e4:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053ec:	4a07      	ldr	r2, [pc, #28]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f2:	6053      	str	r3, [r2, #4]
 80053f4:	e030      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
 80053f6:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	031b      	lsls	r3, r3, #12
 8005404:	4901      	ldr	r1, [pc, #4]	@ (800540c <HAL_RCC_OscConfig+0x288>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
 800540a:	e025      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
 800540c:	58024400 	.word	0x58024400
 8005410:	4b9a      	ldr	r3, [pc, #616]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	4997      	ldr	r1, [pc, #604]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
 8005424:	e018      	b.n	8005458 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005426:	4b95      	ldr	r3, [pc, #596]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a94      	ldr	r2, [pc, #592]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fc faf7 	bl	8001a24 <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543a:	f7fc faf3 	bl	8001a24 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e2ed      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800544c:	4b8b      	ldr	r3, [pc, #556]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a9 	beq.w	80055b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005466:	4b85      	ldr	r3, [pc, #532]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800546e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005470:	4b82      	ldr	r3, [pc, #520]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d007      	beq.n	800548c <HAL_RCC_OscConfig+0x308>
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b18      	cmp	r3, #24
 8005480:	d13a      	bne.n	80054f8 <HAL_RCC_OscConfig+0x374>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d135      	bne.n	80054f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800548c:	4b7b      	ldr	r3, [pc, #492]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_OscConfig+0x320>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b80      	cmp	r3, #128	@ 0x80
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e2c1      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a4:	f7fc faee 	bl	8001a84 <HAL_GetREVID>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d817      	bhi.n	80054e2 <HAL_RCC_OscConfig+0x35e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d108      	bne.n	80054cc <HAL_RCC_OscConfig+0x348>
 80054ba:	4b70      	ldr	r3, [pc, #448]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80054c2:	4a6e      	ldr	r2, [pc, #440]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ca:	e075      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054cc:	4b6b      	ldr	r3, [pc, #428]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	069b      	lsls	r3, r3, #26
 80054da:	4968      	ldr	r1, [pc, #416]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054e0:	e06a      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054e2:	4b66      	ldr	r3, [pc, #408]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	4962      	ldr	r1, [pc, #392]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054f6:	e05f      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d042      	beq.n	8005586 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005500:	4b5e      	ldr	r3, [pc, #376]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5d      	ldr	r2, [pc, #372]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fa8a 	bl	8001a24 <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005514:	f7fc fa86 	bl	8001a24 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e280      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005526:	4b55      	ldr	r3, [pc, #340]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005532:	f7fc faa7 	bl	8001a84 <HAL_GetREVID>
 8005536:	4603      	mov	r3, r0
 8005538:	f241 0203 	movw	r2, #4099	@ 0x1003
 800553c:	4293      	cmp	r3, r2
 800553e:	d817      	bhi.n	8005570 <HAL_RCC_OscConfig+0x3ec>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	2b20      	cmp	r3, #32
 8005546:	d108      	bne.n	800555a <HAL_RCC_OscConfig+0x3d6>
 8005548:	4b4c      	ldr	r3, [pc, #304]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005550:	4a4a      	ldr	r2, [pc, #296]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005556:	6053      	str	r3, [r2, #4]
 8005558:	e02e      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
 800555a:	4b48      	ldr	r3, [pc, #288]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	069b      	lsls	r3, r3, #26
 8005568:	4944      	ldr	r1, [pc, #272]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	604b      	str	r3, [r1, #4]
 800556e:	e023      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
 8005570:	4b42      	ldr	r3, [pc, #264]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	493f      	ldr	r1, [pc, #252]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005580:	4313      	orrs	r3, r2
 8005582:	60cb      	str	r3, [r1, #12]
 8005584:	e018      	b.n	80055b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005586:	4b3d      	ldr	r3, [pc, #244]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3c      	ldr	r2, [pc, #240]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800558c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc fa47 	bl	8001a24 <HAL_GetTick>
 8005596:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800559a:	f7fc fa43 	bl	8001a24 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e23d      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055ac:	4b33      	ldr	r3, [pc, #204]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d036      	beq.n	8005632 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055cc:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d0:	4a2a      	ldr	r2, [pc, #168]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc fa24 	bl	8001a24 <HAL_GetTick>
 80055dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fc fa20 	bl	8001a24 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e21a      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055f2:	4b22      	ldr	r3, [pc, #136]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 80055f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x45c>
 80055fe:	e018      	b.n	8005632 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005600:	4b1e      	ldr	r3, [pc, #120]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005604:	4a1d      	ldr	r2, [pc, #116]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fc fa0a 	bl	8001a24 <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005614:	f7fc fa06 	bl	8001a24 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e200      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005626:	4b15      	ldr	r3, [pc, #84]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d039      	beq.n	80056b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01c      	beq.n	8005680 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800564c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005650:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005652:	f7fc f9e7 	bl	8001a24 <HAL_GetTick>
 8005656:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800565a:	f7fc f9e3 	bl	8001a24 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e1dd      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800566c:	4b03      	ldr	r3, [pc, #12]	@ (800567c <HAL_RCC_OscConfig+0x4f8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x4d6>
 8005678:	e01b      	b.n	80056b2 <HAL_RCC_OscConfig+0x52e>
 800567a:	bf00      	nop
 800567c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005680:	4b9b      	ldr	r3, [pc, #620]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a9a      	ldr	r2, [pc, #616]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800568a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800568c:	f7fc f9ca 	bl	8001a24 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005694:	f7fc f9c6 	bl	8001a24 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e1c0      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056a6:	4b92      	ldr	r3, [pc, #584]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8081 	beq.w	80057c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056c0:	4b8c      	ldr	r3, [pc, #560]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a8b      	ldr	r2, [pc, #556]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80056c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056cc:	f7fc f9aa 	bl	8001a24 <HAL_GetTick>
 80056d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d4:	f7fc f9a6 	bl	8001a24 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	@ 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e1a0      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e6:	4b83      	ldr	r3, [pc, #524]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d106      	bne.n	8005708 <HAL_RCC_OscConfig+0x584>
 80056fa:	4b7d      	ldr	r3, [pc, #500]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fe:	4a7c      	ldr	r2, [pc, #496]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	@ 0x70
 8005706:	e02d      	b.n	8005764 <HAL_RCC_OscConfig+0x5e0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <HAL_RCC_OscConfig+0x5a6>
 8005710:	4b77      	ldr	r3, [pc, #476]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	4a76      	ldr	r2, [pc, #472]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6713      	str	r3, [r2, #112]	@ 0x70
 800571c:	4b74      	ldr	r3, [pc, #464]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	4a73      	ldr	r2, [pc, #460]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	6713      	str	r3, [r2, #112]	@ 0x70
 8005728:	e01c      	b.n	8005764 <HAL_RCC_OscConfig+0x5e0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b05      	cmp	r3, #5
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x5c8>
 8005732:	4b6f      	ldr	r3, [pc, #444]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	4a6e      	ldr	r2, [pc, #440]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	6713      	str	r3, [r2, #112]	@ 0x70
 800573e:	4b6c      	ldr	r3, [pc, #432]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	4a6b      	ldr	r2, [pc, #428]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6713      	str	r3, [r2, #112]	@ 0x70
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0x5e0>
 800574c:	4b68      	ldr	r3, [pc, #416]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005750:	4a67      	ldr	r2, [pc, #412]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	@ 0x70
 8005758:	4b65      	ldr	r3, [pc, #404]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575c:	4a64      	ldr	r2, [pc, #400]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800575e:	f023 0304 	bic.w	r3, r3, #4
 8005762:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576c:	f7fc f95a 	bl	8001a24 <HAL_GetTick>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005772:	e00a      	b.n	800578a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fc f956 	bl	8001a24 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e14e      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578a:	4b59      	ldr	r3, [pc, #356]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0ee      	beq.n	8005774 <HAL_RCC_OscConfig+0x5f0>
 8005796:	e014      	b.n	80057c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fc f944 	bl	8001a24 <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800579e:	e00a      	b.n	80057b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a0:	f7fc f940 	bl	8001a24 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e138      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057b6:	4b4e      	ldr	r3, [pc, #312]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1ee      	bne.n	80057a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 812d 	beq.w	8005a26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057cc:	4b48      	ldr	r3, [pc, #288]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057d4:	2b18      	cmp	r3, #24
 80057d6:	f000 80bd 	beq.w	8005954 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	2b02      	cmp	r3, #2
 80057e0:	f040 809e 	bne.w	8005920 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b42      	ldr	r3, [pc, #264]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a41      	ldr	r2, [pc, #260]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fc f918 	bl	8001a24 <HAL_GetTick>
 80057f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fc f914 	bl	8001a24 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e10e      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800580a:	4b39      	ldr	r3, [pc, #228]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005816:	4b36      	ldr	r3, [pc, #216]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581a:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <HAL_RCC_OscConfig+0x774>)
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005826:	0112      	lsls	r2, r2, #4
 8005828:	430a      	orrs	r2, r1
 800582a:	4931      	ldr	r1, [pc, #196]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	3b01      	subs	r3, #1
 8005836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	3b01      	subs	r3, #1
 8005840:	025b      	lsls	r3, r3, #9
 8005842:	b29b      	uxth	r3, r3
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	3b01      	subs	r3, #1
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	3b01      	subs	r3, #1
 800585a:	061b      	lsls	r3, r3, #24
 800585c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005860:	4923      	ldr	r1, [pc, #140]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005866:	4b22      	ldr	r3, [pc, #136]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	4a21      	ldr	r2, [pc, #132]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005872:	4b1f      	ldr	r3, [pc, #124]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005876:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <HAL_RCC_OscConfig+0x778>)
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800587e:	00d2      	lsls	r2, r2, #3
 8005880:	491b      	ldr	r1, [pc, #108]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005886:	4b1a      	ldr	r3, [pc, #104]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	f023 020c 	bic.w	r2, r3, #12
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	4917      	ldr	r1, [pc, #92]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005898:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	f023 0202 	bic.w	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	4912      	ldr	r1, [pc, #72]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058aa:	4b11      	ldr	r3, [pc, #68]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a10      	ldr	r2, [pc, #64]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b6:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	4a0d      	ldr	r2, [pc, #52]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a0a      	ldr	r2, [pc, #40]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058ce:	4b08      	ldr	r3, [pc, #32]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a07      	ldr	r2, [pc, #28]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a04      	ldr	r2, [pc, #16]	@ (80058f0 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fc f89d 	bl	8001a24 <HAL_GetTick>
 80058ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ec:	e011      	b.n	8005912 <HAL_RCC_OscConfig+0x78e>
 80058ee:	bf00      	nop
 80058f0:	58024400 	.word	0x58024400
 80058f4:	58024800 	.word	0x58024800
 80058f8:	fffffc0c 	.word	0xfffffc0c
 80058fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005900:	f7fc f890 	bl	8001a24 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e08a      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005912:	4b47      	ldr	r3, [pc, #284]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x77c>
 800591e:	e082      	b.n	8005a26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005920:	4b43      	ldr	r3, [pc, #268]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a42      	ldr	r2, [pc, #264]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fc f87a 	bl	8001a24 <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fc f876 	bl	8001a24 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e070      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005946:	4b3a      	ldr	r3, [pc, #232]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x7b0>
 8005952:	e068      	b.n	8005a26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005954:	4b36      	ldr	r3, [pc, #216]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800595a:	4b35      	ldr	r3, [pc, #212]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	2b01      	cmp	r3, #1
 8005966:	d031      	beq.n	80059cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f003 0203 	and.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d12a      	bne.n	80059cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d122      	bne.n	80059cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005992:	429a      	cmp	r2, r3
 8005994:	d11a      	bne.n	80059cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	0a5b      	lsrs	r3, r3, #9
 800599a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d111      	bne.n	80059cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d108      	bne.n	80059cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0e1b      	lsrs	r3, r3, #24
 80059be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e02b      	b.n	8005a28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059d0:	4b17      	ldr	r3, [pc, #92]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	08db      	lsrs	r3, r3, #3
 80059d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d01f      	beq.n	8005a26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059e6:	4b12      	ldr	r3, [pc, #72]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	4a11      	ldr	r2, [pc, #68]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059f2:	f7fc f817 	bl	8001a24 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059f8:	bf00      	nop
 80059fa:	f7fc f813 	bl	8001a24 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d0f9      	beq.n	80059fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_OscConfig+0x8b0>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a12:	00d2      	lsls	r2, r2, #3
 8005a14:	4906      	ldr	r1, [pc, #24]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a1a:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	4a04      	ldr	r2, [pc, #16]	@ (8005a30 <HAL_RCC_OscConfig+0x8ac>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	@ 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	58024400 	.word	0x58024400
 8005a34:	ffff0007 	.word	0xffff0007

08005a38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e19c      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d910      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b87      	ldr	r3, [pc, #540]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 020f 	bic.w	r2, r3, #15
 8005a62:	4985      	ldr	r1, [pc, #532]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b83      	ldr	r3, [pc, #524]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e184      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d908      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a98:	4b78      	ldr	r3, [pc, #480]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	4975      	ldr	r1, [pc, #468]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	4b70      	ldr	r3, [pc, #448]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d908      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	496a      	ldr	r1, [pc, #424]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	4b64      	ldr	r3, [pc, #400]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d908      	bls.n	8005b06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005af4:	4b61      	ldr	r3, [pc, #388]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	495e      	ldr	r1, [pc, #376]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	4b59      	ldr	r3, [pc, #356]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d908      	bls.n	8005b34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b22:	4b56      	ldr	r3, [pc, #344]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	4953      	ldr	r1, [pc, #332]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4b4d      	ldr	r3, [pc, #308]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d908      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b50:	4b4a      	ldr	r3, [pc, #296]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f023 020f 	bic.w	r2, r3, #15
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4947      	ldr	r1, [pc, #284]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d055      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b6e:	4b43      	ldr	r3, [pc, #268]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4940      	ldr	r1, [pc, #256]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b88:	4b3c      	ldr	r3, [pc, #240]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d121      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0f6      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ba0:	4b36      	ldr	r3, [pc, #216]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d115      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0ea      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bb8:	4b30      	ldr	r3, [pc, #192]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0de      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0d6      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f023 0207 	bic.w	r2, r3, #7
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4925      	ldr	r1, [pc, #148]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bea:	f7fb ff1b 	bl	8001a24 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf2:	f7fb ff17 	bl	8001a24 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e0be      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c08:	4b1c      	ldr	r3, [pc, #112]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d1eb      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d208      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c36:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f023 020f 	bic.w	r2, r3, #15
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	490e      	ldr	r1, [pc, #56]	@ (8005c7c <HAL_RCC_ClockConfig+0x244>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d214      	bcs.n	8005c80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 020f 	bic.w	r2, r3, #15
 8005c5e:	4906      	ldr	r1, [pc, #24]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <HAL_RCC_ClockConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d005      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e086      	b.n	8005d86 <HAL_RCC_ClockConfig+0x34e>
 8005c78:	52002000 	.word	0x52002000
 8005c7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	4b3f      	ldr	r3, [pc, #252]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d208      	bcs.n	8005cae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	4939      	ldr	r1, [pc, #228]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d208      	bcs.n	8005cdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cca:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	492e      	ldr	r1, [pc, #184]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	4b28      	ldr	r3, [pc, #160]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d208      	bcs.n	8005d0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cf8:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	4922      	ldr	r1, [pc, #136]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d010      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d208      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d26:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	4917      	ldr	r1, [pc, #92]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d38:	f000 f834 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	4912      	ldr	r1, [pc, #72]	@ (8005d94 <HAL_RCC_ClockConfig+0x35c>)
 8005d4a:	5ccb      	ldrb	r3, [r1, r3]
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d56:	4b0e      	ldr	r3, [pc, #56]	@ (8005d90 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d94 <HAL_RCC_ClockConfig+0x35c>)
 8005d60:	5cd3      	ldrb	r3, [r2, r3]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <HAL_RCC_ClockConfig+0x360>)
 8005d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d70:	4a0a      	ldr	r2, [pc, #40]	@ (8005d9c <HAL_RCC_ClockConfig+0x364>)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <HAL_RCC_ClockConfig+0x368>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fb fe08 	bl	8001990 <HAL_InitTick>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400
 8005d94:	0800a69c 	.word	0x0800a69c
 8005d98:	2400000c 	.word	0x2400000c
 8005d9c:	24000008 	.word	0x24000008
 8005da0:	24000010 	.word	0x24000010

08005da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005daa:	4bb3      	ldr	r3, [pc, #716]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005db2:	2b18      	cmp	r3, #24
 8005db4:	f200 8155 	bhi.w	8006062 <HAL_RCC_GetSysClockFreq+0x2be>
 8005db8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08006063 	.word	0x08006063
 8005dc8:	08006063 	.word	0x08006063
 8005dcc:	08006063 	.word	0x08006063
 8005dd0:	08006063 	.word	0x08006063
 8005dd4:	08006063 	.word	0x08006063
 8005dd8:	08006063 	.word	0x08006063
 8005ddc:	08006063 	.word	0x08006063
 8005de0:	08005e4b 	.word	0x08005e4b
 8005de4:	08006063 	.word	0x08006063
 8005de8:	08006063 	.word	0x08006063
 8005dec:	08006063 	.word	0x08006063
 8005df0:	08006063 	.word	0x08006063
 8005df4:	08006063 	.word	0x08006063
 8005df8:	08006063 	.word	0x08006063
 8005dfc:	08006063 	.word	0x08006063
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08006063 	.word	0x08006063
 8005e08:	08006063 	.word	0x08006063
 8005e0c:	08006063 	.word	0x08006063
 8005e10:	08006063 	.word	0x08006063
 8005e14:	08006063 	.word	0x08006063
 8005e18:	08006063 	.word	0x08006063
 8005e1c:	08006063 	.word	0x08006063
 8005e20:	08005e57 	.word	0x08005e57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e24:	4b94      	ldr	r3, [pc, #592]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e30:	4b91      	ldr	r3, [pc, #580]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	4a90      	ldr	r2, [pc, #576]	@ (800607c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e42:	e111      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e44:	4b8d      	ldr	r3, [pc, #564]	@ (800607c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e46:	61bb      	str	r3, [r7, #24]
      break;
 8005e48:	e10e      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e4c:	61bb      	str	r3, [r7, #24]
      break;
 8005e4e:	e10b      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e50:	4b8c      	ldr	r3, [pc, #560]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e52:	61bb      	str	r3, [r7, #24]
      break;
 8005e54:	e108      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e56:	4b88      	ldr	r3, [pc, #544]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e60:	4b85      	ldr	r3, [pc, #532]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e6c:	4b82      	ldr	r3, [pc, #520]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e76:	4b80      	ldr	r3, [pc, #512]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	08db      	lsrs	r3, r3, #3
 8005e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80e1 	beq.w	800605c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	f000 8083 	beq.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	f200 80a1 	bhi.w	8005fec <HAL_RCC_GetSysClockFreq+0x248>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x114>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d056      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005eb6:	e099      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d02d      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a6b      	ldr	r2, [pc, #428]	@ (800607c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b62      	ldr	r3, [pc, #392]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f1e:	e087      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800608c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b51      	ldr	r3, [pc, #324]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f62:	e065      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f76:	4b40      	ldr	r3, [pc, #256]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fa6:	e043      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006094 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fea:	e021      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006012:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800602e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006030:	4b11      	ldr	r3, [pc, #68]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	0a5b      	lsrs	r3, r3, #9
 8006036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800603a:	3301      	adds	r3, #1
 800603c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006048:	edd7 6a07 	vldr	s13, [r7, #28]
 800604c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006054:	ee17 3a90 	vmov	r3, s15
 8006058:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800605a:	e005      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
      break;
 8006060:	e002      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006062:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006064:	61bb      	str	r3, [r7, #24]
      break;
 8006066:	bf00      	nop
  }

  return sysclockfreq;
 8006068:	69bb      	ldr	r3, [r7, #24]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3724      	adds	r7, #36	@ 0x24
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
 800607c:	03d09000 	.word	0x03d09000
 8006080:	003d0900 	.word	0x003d0900
 8006084:	007a1200 	.word	0x007a1200
 8006088:	46000000 	.word	0x46000000
 800608c:	4c742400 	.word	0x4c742400
 8006090:	4a742400 	.word	0x4a742400
 8006094:	4af42400 	.word	0x4af42400

08006098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800609e:	f7ff fe81 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 80060a2:	4602      	mov	r2, r0
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	0a1b      	lsrs	r3, r3, #8
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	490f      	ldr	r1, [pc, #60]	@ (80060ec <HAL_RCC_GetHCLKFreq+0x54>)
 80060b0:	5ccb      	ldrb	r3, [r1, r3]
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060bc:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	4a09      	ldr	r2, [pc, #36]	@ (80060ec <HAL_RCC_GetHCLKFreq+0x54>)
 80060c6:	5cd3      	ldrb	r3, [r2, r3]
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	4a07      	ldr	r2, [pc, #28]	@ (80060f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060d6:	4a07      	ldr	r2, [pc, #28]	@ (80060f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060de:	681b      	ldr	r3, [r3, #0]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	58024400 	.word	0x58024400
 80060ec:	0800a69c 	.word	0x0800a69c
 80060f0:	2400000c 	.word	0x2400000c
 80060f4:	24000008 	.word	0x24000008

080060f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060fc:	f7ff ffcc 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b06      	ldr	r3, [pc, #24]	@ (800611c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	4904      	ldr	r1, [pc, #16]	@ (8006120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800610e:	5ccb      	ldrb	r3, [r1, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	58024400 	.word	0x58024400
 8006120:	0800a69c 	.word	0x0800a69c

08006124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006128:	f7ff ffb6 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 800612c:	4602      	mov	r2, r0
 800612e:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	4904      	ldr	r1, [pc, #16]	@ (800614c <HAL_RCC_GetPCLK2Freq+0x28>)
 800613a:	5ccb      	ldrb	r3, [r1, r3]
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	58024400 	.word	0x58024400
 800614c:	0800a69c 	.word	0x0800a69c

08006150 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006154:	b0ca      	sub	sp, #296	@ 0x128
 8006156:	af00      	add	r7, sp, #0
 8006158:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006162:	2300      	movs	r3, #0
 8006164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006174:	2500      	movs	r5, #0
 8006176:	ea54 0305 	orrs.w	r3, r4, r5
 800617a:	d049      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006182:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006186:	d02f      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006188:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800618c:	d828      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800618e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006192:	d01a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006198:	d822      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a2:	d007      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061a4:	e01c      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a6:	4bb8      	ldr	r3, [pc, #736]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	4ab7      	ldr	r2, [pc, #732]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061b2:	e01a      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b8:	3308      	adds	r3, #8
 80061ba:	2102      	movs	r1, #2
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fb61 	bl	8008884 <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061c8:	e00f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	3328      	adds	r3, #40	@ 0x28
 80061d0:	2102      	movs	r1, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f002 fc08 	bl	80089e8 <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061de:	e004      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061f2:	4ba5      	ldr	r3, [pc, #660]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006200:	4aa1      	ldr	r2, [pc, #644]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006202:	430b      	orrs	r3, r1
 8006204:	6513      	str	r3, [r2, #80]	@ 0x50
 8006206:	e003      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800621c:	f04f 0900 	mov.w	r9, #0
 8006220:	ea58 0309 	orrs.w	r3, r8, r9
 8006224:	d047      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	2b04      	cmp	r3, #4
 800622e:	d82a      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006230:	a201      	add	r2, pc, #4	@ (adr r2, 8006238 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800624d 	.word	0x0800624d
 800623c:	0800625b 	.word	0x0800625b
 8006240:	08006271 	.word	0x08006271
 8006244:	0800628f 	.word	0x0800628f
 8006248:	0800628f 	.word	0x0800628f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624c:	4b8e      	ldr	r3, [pc, #568]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	4a8d      	ldr	r2, [pc, #564]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006258:	e01a      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	3308      	adds	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f002 fb0e 	bl	8008884 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800626e:	e00f      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006274:	3328      	adds	r3, #40	@ 0x28
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f002 fbb5 	bl	80089e8 <RCCEx_PLL3_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006284:	e004      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800628e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006298:	4b7b      	ldr	r3, [pc, #492]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629c:	f023 0107 	bic.w	r1, r3, #7
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	4a78      	ldr	r2, [pc, #480]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80062c2:	f04f 0b00 	mov.w	fp, #0
 80062c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80062ca:	d04c      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d6:	d030      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062dc:	d829      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062de:	2bc0      	cmp	r3, #192	@ 0xc0
 80062e0:	d02d      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80062e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062e4:	d825      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062e6:	2b80      	cmp	r3, #128	@ 0x80
 80062e8:	d018      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80062ea:	2b80      	cmp	r3, #128	@ 0x80
 80062ec:	d821      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80062f2:	2b40      	cmp	r3, #64	@ 0x40
 80062f4:	d007      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80062f6:	e01c      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f8:	4b63      	ldr	r3, [pc, #396]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	4a62      	ldr	r2, [pc, #392]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006304:	e01c      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3308      	adds	r3, #8
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f002 fab8 	bl	8008884 <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800631a:	e011      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006320:	3328      	adds	r3, #40	@ 0x28
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f002 fb5f 	bl	80089e8 <RCCEx_PLL3_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006338:	e002      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800633a:	bf00      	nop
 800633c:	e000      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800633e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006348:	4b4f      	ldr	r3, [pc, #316]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800634a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006356:	4a4c      	ldr	r2, [pc, #304]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006358:	430b      	orrs	r3, r1
 800635a:	6513      	str	r3, [r2, #80]	@ 0x50
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006372:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800637c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d053      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800638e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006392:	d035      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006398:	d82e      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800639a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800639e:	d031      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80063a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80063a4:	d828      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063aa:	d01a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063b0:	d822      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80063b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ba:	d007      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80063bc:	e01c      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063be:	4b32      	ldr	r3, [pc, #200]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	4a31      	ldr	r2, [pc, #196]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ca:	e01c      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	3308      	adds	r3, #8
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f002 fa55 	bl	8008884 <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063e0:	e011      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	3328      	adds	r3, #40	@ 0x28
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f002 fafc 	bl	80089e8 <RCCEx_PLL3_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063f6:	e006      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fe:	e002      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800640e:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800641e:	4a1a      	ldr	r2, [pc, #104]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006420:	430b      	orrs	r3, r1
 8006422:	6593      	str	r3, [r2, #88]	@ 0x58
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800643a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006444:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d056      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006456:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800645a:	d038      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800645c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006460:	d831      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006462:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006466:	d034      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006468:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800646c:	d82b      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800646e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006472:	d01d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006474:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006478:	d825      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800647e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006484:	e01f      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648c:	4ba2      	ldr	r3, [pc, #648]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	4aa1      	ldr	r2, [pc, #644]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006498:	e01c      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	3308      	adds	r3, #8
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 f9ee 	bl	8008884 <RCCEx_PLL2_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064ae:	e011      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	3328      	adds	r3, #40	@ 0x28
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f002 fa95 	bl	80089e8 <RCCEx_PLL3_Config>
 80064be:	4603      	mov	r3, r0
 80064c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064c4:	e006      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064cc:	e002      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064dc:	4b8e      	ldr	r3, [pc, #568]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064ec:	4a8a      	ldr	r2, [pc, #552]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f2:	e003      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006512:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d03a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006522:	2b30      	cmp	r3, #48	@ 0x30
 8006524:	d01f      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006526:	2b30      	cmp	r3, #48	@ 0x30
 8006528:	d819      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800652a:	2b20      	cmp	r3, #32
 800652c:	d00c      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d815      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d019      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006536:	2b10      	cmp	r3, #16
 8006538:	d111      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653a:	4b77      	ldr	r3, [pc, #476]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4a76      	ldr	r2, [pc, #472]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006546:	e011      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3308      	adds	r3, #8
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f002 f997 	bl	8008884 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800655c:	e006      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006574:	4b68      	ldr	r3, [pc, #416]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006578:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006582:	4a65      	ldr	r2, [pc, #404]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006584:	430b      	orrs	r3, r1
 8006586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800659e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d051      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065bc:	d035      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c2:	d82e      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065c8:	d031      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ce:	d828      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d01a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065da:	d822      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e4:	d007      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80065e6:	e01c      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065f4:	e01c      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3308      	adds	r3, #8
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 f940 	bl	8008884 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800660a:	e011      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	3328      	adds	r3, #40	@ 0x28
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f002 f9e7 	bl	80089e8 <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800662e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006638:	4b37      	ldr	r3, [pc, #220]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006646:	4a34      	ldr	r2, [pc, #208]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6513      	str	r3, [r2, #80]	@ 0x50
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800666c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d056      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800667c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006680:	d033      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006682:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006686:	d82c      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800668c:	d02f      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800668e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006692:	d826      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006694:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006698:	d02b      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800669a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800669e:	d820      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a4:	d012      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80066a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066aa:	d81a      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d022      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b4:	d115      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 f8e0 	bl	8008884 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066ca:	e015      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	3328      	adds	r3, #40	@ 0x28
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f002 f987 	bl	80089e8 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066e0:	e00a      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066e8:	e006      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066ea:	bf00      	nop
 80066ec:	e004      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066ee:	bf00      	nop
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006700:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006704:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800670e:	4a02      	ldr	r2, [pc, #8]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6513      	str	r3, [r2, #80]	@ 0x50
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006716:	bf00      	nop
 8006718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800673a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d055      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800674c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006750:	d033      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006756:	d82c      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675c:	d02f      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006762:	d826      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006764:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006768:	d02b      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800676e:	d820      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006774:	d012      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677a:	d81a      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d022      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006784:	d115      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	3308      	adds	r3, #8
 800678c:	2101      	movs	r1, #1
 800678e:	4618      	mov	r0, r3
 8006790:	f002 f878 	bl	8008884 <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800679a:	e015      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	3328      	adds	r3, #40	@ 0x28
 80067a2:	2101      	movs	r1, #1
 80067a4:	4618      	mov	r0, r3
 80067a6:	f002 f91f 	bl	80089e8 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067b0:	e00a      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067b8:	e006      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ba:	bf00      	nop
 80067bc:	e004      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067be:	bf00      	nop
 80067c0:	e002      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067d0:	4ba3      	ldr	r3, [pc, #652]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067e0:	4a9f      	ldr	r2, [pc, #636]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d037      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681a:	d00e      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800681c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006820:	d816      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d018      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800682a:	d111      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800682c:	4b8c      	ldr	r3, [pc, #560]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	4a8b      	ldr	r2, [pc, #556]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006838:	e00f      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	3308      	adds	r3, #8
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f002 f81e 	bl	8008884 <RCCEx_PLL2_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006862:	4b7f      	ldr	r3, [pc, #508]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006866:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	4a7b      	ldr	r2, [pc, #492]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006872:	430b      	orrs	r3, r1
 8006874:	6513      	str	r3, [r2, #80]	@ 0x50
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800688c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006890:	2300      	movs	r3, #0
 8006892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006896:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800689a:	460b      	mov	r3, r1
 800689c:	4313      	orrs	r3, r2
 800689e:	d039      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d81c      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80068aa:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	080068c1 	.word	0x080068c1
 80068b8:	080068cf 	.word	0x080068cf
 80068bc:	080068ed 	.word	0x080068ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c0:	4b67      	ldr	r3, [pc, #412]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	4a66      	ldr	r2, [pc, #408]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068cc:	e00f      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3308      	adds	r3, #8
 80068d4:	2102      	movs	r1, #2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 ffd4 	bl	8008884 <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fa:	f023 0103 	bic.w	r1, r3, #3
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006904:	4a56      	ldr	r2, [pc, #344]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006906:	430b      	orrs	r3, r1
 8006908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800692a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	f000 809f 	beq.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006936:	4b4b      	ldr	r3, [pc, #300]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006940:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006942:	f7fb f86f 	bl	8001a24 <HAL_GetTick>
 8006946:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694a:	e00b      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694c:	f7fb f86a 	bl	8001a24 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b64      	cmp	r3, #100	@ 0x64
 800695a:	d903      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006962:	e005      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006964:	4b3f      	ldr	r3, [pc, #252]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ed      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006974:	2b00      	cmp	r3, #0
 8006976:	d179      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006978:	4b39      	ldr	r3, [pc, #228]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006984:	4053      	eors	r3, r2
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d015      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800698e:	4b34      	ldr	r3, [pc, #208]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800699a:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a30      	ldr	r2, [pc, #192]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a6:	4b2e      	ldr	r3, [pc, #184]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d118      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fb f82c 	bl	8001a24 <HAL_GetTick>
 80069cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069d0:	e00d      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fb f827 	bl	8001a24 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069dc:	1ad2      	subs	r2, r2, r3
 80069de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d903      	bls.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80069ec:	e005      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0eb      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d129      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a12:	d10e      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a24:	091a      	lsrs	r2, r3, #4
 8006a26:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6113      	str	r3, [r2, #16]
 8006a30:	e005      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a32:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	4a0a      	ldr	r2, [pc, #40]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a3c:	6113      	str	r3, [r2, #16]
 8006a3e:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4e:	4a04      	ldr	r2, [pc, #16]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a54:	e00e      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006a5e:	e009      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a60:	58024400 	.word	0x58024400
 8006a64:	58024800 	.word	0x58024800
 8006a68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f002 0301 	and.w	r3, r2, #1
 8006a80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f000 8089 	beq.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a9c:	2b28      	cmp	r3, #40	@ 0x28
 8006a9e:	d86b      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006b81 	.word	0x08006b81
 8006aac:	08006b79 	.word	0x08006b79
 8006ab0:	08006b79 	.word	0x08006b79
 8006ab4:	08006b79 	.word	0x08006b79
 8006ab8:	08006b79 	.word	0x08006b79
 8006abc:	08006b79 	.word	0x08006b79
 8006ac0:	08006b79 	.word	0x08006b79
 8006ac4:	08006b79 	.word	0x08006b79
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b79 	.word	0x08006b79
 8006ad0:	08006b79 	.word	0x08006b79
 8006ad4:	08006b79 	.word	0x08006b79
 8006ad8:	08006b79 	.word	0x08006b79
 8006adc:	08006b79 	.word	0x08006b79
 8006ae0:	08006b79 	.word	0x08006b79
 8006ae4:	08006b79 	.word	0x08006b79
 8006ae8:	08006b63 	.word	0x08006b63
 8006aec:	08006b79 	.word	0x08006b79
 8006af0:	08006b79 	.word	0x08006b79
 8006af4:	08006b79 	.word	0x08006b79
 8006af8:	08006b79 	.word	0x08006b79
 8006afc:	08006b79 	.word	0x08006b79
 8006b00:	08006b79 	.word	0x08006b79
 8006b04:	08006b79 	.word	0x08006b79
 8006b08:	08006b81 	.word	0x08006b81
 8006b0c:	08006b79 	.word	0x08006b79
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006b79 	.word	0x08006b79
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	08006b79 	.word	0x08006b79
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b79 	.word	0x08006b79
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006b79 	.word	0x08006b79
 8006b38:	08006b79 	.word	0x08006b79
 8006b3c:	08006b79 	.word	0x08006b79
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006b81 	.word	0x08006b81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	3308      	adds	r3, #8
 8006b52:	2101      	movs	r1, #1
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 fe95 	bl	8008884 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b60:	e00f      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	3328      	adds	r3, #40	@ 0x28
 8006b68:	2101      	movs	r1, #1
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 ff3c 	bl	80089e8 <RCCEx_PLL3_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b76:	e004      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b8a:	4bbf      	ldr	r3, [pc, #764]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b98:	4abb      	ldr	r2, [pc, #748]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f002 0302 	and.w	r3, r2, #2
 8006bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	d041      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d824      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006c25 	.word	0x08006c25
 8006bdc:	08006bf1 	.word	0x08006bf1
 8006be0:	08006c07 	.word	0x08006c07
 8006be4:	08006c25 	.word	0x08006c25
 8006be8:	08006c25 	.word	0x08006c25
 8006bec:	08006c25 	.word	0x08006c25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fe43 	bl	8008884 <RCCEx_PLL2_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c04:	e00f      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	3328      	adds	r3, #40	@ 0x28
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 feea 	bl	80089e8 <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c1a:	e004      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c22:	e000      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c2e:	4b96      	ldr	r3, [pc, #600]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c32:	f023 0107 	bic.w	r1, r3, #7
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c3c:	4a92      	ldr	r2, [pc, #584]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c42:	e003      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f002 0304 	and.w	r3, r2, #4
 8006c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	d044      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d825      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006c78:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ccd 	.word	0x08006ccd
 8006c84:	08006c99 	.word	0x08006c99
 8006c88:	08006caf 	.word	0x08006caf
 8006c8c:	08006ccd 	.word	0x08006ccd
 8006c90:	08006ccd 	.word	0x08006ccd
 8006c94:	08006ccd 	.word	0x08006ccd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fdef 	bl	8008884 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cac:	e00f      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	3328      	adds	r3, #40	@ 0x28
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fe96 	bl	80089e8 <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cda:	f023 0107 	bic.w	r1, r3, #7
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce6:	4a68      	ldr	r2, [pc, #416]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f002 0320 	and.w	r3, r2, #32
 8006d02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d055      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d22:	d033      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d28:	d82c      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2e:	d02f      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d34:	d826      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d3a:	d02b      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d40:	d820      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d46:	d012      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4c:	d81a      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d022      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d56:	d115      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 fd8f 	bl	8008884 <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d6c:	e015      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	3328      	adds	r3, #40	@ 0x28
 8006d74:	2102      	movs	r1, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fe36 	bl	80089e8 <RCCEx_PLL3_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d82:	e00a      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d8a:	e006      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d8c:	bf00      	nop
 8006d8e:	e004      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10b      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da2:	4b39      	ldr	r3, [pc, #228]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db2:	4a35      	ldr	r2, [pc, #212]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006db8:	e003      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d058      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006dee:	d033      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006df0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006df4:	d82c      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfa:	d02f      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e00:	d826      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e06:	d02b      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e0c:	d820      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e12:	d012      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e18:	d81a      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d022      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e22:	d115      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	3308      	adds	r3, #8
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fd29 	bl	8008884 <RCCEx_PLL2_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e38:	e015      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	3328      	adds	r3, #40	@ 0x28
 8006e40:	2102      	movs	r1, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fdd0 	bl	80089e8 <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e56:	e006      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e58:	bf00      	nop
 8006e5a:	e004      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e5c:	bf00      	nop
 8006e5e:	e002      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e60:	bf00      	nop
 8006e62:	e000      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10e      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e7e:	4a02      	ldr	r2, [pc, #8]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e84:	e006      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006e86:	bf00      	nop
 8006e88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	d055      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ebc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ec0:	d033      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006ec2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ec6:	d82c      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ecc:	d02f      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed2:	d826      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ed4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ed8:	d02b      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006eda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ede:	d820      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ee4:	d012      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eea:	d81a      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d022      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef4:	d115      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fcc0 	bl	8008884 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e015      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fd67 	bl	80089e8 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f20:	e00a      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f28:	e006      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e004      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f50:	4a9d      	ldr	r2, [pc, #628]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f52:	430b      	orrs	r3, r1
 8006f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0308 	and.w	r3, r2, #8
 8006f6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d01e      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	3328      	adds	r3, #40	@ 0x28
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fd26 	bl	80089e8 <RCCEx_PLL3_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fa8:	4b87      	ldr	r3, [pc, #540]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb8:	4a83      	ldr	r2, [pc, #524]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f002 0310 	and.w	r3, r2, #16
 8006fca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d01e      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d10c      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	3328      	adds	r3, #40	@ 0x28
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 fcf7 	bl	80089e8 <RCCEx_PLL3_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007006:	4b70      	ldr	r3, [pc, #448]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007016:	4a6c      	ldr	r2, [pc, #432]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007018:	430b      	orrs	r3, r1
 800701a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007032:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d03e      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007048:	d022      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800704a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800704e:	d81b      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007058:	d00b      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800705a:	e015      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007060:	3308      	adds	r3, #8
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fc0d 	bl	8008884 <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007070:	e00f      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007076:	3328      	adds	r3, #40	@ 0x28
 8007078:	2102      	movs	r1, #2
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fcb4 	bl	80089e8 <RCCEx_PLL3_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007086:	e004      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800708e:	e000      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800709a:	4b4b      	ldr	r3, [pc, #300]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070aa:	4a47      	ldr	r2, [pc, #284]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070c8:	2300      	movs	r3, #0
 80070ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070d0:	460b      	mov	r3, r1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	d03b      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e2:	d01f      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80070e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e8:	d818      	bhi.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80070f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070f4:	d007      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b33      	ldr	r3, [pc, #204]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	4a32      	ldr	r2, [pc, #200]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007104:	e00f      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	3328      	adds	r3, #40	@ 0x28
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fc6a 	bl	80089e8 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800712e:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007132:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	4a22      	ldr	r2, [pc, #136]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6553      	str	r3, [r2, #84]	@ 0x54
 8007144:	e003      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800715a:	673b      	str	r3, [r7, #112]	@ 0x70
 800715c:	2300      	movs	r3, #0
 800715e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007160:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d034      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d007      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800717a:	e011      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007188:	e00e      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	3308      	adds	r3, #8
 8007190:	2102      	movs	r1, #2
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fb76 	bl	8008884 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800719e:	e003      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10d      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071be:	4a02      	ldr	r2, [pc, #8]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c0:	430b      	orrs	r3, r1
 80071c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e2:	2300      	movs	r3, #0
 80071e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d00c      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	3328      	adds	r3, #40	@ 0x28
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fbf5 	bl	80089e8 <RCCEx_PLL3_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007216:	663b      	str	r3, [r7, #96]	@ 0x60
 8007218:	2300      	movs	r3, #0
 800721a:	667b      	str	r3, [r7, #100]	@ 0x64
 800721c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d038      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800722e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007232:	d018      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007238:	d811      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800723a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723e:	d014      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007244:	d80b      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d011      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800724a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724e:	d106      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007250:	4bc3      	ldr	r3, [pc, #780]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	4ac2      	ldr	r2, [pc, #776]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800725a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800725c:	e008      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007264:	e004      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007266:	bf00      	nop
 8007268:	e002      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800726e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007278:	4bb9      	ldr	r3, [pc, #740]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007288:	4ab5      	ldr	r2, [pc, #724]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728a:	430b      	orrs	r3, r1
 800728c:	6553      	str	r3, [r2, #84]	@ 0x54
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a6:	2300      	movs	r3, #0
 80072a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d009      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072b4:	4baa      	ldr	r3, [pc, #680]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	4aa7      	ldr	r2, [pc, #668]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80072d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80072d6:	2300      	movs	r3, #0
 80072d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d00a      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072e4:	4b9e      	ldr	r3, [pc, #632]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072f4:	4a9a      	ldr	r2, [pc, #616]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f6:	430b      	orrs	r3, r1
 80072f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007308:	2300      	movs	r3, #0
 800730a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800730c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007316:	4b92      	ldr	r3, [pc, #584]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007324:	4a8e      	ldr	r2, [pc, #568]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007336:	643b      	str	r3, [r7, #64]	@ 0x40
 8007338:	2300      	movs	r3, #0
 800733a:	647b      	str	r3, [r7, #68]	@ 0x44
 800733c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007346:	4b86      	ldr	r3, [pc, #536]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	4a85      	ldr	r2, [pc, #532]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800734c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007350:	6113      	str	r3, [r2, #16]
 8007352:	4b83      	ldr	r3, [pc, #524]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007354:	6919      	ldr	r1, [r3, #16]
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800735e:	4a80      	ldr	r2, [pc, #512]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007372:	2300      	movs	r3, #0
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007376:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800737a:	460b      	mov	r3, r1
 800737c:	4313      	orrs	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007380:	4b77      	ldr	r3, [pc, #476]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007384:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800738e:	4a74      	ldr	r2, [pc, #464]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007390:	430b      	orrs	r3, r1
 8007392:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80073a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a2:	2300      	movs	r3, #0
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d00a      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073b0:	4b6b      	ldr	r3, [pc, #428]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073c0:	4a67      	ldr	r2, [pc, #412]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c2:	430b      	orrs	r3, r1
 80073c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	2100      	movs	r1, #0
 80073d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073dc:	460b      	mov	r3, r1
 80073de:	4313      	orrs	r3, r2
 80073e0:	d011      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e6:	3308      	adds	r3, #8
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fa4a 	bl	8008884 <RCCEx_PLL2_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	2100      	movs	r1, #0
 8007410:	6239      	str	r1, [r7, #32]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
 8007418:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800741c:	460b      	mov	r3, r1
 800741e:	4313      	orrs	r3, r2
 8007420:	d011      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	3308      	adds	r3, #8
 8007428:	2101      	movs	r1, #1
 800742a:	4618      	mov	r0, r3
 800742c:	f001 fa2a 	bl	8008884 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	2100      	movs	r1, #0
 8007450:	61b9      	str	r1, [r7, #24]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800745c:	460b      	mov	r3, r1
 800745e:	4313      	orrs	r3, r2
 8007460:	d011      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	3308      	adds	r3, #8
 8007468:	2102      	movs	r1, #2
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fa0a 	bl	8008884 <RCCEx_PLL2_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	2100      	movs	r1, #0
 8007490:	6139      	str	r1, [r7, #16]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800749c:	460b      	mov	r3, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	d011      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a6:	3328      	adds	r3, #40	@ 0x28
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fa9c 	bl	80089e8 <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80074b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	2100      	movs	r1, #0
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074dc:	460b      	mov	r3, r1
 80074de:	4313      	orrs	r3, r2
 80074e0:	d011      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	3328      	adds	r3, #40	@ 0x28
 80074e8:	2101      	movs	r1, #1
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fa7c 	bl	80089e8 <RCCEx_PLL3_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	2100      	movs	r1, #0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	e9d7 1200 	ldrd	r1, r2, [r7]
 800751c:	460b      	mov	r3, r1
 800751e:	4313      	orrs	r3, r2
 8007520:	d011      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007526:	3328      	adds	r3, #40	@ 0x28
 8007528:	2102      	movs	r1, #2
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fa5c 	bl	80089e8 <RCCEx_PLL3_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007546:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
}
 8007554:	4618      	mov	r0, r3
 8007556:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800755a:	46bd      	mov	sp, r7
 800755c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007560:	58024400 	.word	0x58024400

08007564 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b090      	sub	sp, #64	@ 0x40
 8007568:	af00      	add	r7, sp, #0
 800756a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800756e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007572:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007576:	430b      	orrs	r3, r1
 8007578:	f040 8094 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800757c:	4b9e      	ldr	r3, [pc, #632]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800757e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	2b04      	cmp	r3, #4
 800758a:	f200 8087 	bhi.w	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800758e:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075a9 	.word	0x080075a9
 8007598:	080075d1 	.word	0x080075d1
 800759c:	080075f9 	.word	0x080075f9
 80075a0:	08007695 	.word	0x08007695
 80075a4:	08007621 	.word	0x08007621
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075a8:	4b93      	ldr	r3, [pc, #588]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b4:	d108      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f810 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c4:	f000 bd45 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	f000 bd41 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d0:	4b89      	ldr	r3, [pc, #548]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075dc:	d108      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075de:	f107 0318 	add.w	r3, r7, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fd54 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ec:	f000 bd31 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f4:	f000 bd2d 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075f8:	4b7f      	ldr	r3, [pc, #508]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007604:	d108      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fe94 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007614:	f000 bd1d 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800761c:	f000 bd19 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007620:	4b75      	ldr	r3, [pc, #468]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007624:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800762a:	4b73      	ldr	r3, [pc, #460]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b04      	cmp	r3, #4
 8007634:	d10c      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800763c:	4b6e      	ldr	r3, [pc, #440]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	4a6d      	ldr	r2, [pc, #436]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800764e:	e01f      	b.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007650:	4b69      	ldr	r3, [pc, #420]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765c:	d106      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007664:	d102      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007666:	4b66      	ldr	r3, [pc, #408]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800766a:	e011      	b.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800766c:	4b62      	ldr	r3, [pc, #392]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007678:	d106      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800767a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007680:	d102      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007682:	4b60      	ldr	r3, [pc, #384]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007686:	e003      	b.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800768c:	f000 bce1 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007690:	f000 bcdf 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007694:	4b5c      	ldr	r3, [pc, #368]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007698:	f000 bcdb 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	f000 bcd7 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80076a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80076ac:	430b      	orrs	r3, r1
 80076ae:	f040 80ad 	bne.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80076b2:	4b51      	ldr	r3, [pc, #324]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80076ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c2:	d056      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ca:	f200 8090 	bhi.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80076d2:	f000 8088 	beq.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80076da:	f200 8088 	bhi.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	2b80      	cmp	r3, #128	@ 0x80
 80076e2:	d032      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2b80      	cmp	r3, #128	@ 0x80
 80076e8:	f200 8081 	bhi.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d014      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80076f8:	e079      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076fa:	4b3f      	ldr	r3, [pc, #252]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007706:	d108      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800770c:	4618      	mov	r0, r3
 800770e:	f000 ff67 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007716:	f000 bc9c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771e:	f000 bc98 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007722:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800772a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800772e:	d108      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007730:	f107 0318 	add.w	r3, r7, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fcab 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773e:	f000 bc88 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007746:	f000 bc84 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800774a:	4b2b      	ldr	r3, [pc, #172]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007756:	d108      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fdeb 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007766:	f000 bc74 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776e:	f000 bc70 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007772:	4b21      	ldr	r3, [pc, #132]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800777c:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d10c      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778e:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	08db      	lsrs	r3, r3, #3
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800779a:	fa22 f303 	lsr.w	r3, r2, r3
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a0:	e01f      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077a2:	4b15      	ldr	r3, [pc, #84]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ae:	d106      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80077b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b6:	d102      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077b8:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077bc:	e011      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ca:	d106      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80077cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d2:	d102      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077de:	f000 bc38 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077e2:	f000 bc36 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077e6:	4b08      	ldr	r3, [pc, #32]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ea:	f000 bc32 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f2:	f000 bc2e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
 8007804:	007a1200 	.word	0x007a1200
 8007808:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007814:	430b      	orrs	r3, r1
 8007816:	f040 809c 	bne.w	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800781a:	4b9e      	ldr	r3, [pc, #632]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800781c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007822:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800782a:	d054      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007832:	f200 808b 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800783c:	f000 8083 	beq.w	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007846:	f200 8081 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007850:	d02f      	beq.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007858:	d878      	bhi.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007866:	d012      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007868:	e070      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800786a:	4b8a      	ldr	r3, [pc, #552]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007876:	d107      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800787c:	4618      	mov	r0, r3
 800787e:	f000 feaf 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007886:	e3e4      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788c:	e3e1      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800788e:	4b81      	ldr	r3, [pc, #516]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800789a:	d107      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789c:	f107 0318 	add.w	r3, r7, #24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fbf5 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078aa:	e3d2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b0:	e3cf      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078b2:	4b78      	ldr	r3, [pc, #480]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078be:	d107      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fd37 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ce:	e3c0      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d4:	e3bd      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d10c      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f2:	4b68      	ldr	r3, [pc, #416]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	08db      	lsrs	r3, r3, #3
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	4a66      	ldr	r2, [pc, #408]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007904:	e01e      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007906:	4b63      	ldr	r3, [pc, #396]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	d106      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791a:	d102      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800791c:	4b5f      	ldr	r3, [pc, #380]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007920:	e010      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007922:	4b5c      	ldr	r3, [pc, #368]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792e:	d106      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007936:	d102      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007938:	4b59      	ldr	r3, [pc, #356]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800793c:	e002      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007942:	e386      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007944:	e385      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007946:	4b57      	ldr	r3, [pc, #348]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794a:	e382      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007950:	e37f      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007956:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800795a:	430b      	orrs	r3, r1
 800795c:	f040 80a7 	bne.w	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007960:	4b4c      	ldr	r3, [pc, #304]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007964:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007968:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007970:	d055      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007978:	f200 8096 	bhi.w	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007982:	f000 8084 	beq.w	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800798c:	f200 808c 	bhi.w	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007996:	d030      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800799e:	f200 8083 	bhi.w	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079ae:	d012      	beq.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80079b0:	e07a      	b.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079b2:	4b38      	ldr	r3, [pc, #224]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079be:	d107      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fe0b 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ce:	e340      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d4:	e33d      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e2:	d107      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e4:	f107 0318 	add.w	r3, r7, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fb51 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f2:	e32e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f8:	e32b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079fa:	4b26      	ldr	r3, [pc, #152]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a06:	d107      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fc93 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a16:	e31c      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1c:	e319      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d10c      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a3a:	4b16      	ldr	r3, [pc, #88]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	08db      	lsrs	r3, r3, #3
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	4a14      	ldr	r2, [pc, #80]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a4c:	e01e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a4e:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a5a:	d106      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a62:	d102      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a64:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a68:	e010      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a76:	d106      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7e:	d102      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a80:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a84:	e002      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a8a:	e2e2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a8c:	e2e1      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a8e:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a92:	e2de      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a94:	58024400 	.word	0x58024400
 8007a98:	03d09000 	.word	0x03d09000
 8007a9c:	003d0900 	.word	0x003d0900
 8007aa0:	007a1200 	.word	0x007a1200
 8007aa4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aac:	e2d1      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	f040 809c 	bne.w	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007abc:	4b93      	ldr	r3, [pc, #588]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ac4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007acc:	d054      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad4:	f200 808b 	bhi.w	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ade:	f000 8083 	beq.w	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ae8:	f200 8081 	bhi.w	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007af2:	d02f      	beq.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007afa:	d878      	bhi.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b08:	d012      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007b0a:	e070      	b.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b0c:	4b7f      	ldr	r3, [pc, #508]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b18:	d107      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fd5e 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b28:	e293      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2e:	e290      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b30:	4b76      	ldr	r3, [pc, #472]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b3c:	d107      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3e:	f107 0318 	add.w	r3, r7, #24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 faa4 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b4c:	e281      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b52:	e27e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b54:	4b6d      	ldr	r3, [pc, #436]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b60:	d107      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b62:	f107 030c 	add.w	r3, r7, #12
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fbe6 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b70:	e26f      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b76:	e26c      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b78:	4b64      	ldr	r3, [pc, #400]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b82:	4b62      	ldr	r3, [pc, #392]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d10c      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b94:	4b5d      	ldr	r3, [pc, #372]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	08db      	lsrs	r3, r3, #3
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba6:	e01e      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ba8:	4b58      	ldr	r3, [pc, #352]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb4:	d106      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bbc:	d102      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bbe:	4b55      	ldr	r3, [pc, #340]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc2:	e010      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bc4:	4b51      	ldr	r3, [pc, #324]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd0:	d106      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd8:	d102      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007bda:	4b4f      	ldr	r3, [pc, #316]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bde:	e002      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007be4:	e235      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007be6:	e234      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007be8:	4b4c      	ldr	r3, [pc, #304]	@ (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bec:	e231      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf2:	e22e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	f040 808f 	bne.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007c02:	4b42      	ldr	r3, [pc, #264]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c06:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c12:	d06b      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c1a:	d874      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c22:	d056      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c2a:	d86c      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c32:	d03b      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c3a:	d864      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c42:	d021      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c4a:	d85c      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c58:	d004      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007c5a:	e054      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c5c:	f7fe fa4c 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 8007c60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c62:	e1f6      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c64:	4b29      	ldr	r3, [pc, #164]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c70:	d107      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c72:	f107 0318 	add.w	r3, r7, #24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fa0a 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c80:	e1e7      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c86:	e1e4      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c88:	4b20      	ldr	r3, [pc, #128]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fb4c 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca4:	e1d5      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007caa:	e1d2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cac:	4b17      	ldr	r3, [pc, #92]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d109      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb8:	4b14      	ldr	r3, [pc, #80]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	08db      	lsrs	r3, r3, #3
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	4a13      	ldr	r2, [pc, #76]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cca:	e1c2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd0:	e1bf      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cde:	d102      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce4:	e1b5      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cea:	e1b2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cec:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf8:	d102      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007cfa:	4b07      	ldr	r3, [pc, #28]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfe:	e1a8      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e1a5      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e1a2      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d0c:	58024400 	.word	0x58024400
 8007d10:	03d09000 	.word	0x03d09000
 8007d14:	003d0900 	.word	0x003d0900
 8007d18:	007a1200 	.word	0x007a1200
 8007d1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	d173      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d3c:	d02f      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d44:	d863      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d52:	d012      	beq.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007d54:	e05b      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d56:	4b92      	ldr	r3, [pc, #584]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d62:	d107      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d64:	f107 0318 	add.w	r3, r7, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 f991 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d72:	e16e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d78:	e16b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d7a:	4b89      	ldr	r3, [pc, #548]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d88:	f107 030c 	add.w	r3, r7, #12
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fad3 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d96:	e15c      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9c:	e159      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d9e:	4b80      	ldr	r3, [pc, #512]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007da8:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d10c      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dba:	4b79      	ldr	r3, [pc, #484]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	08db      	lsrs	r3, r3, #3
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	4a77      	ldr	r2, [pc, #476]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dcc:	e01e      	b.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dce:	4b74      	ldr	r3, [pc, #464]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dda:	d106      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007de2:	d102      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007de4:	4b70      	ldr	r3, [pc, #448]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007de8:	e010      	b.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dea:	4b6d      	ldr	r3, [pc, #436]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007df6:	d106      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dfe:	d102      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e00:	4b6a      	ldr	r3, [pc, #424]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e04:	e002      	b.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e0a:	e122      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e0c:	e121      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e12:	e11e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e18:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	d133      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007e20:	4b5f      	ldr	r3, [pc, #380]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e36:	d012      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007e38:	e023      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e3a:	4b59      	ldr	r3, [pc, #356]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e46:	d107      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fbc7 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e56:	e0fc      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5c:	e0f9      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5e:	4b50      	ldr	r3, [pc, #320]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6c:	f107 0318 	add.w	r3, r7, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f90d 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e7a:	e0ea      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e80:	e0e7      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e86:	e0e4      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007e90:	430b      	orrs	r3, r1
 8007e92:	f040 808d 	bne.w	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e96:	4b42      	ldr	r3, [pc, #264]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007e9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ea6:	d06b      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eae:	d874      	bhi.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb6:	d056      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ebe:	d86c      	bhi.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ec6:	d03b      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ece:	d864      	bhi.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed6:	d021      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ede:	d85c      	bhi.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eec:	d004      	beq.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007eee:	e054      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ef0:	f000 f8b8 	bl	8008064 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ef4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ef6:	e0ac      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ef8:	4b29      	ldr	r3, [pc, #164]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f04:	d107      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f8c0 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f14:	e09d      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1a:	e09a      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f1c:	4b20      	ldr	r3, [pc, #128]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f28:	d107      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f2a:	f107 030c 	add.w	r3, r7, #12
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fa02 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f38:	e08b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3e:	e088      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f40:	4b17      	ldr	r3, [pc, #92]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f4c:	4b14      	ldr	r3, [pc, #80]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	08db      	lsrs	r3, r3, #3
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	4a13      	ldr	r2, [pc, #76]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5e:	e078      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	e075      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f66:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f74:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f78:	e06b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7e:	e068      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f8e:	4b07      	ldr	r3, [pc, #28]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f92:	e05e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f98:	e05b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9e:	e058      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fa0:	58024400 	.word	0x58024400
 8007fa4:	03d09000 	.word	0x03d09000
 8007fa8:	003d0900 	.word	0x003d0900
 8007fac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	d148      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007fbc:	4b27      	ldr	r3, [pc, #156]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fcc:	d02a      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd4:	d838      	bhi.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe2:	d00d      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007fe4:	e030      	b.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff2:	d102      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff8:	e02b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ffe:	e028      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008000:	4b16      	ldr	r3, [pc, #88]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800800c:	d107      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800800e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fae4 	bl	80085e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801c:	e019      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008022:	e016      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008024:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800802c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008030:	d107      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008032:	f107 0318 	add.w	r3, r7, #24
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f82a 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008040:	e007      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800804c:	e001      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008054:	4618      	mov	r0, r3
 8008056:	3740      	adds	r7, #64	@ 0x40
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	58024400 	.word	0x58024400
 8008060:	007a1200 	.word	0x007a1200

08008064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008068:	f7fe f816 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 800806c:	4602      	mov	r2, r0
 800806e:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	4904      	ldr	r1, [pc, #16]	@ (800808c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800807a:	5ccb      	ldrb	r3, [r1, r3]
 800807c:	f003 031f 	and.w	r3, r3, #31
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008084:	4618      	mov	r0, r3
 8008086:	bd80      	pop	{r7, pc}
 8008088:	58024400 	.word	0x58024400
 800808c:	0800a69c 	.word	0x0800a69c

08008090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008090:	b480      	push	{r7}
 8008092:	b089      	sub	sp, #36	@ 0x24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008098:	4ba1      	ldr	r3, [pc, #644]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80080a2:	4b9f      	ldr	r3, [pc, #636]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a6:	0b1b      	lsrs	r3, r3, #12
 80080a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80080ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80080ba:	4b99      	ldr	r3, [pc, #612]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080be:	08db      	lsrs	r3, r3, #3
 80080c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8111 	beq.w	8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	f000 8083 	beq.w	80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	f200 80a1 	bhi.w	8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d056      	beq.n	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080fa:	e099      	b.n	8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fc:	4b88      	ldr	r3, [pc, #544]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d02d      	beq.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008108:	4b85      	ldr	r3, [pc, #532]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	4a84      	ldr	r2, [pc, #528]	@ (8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b7b      	ldr	r3, [pc, #492]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008162:	e087      	b.n	8008274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800832c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008176:	4b6a      	ldr	r3, [pc, #424]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	ed97 6a03 	vldr	s12, [r7, #12]
 800818a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081a6:	e065      	b.n	8008274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ba:	4b59      	ldr	r3, [pc, #356]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ea:	e043      	b.n	8008274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fe:	4b48      	ldr	r3, [pc, #288]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008212:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800822e:	e021      	b.n	8008274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800823e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008242:	4b37      	ldr	r3, [pc, #220]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008252:	ed97 6a03 	vldr	s12, [r7, #12]
 8008256:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800825a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008274:	4b2a      	ldr	r3, [pc, #168]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	0a5b      	lsrs	r3, r3, #9
 800827a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800828a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800829a:	ee17 2a90 	vmov	r2, s15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80082a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80082c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c8:	ee17 2a90 	vmov	r2, s15
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80082d0:	4b13      	ldr	r3, [pc, #76]	@ (8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	0e1b      	lsrs	r3, r3, #24
 80082d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f6:	ee17 2a90 	vmov	r2, s15
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082fe:	e008      	b.n	8008312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	609a      	str	r2, [r3, #8]
}
 8008312:	bf00      	nop
 8008314:	3724      	adds	r7, #36	@ 0x24
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
 8008324:	03d09000 	.word	0x03d09000
 8008328:	46000000 	.word	0x46000000
 800832c:	4c742400 	.word	0x4c742400
 8008330:	4a742400 	.word	0x4a742400
 8008334:	4af42400 	.word	0x4af42400

08008338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008338:	b480      	push	{r7}
 800833a:	b089      	sub	sp, #36	@ 0x24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008340:	4ba1      	ldr	r3, [pc, #644]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800834a:	4b9f      	ldr	r3, [pc, #636]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	0d1b      	lsrs	r3, r3, #20
 8008350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008356:	4b9c      	ldr	r3, [pc, #624]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008362:	4b99      	ldr	r3, [pc, #612]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8111 	beq.w	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b02      	cmp	r3, #2
 800838a:	f000 8083 	beq.w	8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b02      	cmp	r3, #2
 8008392:	f200 80a1 	bhi.w	80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d056      	beq.n	8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80083a2:	e099      	b.n	80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a4:	4b88      	ldr	r3, [pc, #544]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d02d      	beq.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b0:	4b85      	ldr	r3, [pc, #532]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	08db      	lsrs	r3, r3, #3
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	4a84      	ldr	r2, [pc, #528]	@ (80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b7b      	ldr	r3, [pc, #492]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800840a:	e087      	b.n	800851c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800841a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841e:	4b6a      	ldr	r3, [pc, #424]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008432:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800843a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800844e:	e065      	b.n	800851c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800845e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008462:	4b59      	ldr	r3, [pc, #356]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008472:	ed97 6a03 	vldr	s12, [r7, #12]
 8008476:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800847a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800847e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008492:	e043      	b.n	800851c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80084a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a6:	4b48      	ldr	r3, [pc, #288]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d6:	e021      	b.n	800851c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ea:	4b37      	ldr	r3, [pc, #220]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80084fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800851a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800851c:	4b2a      	ldr	r3, [pc, #168]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008520:	0a5b      	lsrs	r3, r3, #9
 8008522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008536:	edd7 6a07 	vldr	s13, [r7, #28]
 800853a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800853e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008542:	ee17 2a90 	vmov	r2, s15
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800854a:	4b1f      	ldr	r3, [pc, #124]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008564:	edd7 6a07 	vldr	s13, [r7, #28]
 8008568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008570:	ee17 2a90 	vmov	r2, s15
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008578:	4b13      	ldr	r3, [pc, #76]	@ (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857c:	0e1b      	lsrs	r3, r3, #24
 800857e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800858e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008592:	edd7 6a07 	vldr	s13, [r7, #28]
 8008596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800859a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859e:	ee17 2a90 	vmov	r2, s15
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80085a6:	e008      	b.n	80085ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	609a      	str	r2, [r3, #8]
}
 80085ba:	bf00      	nop
 80085bc:	3724      	adds	r7, #36	@ 0x24
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	58024400 	.word	0x58024400
 80085cc:	03d09000 	.word	0x03d09000
 80085d0:	46000000 	.word	0x46000000
 80085d4:	4c742400 	.word	0x4c742400
 80085d8:	4a742400 	.word	0x4a742400
 80085dc:	4af42400 	.word	0x4af42400

080085e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	@ 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085e8:	4ba0      	ldr	r3, [pc, #640]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80085f2:	4b9e      	ldr	r3, [pc, #632]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085fe:	4b9b      	ldr	r3, [pc, #620]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008608:	4b98      	ldr	r3, [pc, #608]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800860c:	08db      	lsrs	r3, r3, #3
 800860e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	fb02 f303 	mul.w	r3, r2, r3
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8111 	beq.w	800884e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b02      	cmp	r3, #2
 8008630:	f000 8083 	beq.w	800873a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b02      	cmp	r3, #2
 8008638:	f200 80a1 	bhi.w	800877e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d056      	beq.n	80086f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008648:	e099      	b.n	800877e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864a:	4b88      	ldr	r3, [pc, #544]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d02d      	beq.n	80086b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008656:	4b85      	ldr	r3, [pc, #532]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	4a83      	ldr	r2, [pc, #524]	@ (8008870 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008662:	fa22 f303 	lsr.w	r3, r2, r3
 8008666:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008680:	4b7a      	ldr	r3, [pc, #488]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008690:	ed97 6a03 	vldr	s12, [r7, #12]
 8008694:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086b0:	e087      	b.n	80087c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008878 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c4:	4b69      	ldr	r3, [pc, #420]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086f4:	e065      	b.n	80087c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008700:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800887c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008708:	4b58      	ldr	r3, [pc, #352]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800870a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008718:	ed97 6a03 	vldr	s12, [r7, #12]
 800871c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008728:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800872c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008734:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008738:	e043      	b.n	80087c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008744:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008880 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874c:	4b47      	ldr	r3, [pc, #284]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800874e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008760:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008778:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800877c:	e021      	b.n	80087c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	ee07 3a90 	vmov	s15, r3
 8008784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008788:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008878 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800878c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008790:	4b36      	ldr	r3, [pc, #216]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80087c2:	4b2a      	ldr	r3, [pc, #168]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c6:	0a5b      	lsrs	r3, r3, #9
 80087c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e8:	ee17 2a90 	vmov	r2, s15
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80087f0:	4b1e      	ldr	r3, [pc, #120]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f4:	0c1b      	lsrs	r3, r3, #16
 80087f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800880a:	edd7 6a07 	vldr	s13, [r7, #28]
 800880e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008816:	ee17 2a90 	vmov	r2, s15
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800881e:	4b13      	ldr	r3, [pc, #76]	@ (800886c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008838:	edd7 6a07 	vldr	s13, [r7, #28]
 800883c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008844:	ee17 2a90 	vmov	r2, s15
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800884c:	e008      	b.n	8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	609a      	str	r2, [r3, #8]
}
 8008860:	bf00      	nop
 8008862:	3724      	adds	r7, #36	@ 0x24
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	58024400 	.word	0x58024400
 8008870:	03d09000 	.word	0x03d09000
 8008874:	46000000 	.word	0x46000000
 8008878:	4c742400 	.word	0x4c742400
 800887c:	4a742400 	.word	0x4a742400
 8008880:	4af42400 	.word	0x4af42400

08008884 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008892:	4b53      	ldr	r3, [pc, #332]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b03      	cmp	r3, #3
 800889c:	d101      	bne.n	80088a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e099      	b.n	80089d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088a2:	4b4f      	ldr	r3, [pc, #316]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a4e      	ldr	r2, [pc, #312]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ae:	f7f9 f8b9 	bl	8001a24 <HAL_GetTick>
 80088b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088b4:	e008      	b.n	80088c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088b6:	f7f9 f8b5 	bl	8001a24 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e086      	b.n	80089d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088c8:	4b45      	ldr	r3, [pc, #276]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f0      	bne.n	80088b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088d4:	4b42      	ldr	r3, [pc, #264]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	031b      	lsls	r3, r3, #12
 80088e2:	493f      	ldr	r1, [pc, #252]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	025b      	lsls	r3, r3, #9
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	3b01      	subs	r3, #1
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	3b01      	subs	r3, #1
 8008912:	061b      	lsls	r3, r3, #24
 8008914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008918:	4931      	ldr	r1, [pc, #196]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800891a:	4313      	orrs	r3, r2
 800891c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800891e:	4b30      	ldr	r3, [pc, #192]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	492d      	ldr	r1, [pc, #180]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008930:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	f023 0220 	bic.w	r2, r3, #32
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	4928      	ldr	r1, [pc, #160]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008942:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	4a26      	ldr	r2, [pc, #152]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800894e:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008952:	4b24      	ldr	r3, [pc, #144]	@ (80089e4 <RCCEx_PLL2_Config+0x160>)
 8008954:	4013      	ands	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	69d2      	ldr	r2, [r2, #28]
 800895a:	00d2      	lsls	r2, r2, #3
 800895c:	4920      	ldr	r1, [pc, #128]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008962:	4b1f      	ldr	r3, [pc, #124]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	4a1e      	ldr	r2, [pc, #120]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008968:	f043 0310 	orr.w	r3, r3, #16
 800896c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008974:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008978:	4a19      	ldr	r2, [pc, #100]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800897a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800897e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008980:	e00f      	b.n	80089a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d106      	bne.n	8008996 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008988:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	4a14      	ldr	r2, [pc, #80]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800898e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008994:	e005      	b.n	80089a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008996:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 8008998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899a:	4a11      	ldr	r2, [pc, #68]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 800899c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089a2:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a0e      	ldr	r2, [pc, #56]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80089a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ae:	f7f9 f839 	bl	8001a24 <HAL_GetTick>
 80089b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089b4:	e008      	b.n	80089c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089b6:	f7f9 f835 	bl	8001a24 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e006      	b.n	80089d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <RCCEx_PLL2_Config+0x15c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	58024400 	.word	0x58024400
 80089e4:	ffff0007 	.word	0xffff0007

080089e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089f6:	4b53      	ldr	r3, [pc, #332]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d101      	bne.n	8008a06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e099      	b.n	8008b3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a06:	4b4f      	ldr	r3, [pc, #316]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a12:	f7f9 f807 	bl	8001a24 <HAL_GetTick>
 8008a16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a18:	e008      	b.n	8008a2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a1a:	f7f9 f803 	bl	8001a24 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d901      	bls.n	8008a2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e086      	b.n	8008b3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a2c:	4b45      	ldr	r3, [pc, #276]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f0      	bne.n	8008a1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a38:	4b42      	ldr	r3, [pc, #264]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	051b      	lsls	r3, r3, #20
 8008a46:	493f      	ldr	r1, [pc, #252]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	025b      	lsls	r3, r3, #9
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	061b      	lsls	r3, r3, #24
 8008a78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a7c:	4931      	ldr	r1, [pc, #196]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a82:	4b30      	ldr	r3, [pc, #192]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	492d      	ldr	r1, [pc, #180]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a94:	4b2b      	ldr	r3, [pc, #172]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	4928      	ldr	r1, [pc, #160]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008aa6:	4b27      	ldr	r3, [pc, #156]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aaa:	4a26      	ldr	r2, [pc, #152]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ab2:	4b24      	ldr	r3, [pc, #144]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	4b24      	ldr	r3, [pc, #144]	@ (8008b48 <RCCEx_PLL3_Config+0x160>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	69d2      	ldr	r2, [r2, #28]
 8008abe:	00d2      	lsls	r2, r2, #3
 8008ac0:	4920      	ldr	r1, [pc, #128]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008adc:	4a19      	ldr	r2, [pc, #100]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008ade:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ae4:	e00f      	b.n	8008b06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d106      	bne.n	8008afa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008aec:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	4a14      	ldr	r2, [pc, #80]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008af2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008af6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008af8:	e005      	b.n	8008b06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008afa:	4b12      	ldr	r3, [pc, #72]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	4a11      	ldr	r2, [pc, #68]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b06:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b12:	f7f8 ff87 	bl	8001a24 <HAL_GetTick>
 8008b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b18:	e008      	b.n	8008b2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b1a:	f7f8 ff83 	bl	8001a24 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e006      	b.n	8008b3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b2c:	4b05      	ldr	r3, [pc, #20]	@ (8008b44 <RCCEx_PLL3_Config+0x15c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f0      	beq.n	8008b1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	ffff0007 	.word	0xffff0007

08008b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e049      	b.n	8008bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f8 fce8 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f000 f836 	bl	8008bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a46      	ldr	r2, [pc, #280]	@ (8008d28 <TIM_Base_SetConfig+0x12c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d013      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c1a:	d00f      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a43      	ldr	r2, [pc, #268]	@ (8008d2c <TIM_Base_SetConfig+0x130>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00b      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a42      	ldr	r2, [pc, #264]	@ (8008d30 <TIM_Base_SetConfig+0x134>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a41      	ldr	r2, [pc, #260]	@ (8008d34 <TIM_Base_SetConfig+0x138>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a40      	ldr	r2, [pc, #256]	@ (8008d38 <TIM_Base_SetConfig+0x13c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d108      	bne.n	8008c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a35      	ldr	r2, [pc, #212]	@ (8008d28 <TIM_Base_SetConfig+0x12c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01f      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5c:	d01b      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a32      	ldr	r2, [pc, #200]	@ (8008d2c <TIM_Base_SetConfig+0x130>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d017      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a31      	ldr	r2, [pc, #196]	@ (8008d30 <TIM_Base_SetConfig+0x134>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a30      	ldr	r2, [pc, #192]	@ (8008d34 <TIM_Base_SetConfig+0x138>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00f      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2f      	ldr	r2, [pc, #188]	@ (8008d38 <TIM_Base_SetConfig+0x13c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a2e      	ldr	r2, [pc, #184]	@ (8008d3c <TIM_Base_SetConfig+0x140>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d007      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	@ (8008d40 <TIM_Base_SetConfig+0x144>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_Base_SetConfig+0x9a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a2c      	ldr	r2, [pc, #176]	@ (8008d44 <TIM_Base_SetConfig+0x148>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d108      	bne.n	8008ca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a16      	ldr	r2, [pc, #88]	@ (8008d28 <TIM_Base_SetConfig+0x12c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_Base_SetConfig+0xf8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a18      	ldr	r2, [pc, #96]	@ (8008d38 <TIM_Base_SetConfig+0x13c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_Base_SetConfig+0xf8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a17      	ldr	r2, [pc, #92]	@ (8008d3c <TIM_Base_SetConfig+0x140>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_Base_SetConfig+0xf8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a16      	ldr	r2, [pc, #88]	@ (8008d40 <TIM_Base_SetConfig+0x144>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0xf8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a15      	ldr	r2, [pc, #84]	@ (8008d44 <TIM_Base_SetConfig+0x148>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d103      	bne.n	8008cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d105      	bne.n	8008d1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f023 0201 	bic.w	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	611a      	str	r2, [r3, #16]
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40000400 	.word	0x40000400
 8008d30:	40000800 	.word	0x40000800
 8008d34:	40000c00 	.word	0x40000c00
 8008d38:	40010400 	.word	0x40010400
 8008d3c:	40014000 	.word	0x40014000
 8008d40:	40014400 	.word	0x40014400
 8008d44:	40014800 	.word	0x40014800

08008d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e06d      	b.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a30      	ldr	r2, [pc, #192]	@ (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d004      	beq.n	8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d108      	bne.n	8008da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a20      	ldr	r2, [pc, #128]	@ (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d022      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd2:	d01d      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d018      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1a      	ldr	r2, [pc, #104]	@ (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00e      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a15      	ldr	r2, [pc, #84]	@ (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d009      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a16      	ldr	r2, [pc, #88]	@ (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d004      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a15      	ldr	r2, [pc, #84]	@ (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d10c      	bne.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40010400 	.word	0x40010400
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	40000c00 	.word	0x40000c00
 8008e5c:	40001800 	.word	0x40001800
 8008e60:	40014000 	.word	0x40014000

08008e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e042      	b.n	8008efc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7f8 fbcb 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2224      	movs	r2, #36	@ 0x24
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 0201 	bic.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fd90 	bl	80099d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f825 	bl	8008f04 <UART_SetConfig>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e01b      	b.n	8008efc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fe0f 	bl	8009b18 <UART_CheckIdleState>
 8008efa:	4603      	mov	r3, r0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f08:	b092      	sub	sp, #72	@ 0x48
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4bbe      	ldr	r3, [pc, #760]	@ (800922c <UART_SetConfig+0x328>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4ab3      	ldr	r2, [pc, #716]	@ (8009230 <UART_SetConfig+0x32c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d004      	beq.n	8008f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	4baf      	ldr	r3, [pc, #700]	@ (8009234 <UART_SetConfig+0x330>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f80:	430b      	orrs	r3, r1
 8008f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8a:	f023 010f 	bic.w	r1, r3, #15
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4aa6      	ldr	r2, [pc, #664]	@ (8009238 <UART_SetConfig+0x334>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d177      	bne.n	8009094 <UART_SetConfig+0x190>
 8008fa4:	4ba5      	ldr	r3, [pc, #660]	@ (800923c <UART_SetConfig+0x338>)
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fac:	2b28      	cmp	r3, #40	@ 0x28
 8008fae:	d86d      	bhi.n	800908c <UART_SetConfig+0x188>
 8008fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <UART_SetConfig+0xb4>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	0800905d 	.word	0x0800905d
 8008fbc:	0800908d 	.word	0x0800908d
 8008fc0:	0800908d 	.word	0x0800908d
 8008fc4:	0800908d 	.word	0x0800908d
 8008fc8:	0800908d 	.word	0x0800908d
 8008fcc:	0800908d 	.word	0x0800908d
 8008fd0:	0800908d 	.word	0x0800908d
 8008fd4:	0800908d 	.word	0x0800908d
 8008fd8:	08009065 	.word	0x08009065
 8008fdc:	0800908d 	.word	0x0800908d
 8008fe0:	0800908d 	.word	0x0800908d
 8008fe4:	0800908d 	.word	0x0800908d
 8008fe8:	0800908d 	.word	0x0800908d
 8008fec:	0800908d 	.word	0x0800908d
 8008ff0:	0800908d 	.word	0x0800908d
 8008ff4:	0800908d 	.word	0x0800908d
 8008ff8:	0800906d 	.word	0x0800906d
 8008ffc:	0800908d 	.word	0x0800908d
 8009000:	0800908d 	.word	0x0800908d
 8009004:	0800908d 	.word	0x0800908d
 8009008:	0800908d 	.word	0x0800908d
 800900c:	0800908d 	.word	0x0800908d
 8009010:	0800908d 	.word	0x0800908d
 8009014:	0800908d 	.word	0x0800908d
 8009018:	08009075 	.word	0x08009075
 800901c:	0800908d 	.word	0x0800908d
 8009020:	0800908d 	.word	0x0800908d
 8009024:	0800908d 	.word	0x0800908d
 8009028:	0800908d 	.word	0x0800908d
 800902c:	0800908d 	.word	0x0800908d
 8009030:	0800908d 	.word	0x0800908d
 8009034:	0800908d 	.word	0x0800908d
 8009038:	0800907d 	.word	0x0800907d
 800903c:	0800908d 	.word	0x0800908d
 8009040:	0800908d 	.word	0x0800908d
 8009044:	0800908d 	.word	0x0800908d
 8009048:	0800908d 	.word	0x0800908d
 800904c:	0800908d 	.word	0x0800908d
 8009050:	0800908d 	.word	0x0800908d
 8009054:	0800908d 	.word	0x0800908d
 8009058:	08009085 	.word	0x08009085
 800905c:	2301      	movs	r3, #1
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e222      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e21e      	b.n	80094aa <UART_SetConfig+0x5a6>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e21a      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e216      	b.n	80094aa <UART_SetConfig+0x5a6>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e212      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009084:	2340      	movs	r3, #64	@ 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e20e      	b.n	80094aa <UART_SetConfig+0x5a6>
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e20a      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a69      	ldr	r2, [pc, #420]	@ (8009240 <UART_SetConfig+0x33c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d130      	bne.n	8009100 <UART_SetConfig+0x1fc>
 800909e:	4b67      	ldr	r3, [pc, #412]	@ (800923c <UART_SetConfig+0x338>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d826      	bhi.n	80090f8 <UART_SetConfig+0x1f4>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x1ac>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	080090e9 	.word	0x080090e9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e1ec      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e1e8      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e1e4      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e1e0      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e1dc      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090f0:	2340      	movs	r3, #64	@ 0x40
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e1d8      	b.n	80094aa <UART_SetConfig+0x5a6>
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e1d4      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a4f      	ldr	r2, [pc, #316]	@ (8009244 <UART_SetConfig+0x340>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d130      	bne.n	800916c <UART_SetConfig+0x268>
 800910a:	4b4c      	ldr	r3, [pc, #304]	@ (800923c <UART_SetConfig+0x338>)
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	2b05      	cmp	r3, #5
 8009114:	d826      	bhi.n	8009164 <UART_SetConfig+0x260>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <UART_SetConfig+0x218>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009135 	.word	0x08009135
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009145 	.word	0x08009145
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800915d 	.word	0x0800915d
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e1b6      	b.n	80094aa <UART_SetConfig+0x5a6>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e1b2      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e1ae      	b.n	80094aa <UART_SetConfig+0x5a6>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e1aa      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e1a6      	b.n	80094aa <UART_SetConfig+0x5a6>
 800915c:	2340      	movs	r3, #64	@ 0x40
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e1a2      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e19e      	b.n	80094aa <UART_SetConfig+0x5a6>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a35      	ldr	r2, [pc, #212]	@ (8009248 <UART_SetConfig+0x344>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d130      	bne.n	80091d8 <UART_SetConfig+0x2d4>
 8009176:	4b31      	ldr	r3, [pc, #196]	@ (800923c <UART_SetConfig+0x338>)
 8009178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	2b05      	cmp	r3, #5
 8009180:	d826      	bhi.n	80091d0 <UART_SetConfig+0x2cc>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <UART_SetConfig+0x284>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091a1 	.word	0x080091a1
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091b1 	.word	0x080091b1
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091c1 	.word	0x080091c1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e180      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e17c      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091b0:	2308      	movs	r3, #8
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e178      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091b8:	2310      	movs	r3, #16
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e174      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091c0:	2320      	movs	r3, #32
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e170      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091c8:	2340      	movs	r3, #64	@ 0x40
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e16c      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091d0:	2380      	movs	r3, #128	@ 0x80
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e168      	b.n	80094aa <UART_SetConfig+0x5a6>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1b      	ldr	r2, [pc, #108]	@ (800924c <UART_SetConfig+0x348>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d142      	bne.n	8009268 <UART_SetConfig+0x364>
 80091e2:	4b16      	ldr	r3, [pc, #88]	@ (800923c <UART_SetConfig+0x338>)
 80091e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d838      	bhi.n	8009260 <UART_SetConfig+0x35c>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <UART_SetConfig+0x2f0>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	08009225 	.word	0x08009225
 8009204:	08009251 	.word	0x08009251
 8009208:	08009259 	.word	0x08009259
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e14a      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e146      	b.n	80094aa <UART_SetConfig+0x5a6>
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e142      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009224:	2310      	movs	r3, #16
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e13e      	b.n	80094aa <UART_SetConfig+0x5a6>
 800922c:	cfff69f3 	.word	0xcfff69f3
 8009230:	58000c00 	.word	0x58000c00
 8009234:	11fff4ff 	.word	0x11fff4ff
 8009238:	40011000 	.word	0x40011000
 800923c:	58024400 	.word	0x58024400
 8009240:	40004400 	.word	0x40004400
 8009244:	40004800 	.word	0x40004800
 8009248:	40004c00 	.word	0x40004c00
 800924c:	40005000 	.word	0x40005000
 8009250:	2320      	movs	r3, #32
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e128      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009258:	2340      	movs	r3, #64	@ 0x40
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e124      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009260:	2380      	movs	r3, #128	@ 0x80
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e120      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4acb      	ldr	r2, [pc, #812]	@ (800959c <UART_SetConfig+0x698>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d176      	bne.n	8009360 <UART_SetConfig+0x45c>
 8009272:	4bcb      	ldr	r3, [pc, #812]	@ (80095a0 <UART_SetConfig+0x69c>)
 8009274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800927a:	2b28      	cmp	r3, #40	@ 0x28
 800927c:	d86c      	bhi.n	8009358 <UART_SetConfig+0x454>
 800927e:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <UART_SetConfig+0x380>)
 8009280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009284:	08009329 	.word	0x08009329
 8009288:	08009359 	.word	0x08009359
 800928c:	08009359 	.word	0x08009359
 8009290:	08009359 	.word	0x08009359
 8009294:	08009359 	.word	0x08009359
 8009298:	08009359 	.word	0x08009359
 800929c:	08009359 	.word	0x08009359
 80092a0:	08009359 	.word	0x08009359
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009359 	.word	0x08009359
 80092ac:	08009359 	.word	0x08009359
 80092b0:	08009359 	.word	0x08009359
 80092b4:	08009359 	.word	0x08009359
 80092b8:	08009359 	.word	0x08009359
 80092bc:	08009359 	.word	0x08009359
 80092c0:	08009359 	.word	0x08009359
 80092c4:	08009339 	.word	0x08009339
 80092c8:	08009359 	.word	0x08009359
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009341 	.word	0x08009341
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009349 	.word	0x08009349
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009351 	.word	0x08009351
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e0bc      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009330:	2304      	movs	r3, #4
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e0b8      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009338:	2308      	movs	r3, #8
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e0b4      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009340:	2310      	movs	r3, #16
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e0b0      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009348:	2320      	movs	r3, #32
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e0ac      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009350:	2340      	movs	r3, #64	@ 0x40
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e0a8      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e0a4      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a8f      	ldr	r2, [pc, #572]	@ (80095a4 <UART_SetConfig+0x6a0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d130      	bne.n	80093cc <UART_SetConfig+0x4c8>
 800936a:	4b8d      	ldr	r3, [pc, #564]	@ (80095a0 <UART_SetConfig+0x69c>)
 800936c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b05      	cmp	r3, #5
 8009374:	d826      	bhi.n	80093c4 <UART_SetConfig+0x4c0>
 8009376:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <UART_SetConfig+0x478>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	08009395 	.word	0x08009395
 8009380:	0800939d 	.word	0x0800939d
 8009384:	080093a5 	.word	0x080093a5
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	2300      	movs	r3, #0
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e086      	b.n	80094aa <UART_SetConfig+0x5a6>
 800939c:	2304      	movs	r3, #4
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e082      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093a4:	2308      	movs	r3, #8
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e07e      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093ac:	2310      	movs	r3, #16
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e07a      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093b4:	2320      	movs	r3, #32
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e076      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093bc:	2340      	movs	r3, #64	@ 0x40
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e072      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e06e      	b.n	80094aa <UART_SetConfig+0x5a6>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a75      	ldr	r2, [pc, #468]	@ (80095a8 <UART_SetConfig+0x6a4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d130      	bne.n	8009438 <UART_SetConfig+0x534>
 80093d6:	4b72      	ldr	r3, [pc, #456]	@ (80095a0 <UART_SetConfig+0x69c>)
 80093d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d826      	bhi.n	8009430 <UART_SetConfig+0x52c>
 80093e2:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <UART_SetConfig+0x4e4>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	08009401 	.word	0x08009401
 80093ec:	08009409 	.word	0x08009409
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009419 	.word	0x08009419
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009429 	.word	0x08009429
 8009400:	2300      	movs	r3, #0
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e050      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009408:	2304      	movs	r3, #4
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e04c      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e048      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009418:	2310      	movs	r3, #16
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e044      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009420:	2320      	movs	r3, #32
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e040      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009428:	2340      	movs	r3, #64	@ 0x40
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e03c      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009430:	2380      	movs	r3, #128	@ 0x80
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e038      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a5b      	ldr	r2, [pc, #364]	@ (80095ac <UART_SetConfig+0x6a8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d130      	bne.n	80094a4 <UART_SetConfig+0x5a0>
 8009442:	4b57      	ldr	r3, [pc, #348]	@ (80095a0 <UART_SetConfig+0x69c>)
 8009444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	2b05      	cmp	r3, #5
 800944c:	d826      	bhi.n	800949c <UART_SetConfig+0x598>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <UART_SetConfig+0x550>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	0800946d 	.word	0x0800946d
 8009458:	08009475 	.word	0x08009475
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009485 	.word	0x08009485
 8009464:	0800948d 	.word	0x0800948d
 8009468:	08009495 	.word	0x08009495
 800946c:	2302      	movs	r3, #2
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e01a      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009474:	2304      	movs	r3, #4
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e016      	b.n	80094aa <UART_SetConfig+0x5a6>
 800947c:	2308      	movs	r3, #8
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e012      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009484:	2310      	movs	r3, #16
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e00e      	b.n	80094aa <UART_SetConfig+0x5a6>
 800948c:	2320      	movs	r3, #32
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e00a      	b.n	80094aa <UART_SetConfig+0x5a6>
 8009494:	2340      	movs	r3, #64	@ 0x40
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e006      	b.n	80094aa <UART_SetConfig+0x5a6>
 800949c:	2380      	movs	r3, #128	@ 0x80
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e002      	b.n	80094aa <UART_SetConfig+0x5a6>
 80094a4:	2380      	movs	r3, #128	@ 0x80
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a3f      	ldr	r2, [pc, #252]	@ (80095ac <UART_SetConfig+0x6a8>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	f040 80f8 	bne.w	80096a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	dc46      	bgt.n	800954c <UART_SetConfig+0x648>
 80094be:	2b02      	cmp	r3, #2
 80094c0:	f2c0 8082 	blt.w	80095c8 <UART_SetConfig+0x6c4>
 80094c4:	3b02      	subs	r3, #2
 80094c6:	2b1e      	cmp	r3, #30
 80094c8:	d87e      	bhi.n	80095c8 <UART_SetConfig+0x6c4>
 80094ca:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <UART_SetConfig+0x5cc>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	08009553 	.word	0x08009553
 80094d4:	080095c9 	.word	0x080095c9
 80094d8:	0800955b 	.word	0x0800955b
 80094dc:	080095c9 	.word	0x080095c9
 80094e0:	080095c9 	.word	0x080095c9
 80094e4:	080095c9 	.word	0x080095c9
 80094e8:	0800956b 	.word	0x0800956b
 80094ec:	080095c9 	.word	0x080095c9
 80094f0:	080095c9 	.word	0x080095c9
 80094f4:	080095c9 	.word	0x080095c9
 80094f8:	080095c9 	.word	0x080095c9
 80094fc:	080095c9 	.word	0x080095c9
 8009500:	080095c9 	.word	0x080095c9
 8009504:	080095c9 	.word	0x080095c9
 8009508:	0800957b 	.word	0x0800957b
 800950c:	080095c9 	.word	0x080095c9
 8009510:	080095c9 	.word	0x080095c9
 8009514:	080095c9 	.word	0x080095c9
 8009518:	080095c9 	.word	0x080095c9
 800951c:	080095c9 	.word	0x080095c9
 8009520:	080095c9 	.word	0x080095c9
 8009524:	080095c9 	.word	0x080095c9
 8009528:	080095c9 	.word	0x080095c9
 800952c:	080095c9 	.word	0x080095c9
 8009530:	080095c9 	.word	0x080095c9
 8009534:	080095c9 	.word	0x080095c9
 8009538:	080095c9 	.word	0x080095c9
 800953c:	080095c9 	.word	0x080095c9
 8009540:	080095c9 	.word	0x080095c9
 8009544:	080095c9 	.word	0x080095c9
 8009548:	080095bb 	.word	0x080095bb
 800954c:	2b40      	cmp	r3, #64	@ 0x40
 800954e:	d037      	beq.n	80095c0 <UART_SetConfig+0x6bc>
 8009550:	e03a      	b.n	80095c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009552:	f7fe fd87 	bl	8008064 <HAL_RCCEx_GetD3PCLK1Freq>
 8009556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009558:	e03c      	b.n	80095d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800955a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fd96 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009568:	e034      	b.n	80095d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800956a:	f107 0318 	add.w	r3, r7, #24
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fee2 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009578:	e02c      	b.n	80095d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957a:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <UART_SetConfig+0x69c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b00      	cmp	r3, #0
 8009584:	d016      	beq.n	80095b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009586:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <UART_SetConfig+0x69c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	08db      	lsrs	r3, r3, #3
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	4a07      	ldr	r2, [pc, #28]	@ (80095b0 <UART_SetConfig+0x6ac>)
 8009592:	fa22 f303 	lsr.w	r3, r2, r3
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009598:	e01c      	b.n	80095d4 <UART_SetConfig+0x6d0>
 800959a:	bf00      	nop
 800959c:	40011400 	.word	0x40011400
 80095a0:	58024400 	.word	0x58024400
 80095a4:	40007800 	.word	0x40007800
 80095a8:	40007c00 	.word	0x40007c00
 80095ac:	58000c00 	.word	0x58000c00
 80095b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80095b4:	4b9d      	ldr	r3, [pc, #628]	@ (800982c <UART_SetConfig+0x928>)
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b8:	e00c      	b.n	80095d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095ba:	4b9d      	ldr	r3, [pc, #628]	@ (8009830 <UART_SetConfig+0x92c>)
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095be:	e009      	b.n	80095d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c6:	e005      	b.n	80095d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 81de 	beq.w	8009998 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e0:	4a94      	ldr	r2, [pc, #592]	@ (8009834 <UART_SetConfig+0x930>)
 80095e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095e6:	461a      	mov	r2, r3
 80095e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	4413      	add	r3, r2
 80095fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d305      	bcc.n	800960c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009608:	429a      	cmp	r2, r3
 800960a:	d903      	bls.n	8009614 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009612:	e1c1      	b.n	8009998 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009616:	2200      	movs	r2, #0
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	60fa      	str	r2, [r7, #12]
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009620:	4a84      	ldr	r2, [pc, #528]	@ (8009834 <UART_SetConfig+0x930>)
 8009622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009626:	b29b      	uxth	r3, r3
 8009628:	2200      	movs	r2, #0
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009636:	f7f6 fe4f 	bl	80002d8 <__aeabi_uldivmod>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	020b      	lsls	r3, r1, #8
 800964c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009650:	0202      	lsls	r2, r0, #8
 8009652:	6979      	ldr	r1, [r7, #20]
 8009654:	6849      	ldr	r1, [r1, #4]
 8009656:	0849      	lsrs	r1, r1, #1
 8009658:	2000      	movs	r0, #0
 800965a:	460c      	mov	r4, r1
 800965c:	4605      	mov	r5, r0
 800965e:	eb12 0804 	adds.w	r8, r2, r4
 8009662:	eb43 0905 	adc.w	r9, r3, r5
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	469a      	mov	sl, r3
 800966e:	4693      	mov	fp, r2
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	4640      	mov	r0, r8
 8009676:	4649      	mov	r1, r9
 8009678:	f7f6 fe2e 	bl	80002d8 <__aeabi_uldivmod>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4613      	mov	r3, r2
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800968a:	d308      	bcc.n	800969e <UART_SetConfig+0x79a>
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009692:	d204      	bcs.n	800969e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800969a:	60da      	str	r2, [r3, #12]
 800969c:	e17c      	b.n	8009998 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096a4:	e178      	b.n	8009998 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ae:	f040 80c5 	bne.w	800983c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80096b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096b6:	2b20      	cmp	r3, #32
 80096b8:	dc48      	bgt.n	800974c <UART_SetConfig+0x848>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	db7b      	blt.n	80097b6 <UART_SetConfig+0x8b2>
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d879      	bhi.n	80097b6 <UART_SetConfig+0x8b2>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <UART_SetConfig+0x7c4>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	08009753 	.word	0x08009753
 80096cc:	0800975b 	.word	0x0800975b
 80096d0:	080097b7 	.word	0x080097b7
 80096d4:	080097b7 	.word	0x080097b7
 80096d8:	08009763 	.word	0x08009763
 80096dc:	080097b7 	.word	0x080097b7
 80096e0:	080097b7 	.word	0x080097b7
 80096e4:	080097b7 	.word	0x080097b7
 80096e8:	08009773 	.word	0x08009773
 80096ec:	080097b7 	.word	0x080097b7
 80096f0:	080097b7 	.word	0x080097b7
 80096f4:	080097b7 	.word	0x080097b7
 80096f8:	080097b7 	.word	0x080097b7
 80096fc:	080097b7 	.word	0x080097b7
 8009700:	080097b7 	.word	0x080097b7
 8009704:	080097b7 	.word	0x080097b7
 8009708:	08009783 	.word	0x08009783
 800970c:	080097b7 	.word	0x080097b7
 8009710:	080097b7 	.word	0x080097b7
 8009714:	080097b7 	.word	0x080097b7
 8009718:	080097b7 	.word	0x080097b7
 800971c:	080097b7 	.word	0x080097b7
 8009720:	080097b7 	.word	0x080097b7
 8009724:	080097b7 	.word	0x080097b7
 8009728:	080097b7 	.word	0x080097b7
 800972c:	080097b7 	.word	0x080097b7
 8009730:	080097b7 	.word	0x080097b7
 8009734:	080097b7 	.word	0x080097b7
 8009738:	080097b7 	.word	0x080097b7
 800973c:	080097b7 	.word	0x080097b7
 8009740:	080097b7 	.word	0x080097b7
 8009744:	080097b7 	.word	0x080097b7
 8009748:	080097a9 	.word	0x080097a9
 800974c:	2b40      	cmp	r3, #64	@ 0x40
 800974e:	d02e      	beq.n	80097ae <UART_SetConfig+0x8aa>
 8009750:	e031      	b.n	80097b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009752:	f7fc fcd1 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 8009756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009758:	e033      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800975a:	f7fc fce3 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 800975e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009760:	e02f      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fc92 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009770:	e027      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009772:	f107 0318 	add.w	r3, r7, #24
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fdde 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009780:	e01f      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009782:	4b2d      	ldr	r3, [pc, #180]	@ (8009838 <UART_SetConfig+0x934>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800978e:	4b2a      	ldr	r3, [pc, #168]	@ (8009838 <UART_SetConfig+0x934>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	08db      	lsrs	r3, r3, #3
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	4a24      	ldr	r2, [pc, #144]	@ (800982c <UART_SetConfig+0x928>)
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097a0:	e00f      	b.n	80097c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80097a2:	4b22      	ldr	r3, [pc, #136]	@ (800982c <UART_SetConfig+0x928>)
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a6:	e00c      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097a8:	4b21      	ldr	r3, [pc, #132]	@ (8009830 <UART_SetConfig+0x92c>)
 80097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ac:	e009      	b.n	80097c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b4:	e005      	b.n	80097c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80e7 	beq.w	8009998 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ce:	4a19      	ldr	r2, [pc, #100]	@ (8009834 <UART_SetConfig+0x930>)
 80097d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097dc:	005a      	lsls	r2, r3, #1
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	441a      	add	r2, r3
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	2b0f      	cmp	r3, #15
 80097f4:	d916      	bls.n	8009824 <UART_SetConfig+0x920>
 80097f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097fc:	d212      	bcs.n	8009824 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009800:	b29b      	uxth	r3, r3
 8009802:	f023 030f 	bic.w	r3, r3, #15
 8009806:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	085b      	lsrs	r3, r3, #1
 800980c:	b29b      	uxth	r3, r3
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	b29a      	uxth	r2, r3
 8009814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009816:	4313      	orrs	r3, r2
 8009818:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	e0b9      	b.n	8009998 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800982a:	e0b5      	b.n	8009998 <UART_SetConfig+0xa94>
 800982c:	03d09000 	.word	0x03d09000
 8009830:	003d0900 	.word	0x003d0900
 8009834:	0800a6b4 	.word	0x0800a6b4
 8009838:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800983c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009840:	2b20      	cmp	r3, #32
 8009842:	dc49      	bgt.n	80098d8 <UART_SetConfig+0x9d4>
 8009844:	2b00      	cmp	r3, #0
 8009846:	db7c      	blt.n	8009942 <UART_SetConfig+0xa3e>
 8009848:	2b20      	cmp	r3, #32
 800984a:	d87a      	bhi.n	8009942 <UART_SetConfig+0xa3e>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <UART_SetConfig+0x950>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	080098df 	.word	0x080098df
 8009858:	080098e7 	.word	0x080098e7
 800985c:	08009943 	.word	0x08009943
 8009860:	08009943 	.word	0x08009943
 8009864:	080098ef 	.word	0x080098ef
 8009868:	08009943 	.word	0x08009943
 800986c:	08009943 	.word	0x08009943
 8009870:	08009943 	.word	0x08009943
 8009874:	080098ff 	.word	0x080098ff
 8009878:	08009943 	.word	0x08009943
 800987c:	08009943 	.word	0x08009943
 8009880:	08009943 	.word	0x08009943
 8009884:	08009943 	.word	0x08009943
 8009888:	08009943 	.word	0x08009943
 800988c:	08009943 	.word	0x08009943
 8009890:	08009943 	.word	0x08009943
 8009894:	0800990f 	.word	0x0800990f
 8009898:	08009943 	.word	0x08009943
 800989c:	08009943 	.word	0x08009943
 80098a0:	08009943 	.word	0x08009943
 80098a4:	08009943 	.word	0x08009943
 80098a8:	08009943 	.word	0x08009943
 80098ac:	08009943 	.word	0x08009943
 80098b0:	08009943 	.word	0x08009943
 80098b4:	08009943 	.word	0x08009943
 80098b8:	08009943 	.word	0x08009943
 80098bc:	08009943 	.word	0x08009943
 80098c0:	08009943 	.word	0x08009943
 80098c4:	08009943 	.word	0x08009943
 80098c8:	08009943 	.word	0x08009943
 80098cc:	08009943 	.word	0x08009943
 80098d0:	08009943 	.word	0x08009943
 80098d4:	08009935 	.word	0x08009935
 80098d8:	2b40      	cmp	r3, #64	@ 0x40
 80098da:	d02e      	beq.n	800993a <UART_SetConfig+0xa36>
 80098dc:	e031      	b.n	8009942 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098de:	f7fc fc0b 	bl	80060f8 <HAL_RCC_GetPCLK1Freq>
 80098e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e4:	e033      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098e6:	f7fc fc1d 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 80098ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098ec:	e02f      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fbcc 	bl	8008090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098fc:	e027      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098fe:	f107 0318 	add.w	r3, r7, #24
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fd18 	bl	8008338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990c:	e01f      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800990e:	4b2d      	ldr	r3, [pc, #180]	@ (80099c4 <UART_SetConfig+0xac0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d009      	beq.n	800992e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800991a:	4b2a      	ldr	r3, [pc, #168]	@ (80099c4 <UART_SetConfig+0xac0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	08db      	lsrs	r3, r3, #3
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	4a28      	ldr	r2, [pc, #160]	@ (80099c8 <UART_SetConfig+0xac4>)
 8009926:	fa22 f303 	lsr.w	r3, r2, r3
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800992c:	e00f      	b.n	800994e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800992e:	4b26      	ldr	r3, [pc, #152]	@ (80099c8 <UART_SetConfig+0xac4>)
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009932:	e00c      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009934:	4b25      	ldr	r3, [pc, #148]	@ (80099cc <UART_SetConfig+0xac8>)
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009938:	e009      	b.n	800994e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009940:	e005      	b.n	800994e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800994c:	bf00      	nop
    }

    if (pclk != 0U)
 800994e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009950:	2b00      	cmp	r3, #0
 8009952:	d021      	beq.n	8009998 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009958:	4a1d      	ldr	r2, [pc, #116]	@ (80099d0 <UART_SetConfig+0xacc>)
 800995a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800995e:	461a      	mov	r2, r3
 8009960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009962:	fbb3 f2f2 	udiv	r2, r3, r2
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	085b      	lsrs	r3, r3, #1
 800996c:	441a      	add	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	fbb2 f3f3 	udiv	r3, r2, r3
 8009976:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	2b0f      	cmp	r3, #15
 800997c:	d909      	bls.n	8009992 <UART_SetConfig+0xa8e>
 800997e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009984:	d205      	bcs.n	8009992 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	b29a      	uxth	r2, r3
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60da      	str	r2, [r3, #12]
 8009990:	e002      	b.n	8009998 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2201      	movs	r2, #1
 800999c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2200      	movs	r2, #0
 80099ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3748      	adds	r7, #72	@ 0x48
 80099bc:	46bd      	mov	sp, r7
 80099be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099c2:	bf00      	nop
 80099c4:	58024400 	.word	0x58024400
 80099c8:	03d09000 	.word	0x03d09000
 80099cc:	003d0900 	.word	0x003d0900
 80099d0:	0800a6b4 	.word	0x0800a6b4

080099d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00a      	beq.n	80099fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01a      	beq.n	8009aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ad2:	d10a      	bne.n	8009aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	605a      	str	r2, [r3, #4]
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b098      	sub	sp, #96	@ 0x60
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b28:	f7f7 ff7c 	bl	8001a24 <HAL_GetTick>
 8009b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d12f      	bne.n	8009b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b44:	2200      	movs	r2, #0
 8009b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f88e 	bl	8009c6c <UART_WaitOnFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d022      	beq.n	8009b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e063      	b.n	8009c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d149      	bne.n	8009c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009baa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f857 	bl	8009c6c <UART_WaitOnFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d03c      	beq.n	8009c3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e6      	bne.n	8009bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f023 0301 	bic.w	r3, r3, #1
 8009c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c16:	61fa      	str	r2, [r7, #28]
 8009c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	69b9      	ldr	r1, [r7, #24]
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	617b      	str	r3, [r7, #20]
   return(result);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e5      	bne.n	8009bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e012      	b.n	8009c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3758      	adds	r7, #88	@ 0x58
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c7c:	e04f      	b.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d04b      	beq.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7f7 fecd 	bl	8001a24 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	69ba      	ldr	r2, [r7, #24]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e04e      	b.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d037      	beq.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2b80      	cmp	r3, #128	@ 0x80
 8009cb2:	d034      	beq.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b40      	cmp	r3, #64	@ 0x40
 8009cb8:	d031      	beq.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f003 0308 	and.w	r3, r3, #8
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d110      	bne.n	8009cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2208      	movs	r2, #8
 8009cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f839 	bl	8009d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e029      	b.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cf8:	d111      	bne.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f81f 	bl	8009d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e00f      	b.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69da      	ldr	r2, [r3, #28]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4013      	ands	r3, r2
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	bf0c      	ite	eq
 8009d2e:	2301      	moveq	r3, #1
 8009d30:	2300      	movne	r3, #0
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d0a0      	beq.n	8009c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b095      	sub	sp, #84	@ 0x54
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e6      	bne.n	8009d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3308      	adds	r3, #8
 8009d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	4b1e      	ldr	r3, [pc, #120]	@ (8009e10 <UART_EndRxTransfer+0xc8>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3308      	adds	r3, #8
 8009da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e5      	bne.n	8009d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d118      	bne.n	8009df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f023 0310 	bic.w	r3, r3, #16
 8009dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ddc:	61bb      	str	r3, [r7, #24]
 8009dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6979      	ldr	r1, [r7, #20]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e6      	bne.n	8009dbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e04:	bf00      	nop
 8009e06:	3754      	adds	r7, #84	@ 0x54
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	effffffe 	.word	0xeffffffe

08009e14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d101      	bne.n	8009e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8009e26:	2302      	movs	r3, #2
 8009e28:	e027      	b.n	8009e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2224      	movs	r2, #36	@ 0x24
 8009e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0201 	bic.w	r2, r2, #1
 8009e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e02d      	b.n	8009efa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2224      	movs	r2, #36	@ 0x24
 8009eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0201 	bic.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f850 	bl	8009f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e02d      	b.n	8009f76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2224      	movs	r2, #36	@ 0x24
 8009f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f812 	bl	8009f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d108      	bne.n	8009fa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fa0:	e031      	b.n	800a006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fa2:	2310      	movs	r3, #16
 8009fa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fa6:	2310      	movs	r3, #16
 8009fa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	0e5b      	lsrs	r3, r3, #25
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	f003 0307 	and.w	r3, r3, #7
 8009fb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	0f5b      	lsrs	r3, r3, #29
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	7b3a      	ldrb	r2, [r7, #12]
 8009fce:	4911      	ldr	r1, [pc, #68]	@ (800a014 <UARTEx_SetNbDataToProcess+0x94>)
 8009fd0:	5c8a      	ldrb	r2, [r1, r2]
 8009fd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fd6:	7b3a      	ldrb	r2, [r7, #12]
 8009fd8:	490f      	ldr	r1, [pc, #60]	@ (800a018 <UARTEx_SetNbDataToProcess+0x98>)
 8009fda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	7b7a      	ldrb	r2, [r7, #13]
 8009fec:	4909      	ldr	r1, [pc, #36]	@ (800a014 <UARTEx_SetNbDataToProcess+0x94>)
 8009fee:	5c8a      	ldrb	r2, [r1, r2]
 8009ff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ff4:	7b7a      	ldrb	r2, [r7, #13]
 8009ff6:	4908      	ldr	r1, [pc, #32]	@ (800a018 <UARTEx_SetNbDataToProcess+0x98>)
 8009ff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	0800a6cc 	.word	0x0800a6cc
 800a018:	0800a6d4 	.word	0x0800a6d4

0800a01c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a01c:	b084      	sub	sp, #16
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	f107 001c 	add.w	r0, r7, #28
 800a02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a02e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a032:	2b01      	cmp	r3, #1
 800a034:	d121      	bne.n	800a07a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	4b2c      	ldr	r3, [pc, #176]	@ (800a0f8 <USB_CoreInit+0xdc>)
 800a048:	4013      	ands	r3, r2
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a05a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d105      	bne.n	800a06e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 faaa 	bl	800a5c8 <USB_CoreReset>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]
 800a078:	e01b      	b.n	800a0b2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fa9e 	bl	800a5c8 <USB_CoreReset>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0a4:	e005      	b.n	800a0b2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0b2:	7fbb      	ldrb	r3, [r7, #30]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d116      	bne.n	800a0e6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0fc <USB_CoreInit+0xe0>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f043 0206 	orr.w	r2, r3, #6
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f043 0220 	orr.w	r2, r3, #32
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0f2:	b004      	add	sp, #16
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	ffbdffbf 	.word	0xffbdffbf
 800a0fc:	03ee0000 	.word	0x03ee0000

0800a100 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f023 0201 	bic.w	r2, r3, #1
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d115      	bne.n	800a170 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a150:	200a      	movs	r0, #10
 800a152:	f7f7 fc73 	bl	8001a3c <HAL_Delay>
      ms += 10U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	330a      	adds	r3, #10
 800a15a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa25 	bl	800a5ac <USB_GetMode>
 800a162:	4603      	mov	r3, r0
 800a164:	2b01      	cmp	r3, #1
 800a166:	d01e      	beq.n	800a1a6 <USB_SetCurrentMode+0x84>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a16c:	d9f0      	bls.n	800a150 <USB_SetCurrentMode+0x2e>
 800a16e:	e01a      	b.n	800a1a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d115      	bne.n	800a1a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a182:	200a      	movs	r0, #10
 800a184:	f7f7 fc5a 	bl	8001a3c <HAL_Delay>
      ms += 10U;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	330a      	adds	r3, #10
 800a18c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa0c 	bl	800a5ac <USB_GetMode>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <USB_SetCurrentMode+0x84>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a19e:	d9f0      	bls.n	800a182 <USB_SetCurrentMode+0x60>
 800a1a0:	e001      	b.n	800a1a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e005      	b.n	800a1b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2bc8      	cmp	r3, #200	@ 0xc8
 800a1aa:	d101      	bne.n	800a1b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1bc:	b084      	sub	sp, #16
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b086      	sub	sp, #24
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a1ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	613b      	str	r3, [r7, #16]
 800a1da:	e009      	b.n	800a1f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3340      	adds	r3, #64	@ 0x40
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2b0e      	cmp	r3, #14
 800a1f4:	d9f2      	bls.n	800a1dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d11c      	bne.n	800a238 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a20c:	f043 0302 	orr.w	r3, r3, #2
 800a210:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a216:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e005      	b.n	800a244 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a23c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a24a:	461a      	mov	r2, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a250:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a254:	2b01      	cmp	r3, #1
 800a256:	d10d      	bne.n	800a274 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d104      	bne.n	800a26a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f968 	bl	800a538 <USB_SetDevSpeed>
 800a268:	e008      	b.n	800a27c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a26a:	2101      	movs	r1, #1
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f963 	bl	800a538 <USB_SetDevSpeed>
 800a272:	e003      	b.n	800a27c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a274:	2103      	movs	r1, #3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f95e 	bl	800a538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a27c:	2110      	movs	r1, #16
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f8fa 	bl	800a478 <USB_FlushTxFifo>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f924 	bl	800a4dc <USB_FlushRxFifo>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2bc:	461a      	mov	r2, r3
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	e043      	b.n	800a350 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2de:	d118      	bne.n	800a312 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	e013      	b.n	800a324 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a308:	461a      	mov	r2, r3
 800a30a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	e008      	b.n	800a324 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31e:	461a      	mov	r2, r3
 800a320:	2300      	movs	r3, #0
 800a322:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a330:	461a      	mov	r2, r3
 800a332:	2300      	movs	r3, #0
 800a334:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a342:	461a      	mov	r2, r3
 800a344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a354:	461a      	mov	r2, r3
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	4293      	cmp	r3, r2
 800a35a:	d3b5      	bcc.n	800a2c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	e043      	b.n	800a3ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a378:	d118      	bne.n	800a3ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38c:	461a      	mov	r2, r3
 800a38e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	e013      	b.n	800a3be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	e008      	b.n	800a3be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3dc:	461a      	mov	r2, r3
 800a3de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	613b      	str	r3, [r7, #16]
 800a3ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d3b5      	bcc.n	800a362 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a408:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d105      	bne.n	800a42c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f043 0210 	orr.w	r2, r3, #16
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699a      	ldr	r2, [r3, #24]
 800a430:	4b0f      	ldr	r3, [pc, #60]	@ (800a470 <USB_DevInit+0x2b4>)
 800a432:	4313      	orrs	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	f043 0208 	orr.w	r2, r3, #8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a44c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a450:	2b01      	cmp	r3, #1
 800a452:	d105      	bne.n	800a460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <USB_DevInit+0x2b8>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a46c:	b004      	add	sp, #16
 800a46e:	4770      	bx	lr
 800a470:	803c3800 	.word	0x803c3800
 800a474:	40000004 	.word	0x40000004

0800a478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a492:	d901      	bls.n	800a498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e01b      	b.n	800a4d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	daf2      	bge.n	800a486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	019b      	lsls	r3, r3, #6
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4bc:	d901      	bls.n	800a4c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e006      	b.n	800a4d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d0f0      	beq.n	800a4b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4f4:	d901      	bls.n	800a4fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e018      	b.n	800a52c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	daf2      	bge.n	800a4e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2210      	movs	r2, #16
 800a50a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a518:	d901      	bls.n	800a51e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e006      	b.n	800a52c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	f003 0310 	and.w	r3, r3, #16
 800a526:	2b10      	cmp	r3, #16
 800a528:	d0f0      	beq.n	800a50c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	68f9      	ldr	r1, [r7, #12]
 800a554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a558:	4313      	orrs	r3, r2
 800a55a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a584:	f023 0303 	bic.w	r3, r3, #3
 800a588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a598:	f043 0302 	orr.w	r3, r3, #2
 800a59c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5e0:	d901      	bls.n	800a5e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e01b      	b.n	800a61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	daf2      	bge.n	800a5d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	f043 0201 	orr.w	r2, r3, #1
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3301      	adds	r3, #1
 800a602:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a60a:	d901      	bls.n	800a610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e006      	b.n	800a61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d0f0      	beq.n	800a5fe <USB_CoreReset+0x36>

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <memset>:
 800a62a:	4402      	add	r2, r0
 800a62c:	4603      	mov	r3, r0
 800a62e:	4293      	cmp	r3, r2
 800a630:	d100      	bne.n	800a634 <memset+0xa>
 800a632:	4770      	bx	lr
 800a634:	f803 1b01 	strb.w	r1, [r3], #1
 800a638:	e7f9      	b.n	800a62e <memset+0x4>
	...

0800a63c <__libc_init_array>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4d0d      	ldr	r5, [pc, #52]	@ (800a674 <__libc_init_array+0x38>)
 800a640:	4c0d      	ldr	r4, [pc, #52]	@ (800a678 <__libc_init_array+0x3c>)
 800a642:	1b64      	subs	r4, r4, r5
 800a644:	10a4      	asrs	r4, r4, #2
 800a646:	2600      	movs	r6, #0
 800a648:	42a6      	cmp	r6, r4
 800a64a:	d109      	bne.n	800a660 <__libc_init_array+0x24>
 800a64c:	4d0b      	ldr	r5, [pc, #44]	@ (800a67c <__libc_init_array+0x40>)
 800a64e:	4c0c      	ldr	r4, [pc, #48]	@ (800a680 <__libc_init_array+0x44>)
 800a650:	f000 f818 	bl	800a684 <_init>
 800a654:	1b64      	subs	r4, r4, r5
 800a656:	10a4      	asrs	r4, r4, #2
 800a658:	2600      	movs	r6, #0
 800a65a:	42a6      	cmp	r6, r4
 800a65c:	d105      	bne.n	800a66a <__libc_init_array+0x2e>
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	f855 3b04 	ldr.w	r3, [r5], #4
 800a664:	4798      	blx	r3
 800a666:	3601      	adds	r6, #1
 800a668:	e7ee      	b.n	800a648 <__libc_init_array+0xc>
 800a66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66e:	4798      	blx	r3
 800a670:	3601      	adds	r6, #1
 800a672:	e7f2      	b.n	800a65a <__libc_init_array+0x1e>
 800a674:	0800a6e4 	.word	0x0800a6e4
 800a678:	0800a6e4 	.word	0x0800a6e4
 800a67c:	0800a6e4 	.word	0x0800a6e4
 800a680:	0800a6e8 	.word	0x0800a6e8

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
