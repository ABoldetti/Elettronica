
Dude_My_Ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f04  08009f04  0000af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f44  08009f44  0000af44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f4c  08009f4c  0000af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009f50  08009f50  0000af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08009f54  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f10  24000014  08009f68  0000b014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000f24  08009f68  0000bf24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e4e9  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a6e  00000000  00000000  0002952b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001700  00000000  00000000  0002cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011d3  00000000  00000000  0002e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af85  00000000  00000000  0002f873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002212b  00000000  00000000  0006a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178ae3  00000000  00000000  0008c923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00205406  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006194  00000000  00000000  0020544c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  0020b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009eec 	.word	0x08009eec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08009eec 	.word	0x08009eec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <DMA_setup_ADC>:
unsigned char *pointer = (unsigned char *)(&index_stop);




void DMA_setup_ADC(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA1_Stream0 ->M0AR = (uint32_t) &DMA_data;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <DMA_setup_ADC+0x3c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <DMA_setup_ADC+0x40>)
 80005d0:	60da      	str	r2, [r3, #12]
	DMA1_Stream0 ->PAR = (uint32_t) &(ADC3->DR);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <DMA_setup_ADC+0x3c>)
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <DMA_setup_ADC+0x44>)
 80005d6:	609a      	str	r2, [r3, #8]
	DMA1_Stream0 ->NDTR = (uint16_t) A;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <DMA_setup_ADC+0x3c>)
 80005da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005de:	605a      	str	r2, [r3, #4]
	ADC3->CFGR |= ADC_CFGR_DMNGT;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <DMA_setup_ADC+0x48>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <DMA_setup_ADC+0x48>)
 80005e6:	f043 0303 	orr.w	r3, r3, #3
 80005ea:	60d3      	str	r3, [r2, #12]
	DMA1_Stream0 ->CR |= DMA_SxCR_TCIE;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <DMA_setup_ADC+0x3c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <DMA_setup_ADC+0x3c>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020010 	.word	0x40020010
 8000608:	24000030 	.word	0x24000030
 800060c:	58026040 	.word	0x58026040
 8000610:	58026000 	.word	0x58026000

08000614 <DMA_reset>:

void DMA_reset(void){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	DMA2->LIFCR = 0xffffffff;
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <DMA_reset+0x30>)
 800061a:	f04f 32ff 	mov.w	r2, #4294967295
 800061e:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <DMA_reset+0x30>)
 8000622:	f04f 32ff 	mov.w	r2, #4294967295
 8000626:	60da      	str	r2, [r3, #12]

	DMA1->LIFCR = 0xffffffff;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <DMA_reset+0x34>)
 800062a:	f04f 32ff 	mov.w	r2, #4294967295
 800062e:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <DMA_reset+0x34>)
 8000632:	f04f 32ff 	mov.w	r2, #4294967295
 8000636:	60da      	str	r2, [r3, #12]

}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400
 8000648:	40020000 	.word	0x40020000

0800064c <DMA_setup_USART>:
void DMA_setup_USART(void){
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	DMA2_Stream0 ->M0AR = (uint32_t) &DMA_data;
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <DMA_setup_USART+0x3c>)
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <DMA_setup_USART+0x40>)
 8000654:	60da      	str	r2, [r3, #12]
	DMA2_Stream0 ->PAR = (uint32_t) &(USART3->TDR);
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <DMA_setup_USART+0x3c>)
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <DMA_setup_USART+0x44>)
 800065a:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 ->NDTR = (uint16_t) A*2;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <DMA_setup_USART+0x3c>)
 800065e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000662:	605a      	str	r2, [r3, #4]
	USART3->CR3 |= USART_CR3_DMAT;
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <DMA_setup_USART+0x48>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a0a      	ldr	r2, [pc, #40]	@ (8000694 <DMA_setup_USART+0x48>)
 800066a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800066e:	6093      	str	r3, [r2, #8]
	DMA2_Stream0->CR |=DMA_SxCR_TCIE;
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <DMA_setup_USART+0x3c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <DMA_setup_USART+0x3c>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40020410 	.word	0x40020410
 800068c:	24000030 	.word	0x24000030
 8000690:	40004828 	.word	0x40004828
 8000694:	40004800 	.word	0x40004800

08000698 <ESPE_USART_init>:



void ESPE_USART_init(void){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

	//Accendo la trasmissione
	USART3 ->CR1 |= USART_CR1_TE;
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <ESPE_USART_init+0x34>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <ESPE_USART_init+0x34>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <ESPE_USART_init+0x34>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <ESPE_USART_init+0x34>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <ESPE_USART_init+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <ESPE_USART_init+0x34>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione


}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40004800 	.word	0x40004800

080006d0 <ESPE_ADC_init>:


//Queste sono le operazioni che dobbiamo fare, magari con una funzione, nel main(), prima del while(1) (va fatta una sola volta)
void ESPE_ADC_init(void){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 0 <<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 80006da:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006dc:	4a29      	ldr	r2, [pc, #164]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 0 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006e4:	4a27      	ldr	r2, [pc, #156]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		//segna quali sono i canali in lettura per velocità massima
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC3 -> CR &= ~ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <ESPE_ADC_init+0xb4>)
 80006fc:	f023 031d 	bic.w	r3, r3, #29
 8000700:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070c:	6093      	str	r3, [r2, #8]




	ADC3 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000714:	f023 031e 	bic.w	r3, r3, #30
 8000718:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;	//seleziona la modalità lineare di calibrazione (a 1)
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000724:	6093      	str	r3, [r2, #8]
	ADC3 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000734:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000738:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 800073a:	bf00      	nop
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	dbfb      	blt.n	800073c <ESPE_ADC_init+0x6c>
	}



	ADC3->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 8000758:	bf00      	nop
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f9      	beq.n	800075a <ESPE_ADC_init+0x8a>
	}


	ADC3 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <ESPE_ADC_init+0xb4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6053      	str	r3, [r2, #4]

	ADC3 -> SMPR1 |= 0<<ADC_SMPR1_SMP0_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000774:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <ESPE_ADC_init+0xb4>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	6153      	str	r3, [r2, #20]


}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	58026000 	.word	0x58026000

08000788 <ESPE_TIM6_init>:

void ESPE_TIM6_init(void){
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <ESPE_TIM6_init+0x20>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->ARR = 5;
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <ESPE_TIM6_init+0x20>)
 8000794:	2205      	movs	r2, #5
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC = 12;
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <ESPE_TIM6_init+0x20>)
 800079a:	220c      	movs	r2, #12
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40001000 	.word	0x40001000

080007ac <ESPE_USART_invert_mode>:


void ESPE_USART_invert_mode(void){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	if(USART3 -> CR1 & USART_CR1_RXNEIE){
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00c      	beq.n	80007d6 <ESPE_USART_invert_mode+0x2a>
		USART3 -> CR1 &= ~USART_CR1_RXNEIE;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007c2:	f023 0320 	bic.w	r3, r3, #32
 80007c6:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d2:	6013      	str	r3, [r2, #0]
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
		USART3 -> CR1 |= USART_CR1_RXNEIE;
		USART3 -> CR1 &= ~USART_CR1_TCIE;
	}
}
 80007d4:	e011      	b.n	80007fa <ESPE_USART_invert_mode+0x4e>
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <ESPE_USART_invert_mode+0x4e>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 &= ~USART_CR1_TCIE;
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <ESPE_USART_invert_mode+0x58>)
 80007f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40004800 	.word	0x40004800

08000808 <ESPE_USART_char_start>:


//Zona definizione di funzioni
void ESPE_USART_char_start(void){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0320 	and.w	r3, r3, #32
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <ESPE_USART_char_start+0x1e>
		if ( USART3 -> RDR == char_trigger){
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 800081a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081c:	2b65      	cmp	r3, #101	@ 0x65
 800081e:	d102      	bne.n	8000826 <ESPE_USART_char_start+0x1e>
			//flag_USART = 1;
			flag_Trigger_EN = 1;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <ESPE_USART_char_start+0x50>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]

		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083c:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <ESPE_USART_char_start+0x4c>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40004800 	.word	0x40004800
 8000858:	24000802 	.word	0x24000802

0800085c <ESPE_DMA_switch_mode>:


void ESPE_DMA_switch_mode(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	//if(flag_USART){
	if( flag_Triggered){
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <ESPE_DMA_switch_mode+0x2c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <ESPE_DMA_switch_mode+0x28>
		TIM6_stop;
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <ESPE_DMA_switch_mode+0x30>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <ESPE_DMA_switch_mode+0x30>)
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
		DMA_reset();
 8000874:	f7ff fece 	bl	8000614 <DMA_reset>
		DMA_start_USART;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <ESPE_DMA_switch_mode+0x34>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <ESPE_DMA_switch_mode+0x34>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]
		//flag_USART = 0;

	}
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000801 	.word	0x24000801
 800088c:	40001000 	.word	0x40001000
 8000890:	40020410 	.word	0x40020410

08000894 <ESPE_DMA_switch_back>:


void ESPE_DMA_switch_back(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	if( !(DMA2_Stream0 -> NDTR)){
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <ESPE_DMA_switch_back+0x40>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d116      	bne.n	80008ce <ESPE_DMA_switch_back+0x3a>
		flag_Triggered = 0;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <ESPE_DMA_switch_back+0x44>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		ESPE_USART_invert_mode();
 80008a6:	f7ff ff81 	bl	80007ac <ESPE_USART_invert_mode>
		DMA_stop_USART;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <ESPE_DMA_switch_back+0x40>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <ESPE_DMA_switch_back+0x40>)
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	6013      	str	r3, [r2, #0]
		DMA_reset();
 80008b6:	f7ff fead 	bl	8000614 <DMA_reset>
		DMA2_Stream0 -> NDTR = 2*A;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <ESPE_DMA_switch_back+0x40>)
 80008bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008c0:	605a      	str	r2, [r3, #4]
		TIM6_start;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <ESPE_DMA_switch_back+0x48>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <ESPE_DMA_switch_back+0x48>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]
	}
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020410 	.word	0x40020410
 80008d8:	24000801 	.word	0x24000801
 80008dc:	40001000 	.word	0x40001000

080008e0 <ESPE_DMA_Trigger_Pretrigger>:
		}
		//TIM6_start;
	}
}

void ESPE_DMA_Trigger_Pretrigger(void){
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	if(!flag_Triggered && flag_Trigger_EN){
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <ESPE_DMA_Trigger_Pretrigger+0x7c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d133      	bne.n	8000954 <ESPE_DMA_Trigger_Pretrigger+0x74>
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <ESPE_DMA_Trigger_Pretrigger+0x80>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d02f      	beq.n	8000954 <ESPE_DMA_Trigger_Pretrigger+0x74>
		if( flag_Pretriggered){
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <ESPE_DMA_Trigger_Pretrigger+0x84>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d021      	beq.n	8000940 <ESPE_DMA_Trigger_Pretrigger+0x60>
			if( ADC3 -> DR > Trigger_Value){
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <ESPE_DMA_Trigger_Pretrigger+0x88>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000904:	d925      	bls.n	8000952 <ESPE_DMA_Trigger_Pretrigger+0x72>
				flag_Triggered = 1;
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <ESPE_DMA_Trigger_Pretrigger+0x7c>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
				flag_Trigger_EN = 0;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <ESPE_DMA_Trigger_Pretrigger+0x80>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
				flag_Pretriggered = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <ESPE_DMA_Trigger_Pretrigger+0x84>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
				index_stop = (DMA1_Stream0 ->NDTR + data_len)%A +1000;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <ESPE_DMA_Trigger_Pretrigger+0x8c>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f503 7261 	add.w	r2, r3, #900	@ 0x384
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <ESPE_DMA_Trigger_Pretrigger+0x90>)
 8000922:	fba3 1302 	umull	r1, r3, r3, r2
 8000926:	099b      	lsrs	r3, r3, #6
 8000928:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800092c:	fb01 f303 	mul.w	r3, r1, r3
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	b29b      	uxth	r3, r3
 8000934:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <ESPE_DMA_Trigger_Pretrigger+0x94>)
 800093c:	801a      	strh	r2, [r3, #0]
			}
			return;
 800093e:	e008      	b.n	8000952 <ESPE_DMA_Trigger_Pretrigger+0x72>
		}
		if( ADC3 -> DR < Pretrigger_Value){
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <ESPE_DMA_Trigger_Pretrigger+0x88>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8000948:	d204      	bcs.n	8000954 <ESPE_DMA_Trigger_Pretrigger+0x74>
			flag_Pretriggered = 1;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <ESPE_DMA_Trigger_Pretrigger+0x84>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e000      	b.n	8000954 <ESPE_DMA_Trigger_Pretrigger+0x74>
			return;
 8000952:	bf00      	nop
		}
	}
}
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	24000801 	.word	0x24000801
 8000960:	24000802 	.word	0x24000802
 8000964:	24000800 	.word	0x24000800
 8000968:	58026000 	.word	0x58026000
 800096c:	40020010 	.word	0x40020010
 8000970:	10624dd3 	.word	0x10624dd3
 8000974:	24000804 	.word	0x24000804

08000978 <ESPE_DMA_data_manipulation>:


void ESPE_DMA_data_manipulation(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if(DMA1_Stream0 ->NDTR == (index_stop-1000)){
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <ESPE_DMA_data_manipulation+0x1c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <ESPE_DMA_data_manipulation+0x20>)
 8000982:	8812      	ldrh	r2, [r2, #0]
 8000984:	f5a2 727a 	sub.w	r2, r2, #1000	@ 0x3e8
 8000988:	4293      	cmp	r3, r2
 800098a:	d101      	bne.n	8000990 <ESPE_DMA_data_manipulation+0x18>
		ESPE_DMA_switch_mode();
 800098c:	f7ff ff66 	bl	800085c <ESPE_DMA_switch_mode>
	}
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020010 	.word	0x40020010
 8000998:	24000804 	.word	0x24000804

0800099c <ESPE_DMA_end_transmission>:

void ESPE_DMA_end_transmission(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	if( flag_Triggered){
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <ESPE_DMA_end_transmission+0x5c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d024      	beq.n	80009f2 <ESPE_DMA_end_transmission+0x56>
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80009a8:	bf00      	nop
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <ESPE_DMA_end_transmission+0x60>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f9      	beq.n	80009aa <ESPE_DMA_end_transmission+0xe>
		if(USART3 ->CR1 & USART_CR1_TCIE){
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <ESPE_DMA_end_transmission+0x60>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d017      	beq.n	80009f2 <ESPE_DMA_end_transmission+0x56>
			if( index_transmission < 2){
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <ESPE_DMA_end_transmission+0x64>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d80e      	bhi.n	80009e8 <ESPE_DMA_end_transmission+0x4c>
				USART3->TDR = pointer[index_transmission];
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <ESPE_DMA_end_transmission+0x68>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000a00 <ESPE_DMA_end_transmission+0x64>)
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <ESPE_DMA_end_transmission+0x60>)
 80009d8:	629a      	str	r2, [r3, #40]	@ 0x28
				index_transmission ++;
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <ESPE_DMA_end_transmission+0x64>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <ESPE_DMA_end_transmission+0x64>)
 80009e4:	801a      	strh	r2, [r3, #0]
			}

		}
	}

}
 80009e6:	e004      	b.n	80009f2 <ESPE_DMA_end_transmission+0x56>
				index_transmission = 0;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <ESPE_DMA_end_transmission+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
				ESPE_DMA_switch_back();
 80009ee:	f7ff ff51 	bl	8000894 <ESPE_DMA_switch_back>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000801 	.word	0x24000801
 80009fc:	40004800 	.word	0x40004800
 8000a00:	24000806 	.word	0x24000806
 8000a04:	24000000 	.word	0x24000000

08000a08 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a22:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <MX_ADC3_Init+0xdc>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a38:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a44:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a52:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a80:	4817      	ldr	r0, [pc, #92]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a82:	f001 f893 	bl	8001bac <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000a8c:	f000 fb0c 	bl	80010a8 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000a98:	f001 f888 	bl	8001bac <HAL_ADC_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000aa2:	f000 fb01 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_ADC3_Init+0xd8>)
 8000aca:	f001 fa11 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000ad4:	f000 fae8 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24000808 	.word	0x24000808
 8000ae4:	58026000 	.word	0x58026000

08000ae8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0b4      	sub	sp, #208	@ 0xd0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	22c0      	movs	r2, #192	@ 0xc0
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f009 f9ca 	bl	8009e92 <memset>
  if(adcHandle->Instance==ADC3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a43      	ldr	r2, [pc, #268]	@ (8000c10 <HAL_ADC_MspInit+0x128>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d17e      	bne.n	8000c06 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b08:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000b18:	2313      	movs	r3, #19
 8000b1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b28:	23c0      	movs	r3, #192	@ 0xc0
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 ff3a 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000b4a:	f000 faad 	bl	80010a8 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a2f      	ldr	r2, [pc, #188]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a28      	ldr	r2, [pc, #160]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <HAL_ADC_MspInit+0x12c>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000b8a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000b8e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000b92:	f000 fe69 	bl	8001868 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000b98:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <HAL_ADC_MspInit+0x134>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000b9e:	2273      	movs	r2, #115	@ 0x73
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bbc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bcc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000bda:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bdc:	f001 ff00 	bl	80029e0 <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000be6:	f000 fa5f 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bf0:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <HAL_ADC_MspInit+0x130>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	207f      	movs	r0, #127	@ 0x7f
 8000bfc:	f001 febb 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c00:	207f      	movs	r0, #127	@ 0x7f
 8000c02:	f001 fed2 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	37d0      	adds	r7, #208	@ 0xd0
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58026000 	.word	0x58026000
 8000c14:	58024400 	.word	0x58024400
 8000c18:	2400086c 	.word	0x2400086c
 8000c1c:	40020010 	.word	0x40020010

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c2c:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c4a:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <MX_DMA_Init+0x6c>)
 8000c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200b      	movs	r0, #11
 8000c68:	f001 fe85 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c6c:	200b      	movs	r0, #11
 8000c6e:	f001 fe9c 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2038      	movs	r0, #56	@ 0x38
 8000c78:	f001 fe7d 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c7c:	2038      	movs	r0, #56	@ 0x38
 8000c7e:	f001 fe94 	bl	80029aa <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400

08000c90 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b83      	ldr	r3, [pc, #524]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a81      	ldr	r2, [pc, #516]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a7a      	ldr	r2, [pc, #488]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b77      	ldr	r3, [pc, #476]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b74      	ldr	r3, [pc, #464]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a72      	ldr	r2, [pc, #456]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b70      	ldr	r3, [pc, #448]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b6c      	ldr	r3, [pc, #432]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a6b      	ldr	r2, [pc, #428]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b68      	ldr	r3, [pc, #416]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b65      	ldr	r3, [pc, #404]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4a63      	ldr	r2, [pc, #396]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4b61      	ldr	r3, [pc, #388]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	4a5c      	ldr	r2, [pc, #368]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4c:	4b59      	ldr	r3, [pc, #356]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b56      	ldr	r3, [pc, #344]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a54      	ldr	r2, [pc, #336]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b52      	ldr	r3, [pc, #328]	@ (8000eb4 <MX_GPIO_Init+0x224>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d7e:	484e      	ldr	r0, [pc, #312]	@ (8000eb8 <MX_GPIO_Init+0x228>)
 8000d80:	f003 fca0 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8a:	484c      	ldr	r0, [pc, #304]	@ (8000ebc <MX_GPIO_Init+0x22c>)
 8000d8c:	f003 fc9a 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2102      	movs	r1, #2
 8000d94:	484a      	ldr	r0, [pc, #296]	@ (8000ec0 <MX_GPIO_Init+0x230>)
 8000d96:	f003 fc95 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4845      	ldr	r0, [pc, #276]	@ (8000ec4 <MX_GPIO_Init+0x234>)
 8000db0:	f003 fad8 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000db4:	2332      	movs	r3, #50	@ 0x32
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	483d      	ldr	r0, [pc, #244]	@ (8000ec4 <MX_GPIO_Init+0x234>)
 8000dd0:	f003 fac8 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dd4:	2386      	movs	r3, #134	@ 0x86
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4836      	ldr	r0, [pc, #216]	@ (8000ec8 <MX_GPIO_Init+0x238>)
 8000df0:	f003 fab8 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000df4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	482a      	ldr	r0, [pc, #168]	@ (8000eb8 <MX_GPIO_Init+0x228>)
 8000e0e:	f003 faa9 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4822      	ldr	r0, [pc, #136]	@ (8000eb8 <MX_GPIO_Init+0x228>)
 8000e30:	f003 fa98 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481b      	ldr	r0, [pc, #108]	@ (8000ebc <MX_GPIO_Init+0x22c>)
 8000e4e:	f003 fa89 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4819      	ldr	r0, [pc, #100]	@ (8000ecc <MX_GPIO_Init+0x23c>)
 8000e68:	f003 fa7c 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e6c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7e:	230b      	movs	r3, #11
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	@ (8000ecc <MX_GPIO_Init+0x23c>)
 8000e8a:	f003 fa6b 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <MX_GPIO_Init+0x230>)
 8000ea6:	f003 fa5d 	bl	8004364 <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58020c00 	.word	0x58020c00
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	58020800 	.word	0x58020800
 8000ec8:	58020000 	.word	0x58020000
 8000ecc:	58021800 	.word	0x58021800

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f000 fc06 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f838 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f7ff fed8 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee0:	f7ff fe9e 	bl	8000c20 <MX_DMA_Init>
  MX_ADC3_Init();
 8000ee4:	f7ff fd90 	bl	8000a08 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000ee8:	f000 fa36 	bl	8001358 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eec:	f000 fb22 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000ef0:	f000 f9da 	bl	80012a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ESPE_TIM6_init();
 8000ef4:	f7ff fc48 	bl	8000788 <ESPE_TIM6_init>
  ESPE_ADC_init();
 8000ef8:	f7ff fbea 	bl	80006d0 <ESPE_ADC_init>
  ESPE_USART_init();
 8000efc:	f7ff fbcc 	bl	8000698 <ESPE_USART_init>
  DMA_setup_ADC();
 8000f00:	f7ff fb62 	bl	80005c8 <DMA_setup_ADC>
  DMA_setup_USART();
 8000f04:	f7ff fba2 	bl	800064c <DMA_setup_USART>
  USART_start;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <main+0x6c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <main+0x6c>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
  TIM6_start;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <main+0x70>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <main+0x70>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]
  ADC_start;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <main+0x74>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <main+0x74>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6093      	str	r3, [r2, #8]
  DMA_start_ADC;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <main+0x78>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <main+0x78>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <main+0x68>
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40001000 	.word	0x40001000
 8000f44:	58026000 	.word	0x58026000
 8000f48:	40020010 	.word	0x40020010

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09e      	sub	sp, #120	@ 0x78
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f56:	224c      	movs	r2, #76	@ 0x4c
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 ff99 	bl	8009e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2220      	movs	r2, #32
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f008 ff92 	bl	8009e92 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f003 fcf2 	bl	8004958 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b48      	ldr	r3, [pc, #288]	@ (800109c <SystemClock_Config+0x150>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7c:	4a47      	ldr	r2, [pc, #284]	@ (800109c <SystemClock_Config+0x150>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f84:	4b45      	ldr	r3, [pc, #276]	@ (800109c <SystemClock_Config+0x150>)
 8000f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b44      	ldr	r3, [pc, #272]	@ (80010a0 <SystemClock_Config+0x154>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a43      	ldr	r2, [pc, #268]	@ (80010a0 <SystemClock_Config+0x154>)
 8000f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b41      	ldr	r3, [pc, #260]	@ (80010a0 <SystemClock_Config+0x154>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa6:	bf00      	nop
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <SystemClock_Config+0x154>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fb4:	d1f8      	bne.n	8000fa8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <SystemClock_Config+0x158>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fbc:	4a39      	ldr	r2, [pc, #228]	@ (80010a4 <SystemClock_Config+0x158>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fc6:	4b37      	ldr	r3, [pc, #220]	@ (80010a4 <SystemClock_Config+0x158>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <SystemClock_Config+0x154>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a30      	ldr	r2, [pc, #192]	@ (80010a0 <SystemClock_Config+0x154>)
 8000fde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <SystemClock_Config+0x154>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <SystemClock_Config+0x150>)
 8000ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800109c <SystemClock_Config+0x150>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ffa:	4b28      	ldr	r3, [pc, #160]	@ (800109c <SystemClock_Config+0x150>)
 8000ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001006:	bf00      	nop
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <SystemClock_Config+0x154>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001014:	d1f8      	bne.n	8001008 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800101a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001024:	2302      	movs	r3, #2
 8001026:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800102c:	2378      	movs	r3, #120	@ 0x78
 800102e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001034:	230f      	movs	r3, #15
 8001036:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800103c:	230c      	movs	r3, #12
 800103e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001040:	2300      	movs	r3, #0
 8001042:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fccd 	bl	80049ec <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001058:	f000 f826 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	233f      	movs	r3, #63	@ 0x3f
 800105e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001068:	2308      	movs	r3, #8
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800106c:	2340      	movs	r3, #64	@ 0x40
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f90b 	bl	80052a0 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001090:	f000 f80a 	bl	80010a8 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3778      	adds	r7, #120	@ 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58000400 	.word	0x58000400
 80010a0:	58024800 	.word	0x58024800
 80010a4:	58024400 	.word	0x58024400

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <Error_Handler+0x8>

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_MspInit+0x30>)
 80010bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c0:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_MspInit+0x30>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_MspInit+0x30>)
 80010cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	58024400 	.word	0x58024400

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 fb43 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA1_Stream0_IRQHandler+0x10>)
 800114e:	f001 ffa3 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400086c 	.word	0x2400086c

0800115c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_char_start();
 8001160:	f7ff fb52 	bl	8000808 <ESPE_USART_char_start>
	ESPE_DMA_end_transmission();
 8001164:	f7ff fc1a 	bl	800099c <ESPE_DMA_end_transmission>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	ESPE_USART_invert_mode();
 8001170:	f7ff fb1c 	bl	80007ac <ESPE_USART_invert_mode>
	ESPE_DMA_end_transmission();
 8001174:	f7ff fc12 	bl	800099c <ESPE_DMA_end_transmission>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <DMA2_Stream0_IRQHandler+0x18>)
 800117a:	f001 ff8d 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	240009c4 	.word	0x240009c4

08001188 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ESPE_DMA_Trigger_Pretrigger();
 800118c:	f7ff fba8 	bl	80008e0 <ESPE_DMA_Trigger_Pretrigger>
	ESPE_DMA_data_manipulation();
 8001190:	f7ff fbf2 	bl	8000978 <ESPE_DMA_data_manipulation>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <SystemInit+0xe4>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a36      	ldr	r2, [pc, #216]	@ (800127c <SystemInit+0xe4>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <SystemInit+0xe8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b06      	cmp	r3, #6
 80011b6:	d807      	bhi.n	80011c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <SystemInit+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <SystemInit+0xe8>)
 80011c2:	f043 0307 	orr.w	r3, r3, #7
 80011c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <SystemInit+0xec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001284 <SystemInit+0xec>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <SystemInit+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <SystemInit+0xec>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4929      	ldr	r1, [pc, #164]	@ (8001284 <SystemInit+0xec>)
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <SystemInit+0xf0>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <SystemInit+0xe8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f2:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <SystemInit+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 030f 	bic.w	r3, r3, #15
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <SystemInit+0xe8>)
 80011fc:	f043 0307 	orr.w	r3, r3, #7
 8001200:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <SystemInit+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <SystemInit+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <SystemInit+0xec>)
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <SystemInit+0xf4>)
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <SystemInit+0xec>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <SystemInit+0xf8>)
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <SystemInit+0xec>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <SystemInit+0xfc>)
 8001224:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <SystemInit+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SystemInit+0xec>)
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <SystemInit+0xfc>)
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <SystemInit+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <SystemInit+0xec>)
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <SystemInit+0xfc>)
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <SystemInit+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <SystemInit+0xec>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <SystemInit+0x100>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <SystemInit+0x104>)
 800125c:	4013      	ands	r3, r2
 800125e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001262:	d202      	bcs.n	800126a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <SystemInit+0x108>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <SystemInit+0x10c>)
 800126c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001270:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	52002000 	.word	0x52002000
 8001284:	58024400 	.word	0x58024400
 8001288:	eaf6ed7f 	.word	0xeaf6ed7f
 800128c:	02020200 	.word	0x02020200
 8001290:	01ff0000 	.word	0x01ff0000
 8001294:	01010280 	.word	0x01010280
 8001298:	5c001000 	.word	0x5c001000
 800129c:	ffff0000 	.word	0xffff0000
 80012a0:	51008108 	.word	0x51008108
 80012a4:	52004000 	.word	0x52004000

080012a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_TIM6_Init+0x64>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_TIM6_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_TIM6_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_TIM6_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_TIM6_Init+0x64>)
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_TIM6_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM6_Init+0x64>)
 80012da:	f007 f86b 	bl	80083b4 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e4:	f7ff fee0 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e8:	2320      	movs	r3, #32
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM6_Init+0x64>)
 80012f6:	f007 f95b 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001300:	f7ff fed2 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	240008e4 	.word	0x240008e4
 8001310:	40001000 	.word	0x40001000

08001314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10e      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800132c:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40001000 	.word	0x40001000
 8001354:	58024400 	.word	0x58024400

08001358 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <MX_USART3_UART_Init+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001364:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013a2:	f007 f993 	bl	80086cc <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013ac:	f7ff fe7c 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013b4:	f008 f99b 	bl	80096ee <HAL_UARTEx_SetTxFifoThreshold>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013be:	f7ff fe73 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013c6:	f008 f9d0 	bl	800976a <HAL_UARTEx_SetRxFifoThreshold>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f7ff fe6a 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_USART3_UART_Init+0x90>)
 80013d6:	f008 f951 	bl	800967c <HAL_UARTEx_DisableFifoMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f7ff fe62 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000930 	.word	0x24000930
 80013ec:	40004800 	.word	0x40004800

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ba      	sub	sp, #232	@ 0xe8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	22c0      	movs	r2, #192	@ 0xc0
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f008 fd3e 	bl	8009e92 <memset>
  if(uartHandle->Instance==USART3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a41      	ldr	r2, [pc, #260]	@ (8001520 <HAL_UART_MspInit+0x130>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d17b      	bne.n	8001518 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001420:	f04f 0202 	mov.w	r2, #2
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fabe 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001442:	f7ff fe31 	bl	80010a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_UART_MspInit+0x134>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800144c:	4a35      	ldr	r2, [pc, #212]	@ (8001524 <HAL_UART_MspInit+0x134>)
 800144e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001452:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <HAL_UART_MspInit+0x134>)
 8001458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800145c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_UART_MspInit+0x134>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	4a2e      	ldr	r2, [pc, #184]	@ (8001524 <HAL_UART_MspInit+0x134>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_UART_MspInit+0x134>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149c:	2307      	movs	r3, #7
 800149e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a6:	4619      	mov	r1, r3
 80014a8:	481f      	ldr	r0, [pc, #124]	@ (8001528 <HAL_UART_MspInit+0x138>)
 80014aa:	f002 ff5b 	bl	8004364 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <HAL_UART_MspInit+0x140>)
 80014b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014b6:	222e      	movs	r2, #46	@ 0x2e
 80014b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014bc:	2240      	movs	r2, #64	@ 0x40
 80014be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014ec:	480f      	ldr	r0, [pc, #60]	@ (800152c <HAL_UART_MspInit+0x13c>)
 80014ee:	f001 fa77 	bl	80029e0 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80014f8:	f7ff fdd6 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_UART_MspInit+0x13c>)
 8001500:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_UART_MspInit+0x13c>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2027      	movs	r0, #39	@ 0x27
 800150e:	f001 fa32 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001512:	2027      	movs	r0, #39	@ 0x27
 8001514:	f001 fa49 	bl	80029aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	37e8      	adds	r7, #232	@ 0xe8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004800 	.word	0x40004800
 8001524:	58024400 	.word	0x58024400
 8001528:	58020c00 	.word	0x58020c00
 800152c:	240009c4 	.word	0x240009c4
 8001530:	40020410 	.word	0x40020410

08001534 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800153c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001540:	2209      	movs	r2, #9
 8001542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001546:	2202      	movs	r2, #2
 8001548:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154c:	2200      	movs	r2, #0
 800154e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001552:	2202      	movs	r2, #2
 8001554:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001558:	2201      	movs	r2, #1
 800155a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155e:	2200      	movs	r2, #0
 8001560:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156a:	2201      	movs	r2, #1
 800156c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001570:	2201      	movs	r2, #1
 8001572:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157c:	f003 f8bb 	bl	80046f6 <HAL_PCD_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001586:	f7ff fd8f 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000a3c 	.word	0x24000a3c
 8001594:	40080000 	.word	0x40080000

08001598 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ba      	sub	sp, #232	@ 0xe8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	22c0      	movs	r2, #192	@ 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f008 fc6a 	bl	8009e92 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d159      	bne.n	800167c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 f9e9 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80015ec:	f7ff fd5c 	bl	80010a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015f0:	f003 f9ec 	bl	80049cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001612:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800162c:	230a      	movs	r3, #10
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001636:	4619      	mov	r1, r3
 8001638:	4814      	ldr	r0, [pc, #80]	@ (800168c <HAL_PCD_MspInit+0xf4>)
 800163a:	f002 fe93 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800163e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <HAL_PCD_MspInit+0xf4>)
 800165a:	f002 fe83 	bl	8004364 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800166a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800167c:	bf00      	nop
 800167e:	37e8      	adds	r7, #232	@ 0xe8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40080000 	.word	0x40080000
 8001688:	58024400 	.word	0x58024400
 800168c:	58020000 	.word	0x58020000

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff fd80 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f008 fbf1 	bl	8009ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fc05 	bl	8000ed0 <main>
  bx  lr
 80016c6:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80016c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80016d4:	08009f54 	.word	0x08009f54
  ldr r2, =_sbss
 80016d8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80016dc:	24000f24 	.word	0x24000f24

080016e0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f001 f938 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f0:	f003 ff8c 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4913      	ldr	r1, [pc, #76]	@ (8001750 <HAL_Init+0x6c>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_Init+0x6c>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_Init+0x70>)
 8001726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_Init+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f814 	bl	800175c <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e002      	b.n	8001744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fcb9 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	08009f04 	.word	0x08009f04
 8001754:	24000008 	.word	0x24000008
 8001758:	24000004 	.word	0x24000004

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e021      	b.n	80017b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <HAL_InitTick+0x64>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_InitTick+0x60>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f001 f91d 	bl	80029c6 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f001 f8e7 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_InitTick+0x68>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24000010 	.word	0x24000010
 80017c0:	24000004 	.word	0x24000004
 80017c4:	2400000c 	.word	0x2400000c

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	24000010 	.word	0x24000010
 80017ec:	24000f20 	.word	0x24000f20

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	24000f20 	.word	0x24000f20

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000010 	.word	0x24000010

08001850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_GetREVID+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1b      	lsrs	r3, r3, #16
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	5c001000 	.word	0x5c001000

08001868 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	4904      	ldr	r1, [pc, #16]	@ (8001890 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	58000400 	.word	0x58000400

08001894 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3360      	adds	r3, #96	@ 0x60
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	611a      	str	r2, [r3, #16]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800196e:	b480      	push	{r7}
 8001970:	b087      	sub	sp, #28
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3360      	adds	r3, #96	@ 0x60
 800197e:	461a      	mov	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	431a      	orrs	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
  }
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3330      	adds	r3, #48	@ 0x30
 80019b4:	461a      	mov	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	211f      	movs	r1, #31
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	f003 011f 	and.w	r1, r3, #31
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0e5b      	lsrs	r3, r3, #25
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0d1b      	lsrs	r3, r3, #20
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2107      	movs	r1, #7
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0d1b      	lsrs	r3, r3, #20
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0318 	and.w	r3, r3, #24
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	000fffff 	.word	0x000fffff

08001a9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6093      	str	r3, [r2, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	5fffffc0 	.word	0x5fffffc0

08001ac0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <LL_ADC_EnableInternalRegulator+0x24>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	6fffffc0 	.word	0x6fffffc0

08001b10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <LL_ADC_IsEnabled+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_ADC_IsEnabled+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e18f      	b.n	8001ee6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7fe ff87 	bl	8000ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff67 	bl	8001ac0 <LL_ADC_IsDeepPowerDownEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff4d 	bl	8001a9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff82 	bl	8001b10 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d114      	bne.n	8001c3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff66 	bl	8001ae8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1c:	4b87      	ldr	r3, [pc, #540]	@ (8001e3c <HAL_ADC_Init+0x290>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4a87      	ldr	r2, [pc, #540]	@ (8001e40 <HAL_ADC_Init+0x294>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c2e:	e002      	b.n	8001c36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff65 	bl	8001b10 <LL_ADC_IsInternalRegulatorEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	f043 0210 	orr.w	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff76 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001c72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 8129 	bne.w	8001ed4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 8125 	bne.w	8001ed4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff4a 	bl	8001b38 <LL_ADC_IsEnabled>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d136      	bne.n	8001d18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a65      	ldr	r2, [pc, #404]	@ (8001e44 <HAL_ADC_Init+0x298>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_ADC_Init+0x112>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	@ (8001e48 <HAL_ADC_Init+0x29c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10e      	bne.n	8001cdc <HAL_ADC_Init+0x130>
 8001cbe:	4861      	ldr	r0, [pc, #388]	@ (8001e44 <HAL_ADC_Init+0x298>)
 8001cc0:	f7ff ff3a 	bl	8001b38 <LL_ADC_IsEnabled>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	4860      	ldr	r0, [pc, #384]	@ (8001e48 <HAL_ADC_Init+0x29c>)
 8001cc8:	f7ff ff36 	bl	8001b38 <LL_ADC_IsEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e008      	b.n	8001cee <HAL_ADC_Init+0x142>
 8001cdc:	485b      	ldr	r0, [pc, #364]	@ (8001e4c <HAL_ADC_Init+0x2a0>)
 8001cde:	f7ff ff2b 	bl	8001b38 <LL_ADC_IsEnabled>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a53      	ldr	r2, [pc, #332]	@ (8001e44 <HAL_ADC_Init+0x298>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_Init+0x15a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a51      	ldr	r2, [pc, #324]	@ (8001e48 <HAL_ADC_Init+0x29c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Init+0x15e>
 8001d06:	4a52      	ldr	r2, [pc, #328]	@ (8001e50 <HAL_ADC_Init+0x2a4>)
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_Init+0x160>
 8001d0a:	4a52      	ldr	r2, [pc, #328]	@ (8001e54 <HAL_ADC_Init+0x2a8>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7ff fdbe 	bl	8001894 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d18:	f7ff fd9a 	bl	8001850 <HAL_GetREVID>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d914      	bls.n	8001d50 <HAL_ADC_Init+0x1a4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d110      	bne.n	8001d50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7d5b      	ldrb	r3, [r3, #21]
 8001d32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7f1b      	ldrb	r3, [r3, #28]
 8001d44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d48:	f043 030c 	orr.w	r3, r3, #12
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e00d      	b.n	8001d6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7d5b      	ldrb	r3, [r3, #21]
 8001d54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7f1b      	ldrb	r3, [r3, #28]
 8001d66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7f1b      	ldrb	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	045b      	lsls	r3, r3, #17
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <HAL_ADC_Init+0x2ac>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	430b      	orrs	r3, r1
 8001db0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fed1 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fede 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8001dc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d15f      	bne.n	8001e90 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d15c      	bne.n	8001e90 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <HAL_ADC_Init+0x2b0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d130      	bne.n	8001e64 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_ADC_Init+0x2b4>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e16:	3a01      	subs	r2, #1
 8001e18:	0411      	lsls	r1, r2, #16
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	e01c      	b.n	8001e74 <HAL_ADC_Init+0x2c8>
 8001e3a:	bf00      	nop
 8001e3c:	24000004 	.word	0x24000004
 8001e40:	053e2d63 	.word	0x053e2d63
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40022100 	.word	0x40022100
 8001e4c:	58026000 	.word	0x58026000
 8001e50:	40022300 	.word	0x40022300
 8001e54:	58026300 	.word	0x58026300
 8001e58:	fff0c003 	.word	0xfff0c003
 8001e5c:	ffffbffc 	.word	0xffffbffc
 8001e60:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb8c 	bl	80025a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d10c      	bne.n	8001eb2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f023 010f 	bic.w	r1, r3, #15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb0:	e007      	b.n	8001ec2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 020f 	bic.w	r2, r2, #15
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b0a1      	sub	sp, #132	@ 0x84
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a65      	ldr	r2, [pc, #404]	@ (80020a0 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x2a>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e32e      	b.n	8002578 <HAL_ADC_ConfigChannel+0x688>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe19 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8313 	bne.w	800255a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db2c      	blt.n	8001f96 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x6a>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	e016      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x98>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e003      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2201      	movs	r2, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	69d1      	ldr	r1, [r2, #28]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f7ff fcfe 	bl	80019a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fdd6 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001fb2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fde3 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8001fbe:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80b8 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 80b4 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f7ff fd0d 	bl	80019fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fe2:	4b30      	ldr	r3, [pc, #192]	@ (80020a4 <HAL_ADC_ConfigChannel+0x1b4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x118>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	e01d      	b.n	8002044 <HAL_ADC_ConfigChannel+0x154>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10b      	bne.n	800202e <HAL_ADC_ConfigChannel+0x13e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	e00a      	b.n	8002044 <HAL_ADC_ConfigChannel+0x154>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d02c      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800205c:	f7ff fc4e 	bl	80018fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	7e5b      	ldrb	r3, [r3, #25]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x186>
 8002070:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x188>
 8002076:	2300      	movs	r3, #0
 8002078:	461a      	mov	r2, r3
 800207a:	f7ff fc78 	bl	800196e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7e1b      	ldrb	r3, [r3, #24]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1a4>
 800208e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002092:	e000      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1a6>
 8002094:	2300      	movs	r3, #0
 8002096:	461a      	mov	r2, r3
 8002098:	f7ff fc50 	bl	800193c <LL_ADC_SetDataRightShift>
 800209c:	e04c      	b.n	8002138 <HAL_ADC_ConfigChannel+0x248>
 800209e:	bf00      	nop
 80020a0:	47ff0000 	.word	0x47ff0000
 80020a4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ca:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	069b      	lsls	r3, r3, #26
 80020dc:	429a      	cmp	r2, r3
 80020de:	d107      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ee:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	069b      	lsls	r3, r3, #26
 8002100:	429a      	cmp	r2, r3
 8002102:	d107      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002112:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	069b      	lsls	r3, r3, #26
 8002124:	429a      	cmp	r2, r3
 8002126:	d107      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002136:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fcfb 	bl	8001b38 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8211 	bne.w	800256c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fc7c 	bl	8001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4aa1      	ldr	r2, [pc, #644]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4f8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	f040 812e 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x2a0>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b09      	cmp	r3, #9
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e019      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x2d4>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800219e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80021ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	bf94      	ite	ls
 80021be:	2301      	movls	r3, #1
 80021c0:	2300      	movhi	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d079      	beq.n	80022bc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x2f4>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021e2:	e015      	b.n	8002210 <HAL_ADC_ConfigChannel+0x320>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x340>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	3301      	adds	r3, #1
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	e017      	b.n	8002260 <HAL_ADC_ConfigChannel+0x370>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800223e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002240:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800224c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x396>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	051b      	lsls	r3, r3, #20
 8002284:	e018      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x3c8>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e003      	b.n	80022aa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b8:	430b      	orrs	r3, r1
 80022ba:	e07e      	b.n	80023ba <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x3e8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	3301      	adds	r3, #1
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d6:	e015      	b.n	8002304 <HAL_ADC_ConfigChannel+0x414>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x434>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x464>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	61bb      	str	r3, [r7, #24]
  return result;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x490>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	3b1e      	subs	r3, #30
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800237e:	e01b      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x4c8>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	60fb      	str	r3, [r7, #12]
  return result;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e003      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	430b      	orrs	r3, r1
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6892      	ldr	r2, [r2, #8]
 80023be:	4619      	mov	r1, r3
 80023c0:	f7ff fb1c 	bl	80019fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f280 80cf 	bge.w	800256c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a06      	ldr	r2, [pc, #24]	@ (80023ec <HAL_ADC_ConfigChannel+0x4fc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x4f2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a04      	ldr	r2, [pc, #16]	@ (80023f0 <HAL_ADC_ConfigChannel+0x500>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10a      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x508>
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <HAL_ADC_ConfigChannel+0x504>)
 80023e4:	e009      	b.n	80023fa <HAL_ADC_ConfigChannel+0x50a>
 80023e6:	bf00      	nop
 80023e8:	47ff0000 	.word	0x47ff0000
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40022100 	.word	0x40022100
 80023f4:	40022300 	.word	0x40022300
 80023f8:	4b61      	ldr	r3, [pc, #388]	@ (8002580 <HAL_ADC_ConfigChannel+0x690>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fa70 	bl	80018e0 <LL_ADC_GetCommonPathInternalCh>
 8002400:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5f      	ldr	r2, [pc, #380]	@ (8002584 <HAL_ADC_ConfigChannel+0x694>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x526>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5d      	ldr	r2, [pc, #372]	@ (8002588 <HAL_ADC_ConfigChannel+0x698>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10e      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x544>
 8002416:	485b      	ldr	r0, [pc, #364]	@ (8002584 <HAL_ADC_ConfigChannel+0x694>)
 8002418:	f7ff fb8e 	bl	8001b38 <LL_ADC_IsEnabled>
 800241c:	4604      	mov	r4, r0
 800241e:	485a      	ldr	r0, [pc, #360]	@ (8002588 <HAL_ADC_ConfigChannel+0x698>)
 8002420:	f7ff fb8a 	bl	8001b38 <LL_ADC_IsEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	4323      	orrs	r3, r4
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e008      	b.n	8002446 <HAL_ADC_ConfigChannel+0x556>
 8002434:	4855      	ldr	r0, [pc, #340]	@ (800258c <HAL_ADC_ConfigChannel+0x69c>)
 8002436:	f7ff fb7f 	bl	8001b38 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d07d      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_ADC_ConfigChannel+0x6a0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d130      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5c6>
 8002454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d12b      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a4a      	ldr	r2, [pc, #296]	@ (800258c <HAL_ADC_ConfigChannel+0x69c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	f040 8081 	bne.w	800256c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a45      	ldr	r2, [pc, #276]	@ (8002584 <HAL_ADC_ConfigChannel+0x694>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_ADC_ConfigChannel+0x58e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a43      	ldr	r2, [pc, #268]	@ (8002588 <HAL_ADC_ConfigChannel+0x698>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x592>
 800247e:	4a45      	ldr	r2, [pc, #276]	@ (8002594 <HAL_ADC_ConfigChannel+0x6a4>)
 8002480:	e000      	b.n	8002484 <HAL_ADC_ConfigChannel+0x594>
 8002482:	4a3f      	ldr	r2, [pc, #252]	@ (8002580 <HAL_ADC_ConfigChannel+0x690>)
 8002484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002486:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f7ff fa14 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_ADC_ConfigChannel+0x6a8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	4a40      	ldr	r2, [pc, #256]	@ (800259c <HAL_ADC_ConfigChannel+0x6ac>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	3301      	adds	r3, #1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024a6:	e002      	b.n	80024ae <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b4:	e05a      	b.n	800256c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a39      	ldr	r2, [pc, #228]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6b0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11e      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x60e>
 80024c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d119      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2f      	ldr	r2, [pc, #188]	@ (800258c <HAL_ADC_ConfigChannel+0x69c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d14b      	bne.n	800256c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002584 <HAL_ADC_ConfigChannel+0x694>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x5f8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <HAL_ADC_ConfigChannel+0x698>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x5fc>
 80024e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_ADC_ConfigChannel+0x6a4>)
 80024ea:	e000      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5fe>
 80024ec:	4a24      	ldr	r2, [pc, #144]	@ (8002580 <HAL_ADC_ConfigChannel+0x690>)
 80024ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff f9df 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fc:	e036      	b.n	800256c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d131      	bne.n	800256c <HAL_ADC_ConfigChannel+0x67c>
 8002508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d12c      	bne.n	800256c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_ADC_ConfigChannel+0x69c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d127      	bne.n	800256c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <HAL_ADC_ConfigChannel+0x694>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x640>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_ADC_ConfigChannel+0x698>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x644>
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_ADC_ConfigChannel+0x6a4>)
 8002532:	e000      	b.n	8002536 <HAL_ADC_ConfigChannel+0x646>
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <HAL_ADC_ConfigChannel+0x690>)
 8002536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002538:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7ff f9bb 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
 8002544:	e012      	b.n	800256c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002558:	e008      	b.n	800256c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002578:	4618      	mov	r0, r3
 800257a:	3784      	adds	r7, #132	@ 0x84
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	58026300 	.word	0x58026300
 8002584:	40022000 	.word	0x40022000
 8002588:	40022100 	.word	0x40022100
 800258c:	58026000 	.word	0x58026000
 8002590:	cb840000 	.word	0xcb840000
 8002594:	40022300 	.word	0x40022300
 8002598:	24000004 	.word	0x24000004
 800259c:	053e2d63 	.word	0x053e2d63
 80025a0:	c7520000 	.word	0xc7520000
 80025a4:	cfb80000 	.word	0xcfb80000

080025a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7a      	ldr	r2, [pc, #488]	@ (80027a0 <ADC_ConfigureBoostMode+0x1f8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <ADC_ConfigureBoostMode+0x1c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a79      	ldr	r2, [pc, #484]	@ (80027a4 <ADC_ConfigureBoostMode+0x1fc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <ADC_ConfigureBoostMode+0x30>
 80025c4:	4b78      	ldr	r3, [pc, #480]	@ (80027a8 <ADC_ConfigureBoostMode+0x200>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e008      	b.n	80025ea <ADC_ConfigureBoostMode+0x42>
 80025d8:	4b74      	ldr	r3, [pc, #464]	@ (80027ac <ADC_ConfigureBoostMode+0x204>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01c      	beq.n	8002628 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025ee:	f003 f987 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 80025f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025fc:	d010      	beq.n	8002620 <ADC_ConfigureBoostMode+0x78>
 80025fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002602:	d873      	bhi.n	80026ec <ADC_ConfigureBoostMode+0x144>
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d002      	beq.n	8002610 <ADC_ConfigureBoostMode+0x68>
 800260a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800260e:	d16d      	bne.n	80026ec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	60fb      	str	r3, [r7, #12]
        break;
 800261e:	e068      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
        break;
 8002626:	e064      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002628:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f004 fbcc 	bl	8006dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8002634:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800263e:	d051      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x13c>
 8002640:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002644:	d854      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 8002646:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800264a:	d047      	beq.n	80026dc <ADC_ConfigureBoostMode+0x134>
 800264c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002650:	d84e      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 8002652:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002656:	d03d      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x12c>
 8002658:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800265c:	d848      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002662:	d033      	beq.n	80026cc <ADC_ConfigureBoostMode+0x124>
 8002664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002668:	d842      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 800266a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800266e:	d029      	beq.n	80026c4 <ADC_ConfigureBoostMode+0x11c>
 8002670:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002674:	d83c      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 8002676:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800267a:	d01a      	beq.n	80026b2 <ADC_ConfigureBoostMode+0x10a>
 800267c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002680:	d836      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 8002682:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002686:	d014      	beq.n	80026b2 <ADC_ConfigureBoostMode+0x10a>
 8002688:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800268c:	d830      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 800268e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002692:	d00e      	beq.n	80026b2 <ADC_ConfigureBoostMode+0x10a>
 8002694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002698:	d82a      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 800269a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800269e:	d008      	beq.n	80026b2 <ADC_ConfigureBoostMode+0x10a>
 80026a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026a4:	d824      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x148>
 80026a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026aa:	d002      	beq.n	80026b2 <ADC_ConfigureBoostMode+0x10a>
 80026ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026b0:	d11e      	bne.n	80026f0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	60fb      	str	r3, [r7, #12]
        break;
 80026c2:	e016      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
        break;
 80026ca:	e012      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	60fb      	str	r3, [r7, #12]
        break;
 80026d2:	e00e      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e00a      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	09db      	lsrs	r3, r3, #7
 80026e0:	60fb      	str	r3, [r7, #12]
        break;
 80026e2:	e006      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e002      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026f0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026f2:	f7ff f8ad 	bl	8001850 <HAL_GetREVID>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d815      	bhi.n	800272c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a2b      	ldr	r2, [pc, #172]	@ (80027b0 <ADC_ConfigureBoostMode+0x208>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d908      	bls.n	800271a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002716:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002718:	e03e      	b.n	8002798 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	e035      	b.n	8002798 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a1f      	ldr	r2, [pc, #124]	@ (80027b4 <ADC_ConfigureBoostMode+0x20c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d808      	bhi.n	800274c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002748:	609a      	str	r2, [r3, #8]
}
 800274a:	e025      	b.n	8002798 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a1a      	ldr	r2, [pc, #104]	@ (80027b8 <ADC_ConfigureBoostMode+0x210>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d80a      	bhi.n	800276a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	e016      	b.n	8002798 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <ADC_ConfigureBoostMode+0x214>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d80a      	bhi.n	8002788 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002784:	609a      	str	r2, [r3, #8]
}
 8002786:	e007      	b.n	8002798 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40022100 	.word	0x40022100
 80027a8:	40022300 	.word	0x40022300
 80027ac:	58026300 	.word	0x58026300
 80027b0:	01312d00 	.word	0x01312d00
 80027b4:	005f5e10 	.word	0x005f5e10
 80027b8:	00bebc20 	.word	0x00bebc20
 80027bc:	017d7840 	.word	0x017d7840

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <__NVIC_SetPriorityGrouping+0x40>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <__NVIC_SetPriorityGrouping+0x40>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	05fa0000 	.word	0x05fa0000

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <__NVIC_EnableIRQ+0x38>)
 800283e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	@ (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
         );
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff8e 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff29 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002984:	f7ff ff40 	bl	8002808 <__NVIC_GetPriorityGrouping>
 8002988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f7ff ff90 	bl	80028b4 <NVIC_EncodePriority>
 8002994:	4602      	mov	r2, r0
 8002996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff5f 	bl	8002860 <__NVIC_SetPriority>
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff33 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ffa4 	bl	800291c <SysTick_Config>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7fe ff02 	bl	80017f0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e316      	b.n	8003026 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a66      	ldr	r2, [pc, #408]	@ (8002b98 <HAL_DMA_Init+0x1b8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d04a      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_DMA_Init+0x1bc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d045      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a63      	ldr	r2, [pc, #396]	@ (8002ba0 <HAL_DMA_Init+0x1c0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d040      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a62      	ldr	r2, [pc, #392]	@ (8002ba4 <HAL_DMA_Init+0x1c4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d03b      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a60      	ldr	r2, [pc, #384]	@ (8002ba8 <HAL_DMA_Init+0x1c8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d036      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bac <HAL_DMA_Init+0x1cc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d031      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb0 <HAL_DMA_Init+0x1d0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02c      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb4 <HAL_DMA_Init+0x1d4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d027      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <HAL_DMA_Init+0x1d8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a59      	ldr	r2, [pc, #356]	@ (8002bbc <HAL_DMA_Init+0x1dc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d01d      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a57      	ldr	r2, [pc, #348]	@ (8002bc0 <HAL_DMA_Init+0x1e0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a56      	ldr	r2, [pc, #344]	@ (8002bc4 <HAL_DMA_Init+0x1e4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a54      	ldr	r2, [pc, #336]	@ (8002bc8 <HAL_DMA_Init+0x1e8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a53      	ldr	r2, [pc, #332]	@ (8002bcc <HAL_DMA_Init+0x1ec>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a51      	ldr	r2, [pc, #324]	@ (8002bd0 <HAL_DMA_Init+0x1f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Init+0xb8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a50      	ldr	r2, [pc, #320]	@ (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Init+0xbc>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_DMA_Init+0xbe>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 813b 	beq.w	8002d1a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a37      	ldr	r2, [pc, #220]	@ (8002b98 <HAL_DMA_Init+0x1b8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d04a      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a36      	ldr	r2, [pc, #216]	@ (8002b9c <HAL_DMA_Init+0x1bc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d045      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_DMA_Init+0x1c0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d040      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <HAL_DMA_Init+0x1c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d03b      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a31      	ldr	r2, [pc, #196]	@ (8002ba8 <HAL_DMA_Init+0x1c8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d036      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a30      	ldr	r2, [pc, #192]	@ (8002bac <HAL_DMA_Init+0x1cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d031      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <HAL_DMA_Init+0x1d0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02c      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <HAL_DMA_Init+0x1d4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d027      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <HAL_DMA_Init+0x1d8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_DMA_Init+0x1dc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01d      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_DMA_Init+0x1e0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a27      	ldr	r2, [pc, #156]	@ (8002bc4 <HAL_DMA_Init+0x1e4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <HAL_DMA_Init+0x1e8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <HAL_DMA_Init+0x1ec>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a22      	ldr	r2, [pc, #136]	@ (8002bd0 <HAL_DMA_Init+0x1f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_DMA_Init+0x174>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a21      	ldr	r2, [pc, #132]	@ (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <HAL_DMA_Init+0x186>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e007      	b.n	8002b76 <HAL_DMA_Init+0x196>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b76:	e02f      	b.n	8002bd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b78:	f7fe fe3a 	bl	80017f0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d928      	bls.n	8002bd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e246      	b.n	8003026 <HAL_DMA_Init+0x646>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1c8      	bne.n	8002b78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4b83      	ldr	r3, [pc, #524]	@ (8002e00 <HAL_DMA_Init+0x420>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d107      	bne.n	8002c3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4313      	orrs	r3, r2
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c3c:	4b71      	ldr	r3, [pc, #452]	@ (8002e04 <HAL_DMA_Init+0x424>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b71      	ldr	r3, [pc, #452]	@ (8002e08 <HAL_DMA_Init+0x428>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c48:	d328      	bcc.n	8002c9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b28      	cmp	r3, #40	@ 0x28
 8002c50:	d903      	bls.n	8002c5a <HAL_DMA_Init+0x27a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c58:	d917      	bls.n	8002c8a <HAL_DMA_Init+0x2aa>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c60:	d903      	bls.n	8002c6a <HAL_DMA_Init+0x28a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b42      	cmp	r3, #66	@ 0x42
 8002c68:	d90f      	bls.n	8002c8a <HAL_DMA_Init+0x2aa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b46      	cmp	r3, #70	@ 0x46
 8002c70:	d903      	bls.n	8002c7a <HAL_DMA_Init+0x29a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b48      	cmp	r3, #72	@ 0x48
 8002c78:	d907      	bls.n	8002c8a <HAL_DMA_Init+0x2aa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002c80:	d905      	bls.n	8002c8e <HAL_DMA_Init+0x2ae>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b52      	cmp	r3, #82	@ 0x52
 8002c88:	d801      	bhi.n	8002c8e <HAL_DMA_Init+0x2ae>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_Init+0x2b0>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0307 	bic.w	r3, r3, #7
 8002cb2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d117      	bne.n	8002cf6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f001 f9b9 	bl	8004050 <DMA_CheckFifoParam>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e197      	b.n	8003026 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f001 f8f4 	bl	8003eec <DMA_CalcBaseAndBitshift>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	223f      	movs	r2, #63	@ 0x3f
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e0cd      	b.n	8002eb6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e0c <HAL_DMA_Init+0x42c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a39      	ldr	r2, [pc, #228]	@ (8002e10 <HAL_DMA_Init+0x430>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <HAL_DMA_Init+0x434>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d018      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a36      	ldr	r2, [pc, #216]	@ (8002e18 <HAL_DMA_Init+0x438>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a35      	ldr	r2, [pc, #212]	@ (8002e1c <HAL_DMA_Init+0x43c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a33      	ldr	r2, [pc, #204]	@ (8002e20 <HAL_DMA_Init+0x440>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a32      	ldr	r2, [pc, #200]	@ (8002e24 <HAL_DMA_Init+0x444>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_Init+0x38a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a30      	ldr	r2, [pc, #192]	@ (8002e28 <HAL_DMA_Init+0x448>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_DMA_Init+0x38e>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_Init+0x390>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8097 	beq.w	8002ea4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <HAL_DMA_Init+0x42c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d021      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a22      	ldr	r2, [pc, #136]	@ (8002e10 <HAL_DMA_Init+0x430>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01c      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a21      	ldr	r2, [pc, #132]	@ (8002e14 <HAL_DMA_Init+0x434>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d017      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	@ (8002e18 <HAL_DMA_Init+0x438>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_DMA_Init+0x43c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <HAL_DMA_Init+0x440>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d008      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <HAL_DMA_Init+0x444>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_Init+0x3e4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <HAL_DMA_Init+0x448>)
 8002dc2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <HAL_DMA_Init+0x44c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d021      	beq.n	8002e30 <HAL_DMA_Init+0x450>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b80      	cmp	r3, #128	@ 0x80
 8002df2:	d102      	bne.n	8002dfa <HAL_DMA_Init+0x41a>
 8002df4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002df8:	e01b      	b.n	8002e32 <HAL_DMA_Init+0x452>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e019      	b.n	8002e32 <HAL_DMA_Init+0x452>
 8002dfe:	bf00      	nop
 8002e00:	fe10803f 	.word	0xfe10803f
 8002e04:	5c001000 	.word	0x5c001000
 8002e08:	ffff0000 	.word	0xffff0000
 8002e0c:	58025408 	.word	0x58025408
 8002e10:	5802541c 	.word	0x5802541c
 8002e14:	58025430 	.word	0x58025430
 8002e18:	58025444 	.word	0x58025444
 8002e1c:	58025458 	.word	0x58025458
 8002e20:	5802546c 	.word	0x5802546c
 8002e24:	58025480 	.word	0x58025480
 8002e28:	58025494 	.word	0x58025494
 8002e2c:	fffe000f 	.word	0xfffe000f
 8002e30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b6e      	ldr	r3, [pc, #440]	@ (8003030 <HAL_DMA_Init+0x650>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003034 <HAL_DMA_Init+0x654>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	009a      	lsls	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 f82f 	bl	8003eec <DMA_CalcBaseAndBitshift>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	e008      	b.n	8002eb6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2240      	movs	r2, #64	@ 0x40
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0b7      	b.n	8003026 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_DMA_Init+0x658>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800303c <HAL_DMA_Init+0x65c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5c      	ldr	r2, [pc, #368]	@ (8003040 <HAL_DMA_Init+0x660>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5a      	ldr	r2, [pc, #360]	@ (8003044 <HAL_DMA_Init+0x664>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a59      	ldr	r2, [pc, #356]	@ (8003048 <HAL_DMA_Init+0x668>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a57      	ldr	r2, [pc, #348]	@ (800304c <HAL_DMA_Init+0x66c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a56      	ldr	r2, [pc, #344]	@ (8003050 <HAL_DMA_Init+0x670>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a54      	ldr	r2, [pc, #336]	@ (8003054 <HAL_DMA_Init+0x674>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a53      	ldr	r2, [pc, #332]	@ (8003058 <HAL_DMA_Init+0x678>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a51      	ldr	r2, [pc, #324]	@ (800305c <HAL_DMA_Init+0x67c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a50      	ldr	r2, [pc, #320]	@ (8003060 <HAL_DMA_Init+0x680>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	@ (8003064 <HAL_DMA_Init+0x684>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4d      	ldr	r2, [pc, #308]	@ (8003068 <HAL_DMA_Init+0x688>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800306c <HAL_DMA_Init+0x68c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4a      	ldr	r2, [pc, #296]	@ (8003070 <HAL_DMA_Init+0x690>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a48      	ldr	r2, [pc, #288]	@ (8003074 <HAL_DMA_Init+0x694>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	@ (8003078 <HAL_DMA_Init+0x698>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a45      	ldr	r2, [pc, #276]	@ (800307c <HAL_DMA_Init+0x69c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a44      	ldr	r2, [pc, #272]	@ (8003080 <HAL_DMA_Init+0x6a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a42      	ldr	r2, [pc, #264]	@ (8003084 <HAL_DMA_Init+0x6a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a41      	ldr	r2, [pc, #260]	@ (8003088 <HAL_DMA_Init+0x6a8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <HAL_DMA_Init+0x6ac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3e      	ldr	r2, [pc, #248]	@ (8003090 <HAL_DMA_Init+0x6b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Init+0x5c6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003094 <HAL_DMA_Init+0x6b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Init+0x5ca>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_DMA_Init+0x5cc>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d032      	beq.n	8003016 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 f8c9 	bl	8004148 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d102      	bne.n	8002fc4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002fd8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_DMA_Init+0x624>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d80c      	bhi.n	8003004 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 f946 	bl	800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e008      	b.n	8003016 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	a7fdabf8 	.word	0xa7fdabf8
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494

08003098 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	@ 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a4:	4b67      	ldr	r3, [pc, #412]	@ (8003244 <HAL_DMA_IRQHandler+0x1ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a67      	ldr	r2, [pc, #412]	@ (8003248 <HAL_DMA_IRQHandler+0x1b0>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5f      	ldr	r2, [pc, #380]	@ (800324c <HAL_DMA_IRQHandler+0x1b4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04a      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_DMA_IRQHandler+0x1b8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d045      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003254 <HAL_DMA_IRQHandler+0x1bc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003258 <HAL_DMA_IRQHandler+0x1c0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03b      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a59      	ldr	r2, [pc, #356]	@ (800325c <HAL_DMA_IRQHandler+0x1c4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a57      	ldr	r2, [pc, #348]	@ (8003260 <HAL_DMA_IRQHandler+0x1c8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a56      	ldr	r2, [pc, #344]	@ (8003264 <HAL_DMA_IRQHandler+0x1cc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d02c      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a54      	ldr	r2, [pc, #336]	@ (8003268 <HAL_DMA_IRQHandler+0x1d0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d027      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a53      	ldr	r2, [pc, #332]	@ (800326c <HAL_DMA_IRQHandler+0x1d4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a51      	ldr	r2, [pc, #324]	@ (8003270 <HAL_DMA_IRQHandler+0x1d8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a50      	ldr	r2, [pc, #320]	@ (8003274 <HAL_DMA_IRQHandler+0x1dc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4e      	ldr	r2, [pc, #312]	@ (8003278 <HAL_DMA_IRQHandler+0x1e0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4d      	ldr	r2, [pc, #308]	@ (800327c <HAL_DMA_IRQHandler+0x1e4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4b      	ldr	r2, [pc, #300]	@ (8003280 <HAL_DMA_IRQHandler+0x1e8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4a      	ldr	r2, [pc, #296]	@ (8003284 <HAL_DMA_IRQHandler+0x1ec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a48      	ldr	r2, [pc, #288]	@ (8003288 <HAL_DMA_IRQHandler+0x1f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_DMA_IRQHandler+0xd6>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_DMA_IRQHandler+0xd8>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 842b 	beq.w	80039cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80a2 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2e      	ldr	r2, [pc, #184]	@ (800324c <HAL_DMA_IRQHandler+0x1b4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	@ (8003250 <HAL_DMA_IRQHandler+0x1b8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003254 <HAL_DMA_IRQHandler+0x1bc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <HAL_DMA_IRQHandler+0x1c0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a28      	ldr	r2, [pc, #160]	@ (800325c <HAL_DMA_IRQHandler+0x1c4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a27      	ldr	r2, [pc, #156]	@ (8003260 <HAL_DMA_IRQHandler+0x1c8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a25      	ldr	r2, [pc, #148]	@ (8003264 <HAL_DMA_IRQHandler+0x1cc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <HAL_DMA_IRQHandler+0x1d0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_DMA_IRQHandler+0x1d4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_DMA_IRQHandler+0x1d8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <HAL_DMA_IRQHandler+0x1dc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_DMA_IRQHandler+0x1e0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_DMA_IRQHandler+0x1e4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_DMA_IRQHandler+0x1e8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <HAL_DMA_IRQHandler+0x1ec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_DMA_IRQHandler+0x1f0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d12f      	bne.n	800328c <HAL_DMA_IRQHandler+0x1f4>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e02e      	b.n	80032a0 <HAL_DMA_IRQHandler+0x208>
 8003242:	bf00      	nop
 8003244:	24000004 	.word	0x24000004
 8003248:	1b4e81b5 	.word	0x1b4e81b5
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2208      	movs	r2, #8
 80032be:	409a      	lsls	r2, r3
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d06e      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a69      	ldr	r2, [pc, #420]	@ (8003490 <HAL_DMA_IRQHandler+0x3f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a67      	ldr	r2, [pc, #412]	@ (8003494 <HAL_DMA_IRQHandler+0x3fc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a66      	ldr	r2, [pc, #408]	@ (8003498 <HAL_DMA_IRQHandler+0x400>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a64      	ldr	r2, [pc, #400]	@ (800349c <HAL_DMA_IRQHandler+0x404>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a63      	ldr	r2, [pc, #396]	@ (80034a0 <HAL_DMA_IRQHandler+0x408>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a61      	ldr	r2, [pc, #388]	@ (80034a4 <HAL_DMA_IRQHandler+0x40c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a60      	ldr	r2, [pc, #384]	@ (80034a8 <HAL_DMA_IRQHandler+0x410>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5e      	ldr	r2, [pc, #376]	@ (80034ac <HAL_DMA_IRQHandler+0x414>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5d      	ldr	r2, [pc, #372]	@ (80034b0 <HAL_DMA_IRQHandler+0x418>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5b      	ldr	r2, [pc, #364]	@ (80034b4 <HAL_DMA_IRQHandler+0x41c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5a      	ldr	r2, [pc, #360]	@ (80034b8 <HAL_DMA_IRQHandler+0x420>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a58      	ldr	r2, [pc, #352]	@ (80034bc <HAL_DMA_IRQHandler+0x424>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a57      	ldr	r2, [pc, #348]	@ (80034c0 <HAL_DMA_IRQHandler+0x428>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a55      	ldr	r2, [pc, #340]	@ (80034c4 <HAL_DMA_IRQHandler+0x42c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a54      	ldr	r2, [pc, #336]	@ (80034c8 <HAL_DMA_IRQHandler+0x430>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_DMA_IRQHandler+0x434>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10a      	bne.n	800339c <HAL_DMA_IRQHandler+0x304>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e003      	b.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 808f 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <HAL_DMA_IRQHandler+0x3f8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d04a      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003494 <HAL_DMA_IRQHandler+0x3fc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d045      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_DMA_IRQHandler+0x400>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d040      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a27      	ldr	r2, [pc, #156]	@ (800349c <HAL_DMA_IRQHandler+0x404>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03b      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_DMA_IRQHandler+0x408>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d036      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a24      	ldr	r2, [pc, #144]	@ (80034a4 <HAL_DMA_IRQHandler+0x40c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d031      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_DMA_IRQHandler+0x410>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d02c      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a21      	ldr	r2, [pc, #132]	@ (80034ac <HAL_DMA_IRQHandler+0x414>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d027      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_DMA_IRQHandler+0x418>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <HAL_DMA_IRQHandler+0x41c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_DMA_IRQHandler+0x420>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_DMA_IRQHandler+0x424>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <HAL_DMA_IRQHandler+0x428>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a18      	ldr	r2, [pc, #96]	@ (80034c4 <HAL_DMA_IRQHandler+0x42c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_DMA_IRQHandler+0x430>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <HAL_DMA_IRQHandler+0x434>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12a      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x438>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e023      	b.n	80034d8 <HAL_DMA_IRQHandler+0x440>
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2204      	movs	r2, #4
 80034e6:	409a      	lsls	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2210      	movs	r2, #16
 8003502:	409a      	lsls	r2, r3
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a85      	ldr	r2, [pc, #532]	@ (8003728 <HAL_DMA_IRQHandler+0x690>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a83      	ldr	r2, [pc, #524]	@ (800372c <HAL_DMA_IRQHandler+0x694>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a82      	ldr	r2, [pc, #520]	@ (8003730 <HAL_DMA_IRQHandler+0x698>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a80      	ldr	r2, [pc, #512]	@ (8003734 <HAL_DMA_IRQHandler+0x69c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7f      	ldr	r2, [pc, #508]	@ (8003738 <HAL_DMA_IRQHandler+0x6a0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7d      	ldr	r2, [pc, #500]	@ (800373c <HAL_DMA_IRQHandler+0x6a4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7c      	ldr	r2, [pc, #496]	@ (8003740 <HAL_DMA_IRQHandler+0x6a8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7a      	ldr	r2, [pc, #488]	@ (8003744 <HAL_DMA_IRQHandler+0x6ac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a79      	ldr	r2, [pc, #484]	@ (8003748 <HAL_DMA_IRQHandler+0x6b0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a77      	ldr	r2, [pc, #476]	@ (800374c <HAL_DMA_IRQHandler+0x6b4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a76      	ldr	r2, [pc, #472]	@ (8003750 <HAL_DMA_IRQHandler+0x6b8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a74      	ldr	r2, [pc, #464]	@ (8003754 <HAL_DMA_IRQHandler+0x6bc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	@ (8003758 <HAL_DMA_IRQHandler+0x6c0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a71      	ldr	r2, [pc, #452]	@ (800375c <HAL_DMA_IRQHandler+0x6c4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a70      	ldr	r2, [pc, #448]	@ (8003760 <HAL_DMA_IRQHandler+0x6c8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003764 <HAL_DMA_IRQHandler+0x6cc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10a      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x52c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e009      	b.n	80035d8 <HAL_DMA_IRQHandler+0x540>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03e      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2210      	movs	r2, #16
 80035e6:	409a      	lsls	r2, r3
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d024      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e01f      	b.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01b      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
 800362a:	e016      	b.n	800365a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0208 	bic.w	r2, r2, #8
 8003648:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2220      	movs	r2, #32
 8003664:	409a      	lsls	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8110 	beq.w	8003890 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <HAL_DMA_IRQHandler+0x690>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <HAL_DMA_IRQHandler+0x694>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d045      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a29      	ldr	r2, [pc, #164]	@ (8003730 <HAL_DMA_IRQHandler+0x698>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	@ (8003734 <HAL_DMA_IRQHandler+0x69c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_DMA_IRQHandler+0x6a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d036      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a25      	ldr	r2, [pc, #148]	@ (800373c <HAL_DMA_IRQHandler+0x6a4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d031      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	@ (8003740 <HAL_DMA_IRQHandler+0x6a8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_DMA_IRQHandler+0x6ac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d027      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <HAL_DMA_IRQHandler+0x6b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	@ (800374c <HAL_DMA_IRQHandler+0x6b4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003750 <HAL_DMA_IRQHandler+0x6b8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <HAL_DMA_IRQHandler+0x6bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <HAL_DMA_IRQHandler+0x6c0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a19      	ldr	r2, [pc, #100]	@ (800375c <HAL_DMA_IRQHandler+0x6c4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	@ (8003760 <HAL_DMA_IRQHandler+0x6c8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a16      	ldr	r2, [pc, #88]	@ (8003764 <HAL_DMA_IRQHandler+0x6cc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d12b      	bne.n	8003768 <HAL_DMA_IRQHandler+0x6d0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e02a      	b.n	800377c <HAL_DMA_IRQHandler+0x6e4>
 8003726:	bf00      	nop
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8087 	beq.w	8003890 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b04      	cmp	r3, #4
 800379c:	d139      	bne.n	8003812 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x736>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	223f      	movs	r2, #63	@ 0x3f
 80037e8:	409a      	lsls	r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 834a 	beq.w	8003e9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
          }
          return;
 8003810:	e344      	b.n	8003e9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02c      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e027      	b.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e01e      	b.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0210 	bic.w	r2, r2, #16
 800386e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8306 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8088 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa0 <HAL_DMA_IRQHandler+0xa08>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a79      	ldr	r2, [pc, #484]	@ (8003aa4 <HAL_DMA_IRQHandler+0xa0c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a77      	ldr	r2, [pc, #476]	@ (8003aa8 <HAL_DMA_IRQHandler+0xa10>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a76      	ldr	r2, [pc, #472]	@ (8003aac <HAL_DMA_IRQHandler+0xa14>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a74      	ldr	r2, [pc, #464]	@ (8003ab0 <HAL_DMA_IRQHandler+0xa18>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a73      	ldr	r2, [pc, #460]	@ (8003ab4 <HAL_DMA_IRQHandler+0xa1c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a71      	ldr	r2, [pc, #452]	@ (8003ab8 <HAL_DMA_IRQHandler+0xa20>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a70      	ldr	r2, [pc, #448]	@ (8003abc <HAL_DMA_IRQHandler+0xa24>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac0 <HAL_DMA_IRQHandler+0xa28>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa2c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa30>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6a      	ldr	r2, [pc, #424]	@ (8003acc <HAL_DMA_IRQHandler+0xa34>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a68      	ldr	r2, [pc, #416]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa38>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a67      	ldr	r2, [pc, #412]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa3c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a65      	ldr	r2, [pc, #404]	@ (8003ad8 <HAL_DMA_IRQHandler+0xa40>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a64      	ldr	r2, [pc, #400]	@ (8003adc <HAL_DMA_IRQHandler+0xa44>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_IRQHandler+0x8ca>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <HAL_DMA_IRQHandler+0x8da>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397a:	429a      	cmp	r2, r3
 800397c:	d307      	bcc.n	800398e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f2      	bne.n	8003972 <HAL_DMA_IRQHandler+0x8da>
 800398c:	e000      	b.n	8003990 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800398e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80039a6:	e003      	b.n	80039b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8272 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e26c      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a43      	ldr	r2, [pc, #268]	@ (8003ae0 <HAL_DMA_IRQHandler+0xa48>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_DMA_IRQHandler+0xa4c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a40      	ldr	r2, [pc, #256]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa50>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	@ (8003aec <HAL_DMA_IRQHandler+0xa54>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3d      	ldr	r2, [pc, #244]	@ (8003af0 <HAL_DMA_IRQHandler+0xa58>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <HAL_DMA_IRQHandler+0xa5c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003af8 <HAL_DMA_IRQHandler+0xa60>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	@ (8003afc <HAL_DMA_IRQHandler+0xa64>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x988>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_DMA_IRQHandler+0x98a>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 823f 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80cd 	beq.w	8003be0 <HAL_DMA_IRQHandler+0xb48>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80c7 	beq.w	8003be0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d049      	beq.n	8003b00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8210 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a88:	e20a      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8206 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9c:	e200      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
 8003a9e:	bf00      	nop
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	58025408 	.word	0x58025408
 8003ae4:	5802541c 	.word	0x5802541c
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025458 	.word	0x58025458
 8003af4:	5802546c 	.word	0x5802546c
 8003af8:	58025480 	.word	0x58025480
 8003afc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d160      	bne.n	8003bcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d0c <HAL_DMA_IRQHandler+0xc74>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7d      	ldr	r2, [pc, #500]	@ (8003d10 <HAL_DMA_IRQHandler+0xc78>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7c      	ldr	r2, [pc, #496]	@ (8003d14 <HAL_DMA_IRQHandler+0xc7c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d18 <HAL_DMA_IRQHandler+0xc80>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a79      	ldr	r2, [pc, #484]	@ (8003d1c <HAL_DMA_IRQHandler+0xc84>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a77      	ldr	r2, [pc, #476]	@ (8003d20 <HAL_DMA_IRQHandler+0xc88>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a76      	ldr	r2, [pc, #472]	@ (8003d24 <HAL_DMA_IRQHandler+0xc8c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a74      	ldr	r2, [pc, #464]	@ (8003d28 <HAL_DMA_IRQHandler+0xc90>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a73      	ldr	r2, [pc, #460]	@ (8003d2c <HAL_DMA_IRQHandler+0xc94>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a71      	ldr	r2, [pc, #452]	@ (8003d30 <HAL_DMA_IRQHandler+0xc98>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a70      	ldr	r2, [pc, #448]	@ (8003d34 <HAL_DMA_IRQHandler+0xc9c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d38 <HAL_DMA_IRQHandler+0xca0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6d      	ldr	r2, [pc, #436]	@ (8003d3c <HAL_DMA_IRQHandler+0xca4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6b      	ldr	r2, [pc, #428]	@ (8003d40 <HAL_DMA_IRQHandler+0xca8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d44 <HAL_DMA_IRQHandler+0xcac>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	@ (8003d48 <HAL_DMA_IRQHandler+0xcb0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_IRQHandler+0xb24>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0208 	bic.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e007      	b.n	8003bcc <HAL_DMA_IRQHandler+0xb34>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8165 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bde:	e15f      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2202      	movs	r2, #2
 8003bea:	409a      	lsls	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80c5 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xce8>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80bf 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 813a 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c38:	e134      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8130 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4c:	e12a      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8089 	bne.w	8003d6c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <HAL_DMA_IRQHandler+0xc74>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a29      	ldr	r2, [pc, #164]	@ (8003d10 <HAL_DMA_IRQHandler+0xc78>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <HAL_DMA_IRQHandler+0xc7c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <HAL_DMA_IRQHandler+0xc80>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <HAL_DMA_IRQHandler+0xc84>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a23      	ldr	r2, [pc, #140]	@ (8003d20 <HAL_DMA_IRQHandler+0xc88>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <HAL_DMA_IRQHandler+0xc8c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	@ (8003d28 <HAL_DMA_IRQHandler+0xc90>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	@ (8003d2c <HAL_DMA_IRQHandler+0xc94>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_DMA_IRQHandler+0xc98>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_DMA_IRQHandler+0xc9c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d38 <HAL_DMA_IRQHandler+0xca0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <HAL_DMA_IRQHandler+0xca4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	@ (8003d40 <HAL_DMA_IRQHandler+0xca8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a16      	ldr	r2, [pc, #88]	@ (8003d44 <HAL_DMA_IRQHandler+0xcac>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	@ (8003d48 <HAL_DMA_IRQHandler+0xcb0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d128      	bne.n	8003d4c <HAL_DMA_IRQHandler+0xcb4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0214 	bic.w	r2, r2, #20
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e027      	b.n	8003d5c <HAL_DMA_IRQHandler+0xcc4>
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 020a 	bic.w	r2, r2, #10
 8003d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8097 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d7e:	e091      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2208      	movs	r2, #8
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8088 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8082 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a41      	ldr	r2, [pc, #260]	@ (8003eac <HAL_DMA_IRQHandler+0xe14>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <HAL_DMA_IRQHandler+0xe18>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb4 <HAL_DMA_IRQHandler+0xe1c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb8 <HAL_DMA_IRQHandler+0xe20>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	@ (8003ebc <HAL_DMA_IRQHandler+0xe24>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	@ (8003ec0 <HAL_DMA_IRQHandler+0xe28>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a38      	ldr	r2, [pc, #224]	@ (8003ec4 <HAL_DMA_IRQHandler+0xe2c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a36      	ldr	r2, [pc, #216]	@ (8003ec8 <HAL_DMA_IRQHandler+0xe30>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a35      	ldr	r2, [pc, #212]	@ (8003ecc <HAL_DMA_IRQHandler+0xe34>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a33      	ldr	r2, [pc, #204]	@ (8003ed0 <HAL_DMA_IRQHandler+0xe38>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	@ (8003ed4 <HAL_DMA_IRQHandler+0xe3c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a30      	ldr	r2, [pc, #192]	@ (8003ed8 <HAL_DMA_IRQHandler+0xe40>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003edc <HAL_DMA_IRQHandler+0xe44>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee0 <HAL_DMA_IRQHandler+0xe48>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee4 <HAL_DMA_IRQHandler+0xe4c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee8 <HAL_DMA_IRQHandler+0xe50>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0xdbc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 021c 	bic.w	r2, r2, #28
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <HAL_DMA_IRQHandler+0xdcc>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020e 	bic.w	r2, r2, #14
 8003e62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e004      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ea6:	3728      	adds	r7, #40	@ 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40020010 	.word	0x40020010
 8003eb0:	40020028 	.word	0x40020028
 8003eb4:	40020040 	.word	0x40020040
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	40020070 	.word	0x40020070
 8003ec0:	40020088 	.word	0x40020088
 8003ec4:	400200a0 	.word	0x400200a0
 8003ec8:	400200b8 	.word	0x400200b8
 8003ecc:	40020410 	.word	0x40020410
 8003ed0:	40020428 	.word	0x40020428
 8003ed4:	40020440 	.word	0x40020440
 8003ed8:	40020458 	.word	0x40020458
 8003edc:	40020470 	.word	0x40020470
 8003ee0:	40020488 	.word	0x40020488
 8003ee4:	400204a0 	.word	0x400204a0
 8003ee8:	400204b8 	.word	0x400204b8

08003eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	@ (8004004 <DMA_CalcBaseAndBitshift+0x118>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	@ (8004008 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800400c <DMA_CalcBaseAndBitshift+0x120>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	@ (8004010 <DMA_CalcBaseAndBitshift+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	@ (8004014 <DMA_CalcBaseAndBitshift+0x128>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004018 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	@ (800401c <DMA_CalcBaseAndBitshift+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	@ (8004020 <DMA_CalcBaseAndBitshift+0x134>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a36      	ldr	r2, [pc, #216]	@ (8004024 <DMA_CalcBaseAndBitshift+0x138>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	@ (8004028 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	@ (800402c <DMA_CalcBaseAndBitshift+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	@ (8004030 <DMA_CalcBaseAndBitshift+0x144>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	@ (8004034 <DMA_CalcBaseAndBitshift+0x148>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004038 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <DMA_CalcBaseAndBitshift+0x150>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <DMA_CalcBaseAndBitshift+0x154>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <DMA_CalcBaseAndBitshift+0xac>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <DMA_CalcBaseAndBitshift+0xae>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3b10      	subs	r3, #16
 8003fa6:	4a27      	ldr	r2, [pc, #156]	@ (8004044 <DMA_CalcBaseAndBitshift+0x158>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	4a24      	ldr	r2, [pc, #144]	@ (8004048 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d908      	bls.n	8003fd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800404c <DMA_CalcBaseAndBitshift+0x160>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fd6:	e00d      	b.n	8003ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <DMA_CalcBaseAndBitshift+0x160>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe6:	e005      	b.n	8003ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	aaaaaaab 	.word	0xaaaaaaab
 8004048:	08009f14 	.word	0x08009f14
 800404c:	fffffc00 	.word	0xfffffc00

08004050 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d120      	bne.n	80040a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	2b03      	cmp	r3, #3
 800406a:	d858      	bhi.n	800411e <DMA_CheckFifoParam+0xce>
 800406c:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <DMA_CheckFifoParam+0x24>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004097 	.word	0x08004097
 800407c:	08004085 	.word	0x08004085
 8004080:	0800411f 	.word	0x0800411f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d048      	beq.n	8004122 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004094:	e045      	b.n	8004122 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800409e:	d142      	bne.n	8004126 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040a4:	e03f      	b.n	8004126 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ae:	d123      	bne.n	80040f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d838      	bhi.n	800412a <DMA_CheckFifoParam+0xda>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <DMA_CheckFifoParam+0x70>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d7 	.word	0x080040d7
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	080040e9 	.word	0x080040e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
        break;
 80040d4:	e030      	b.n	8004138 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d025      	beq.n	800412e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e6:	e022      	b.n	800412e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f0:	d11f      	bne.n	8004132 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f6:	e01c      	b.n	8004132 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d902      	bls.n	8004106 <DMA_CheckFifoParam+0xb6>
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004104:	e018      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
        break;
 800410a:	e015      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
    break;
 800411c:	e00b      	b.n	8004136 <DMA_CheckFifoParam+0xe6>
        break;
 800411e:	bf00      	nop
 8004120:	e00a      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004122:	bf00      	nop
 8004124:	e008      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
    break;
 8004136:	bf00      	nop
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a38      	ldr	r2, [pc, #224]	@ (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a36      	ldr	r2, [pc, #216]	@ (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a33      	ldr	r2, [pc, #204]	@ (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a32      	ldr	r2, [pc, #200]	@ (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01a      	beq.n	80041e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b08      	subs	r3, #8
 80041b8:	4a28      	ldr	r2, [pc, #160]	@ (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4b26      	ldr	r3, [pc, #152]	@ (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041e4:	e024      	b.n	8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b10      	subs	r3, #16
 80041ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d806      	bhi.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d902      	bls.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3308      	adds	r3, #8
 800420c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a16      	ldr	r2, [pc, #88]	@ (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004220:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	58025408 	.word	0x58025408
 8004240:	5802541c 	.word	0x5802541c
 8004244:	58025430 	.word	0x58025430
 8004248:	58025444 	.word	0x58025444
 800424c:	58025458 	.word	0x58025458
 8004250:	5802546c 	.word	0x5802546c
 8004254:	58025480 	.word	0x58025480
 8004258:	58025494 	.word	0x58025494
 800425c:	cccccccd 	.word	0xcccccccd
 8004260:	16009600 	.word	0x16009600
 8004264:	58025880 	.word	0x58025880
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	400204b8 	.word	0x400204b8
 8004270:	4002040f 	.word	0x4002040f
 8004274:	10008200 	.word	0x10008200
 8004278:	40020880 	.word	0x40020880

0800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04a      	beq.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d847      	bhi.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	@ (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d01d      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	@ (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4b17      	ldr	r3, [pc, #92]	@ (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004304:	671a      	str	r2, [r3, #112]	@ 0x70
 8004306:	e009      	b.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4b14      	ldr	r3, [pc, #80]	@ (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a11      	ldr	r2, [pc, #68]	@ (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800431a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	58025408 	.word	0x58025408
 8004338:	5802541c 	.word	0x5802541c
 800433c:	58025430 	.word	0x58025430
 8004340:	58025444 	.word	0x58025444
 8004344:	58025458 	.word	0x58025458
 8004348:	5802546c 	.word	0x5802546c
 800434c:	58025480 	.word	0x58025480
 8004350:	58025494 	.word	0x58025494
 8004354:	1600963f 	.word	0x1600963f
 8004358:	58025940 	.word	0x58025940
 800435c:	1000823f 	.word	0x1000823f
 8004360:	40020940 	.word	0x40020940

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	@ 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004372:	4b89      	ldr	r3, [pc, #548]	@ (8004598 <HAL_GPIO_Init+0x234>)
 8004374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004376:	e194      	b.n	80046a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8186 	beq.w	800469c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d005      	beq.n	80043a8 <HAL_GPIO_Init+0x44>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d130      	bne.n	800440a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043de:	2201      	movs	r2, #1
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 0201 	and.w	r2, r3, #1
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b03      	cmp	r3, #3
 8004414:	d017      	beq.n	8004446 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	2203      	movs	r2, #3
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d123      	bne.n	800449a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	08da      	lsrs	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3208      	adds	r2, #8
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80e0 	beq.w	800469c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	4b2f      	ldr	r3, [pc, #188]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044e2:	4a2e      	ldr	r2, [pc, #184]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80044ec:	4b2b      	ldr	r3, [pc, #172]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a29      	ldr	r2, [pc, #164]	@ (80045a0 <HAL_GPIO_Init+0x23c>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a20      	ldr	r2, [pc, #128]	@ (80045a4 <HAL_GPIO_Init+0x240>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d052      	beq.n	80045cc <HAL_GPIO_Init+0x268>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1f      	ldr	r2, [pc, #124]	@ (80045a8 <HAL_GPIO_Init+0x244>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d031      	beq.n	8004592 <HAL_GPIO_Init+0x22e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	@ (80045ac <HAL_GPIO_Init+0x248>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x22a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <HAL_GPIO_Init+0x24c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x226>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_GPIO_Init+0x250>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1b      	ldr	r2, [pc, #108]	@ (80045b8 <HAL_GPIO_Init+0x254>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <HAL_GPIO_Init+0x258>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x21a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_GPIO_Init+0x25c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x216>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_GPIO_Init+0x260>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x212>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <HAL_GPIO_Init+0x264>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x20e>
 800456e:	2309      	movs	r3, #9
 8004570:	e02d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004572:	230a      	movs	r3, #10
 8004574:	e02b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004576:	2308      	movs	r3, #8
 8004578:	e029      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457a:	2307      	movs	r3, #7
 800457c:	e027      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457e:	2306      	movs	r3, #6
 8004580:	e025      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004582:	2305      	movs	r3, #5
 8004584:	e023      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004586:	2304      	movs	r3, #4
 8004588:	e021      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458a:	2303      	movs	r3, #3
 800458c:	e01f      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458e:	2302      	movs	r3, #2
 8004590:	e01d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004592:	2301      	movs	r3, #1
 8004594:	e01b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004596:	bf00      	nop
 8004598:	58000080 	.word	0x58000080
 800459c:	58024400 	.word	0x58024400
 80045a0:	58000400 	.word	0x58000400
 80045a4:	58020000 	.word	0x58020000
 80045a8:	58020400 	.word	0x58020400
 80045ac:	58020800 	.word	0x58020800
 80045b0:	58020c00 	.word	0x58020c00
 80045b4:	58021000 	.word	0x58021000
 80045b8:	58021400 	.word	0x58021400
 80045bc:	58021800 	.word	0x58021800
 80045c0:	58021c00 	.word	0x58021c00
 80045c4:	58022000 	.word	0x58022000
 80045c8:	58022400 	.word	0x58022400
 80045cc:	2300      	movs	r3, #0
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045de:	4938      	ldr	r1, [pc, #224]	@ (80046c0 <HAL_GPIO_Init+0x35c>)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f ae63 	bne.w	8004378 <HAL_GPIO_Init+0x14>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	@ 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58000400 	.word	0x58000400

080046c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
 80046d0:	4613      	mov	r3, r2
 80046d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046d4:	787b      	ldrb	r3, [r7, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046e0:	e003      	b.n	80046ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	041a      	lsls	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	619a      	str	r2, [r3, #24]
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0fe      	b.n	8004906 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fc ff3b 	bl	8001598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f005 f91a 	bl	8009968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	7c1a      	ldrb	r2, [r3, #16]
 800473c:	f88d 2000 	strb.w	r2, [sp]
 8004740:	3304      	adds	r3, #4
 8004742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004744:	f005 f89e 	bl	8009884 <USB_CoreInit>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0d5      	b.n	8004906 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f005 f912 	bl	800998a <USB_SetCurrentMode>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0c6      	b.n	8004906 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e04a      	b.n	8004814 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	3315      	adds	r3, #21
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3314      	adds	r3, #20
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	b298      	uxth	r0, r3
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	332e      	adds	r3, #46	@ 0x2e
 80047ba:	4602      	mov	r2, r0
 80047bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3318      	adds	r3, #24
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	331c      	adds	r3, #28
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3320      	adds	r3, #32
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3324      	adds	r3, #36	@ 0x24
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	3301      	adds	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3af      	bcc.n	800477e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e044      	b.n	80048ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	3301      	adds	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	791b      	ldrb	r3, [r3, #4]
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3b5      	bcc.n	8004824 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7c1a      	ldrb	r2, [r3, #16]
 80048c0:	f88d 2000 	strb.w	r2, [sp]
 80048c4:	3304      	adds	r3, #4
 80048c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c8:	f005 f8ac 	bl	8009a24 <USB_DevInit>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e013      	b.n	8004906 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7b1b      	ldrb	r3, [r3, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d102      	bne.n	80048fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f80b 	bl	8004910 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 fa67 	bl	8009dd2 <USB_DevDisconnect>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_PCDEx_ActivateLPM+0x44>)
 8004940:	4313      	orrs	r3, r2
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	10000003 	.word	0x10000003

08004958 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004960:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d00a      	beq.n	8004982 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800496c:	4b16      	ldr	r3, [pc, #88]	@ (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e01f      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e01d      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004982:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	490f      	ldr	r1, [pc, #60]	@ (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004992:	f7fc ff2d 	bl	80017f0 <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004998:	e009      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800499a:	f7fc ff29 	bl	80017f0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049a8:	d901      	bls.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e007      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ba:	d1ee      	bne.n	800499a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	58024800 	.word	0x58024800

080049cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049da:	60d3      	str	r3, [r2, #12]
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	58024800 	.word	0x58024800

080049ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	@ 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f000 bc48 	b.w	8005290 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8088 	beq.w	8004b1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b99      	ldr	r3, [pc, #612]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a18:	4b96      	ldr	r3, [pc, #600]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d007      	beq.n	8004a34 <HAL_RCC_OscConfig+0x48>
 8004a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a26:	2b18      	cmp	r3, #24
 8004a28:	d111      	bne.n	8004a4e <HAL_RCC_OscConfig+0x62>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	4b8f      	ldr	r3, [pc, #572]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d06d      	beq.n	8004b1c <HAL_RCC_OscConfig+0x130>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d169      	bne.n	8004b1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f000 bc21 	b.w	8005290 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x7a>
 8004a58:	4b86      	ldr	r3, [pc, #536]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a85      	ldr	r2, [pc, #532]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e02e      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x9c>
 8004a6e:	4b81      	ldr	r3, [pc, #516]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a80      	ldr	r2, [pc, #512]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b7e      	ldr	r3, [pc, #504]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0xc0>
 8004a92:	4b78      	ldr	r3, [pc, #480]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a77      	ldr	r2, [pc, #476]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b75      	ldr	r3, [pc, #468]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a74      	ldr	r2, [pc, #464]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd8>
 8004aac:	4b71      	ldr	r3, [pc, #452]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a70      	ldr	r2, [pc, #448]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b6e      	ldr	r3, [pc, #440]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a6d      	ldr	r2, [pc, #436]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fc fe90 	bl	80017f0 <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fc fe8c 	bl	80017f0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e3d4      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae6:	4b63      	ldr	r3, [pc, #396]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xe8>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fc fe7c 	bl	80017f0 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fc fe78 	bl	80017f0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e3c0      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b0e:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x110>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80ca 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b2c:	4b51      	ldr	r3, [pc, #324]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b36:	4b4f      	ldr	r3, [pc, #316]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_RCC_OscConfig+0x166>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	2b18      	cmp	r3, #24
 8004b46:	d156      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x20a>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d151      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b52:	4b48      	ldr	r3, [pc, #288]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x17e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e392      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b6a:	4b42      	ldr	r3, [pc, #264]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 0219 	bic.w	r2, r3, #25
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	493f      	ldr	r1, [pc, #252]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fe38 	bl	80017f0 <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fc fe34 	bl	80017f0 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e37c      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b96:	4b37      	ldr	r3, [pc, #220]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	f7fc fe55 	bl	8001850 <HAL_GetREVID>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d817      	bhi.n	8004be0 <HAL_RCC_OscConfig+0x1f4>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d108      	bne.n	8004bca <HAL_RCC_OscConfig+0x1de>
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc8:	e07a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b2a      	ldr	r3, [pc, #168]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	031b      	lsls	r3, r3, #12
 8004bd8:	4926      	ldr	r1, [pc, #152]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bde:	e06f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b24      	ldr	r3, [pc, #144]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	4921      	ldr	r1, [pc, #132]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf4:	e064      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d047      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 0219 	bic.w	r2, r3, #25
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	491a      	ldr	r1, [pc, #104]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fc fdee 	bl	80017f0 <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c18:	f7fc fdea 	bl	80017f0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e332      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c2a:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	f7fc fe0b 	bl	8001850 <HAL_GetREVID>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d819      	bhi.n	8004c78 <HAL_RCC_OscConfig+0x28c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b40      	cmp	r3, #64	@ 0x40
 8004c4a:	d108      	bne.n	8004c5e <HAL_RCC_OscConfig+0x272>
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c54:	4a07      	ldr	r2, [pc, #28]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5a:	6053      	str	r3, [r2, #4]
 8004c5c:	e030      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
 8004c5e:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	4901      	ldr	r1, [pc, #4]	@ (8004c74 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
 8004c72:	e025      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
 8004c74:	58024400 	.word	0x58024400
 8004c78:	4b9a      	ldr	r3, [pc, #616]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	4997      	ldr	r1, [pc, #604]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b95      	ldr	r3, [pc, #596]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a94      	ldr	r2, [pc, #592]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fc fda9 	bl	80017f0 <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fc fda5 	bl	80017f0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e2ed      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cb4:	4b8b      	ldr	r3, [pc, #556]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a9 	beq.w	8004e20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cce:	4b85      	ldr	r3, [pc, #532]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd8:	4b82      	ldr	r3, [pc, #520]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d007      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x308>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	d13a      	bne.n	8004d60 <HAL_RCC_OscConfig+0x374>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d135      	bne.n	8004d60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x320>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	2b80      	cmp	r3, #128	@ 0x80
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e2c1      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d0c:	f7fc fda0 	bl	8001850 <HAL_GetREVID>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d817      	bhi.n	8004d4a <HAL_RCC_OscConfig+0x35e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d108      	bne.n	8004d34 <HAL_RCC_OscConfig+0x348>
 8004d22:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d32:	e075      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d34:	4b6b      	ldr	r3, [pc, #428]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	069b      	lsls	r3, r3, #26
 8004d42:	4968      	ldr	r1, [pc, #416]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d48:	e06a      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d4a:	4b66      	ldr	r3, [pc, #408]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	4962      	ldr	r1, [pc, #392]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d5e:	e05f      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d042      	beq.n	8004dee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d68:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fd3c 	bl	80017f0 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d7c:	f7fc fd38 	bl	80017f0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e280      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d8e:	4b55      	ldr	r3, [pc, #340]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d9a:	f7fc fd59 	bl	8001850 <HAL_GetREVID>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d817      	bhi.n	8004dd8 <HAL_RCC_OscConfig+0x3ec>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d108      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x3d6>
 8004db0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004db8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dbe:	6053      	str	r3, [r2, #4]
 8004dc0:	e02e      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
 8004dc2:	4b48      	ldr	r3, [pc, #288]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	069b      	lsls	r3, r3, #26
 8004dd0:	4944      	ldr	r1, [pc, #272]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]
 8004dd6:	e023      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
 8004dd8:	4b42      	ldr	r3, [pc, #264]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	493f      	ldr	r1, [pc, #252]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60cb      	str	r3, [r1, #12]
 8004dec:	e018      	b.n	8004e20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dee:	4b3d      	ldr	r3, [pc, #244]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7fc fcf9 	bl	80017f0 <HAL_GetTick>
 8004dfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e02:	f7fc fcf5 	bl	80017f0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e23d      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e14:	4b33      	ldr	r3, [pc, #204]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d036      	beq.n	8004e9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d019      	beq.n	8004e68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fc fcd6 	bl	80017f0 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fc fcd2 	bl	80017f0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e21a      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x45c>
 8004e66:	e018      	b.n	8004e9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e68:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fc fcbc 	bl	80017f0 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fc fcb8 	bl	80017f0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e200      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d039      	beq.n	8004f1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eba:	f7fc fc99 	bl	80017f0 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec2:	f7fc fc95 	bl	80017f0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1dd      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed4:	4b03      	ldr	r3, [pc, #12]	@ (8004ee4 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x4d6>
 8004ee0:	e01b      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
 8004ee2:	bf00      	nop
 8004ee4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ee8:	4b9b      	ldr	r3, [pc, #620]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a9a      	ldr	r2, [pc, #616]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ef4:	f7fc fc7c 	bl	80017f0 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004efc:	f7fc fc78 	bl	80017f0 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1c0      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f0e:	4b92      	ldr	r3, [pc, #584]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8081 	beq.w	800502a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f28:	4b8c      	ldr	r3, [pc, #560]	@ (800515c <HAL_RCC_OscConfig+0x770>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a8b      	ldr	r2, [pc, #556]	@ (800515c <HAL_RCC_OscConfig+0x770>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f34:	f7fc fc5c 	bl	80017f0 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fc fc58 	bl	80017f0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1a0      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f4e:	4b83      	ldr	r3, [pc, #524]	@ (800515c <HAL_RCC_OscConfig+0x770>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d106      	bne.n	8004f70 <HAL_RCC_OscConfig+0x584>
 8004f62:	4b7d      	ldr	r3, [pc, #500]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a7c      	ldr	r2, [pc, #496]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	e02d      	b.n	8004fcc <HAL_RCC_OscConfig+0x5e0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10c      	bne.n	8004f92 <HAL_RCC_OscConfig+0x5a6>
 8004f78:	4b77      	ldr	r3, [pc, #476]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a76      	ldr	r2, [pc, #472]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f84:	4b74      	ldr	r3, [pc, #464]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a73      	ldr	r2, [pc, #460]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	e01c      	b.n	8004fcc <HAL_RCC_OscConfig+0x5e0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x5c8>
 8004f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a6b      	ldr	r2, [pc, #428]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0x5e0>
 8004fb4:	4b68      	ldr	r3, [pc, #416]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a67      	ldr	r2, [pc, #412]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc0:	4b65      	ldr	r3, [pc, #404]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	4a64      	ldr	r2, [pc, #400]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc fc0c 	bl	80017f0 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fc08 	bl	80017f0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e14e      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ff2:	4b59      	ldr	r3, [pc, #356]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <HAL_RCC_OscConfig+0x5f0>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fc fbf6 	bl	80017f0 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fc fbf2 	bl	80017f0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e138      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800501e:	4b4e      	ldr	r3, [pc, #312]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ee      	bne.n	8005008 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 812d 	beq.w	800528e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005034:	4b48      	ldr	r3, [pc, #288]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800503c:	2b18      	cmp	r3, #24
 800503e:	f000 80bd 	beq.w	80051bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	2b02      	cmp	r3, #2
 8005048:	f040 809e 	bne.w	8005188 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504c:	4b42      	ldr	r3, [pc, #264]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a41      	ldr	r2, [pc, #260]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fc fbca 	bl	80017f0 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fc fbc6 	bl	80017f0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e10e      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005072:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005082:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <HAL_RCC_OscConfig+0x774>)
 8005084:	4013      	ands	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800508e:	0112      	lsls	r2, r2, #4
 8005090:	430a      	orrs	r2, r1
 8005092:	4931      	ldr	r1, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	628b      	str	r3, [r1, #40]	@ 0x28
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	3b01      	subs	r3, #1
 800509e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	3b01      	subs	r3, #1
 80050a8:	025b      	lsls	r3, r3, #9
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	3b01      	subs	r3, #1
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050c8:	4923      	ldr	r1, [pc, #140]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050da:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050de:	4b21      	ldr	r3, [pc, #132]	@ (8005164 <HAL_RCC_OscConfig+0x778>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050e6:	00d2      	lsls	r2, r2, #3
 80050e8:	491b      	ldr	r1, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f023 020c 	bic.w	r2, r3, #12
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	4917      	ldr	r1, [pc, #92]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005100:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f023 0202 	bic.w	r2, r3, #2
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	4912      	ldr	r1, [pc, #72]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005112:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a10      	ldr	r2, [pc, #64]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511e:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	4a0d      	ldr	r2, [pc, #52]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005136:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a07      	ldr	r2, [pc, #28]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005142:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <HAL_RCC_OscConfig+0x76c>)
 8005148:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc fb4f 	bl	80017f0 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005154:	e011      	b.n	800517a <HAL_RCC_OscConfig+0x78e>
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	58024800 	.word	0x58024800
 8005160:	fffffc0c 	.word	0xfffffc0c
 8005164:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005168:	f7fc fb42 	bl	80017f0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e08a      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800517a:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x77c>
 8005186:	e082      	b.n	800528e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005188:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 800518e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fc fb2c 	bl	80017f0 <HAL_GetTick>
 8005198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519c:	f7fc fb28 	bl	80017f0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e070      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x7b0>
 80051ba:	e068      	b.n	800528e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051bc:	4b36      	ldr	r3, [pc, #216]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051c2:	4b35      	ldr	r3, [pc, #212]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d031      	beq.n	8005234 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0203 	and.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d12a      	bne.n	8005234 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d122      	bne.n	8005234 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d11a      	bne.n	8005234 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	0a5b      	lsrs	r3, r3, #9
 8005202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d111      	bne.n	8005234 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d108      	bne.n	8005234 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e02b      	b.n	8005290 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005238:	4b17      	ldr	r3, [pc, #92]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 800523a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005242:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	429a      	cmp	r2, r3
 800524c:	d01f      	beq.n	800528e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800525a:	f7fc fac9 	bl	80017f0 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005260:	bf00      	nop
 8005262:	f7fc fac5 	bl	80017f0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	4293      	cmp	r3, r2
 800526c:	d0f9      	beq.n	8005262 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800526e:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 8005270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005272:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <HAL_RCC_OscConfig+0x8b0>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800527a:	00d2      	lsls	r2, r2, #3
 800527c:	4906      	ldr	r1, [pc, #24]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 800527e:	4313      	orrs	r3, r2
 8005280:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005282:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <HAL_RCC_OscConfig+0x8ac>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3730      	adds	r7, #48	@ 0x30
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	ffff0007 	.word	0xffff0007

080052a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e19c      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b4:	4b8a      	ldr	r3, [pc, #552]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d910      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b87      	ldr	r3, [pc, #540]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 020f 	bic.w	r2, r3, #15
 80052ca:	4985      	ldr	r1, [pc, #532]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b83      	ldr	r3, [pc, #524]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e184      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	4b7b      	ldr	r3, [pc, #492]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d908      	bls.n	8005312 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005300:	4b78      	ldr	r3, [pc, #480]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	4975      	ldr	r1, [pc, #468]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800530e:	4313      	orrs	r3, r2
 8005310:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	4b70      	ldr	r3, [pc, #448]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800532a:	429a      	cmp	r2, r3
 800532c:	d908      	bls.n	8005340 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800532e:	4b6d      	ldr	r3, [pc, #436]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	496a      	ldr	r1, [pc, #424]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	4b64      	ldr	r3, [pc, #400]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005358:	429a      	cmp	r2, r3
 800535a:	d908      	bls.n	800536e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800535c:	4b61      	ldr	r3, [pc, #388]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	495e      	ldr	r1, [pc, #376]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800536a:	4313      	orrs	r3, r2
 800536c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005386:	429a      	cmp	r2, r3
 8005388:	d908      	bls.n	800539c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800538a:	4b56      	ldr	r3, [pc, #344]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4953      	ldr	r1, [pc, #332]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005398:	4313      	orrs	r3, r2
 800539a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	4b4d      	ldr	r3, [pc, #308]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d908      	bls.n	80053ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b8:	4b4a      	ldr	r3, [pc, #296]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f023 020f 	bic.w	r2, r3, #15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4947      	ldr	r1, [pc, #284]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d055      	beq.n	8005482 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053d6:	4b43      	ldr	r3, [pc, #268]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4940      	ldr	r1, [pc, #256]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f0:	4b3c      	ldr	r3, [pc, #240]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d121      	bne.n	8005440 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0f6      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d107      	bne.n	8005418 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005408:	4b36      	ldr	r3, [pc, #216]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d115      	bne.n	8005440 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0ea      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d107      	bne.n	8005430 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005420:	4b30      	ldr	r3, [pc, #192]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0de      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005430:	4b2c      	ldr	r3, [pc, #176]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0d6      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005440:	4b28      	ldr	r3, [pc, #160]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f023 0207 	bic.w	r2, r3, #7
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4925      	ldr	r1, [pc, #148]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005452:	f7fc f9cd 	bl	80017f0 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005458:	e00a      	b.n	8005470 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545a:	f7fc f9c9 	bl	80017f0 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0be      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005470:	4b1c      	ldr	r3, [pc, #112]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	429a      	cmp	r2, r3
 8005480:	d1eb      	bne.n	800545a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	429a      	cmp	r2, r3
 800549c:	d208      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549e:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f023 020f 	bic.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	490e      	ldr	r1, [pc, #56]	@ (80054e4 <HAL_RCC_ClockConfig+0x244>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d214      	bcs.n	80054e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 020f 	bic.w	r2, r3, #15
 80054c6:	4906      	ldr	r1, [pc, #24]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <HAL_RCC_ClockConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e086      	b.n	80055ee <HAL_RCC_ClockConfig+0x34e>
 80054e0:	52002000 	.word	0x52002000
 80054e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	4b3f      	ldr	r3, [pc, #252]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005500:	429a      	cmp	r2, r3
 8005502:	d208      	bcs.n	8005516 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005504:	4b3c      	ldr	r3, [pc, #240]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	4939      	ldr	r1, [pc, #228]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005512:	4313      	orrs	r3, r2
 8005514:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800552e:	429a      	cmp	r2, r3
 8005530:	d208      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	492e      	ldr	r1, [pc, #184]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005540:	4313      	orrs	r3, r2
 8005542:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	4b28      	ldr	r3, [pc, #160]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800555c:	429a      	cmp	r2, r3
 800555e:	d208      	bcs.n	8005572 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005560:	4b25      	ldr	r3, [pc, #148]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	4922      	ldr	r1, [pc, #136]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 800556e:	4313      	orrs	r3, r2
 8005570:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69da      	ldr	r2, [r3, #28]
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800558a:	429a      	cmp	r2, r3
 800558c:	d208      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800558e:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4917      	ldr	r1, [pc, #92]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 800559c:	4313      	orrs	r3, r2
 800559e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055a0:	f000 f834 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	4912      	ldr	r1, [pc, #72]	@ (80055fc <HAL_RCC_ClockConfig+0x35c>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <HAL_RCC_ClockConfig+0x358>)
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	4a0d      	ldr	r2, [pc, #52]	@ (80055fc <HAL_RCC_ClockConfig+0x35c>)
 80055c8:	5cd3      	ldrb	r3, [r2, r3]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005600 <HAL_RCC_ClockConfig+0x360>)
 80055d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005604 <HAL_RCC_ClockConfig+0x364>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <HAL_RCC_ClockConfig+0x368>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fc f8ba 	bl	800175c <HAL_InitTick>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	08009f04 	.word	0x08009f04
 8005600:	24000008 	.word	0x24000008
 8005604:	24000004 	.word	0x24000004
 8005608:	2400000c 	.word	0x2400000c

0800560c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	@ 0x24
 8005610:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005612:	4bb3      	ldr	r3, [pc, #716]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800561a:	2b18      	cmp	r3, #24
 800561c:	f200 8155 	bhi.w	80058ca <HAL_RCC_GetSysClockFreq+0x2be>
 8005620:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	0800568d 	.word	0x0800568d
 800562c:	080058cb 	.word	0x080058cb
 8005630:	080058cb 	.word	0x080058cb
 8005634:	080058cb 	.word	0x080058cb
 8005638:	080058cb 	.word	0x080058cb
 800563c:	080058cb 	.word	0x080058cb
 8005640:	080058cb 	.word	0x080058cb
 8005644:	080058cb 	.word	0x080058cb
 8005648:	080056b3 	.word	0x080056b3
 800564c:	080058cb 	.word	0x080058cb
 8005650:	080058cb 	.word	0x080058cb
 8005654:	080058cb 	.word	0x080058cb
 8005658:	080058cb 	.word	0x080058cb
 800565c:	080058cb 	.word	0x080058cb
 8005660:	080058cb 	.word	0x080058cb
 8005664:	080058cb 	.word	0x080058cb
 8005668:	080056b9 	.word	0x080056b9
 800566c:	080058cb 	.word	0x080058cb
 8005670:	080058cb 	.word	0x080058cb
 8005674:	080058cb 	.word	0x080058cb
 8005678:	080058cb 	.word	0x080058cb
 800567c:	080058cb 	.word	0x080058cb
 8005680:	080058cb 	.word	0x080058cb
 8005684:	080058cb 	.word	0x080058cb
 8005688:	080056bf 	.word	0x080056bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800568c:	4b94      	ldr	r3, [pc, #592]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005698:	4b91      	ldr	r3, [pc, #580]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	4a90      	ldr	r2, [pc, #576]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80056aa:	e111      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056ac:	4b8d      	ldr	r3, [pc, #564]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056ae:	61bb      	str	r3, [r7, #24]
      break;
 80056b0:	e10e      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056b2:	4b8d      	ldr	r3, [pc, #564]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056b4:	61bb      	str	r3, [r7, #24]
      break;
 80056b6:	e10b      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056b8:	4b8c      	ldr	r3, [pc, #560]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056ba:	61bb      	str	r3, [r7, #24]
      break;
 80056bc:	e108      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056be:	4b88      	ldr	r3, [pc, #544]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056c8:	4b85      	ldr	r3, [pc, #532]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056d4:	4b82      	ldr	r3, [pc, #520]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056de:	4b80      	ldr	r3, [pc, #512]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	08db      	lsrs	r3, r3, #3
 80056e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80e1 	beq.w	80058c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b02      	cmp	r3, #2
 8005706:	f000 8083 	beq.w	8005810 <HAL_RCC_GetSysClockFreq+0x204>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b02      	cmp	r3, #2
 800570e:	f200 80a1 	bhi.w	8005854 <HAL_RCC_GetSysClockFreq+0x248>
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x114>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d056      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800571e:	e099      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005720:	4b6f      	ldr	r3, [pc, #444]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02d      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800572c:	4b6c      	ldr	r3, [pc, #432]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	08db      	lsrs	r3, r3, #3
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	4a6b      	ldr	r2, [pc, #428]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
 800573c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005756:	4b62      	ldr	r3, [pc, #392]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005766:	ed97 6a02 	vldr	s12, [r7, #8]
 800576a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005782:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005786:	e087      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579a:	4b51      	ldr	r3, [pc, #324]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ca:	e065      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057de:	4b40      	ldr	r3, [pc, #256]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800580e:	e043      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800581e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005822:	4b2f      	ldr	r3, [pc, #188]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005832:	ed97 6a02 	vldr	s12, [r7, #8]
 8005836:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800583a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005852:	e021      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005866:	4b1e      	ldr	r3, [pc, #120]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 6a02 	vldr	s12, [r7, #8]
 800587a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800587e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005896:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005898:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	0a5b      	lsrs	r3, r3, #9
 800589e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a2:	3301      	adds	r3, #1
 80058a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058bc:	ee17 3a90 	vmov	r3, s15
 80058c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058c2:	e005      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61bb      	str	r3, [r7, #24]
      break;
 80058c8:	e002      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058ca:	4b07      	ldr	r3, [pc, #28]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058cc:	61bb      	str	r3, [r7, #24]
      break;
 80058ce:	bf00      	nop
  }

  return sysclockfreq;
 80058d0:	69bb      	ldr	r3, [r7, #24]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3724      	adds	r7, #36	@ 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
 80058e4:	03d09000 	.word	0x03d09000
 80058e8:	003d0900 	.word	0x003d0900
 80058ec:	007a1200 	.word	0x007a1200
 80058f0:	46000000 	.word	0x46000000
 80058f4:	4c742400 	.word	0x4c742400
 80058f8:	4a742400 	.word	0x4a742400
 80058fc:	4af42400 	.word	0x4af42400

08005900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005906:	f7ff fe81 	bl	800560c <HAL_RCC_GetSysClockFreq>
 800590a:	4602      	mov	r2, r0
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_RCC_GetHCLKFreq+0x50>)
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	490f      	ldr	r1, [pc, #60]	@ (8005954 <HAL_RCC_GetHCLKFreq+0x54>)
 8005918:	5ccb      	ldrb	r3, [r1, r3]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <HAL_RCC_GetHCLKFreq+0x50>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	4a09      	ldr	r2, [pc, #36]	@ (8005954 <HAL_RCC_GetHCLKFreq+0x54>)
 800592e:	5cd3      	ldrb	r3, [r2, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	4a07      	ldr	r2, [pc, #28]	@ (8005958 <HAL_RCC_GetHCLKFreq+0x58>)
 800593c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800593e:	4a07      	ldr	r2, [pc, #28]	@ (800595c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005944:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <HAL_RCC_GetHCLKFreq+0x58>)
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	58024400 	.word	0x58024400
 8005954:	08009f04 	.word	0x08009f04
 8005958:	24000008 	.word	0x24000008
 800595c:	24000004 	.word	0x24000004

08005960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005964:	f7ff ffcc 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005968:	4602      	mov	r2, r0
 800596a:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	4904      	ldr	r1, [pc, #16]	@ (8005988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005976:	5ccb      	ldrb	r3, [r1, r3]
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	58024400 	.word	0x58024400
 8005988:	08009f04 	.word	0x08009f04

0800598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005990:	f7ff ffb6 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4904      	ldr	r1, [pc, #16]	@ (80059b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	58024400 	.word	0x58024400
 80059b4:	08009f04 	.word	0x08009f04

080059b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b0ca      	sub	sp, #296	@ 0x128
 80059be:	af00      	add	r7, sp, #0
 80059c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059dc:	2500      	movs	r5, #0
 80059de:	ea54 0305 	orrs.w	r3, r4, r5
 80059e2:	d049      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ee:	d02f      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059f4:	d828      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059fa:	d01a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a00:	d822      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0e:	4bb8      	ldr	r3, [pc, #736]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	4ab7      	ldr	r2, [pc, #732]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a1a:	e01a      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3308      	adds	r3, #8
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 fb61 	bl	80080ec <RCCEx_PLL2_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a30:	e00f      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a36:	3328      	adds	r3, #40	@ 0x28
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f002 fc08 	bl	8008250 <RCCEx_PLL3_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a46:	e004      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a5a:	4ba5      	ldr	r3, [pc, #660]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a68:	4aa1      	ldr	r2, [pc, #644]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a84:	f04f 0900 	mov.w	r9, #0
 8005a88:	ea58 0309 	orrs.w	r3, r8, r9
 8005a8c:	d047      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d82a      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a98:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab5 	.word	0x08005ab5
 8005aa4:	08005ac3 	.word	0x08005ac3
 8005aa8:	08005ad9 	.word	0x08005ad9
 8005aac:	08005af7 	.word	0x08005af7
 8005ab0:	08005af7 	.word	0x08005af7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	4a8d      	ldr	r2, [pc, #564]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac0:	e01a      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 fb0e 	bl	80080ec <RCCEx_PLL2_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad6:	e00f      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005adc:	3328      	adds	r3, #40	@ 0x28
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f002 fbb5 	bl	8008250 <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aec:	e004      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b00:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b04:	f023 0107 	bic.w	r1, r3, #7
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0e:	4a78      	ldr	r2, [pc, #480]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b2a:	f04f 0b00 	mov.w	fp, #0
 8005b2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b32:	d04c      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3e:	d030      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b44:	d829      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b48:	d02d      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b4c:	d825      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b4e:	2b80      	cmp	r3, #128	@ 0x80
 8005b50:	d018      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d821      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d007      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b5e:	e01c      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b60:	4b63      	ldr	r3, [pc, #396]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a62      	ldr	r2, [pc, #392]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e01c      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	3308      	adds	r3, #8
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f002 fab8 	bl	80080ec <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b82:	e011      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	3328      	adds	r3, #40	@ 0x28
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f002 fb5f 	bl	8008250 <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc4:	e003      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005bda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005be4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d053      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bfa:	d035      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c00:	d82e      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c06:	d031      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c0c:	d828      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c12:	d01a      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c18:	d822      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c22:	d007      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c24:	e01c      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c26:	4b32      	ldr	r3, [pc, #200]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	4a31      	ldr	r2, [pc, #196]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c32:	e01c      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	3308      	adds	r3, #8
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 fa55 	bl	80080ec <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c48:	e011      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	3328      	adds	r3, #40	@ 0x28
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 fafc 	bl	8008250 <RCCEx_PLL3_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c5e:	e006      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c66:	e002      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10b      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c76:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c86:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c8c:	e003      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ca2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d056      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cc2:	d038      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cc8:	d831      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cce:	d034      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005cd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cd4:	d82b      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cda:	d01d      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ce0:	d825      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cec:	e01f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cee:	bf00      	nop
 8005cf0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	4aa1      	ldr	r2, [pc, #644]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d00:	e01c      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	3308      	adds	r3, #8
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f002 f9ee 	bl	80080ec <RCCEx_PLL2_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d16:	e011      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	3328      	adds	r3, #40	@ 0x28
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f002 fa95 	bl	8008250 <RCCEx_PLL3_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d2c:	e006      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d34:	e002      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d44:	4b8e      	ldr	r3, [pc, #568]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d48:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d54:	4a8a      	ldr	r2, [pc, #552]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d03a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	2b30      	cmp	r3, #48	@ 0x30
 8005d8c:	d01f      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d8e:	2b30      	cmp	r3, #48	@ 0x30
 8005d90:	d819      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d00c      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d815      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d019      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d111      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da2:	4b77      	ldr	r3, [pc, #476]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	4a76      	ldr	r2, [pc, #472]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dae:	e011      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	3308      	adds	r3, #8
 8005db6:	2102      	movs	r1, #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f002 f997 	bl	80080ec <RCCEx_PLL2_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ddc:	4b68      	ldr	r3, [pc, #416]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dea:	4a65      	ldr	r2, [pc, #404]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d051      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e24:	d035      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e2a:	d82e      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e30:	d031      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e36:	d828      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3c:	d01a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e42:	d822      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e4e:	e01c      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b4b      	ldr	r3, [pc, #300]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a4a      	ldr	r2, [pc, #296]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f002 f940 	bl	80080ec <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e72:	e011      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	3328      	adds	r3, #40	@ 0x28
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f002 f9e7 	bl	8008250 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ea0:	4b37      	ldr	r3, [pc, #220]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eae:	4a34      	ldr	r2, [pc, #208]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb4:	e003      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ed4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	d056      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ee8:	d033      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eee:	d82c      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ef4:	d02f      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005efa:	d826      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f00:	d02b      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f06:	d820      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f0c:	d012      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f12:	d81a      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d022      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1c:	d115      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	3308      	adds	r3, #8
 8005f24:	2101      	movs	r1, #1
 8005f26:	4618      	mov	r0, r3
 8005f28:	f002 f8e0 	bl	80080ec <RCCEx_PLL2_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f32:	e015      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f38:	3328      	adds	r3, #40	@ 0x28
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f002 f987 	bl	8008250 <RCCEx_PLL3_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f48:	e00a      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f52:	bf00      	nop
 8005f54:	e004      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10d      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f68:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f76:	4a02      	ldr	r2, [pc, #8]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d055      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fb8:	d033      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fbe:	d82c      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc4:	d02f      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d826      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd0:	d02b      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd6:	d820      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fdc:	d012      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe2:	d81a      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d022      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fec:	d115      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 f878 	bl	80080ec <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006002:	e015      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006008:	3328      	adds	r3, #40	@ 0x28
 800600a:	2101      	movs	r1, #1
 800600c:	4618      	mov	r0, r3
 800600e:	f002 f91f 	bl	8008250 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006018:	e00a      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006022:	bf00      	nop
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800602e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006038:	4ba3      	ldr	r3, [pc, #652]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006048:	4a9f      	ldr	r2, [pc, #636]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604a:	430b      	orrs	r3, r1
 800604c:	6593      	str	r3, [r2, #88]	@ 0x58
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800606e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d037      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006082:	d00e      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006088:	d816      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800608e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006092:	d111      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006094:	4b8c      	ldr	r3, [pc, #560]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	4a8b      	ldr	r2, [pc, #556]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800609e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060a0:	e00f      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	3308      	adds	r3, #8
 80060a8:	2101      	movs	r1, #1
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f81e 	bl	80080ec <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ca:	4b7f      	ldr	r3, [pc, #508]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d8:	4a7b      	ldr	r2, [pc, #492]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80060de:	e003      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006102:	460b      	mov	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	d039      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610e:	2b03      	cmp	r3, #3
 8006110:	d81c      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006112:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006155 	.word	0x08006155
 800611c:	08006129 	.word	0x08006129
 8006120:	08006137 	.word	0x08006137
 8006124:	08006155 	.word	0x08006155
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006128:	4b67      	ldr	r3, [pc, #412]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	4a66      	ldr	r2, [pc, #408]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006134:	e00f      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3308      	adds	r3, #8
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 ffd4 	bl	80080ec <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800614a:	e004      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800615e:	4b5a      	ldr	r3, [pc, #360]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	f023 0103 	bic.w	r1, r3, #3
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616c:	4a56      	ldr	r2, [pc, #344]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800616e:	430b      	orrs	r3, r1
 8006170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006172:	e003      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006192:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	f000 809f 	beq.w	80062dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800619e:	4b4b      	ldr	r3, [pc, #300]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a4a      	ldr	r2, [pc, #296]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061aa:	f7fb fb21 	bl	80017f0 <HAL_GetTick>
 80061ae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b2:	e00b      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b4:	f7fb fb1c 	bl	80017f0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b64      	cmp	r3, #100	@ 0x64
 80061c2:	d903      	bls.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ca:	e005      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061cc:	4b3f      	ldr	r3, [pc, #252]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ed      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d179      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061e0:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061ec:	4053      	eors	r3, r2
 80061ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d015      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061f6:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006202:	4b31      	ldr	r3, [pc, #196]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006206:	4a30      	ldr	r2, [pc, #192]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800620e:	4b2e      	ldr	r3, [pc, #184]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	4a2d      	ldr	r2, [pc, #180]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006218:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800621a:	4a2b      	ldr	r2, [pc, #172]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006220:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800622a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800622e:	d118      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fb fade 	bl	80017f0 <HAL_GetTick>
 8006234:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006238:	e00d      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623a:	f7fb fad9 	bl	80017f0 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006244:	1ad2      	subs	r2, r2, r3
 8006246:	f241 3388 	movw	r3, #5000	@ 0x1388
 800624a:	429a      	cmp	r2, r3
 800624c:	d903      	bls.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006254:	e005      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006256:	4b1c      	ldr	r3, [pc, #112]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0eb      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006266:	2b00      	cmp	r3, #0
 8006268:	d129      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627a:	d10e      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800627c:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800628c:	091a      	lsrs	r2, r3, #4
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006290:	4013      	ands	r3, r2
 8006292:	4a0d      	ldr	r2, [pc, #52]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6113      	str	r3, [r2, #16]
 8006298:	e005      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	4a0a      	ldr	r2, [pc, #40]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062a4:	6113      	str	r3, [r2, #16]
 80062a6:	4b08      	ldr	r3, [pc, #32]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b6:	4a04      	ldr	r2, [pc, #16]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80062bc:	e00e      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062c6:	e009      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062c8:	58024400 	.word	0x58024400
 80062cc:	58024800 	.word	0x58024800
 80062d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f002 0301 	and.w	r3, r2, #1
 80062e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ec:	2300      	movs	r3, #0
 80062ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f000 8089 	beq.w	8006410 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006304:	2b28      	cmp	r3, #40	@ 0x28
 8006306:	d86b      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006308:	a201      	add	r2, pc, #4	@ (adr r2, 8006310 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	080063e9 	.word	0x080063e9
 8006314:	080063e1 	.word	0x080063e1
 8006318:	080063e1 	.word	0x080063e1
 800631c:	080063e1 	.word	0x080063e1
 8006320:	080063e1 	.word	0x080063e1
 8006324:	080063e1 	.word	0x080063e1
 8006328:	080063e1 	.word	0x080063e1
 800632c:	080063e1 	.word	0x080063e1
 8006330:	080063b5 	.word	0x080063b5
 8006334:	080063e1 	.word	0x080063e1
 8006338:	080063e1 	.word	0x080063e1
 800633c:	080063e1 	.word	0x080063e1
 8006340:	080063e1 	.word	0x080063e1
 8006344:	080063e1 	.word	0x080063e1
 8006348:	080063e1 	.word	0x080063e1
 800634c:	080063e1 	.word	0x080063e1
 8006350:	080063cb 	.word	0x080063cb
 8006354:	080063e1 	.word	0x080063e1
 8006358:	080063e1 	.word	0x080063e1
 800635c:	080063e1 	.word	0x080063e1
 8006360:	080063e1 	.word	0x080063e1
 8006364:	080063e1 	.word	0x080063e1
 8006368:	080063e1 	.word	0x080063e1
 800636c:	080063e1 	.word	0x080063e1
 8006370:	080063e9 	.word	0x080063e9
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080063e1 	.word	0x080063e1
 800637c:	080063e1 	.word	0x080063e1
 8006380:	080063e1 	.word	0x080063e1
 8006384:	080063e1 	.word	0x080063e1
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063e1 	.word	0x080063e1
 8006390:	080063e9 	.word	0x080063e9
 8006394:	080063e1 	.word	0x080063e1
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063e1 	.word	0x080063e1
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080063e9 	.word	0x080063e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	3308      	adds	r3, #8
 80063ba:	2101      	movs	r1, #1
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 fe95 	bl	80080ec <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ce:	3328      	adds	r3, #40	@ 0x28
 80063d0:	2101      	movs	r1, #1
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 ff3c 	bl	8008250 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063f2:	4bbf      	ldr	r3, [pc, #764]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006400:	4abb      	ldr	r2, [pc, #748]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006402:	430b      	orrs	r3, r1
 8006404:	6553      	str	r3, [r2, #84]	@ 0x54
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f002 0302 	and.w	r3, r2, #2
 800641c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006426:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	d041      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006436:	2b05      	cmp	r3, #5
 8006438:	d824      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800643a:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	0800648d 	.word	0x0800648d
 8006444:	08006459 	.word	0x08006459
 8006448:	0800646f 	.word	0x0800646f
 800644c:	0800648d 	.word	0x0800648d
 8006450:	0800648d 	.word	0x0800648d
 8006454:	0800648d 	.word	0x0800648d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	3308      	adds	r3, #8
 800645e:	2101      	movs	r1, #1
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fe43 	bl	80080ec <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800646c:	e00f      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	3328      	adds	r3, #40	@ 0x28
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f001 feea 	bl	8008250 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006482:	e004      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800648a:	e000      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800648c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006496:	4b96      	ldr	r3, [pc, #600]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649a:	f023 0107 	bic.w	r1, r3, #7
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a4:	4a92      	ldr	r2, [pc, #584]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064aa:	e003      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f002 0304 	and.w	r3, r2, #4
 80064c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d044      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064dc:	2b05      	cmp	r3, #5
 80064de:	d825      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	08006535 	.word	0x08006535
 80064ec:	08006501 	.word	0x08006501
 80064f0:	08006517 	.word	0x08006517
 80064f4:	08006535 	.word	0x08006535
 80064f8:	08006535 	.word	0x08006535
 80064fc:	08006535 	.word	0x08006535
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	3308      	adds	r3, #8
 8006506:	2101      	movs	r1, #1
 8006508:	4618      	mov	r0, r3
 800650a:	f001 fdef 	bl	80080ec <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fe96 	bl	8008250 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800653e:	4b6c      	ldr	r3, [pc, #432]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	f023 0107 	bic.w	r1, r3, #7
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654e:	4a68      	ldr	r2, [pc, #416]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006550:	430b      	orrs	r3, r1
 8006552:	6593      	str	r3, [r2, #88]	@ 0x58
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f002 0320 	and.w	r3, r2, #32
 800656a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006578:	460b      	mov	r3, r1
 800657a:	4313      	orrs	r3, r2
 800657c:	d055      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800658a:	d033      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800658c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006590:	d82c      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006596:	d02f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659c:	d826      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800659e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065a2:	d02b      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065a8:	d820      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ae:	d012      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065b4:	d81a      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d022      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065be:	d115      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	3308      	adds	r3, #8
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fd8f 	bl	80080ec <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065d4:	e015      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065da:	3328      	adds	r3, #40	@ 0x28
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fe36 	bl	8008250 <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065ea:	e00a      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065f2:	e006      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065f4:	bf00      	nop
 80065f6:	e004      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065f8:	bf00      	nop
 80065fa:	e002      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065fc:	bf00      	nop
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800660a:	4b39      	ldr	r3, [pc, #228]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661a:	4a35      	ldr	r2, [pc, #212]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006620:	e003      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800663a:	2300      	movs	r3, #0
 800663c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006640:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006644:	460b      	mov	r3, r1
 8006646:	4313      	orrs	r3, r2
 8006648:	d058      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006652:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006656:	d033      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006658:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800665c:	d82c      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006662:	d02f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006668:	d826      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800666a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800666e:	d02b      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006674:	d820      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667a:	d012      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006680:	d81a      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d022      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668a:	d115      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	3308      	adds	r3, #8
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fd29 	bl	80080ec <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066a0:	e015      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a6:	3328      	adds	r3, #40	@ 0x28
 80066a8:	2102      	movs	r1, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fdd0 	bl	8008250 <RCCEx_PLL3_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066b6:	e00a      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066be:	e006      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066c0:	bf00      	nop
 80066c2:	e004      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10e      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066e6:	4a02      	ldr	r2, [pc, #8]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ec:	e006      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006712:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d055      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006724:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006728:	d033      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800672a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800672e:	d82c      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006734:	d02f      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673a:	d826      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800673c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006740:	d02b      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006742:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006746:	d820      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800674c:	d012      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800674e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006752:	d81a      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d022      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800675c:	d115      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	3308      	adds	r3, #8
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fcc0 	bl	80080ec <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006772:	e015      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	3328      	adds	r3, #40	@ 0x28
 800677a:	2102      	movs	r1, #2
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fd67 	bl	8008250 <RCCEx_PLL3_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006788:	e00a      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006790:	e006      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006792:	bf00      	nop
 8006794:	e004      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800679e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10b      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067a8:	4ba1      	ldr	r3, [pc, #644]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067b8:	4a9d      	ldr	r2, [pc, #628]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ba:	430b      	orrs	r3, r1
 80067bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80067be:	e003      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f002 0308 	and.w	r3, r2, #8
 80067d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067e2:	460b      	mov	r3, r1
 80067e4:	4313      	orrs	r3, r2
 80067e6:	d01e      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f4:	d10c      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	3328      	adds	r3, #40	@ 0x28
 80067fc:	2102      	movs	r1, #2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fd26 	bl	8008250 <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006810:	4b87      	ldr	r3, [pc, #540]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006814:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006820:	4a83      	ldr	r2, [pc, #524]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f002 0310 	and.w	r3, r2, #16
 8006832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800683c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d01e      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800684e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006852:	d10c      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	3328      	adds	r3, #40	@ 0x28
 800685a:	2102      	movs	r1, #2
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fcf7 	bl	8008250 <RCCEx_PLL3_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800686e:	4b70      	ldr	r3, [pc, #448]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800687e:	4a6c      	ldr	r2, [pc, #432]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006880:	430b      	orrs	r3, r1
 8006882:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006894:	2300      	movs	r3, #0
 8006896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800689a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800689e:	460b      	mov	r3, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d03e      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b0:	d022      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b6:	d81b      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c0:	d00b      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068c2:	e015      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	3308      	adds	r3, #8
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fc0d 	bl	80080ec <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068d8:	e00f      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	3328      	adds	r3, #40	@ 0x28
 80068e0:	2102      	movs	r1, #2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fcb4 	bl	8008250 <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068f6:	e000      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006902:	4b4b      	ldr	r3, [pc, #300]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006906:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006912:	4a47      	ldr	r2, [pc, #284]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6593      	str	r3, [r2, #88]	@ 0x58
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800692e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006930:	2300      	movs	r3, #0
 8006932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006934:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d03b      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800694a:	d01f      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800694c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006950:	d818      	bhi.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800695c:	d007      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800695e:	e011      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006960:	4b33      	ldr	r3, [pc, #204]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	4a32      	ldr	r2, [pc, #200]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800696c:	e00f      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	3328      	adds	r3, #40	@ 0x28
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f001 fc6a 	bl	8008250 <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006996:	4b26      	ldr	r3, [pc, #152]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a6:	4a22      	ldr	r2, [pc, #136]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069c4:	2300      	movs	r3, #0
 80069c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d034      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d007      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80069e2:	e011      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e4:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	4a11      	ldr	r2, [pc, #68]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069f0:	e00e      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	3308      	adds	r3, #8
 80069f8:	2102      	movs	r1, #2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 fb76 	bl	80080ec <RCCEx_PLL2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10d      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a26:	4a02      	ldr	r2, [pc, #8]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a2c:	e006      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a52:	460b      	mov	r3, r1
 8006a54:	4313      	orrs	r3, r2
 8006a56:	d00c      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	3328      	adds	r3, #40	@ 0x28
 8006a5e:	2102      	movs	r1, #2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fbf5 	bl	8008250 <RCCEx_PLL3_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a80:	2300      	movs	r3, #0
 8006a82:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d038      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a9a:	d018      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa0:	d811      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa6:	d014      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d80b      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d011      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab6:	d106      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab8:	4bc3      	ldr	r3, [pc, #780]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	4ac2      	ldr	r2, [pc, #776]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006acc:	e004      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ae0:	4bb9      	ldr	r3, [pc, #740]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af0:	4ab5      	ldr	r2, [pc, #724]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af2:	430b      	orrs	r3, r1
 8006af4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b0e:	2300      	movs	r3, #0
 8006b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b16:	460b      	mov	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b1c:	4baa      	ldr	r3, [pc, #680]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2a:	4aa7      	ldr	r2, [pc, #668]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b3e:	2300      	movs	r3, #0
 8006b40:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b4c:	4b9e      	ldr	r3, [pc, #632]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b5c:	4a9a      	ldr	r2, [pc, #616]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b70:	2300      	movs	r3, #0
 8006b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b7e:	4b92      	ldr	r3, [pc, #584]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b82:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d00e      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bae:	4b86      	ldr	r3, [pc, #536]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	4a85      	ldr	r2, [pc, #532]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bb8:	6113      	str	r3, [r2, #16]
 8006bba:	4b83      	ldr	r3, [pc, #524]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bbc:	6919      	ldr	r1, [r3, #16]
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bc6:	4a80      	ldr	r2, [pc, #512]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bda:	2300      	movs	r3, #0
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006be2:	460b      	mov	r3, r1
 8006be4:	4313      	orrs	r3, r2
 8006be6:	d009      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006be8:	4b77      	ldr	r3, [pc, #476]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	4a74      	ldr	r2, [pc, #464]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c12:	460b      	mov	r3, r1
 8006c14:	4313      	orrs	r3, r2
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c18:	4b6b      	ldr	r3, [pc, #428]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c28:	4a67      	ldr	r2, [pc, #412]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	2100      	movs	r1, #0
 8006c38:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d011      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	3308      	adds	r3, #8
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fa4a 	bl	80080ec <RCCEx_PLL2_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	2100      	movs	r1, #0
 8006c78:	6239      	str	r1, [r7, #32]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d011      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	3308      	adds	r3, #8
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 fa2a 	bl	80080ec <RCCEx_PLL2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	61b9      	str	r1, [r7, #24]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d011      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cce:	3308      	adds	r3, #8
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fa0a 	bl	80080ec <RCCEx_PLL2_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6139      	str	r1, [r7, #16]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d04:	460b      	mov	r3, r1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	d011      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	3328      	adds	r3, #40	@ 0x28
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fa9c 	bl	8008250 <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	2100      	movs	r1, #0
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d44:	460b      	mov	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d011      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4e:	3328      	adds	r3, #40	@ 0x28
 8006d50:	2101      	movs	r1, #1
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fa7c 	bl	8008250 <RCCEx_PLL3_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	2100      	movs	r1, #0
 8006d78:	6039      	str	r1, [r7, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d011      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8e:	3328      	adds	r3, #40	@ 0x28
 8006d90:	2102      	movs	r1, #2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 fa5c 	bl	8008250 <RCCEx_PLL3_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e000      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dc8:	58024400 	.word	0x58024400

08006dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b090      	sub	sp, #64	@ 0x40
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dda:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006dde:	430b      	orrs	r3, r1
 8006de0:	f040 8094 	bne.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006de4:	4b9e      	ldr	r3, [pc, #632]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	f200 8087 	bhi.w	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006df6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e11 	.word	0x08006e11
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e61 	.word	0x08006e61
 8006e08:	08006efd 	.word	0x08006efd
 8006e0c:	08006e89 	.word	0x08006e89
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e10:	4b93      	ldr	r3, [pc, #588]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e1c:	d108      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 f810 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e2c:	f000 bd45 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e34:	f000 bd41 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e38:	4b89      	ldr	r3, [pc, #548]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e44:	d108      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e46:	f107 0318 	add.w	r3, r7, #24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fd54 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e54:	f000 bd31 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	f000 bd2d 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e60:	4b7f      	ldr	r3, [pc, #508]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6c:	d108      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e6e:	f107 030c 	add.w	r3, r7, #12
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fe94 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7c:	f000 bd1d 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e84:	f000 bd19 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e88:	4b75      	ldr	r3, [pc, #468]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e92:	4b73      	ldr	r3, [pc, #460]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	08db      	lsrs	r3, r3, #3
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	4a6d      	ldr	r2, [pc, #436]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb6:	e01f      	b.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eb8:	4b69      	ldr	r3, [pc, #420]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec4:	d106      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ecc:	d102      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ece:	4b66      	ldr	r3, [pc, #408]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ed2:	e011      	b.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ed4:	4b62      	ldr	r3, [pc, #392]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee0:	d106      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee8:	d102      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eea:	4b60      	ldr	r3, [pc, #384]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ef4:	f000 bce1 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ef8:	f000 bcdf 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006efc:	4b5c      	ldr	r3, [pc, #368]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f00:	f000 bcdb 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f08:	f000 bcd7 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f10:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f14:	430b      	orrs	r3, r1
 8006f16:	f040 80ad 	bne.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f1a:	4b51      	ldr	r3, [pc, #324]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f2a:	d056      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f32:	f200 8090 	bhi.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f3a:	f000 8088 	beq.w	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f42:	f200 8088 	bhi.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	2b80      	cmp	r3, #128	@ 0x80
 8006f4a:	d032      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	2b80      	cmp	r3, #128	@ 0x80
 8006f50:	f200 8081 	bhi.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	2b40      	cmp	r3, #64	@ 0x40
 8006f5e:	d014      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f60:	e079      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f62:	4b3f      	ldr	r3, [pc, #252]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f6e:	d108      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 ff67 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7e:	f000 bc9c 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f86:	f000 bc98 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f8a:	4b35      	ldr	r3, [pc, #212]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f96:	d108      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f98:	f107 0318 	add.w	r3, r7, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fcab 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	f000 bc88 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fae:	f000 bc84 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fbe:	d108      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fdeb 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fce:	f000 bc74 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd6:	f000 bc70 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fda:	4b21      	ldr	r3, [pc, #132]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d10c      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007008:	e01f      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800700a:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007016:	d106      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007020:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007024:	e011      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007032:	d106      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800703a:	d102      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800703c:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007040:	e003      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007046:	f000 bc38 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800704a:	f000 bc36 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800704e:	4b08      	ldr	r3, [pc, #32]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007052:	f000 bc32 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705a:	f000 bc2e 	b.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
 8007064:	03d09000 	.word	0x03d09000
 8007068:	003d0900 	.word	0x003d0900
 800706c:	007a1200 	.word	0x007a1200
 8007070:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800707c:	430b      	orrs	r3, r1
 800707e:	f040 809c 	bne.w	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007082:	4b9e      	ldr	r3, [pc, #632]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007092:	d054      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800709a:	f200 808b 	bhi.w	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070a4:	f000 8083 	beq.w	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070ae:	f200 8081 	bhi.w	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b8:	d02f      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070c0:	d878      	bhi.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ce:	d012      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80070d0:	e070      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070d2:	4b8a      	ldr	r3, [pc, #552]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 feaf 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e3e4      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e3e1      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f6:	4b81      	ldr	r3, [pc, #516]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007102:	d107      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007104:	f107 0318 	add.w	r3, r7, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fbf5 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007112:	e3d2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007118:	e3cf      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800711a:	4b78      	ldr	r3, [pc, #480]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fd37 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007136:	e3c0      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713c:	e3bd      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800713e:	4b6f      	ldr	r3, [pc, #444]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007148:	4b6c      	ldr	r3, [pc, #432]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d10c      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800715a:	4b68      	ldr	r3, [pc, #416]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	4a66      	ldr	r2, [pc, #408]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716c:	e01e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800716e:	4b63      	ldr	r3, [pc, #396]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800717a:	d106      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007182:	d102      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007184:	4b5f      	ldr	r3, [pc, #380]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007188:	e010      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800718a:	4b5c      	ldr	r3, [pc, #368]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007196:	d106      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719e:	d102      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071a0:	4b59      	ldr	r3, [pc, #356]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071aa:	e386      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071ac:	e385      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071ae:	4b57      	ldr	r3, [pc, #348]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b2:	e382      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b8:	e37f      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071be:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071c2:	430b      	orrs	r3, r1
 80071c4:	f040 80a7 	bne.w	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80071c8:	4b4c      	ldr	r3, [pc, #304]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071d8:	d055      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071e0:	f200 8096 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ea:	f000 8084 	beq.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071f4:	f200 808c 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071fe:	d030      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007206:	f200 8083 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007216:	d012      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007218:	e07a      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800721a:	4b38      	ldr	r3, [pc, #224]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fe0b 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e340      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723c:	e33d      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800723e:	4b2f      	ldr	r3, [pc, #188]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800724a:	d107      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724c:	f107 0318 	add.w	r3, r7, #24
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fb51 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725a:	e32e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007260:	e32b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800726a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800726e:	d107      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007270:	f107 030c 	add.w	r3, r7, #12
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fc93 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727e:	e31c      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e319      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007286:	4b1d      	ldr	r3, [pc, #116]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007290:	4b1a      	ldr	r3, [pc, #104]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d10c      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a2:	4b16      	ldr	r3, [pc, #88]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b4:	e01e      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b6:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ca:	d102      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072e8:	4b07      	ldr	r3, [pc, #28]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ec:	e002      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072f2:	e2e2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f4:	e2e1      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072f6:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	e2de      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072fc:	58024400 	.word	0x58024400
 8007300:	03d09000 	.word	0x03d09000
 8007304:	003d0900 	.word	0x003d0900
 8007308:	007a1200 	.word	0x007a1200
 800730c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007314:	e2d1      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800731e:	430b      	orrs	r3, r1
 8007320:	f040 809c 	bne.w	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007324:	4b93      	ldr	r3, [pc, #588]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007328:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800732c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007334:	d054      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800733c:	f200 808b 	bhi.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007346:	f000 8083 	beq.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007350:	f200 8081 	bhi.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735a:	d02f      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007362:	d878      	bhi.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007370:	d012      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007372:	e070      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007374:	4b7f      	ldr	r3, [pc, #508]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fd5e 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007390:	e293      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007396:	e290      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007398:	4b76      	ldr	r3, [pc, #472]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073a4:	d107      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a6:	f107 0318 	add.w	r3, r7, #24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 faa4 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b4:	e281      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ba:	e27e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c8:	d107      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ca:	f107 030c 	add.w	r3, r7, #12
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fbe6 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d8:	e26f      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073de:	e26c      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073e0:	4b64      	ldr	r3, [pc, #400]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ea:	4b62      	ldr	r3, [pc, #392]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d10c      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a5c      	ldr	r2, [pc, #368]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800740e:	e01e      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007410:	4b58      	ldr	r3, [pc, #352]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800741c:	d106      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800741e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007426:	4b55      	ldr	r3, [pc, #340]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742a:	e010      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800742c:	4b51      	ldr	r3, [pc, #324]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007438:	d106      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800743a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007440:	d102      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007442:	4b4f      	ldr	r3, [pc, #316]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007446:	e002      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800744c:	e235      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800744e:	e234      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007450:	4b4c      	ldr	r3, [pc, #304]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007454:	e231      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745a:	e22e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800745c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007460:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007464:	430b      	orrs	r3, r1
 8007466:	f040 808f 	bne.w	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800746a:	4b42      	ldr	r3, [pc, #264]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800746c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800746e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800747a:	d06b      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007482:	d874      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800748a:	d056      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007492:	d86c      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800749a:	d03b      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074a2:	d864      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074aa:	d021      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074b2:	d85c      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c0:	d004      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074c2:	e054      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074c4:	f7fe fa4c 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 80074c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074ca:	e1f6      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074cc:	4b29      	ldr	r3, [pc, #164]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d8:	d107      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa0a 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e8:	e1e7      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ee:	e1e4      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f0:	4b20      	ldr	r3, [pc, #128]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fc:	d107      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fb4c 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750c:	e1d5      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007512:	e1d2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007514:	4b17      	ldr	r3, [pc, #92]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d109      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007520:	4b14      	ldr	r3, [pc, #80]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	08db      	lsrs	r3, r3, #3
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	4a13      	ldr	r2, [pc, #76]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
 8007530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007532:	e1c2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007538:	e1bf      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800753a:	4b0e      	ldr	r3, [pc, #56]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007546:	d102      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800754c:	e1b5      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007552:	e1b2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007560:	d102      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007562:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007566:	e1a8      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756c:	e1a5      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007572:	e1a2      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007574:	58024400 	.word	0x58024400
 8007578:	03d09000 	.word	0x03d09000
 800757c:	003d0900 	.word	0x003d0900
 8007580:	007a1200 	.word	0x007a1200
 8007584:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007590:	430b      	orrs	r3, r1
 8007592:	d173      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007594:	4b9c      	ldr	r3, [pc, #624]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800759c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075a4:	d02f      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ac:	d863      	bhi.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ba:	d012      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075bc:	e05b      	b.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075be:	4b92      	ldr	r3, [pc, #584]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ca:	d107      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075cc:	f107 0318 	add.w	r3, r7, #24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f991 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	e16e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	e16b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075e2:	4b89      	ldr	r3, [pc, #548]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ee:	d107      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f0:	f107 030c 	add.w	r3, r7, #12
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fad3 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fe:	e15c      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007604:	e159      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007606:	4b80      	ldr	r3, [pc, #512]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007610:	4b7d      	ldr	r3, [pc, #500]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b04      	cmp	r3, #4
 800761a:	d10c      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007622:	4b79      	ldr	r3, [pc, #484]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	08db      	lsrs	r3, r3, #3
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	4a77      	ldr	r2, [pc, #476]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800762e:	fa22 f303 	lsr.w	r3, r2, r3
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007634:	e01e      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007636:	4b74      	ldr	r3, [pc, #464]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007642:	d106      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764a:	d102      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800764c:	4b70      	ldr	r3, [pc, #448]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007650:	e010      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007652:	4b6d      	ldr	r3, [pc, #436]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765e:	d106      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007666:	d102      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007668:	4b6a      	ldr	r3, [pc, #424]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800766c:	e002      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007672:	e122      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007674:	e121      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767a:	e11e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800767c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007680:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007684:	430b      	orrs	r3, r1
 8007686:	d133      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007688:	4b5f      	ldr	r3, [pc, #380]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800768a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007690:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800769e:	d012      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076a0:	e023      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076a2:	4b59      	ldr	r3, [pc, #356]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ae:	d107      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fbc7 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076be:	e0fc      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c4:	e0f9      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076c6:	4b50      	ldr	r3, [pc, #320]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d2:	d107      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d4:	f107 0318 	add.w	r3, r7, #24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 f90d 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e2:	e0ea      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	e0e7      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ee:	e0e4      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	f040 808d 	bne.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80076fe:	4b42      	ldr	r3, [pc, #264]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770e:	d06b      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007716:	d874      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771e:	d056      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007726:	d86c      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800772e:	d03b      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007736:	d864      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800773e:	d021      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007746:	d85c      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007754:	d004      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007756:	e054      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007758:	f000 f8b8 	bl	80078cc <HAL_RCCEx_GetD3PCLK1Freq>
 800775c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800775e:	e0ac      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007760:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800776c:	d107      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776e:	f107 0318 	add.w	r3, r7, #24
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f8c0 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777c:	e09d      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007782:	e09a      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007784:	4b20      	ldr	r3, [pc, #128]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007790:	d107      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007792:	f107 030c 	add.w	r3, r7, #12
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fa02 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a0:	e08b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a6:	e088      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a8:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d109      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b4:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	08db      	lsrs	r3, r3, #3
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	4a13      	ldr	r2, [pc, #76]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c6:	e078      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077cc:	e075      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80077dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e0:	e06b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e6:	e068      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077e8:	4b07      	ldr	r3, [pc, #28]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077f4:	d102      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80077f6:	4b07      	ldr	r3, [pc, #28]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fa:	e05e      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007800:	e05b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007806:	e058      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007808:	58024400 	.word	0x58024400
 800780c:	03d09000 	.word	0x03d09000
 8007810:	003d0900 	.word	0x003d0900
 8007814:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007820:	430b      	orrs	r3, r1
 8007822:	d148      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007824:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800782c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007834:	d02a      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783c:	d838      	bhi.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800783e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800784a:	d00d      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800784c:	e030      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800784e:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800785a:	d102      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800785c:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007860:	e02b      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	e028      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007868:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007874:	d107      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fae4 	bl	8007e48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007884:	e019      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788a:	e016      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800788c:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007898:	d107      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789a:	f107 0318 	add.w	r3, r7, #24
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f82a 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a8:	e007      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ae:	e004      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b4:	e001      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80078ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3740      	adds	r7, #64	@ 0x40
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	58024400 	.word	0x58024400
 80078c8:	007a1200 	.word	0x007a1200

080078cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078d0:	f7fe f816 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	091b      	lsrs	r3, r3, #4
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	4904      	ldr	r1, [pc, #16]	@ (80078f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078e2:	5ccb      	ldrb	r3, [r1, r3]
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	58024400 	.word	0x58024400
 80078f4:	08009f04 	.word	0x08009f04

080078f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b089      	sub	sp, #36	@ 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007900:	4ba1      	ldr	r3, [pc, #644]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800790a:	4b9f      	ldr	r3, [pc, #636]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	0b1b      	lsrs	r3, r3, #12
 8007910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007914:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007916:	4b9c      	ldr	r3, [pc, #624]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007922:	4b99      	ldr	r3, [pc, #612]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	08db      	lsrs	r3, r3, #3
 8007928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	fb02 f303 	mul.w	r3, r2, r3
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8111 	beq.w	8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b02      	cmp	r3, #2
 800794a:	f000 8083 	beq.w	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b02      	cmp	r3, #2
 8007952:	f200 80a1 	bhi.w	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d056      	beq.n	8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007962:	e099      	b.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007964:	4b88      	ldr	r3, [pc, #544]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d02d      	beq.n	80079cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007970:	4b85      	ldr	r3, [pc, #532]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	08db      	lsrs	r3, r3, #3
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	4a84      	ldr	r2, [pc, #528]	@ (8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800797c:	fa22 f303 	lsr.w	r3, r2, r3
 8007980:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079ca:	e087      	b.n	8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079de:	4b6a      	ldr	r3, [pc, #424]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a0e:	e065      	b.n	8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	4b59      	ldr	r3, [pc, #356]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a52:	e043      	b.n	8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a66:	4b48      	ldr	r3, [pc, #288]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a96:	e021      	b.n	8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aaa:	4b37      	ldr	r3, [pc, #220]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007abe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ada:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007adc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae0:	0a5b      	lsrs	r3, r3, #9
 8007ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b02:	ee17 2a90 	vmov	r2, s15
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b30:	ee17 2a90 	vmov	r2, s15
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b38:	4b13      	ldr	r3, [pc, #76]	@ (8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	0e1b      	lsrs	r3, r3, #24
 8007b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b5e:	ee17 2a90 	vmov	r2, s15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b66:	e008      	b.n	8007b7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	609a      	str	r2, [r3, #8]
}
 8007b7a:	bf00      	nop
 8007b7c:	3724      	adds	r7, #36	@ 0x24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	58024400 	.word	0x58024400
 8007b8c:	03d09000 	.word	0x03d09000
 8007b90:	46000000 	.word	0x46000000
 8007b94:	4c742400 	.word	0x4c742400
 8007b98:	4a742400 	.word	0x4a742400
 8007b9c:	4af42400 	.word	0x4af42400

08007ba0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	@ 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bb2:	4b9f      	ldr	r3, [pc, #636]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb6:	0d1b      	lsrs	r3, r3, #20
 8007bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007bca:	4b99      	ldr	r3, [pc, #612]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bce:	08db      	lsrs	r3, r3, #3
 8007bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8111 	beq.w	8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	f000 8083 	beq.w	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f200 80a1 	bhi.w	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d056      	beq.n	8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c0a:	e099      	b.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c0c:	4b88      	ldr	r3, [pc, #544]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02d      	beq.n	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c18:	4b85      	ldr	r3, [pc, #532]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	08db      	lsrs	r3, r3, #3
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	4a84      	ldr	r2, [pc, #528]	@ (8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
 8007c28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b7b      	ldr	r3, [pc, #492]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c72:	e087      	b.n	8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b6a      	ldr	r3, [pc, #424]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb6:	e065      	b.n	8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	e043      	b.n	8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b48      	ldr	r3, [pc, #288]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3e:	e021      	b.n	8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d88:	0a5b      	lsrs	r3, r3, #9
 8007d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007daa:	ee17 2a90 	vmov	r2, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007db2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007de0:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	0e1b      	lsrs	r3, r3, #24
 8007de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 2a90 	vmov	r2, s15
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e0e:	e008      	b.n	8007e22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	609a      	str	r2, [r3, #8]
}
 8007e22:	bf00      	nop
 8007e24:	3724      	adds	r7, #36	@ 0x24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	58024400 	.word	0x58024400
 8007e34:	03d09000 	.word	0x03d09000
 8007e38:	46000000 	.word	0x46000000
 8007e3c:	4c742400 	.word	0x4c742400
 8007e40:	4a742400 	.word	0x4a742400
 8007e44:	4af42400 	.word	0x4af42400

08007e48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b089      	sub	sp, #36	@ 0x24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e50:	4ba0      	ldr	r3, [pc, #640]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	091b      	lsrs	r3, r3, #4
 8007e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e66:	4b9b      	ldr	r3, [pc, #620]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e70:	4b98      	ldr	r3, [pc, #608]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8111 	beq.w	80080b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	f000 8083 	beq.w	8007fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	f200 80a1 	bhi.w	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d056      	beq.n	8007f5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007eb0:	e099      	b.n	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb2:	4b88      	ldr	r3, [pc, #544]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02d      	beq.n	8007f1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ebe:	4b85      	ldr	r3, [pc, #532]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	08db      	lsrs	r3, r3, #3
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	4a83      	ldr	r2, [pc, #524]	@ (80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007eca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ece:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	ee07 3a90 	vmov	s15, r3
 8007ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef0:	ee07 3a90 	vmov	s15, r3
 8007ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f18:	e087      	b.n	800802a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f24:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80080e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2c:	4b69      	ldr	r3, [pc, #420]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f40:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f5c:	e065      	b.n	800802a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f68:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80080e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f70:	4b58      	ldr	r3, [pc, #352]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f84:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa0:	e043      	b.n	800802a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb4:	4b47      	ldr	r3, [pc, #284]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe4:	e021      	b.n	800802a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80080e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff8:	4b36      	ldr	r3, [pc, #216]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008000:	ee07 3a90 	vmov	s15, r3
 8008004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008008:	ed97 6a03 	vldr	s12, [r7, #12]
 800800c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800801c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008028:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800802a:	4b2a      	ldr	r3, [pc, #168]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802e:	0a5b      	lsrs	r3, r3, #9
 8008030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008034:	ee07 3a90 	vmov	s15, r3
 8008038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008044:	edd7 6a07 	vldr	s13, [r7, #28]
 8008048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008050:	ee17 2a90 	vmov	r2, s15
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008058:	4b1e      	ldr	r3, [pc, #120]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800806e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008072:	edd7 6a07 	vldr	s13, [r7, #28]
 8008076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800807a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800807e:	ee17 2a90 	vmov	r2, s15
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008086:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808a:	0e1b      	lsrs	r3, r3, #24
 800808c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800809c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ac:	ee17 2a90 	vmov	r2, s15
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080b4:	e008      	b.n	80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	3724      	adds	r7, #36	@ 0x24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	58024400 	.word	0x58024400
 80080d8:	03d09000 	.word	0x03d09000
 80080dc:	46000000 	.word	0x46000000
 80080e0:	4c742400 	.word	0x4c742400
 80080e4:	4a742400 	.word	0x4a742400
 80080e8:	4af42400 	.word	0x4af42400

080080ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080fa:	4b53      	ldr	r3, [pc, #332]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b03      	cmp	r3, #3
 8008104:	d101      	bne.n	800810a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e099      	b.n	800823e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800810a:	4b4f      	ldr	r3, [pc, #316]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a4e      	ldr	r2, [pc, #312]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008110:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008116:	f7f9 fb6b 	bl	80017f0 <HAL_GetTick>
 800811a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800811c:	e008      	b.n	8008130 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800811e:	f7f9 fb67 	bl	80017f0 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e086      	b.n	800823e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008130:	4b45      	ldr	r3, [pc, #276]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1f0      	bne.n	800811e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800813c:	4b42      	ldr	r3, [pc, #264]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	031b      	lsls	r3, r3, #12
 800814a:	493f      	ldr	r1, [pc, #252]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 800814c:	4313      	orrs	r3, r2
 800814e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	3b01      	subs	r3, #1
 8008156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	3b01      	subs	r3, #1
 8008160:	025b      	lsls	r3, r3, #9
 8008162:	b29b      	uxth	r3, r3
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	3b01      	subs	r3, #1
 800816c:	041b      	lsls	r3, r3, #16
 800816e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	061b      	lsls	r3, r3, #24
 800817c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008180:	4931      	ldr	r1, [pc, #196]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008182:	4313      	orrs	r3, r2
 8008184:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008186:	4b30      	ldr	r3, [pc, #192]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	492d      	ldr	r1, [pc, #180]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008194:	4313      	orrs	r3, r2
 8008196:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008198:	4b2b      	ldr	r3, [pc, #172]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 800819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819c:	f023 0220 	bic.w	r2, r3, #32
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4928      	ldr	r1, [pc, #160]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081aa:	4b27      	ldr	r3, [pc, #156]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	4a26      	ldr	r2, [pc, #152]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081b0:	f023 0310 	bic.w	r3, r3, #16
 80081b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081b6:	4b24      	ldr	r3, [pc, #144]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081ba:	4b24      	ldr	r3, [pc, #144]	@ (800824c <RCCEx_PLL2_Config+0x160>)
 80081bc:	4013      	ands	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	69d2      	ldr	r2, [r2, #28]
 80081c2:	00d2      	lsls	r2, r2, #3
 80081c4:	4920      	ldr	r1, [pc, #128]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	f043 0310 	orr.w	r3, r3, #16
 80081d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	4a19      	ldr	r2, [pc, #100]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081e8:	e00f      	b.n	800820a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081f0:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	4a14      	ldr	r2, [pc, #80]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 80081f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081fc:	e005      	b.n	800820a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081fe:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	4a11      	ldr	r2, [pc, #68]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008208:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800820a:	4b0f      	ldr	r3, [pc, #60]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a0e      	ldr	r2, [pc, #56]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008210:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008216:	f7f9 faeb 	bl	80017f0 <HAL_GetTick>
 800821a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800821c:	e008      	b.n	8008230 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800821e:	f7f9 fae7 	bl	80017f0 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e006      	b.n	800823e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <RCCEx_PLL2_Config+0x15c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
 800824c:	ffff0007 	.word	0xffff0007

08008250 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800825e:	4b53      	ldr	r3, [pc, #332]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b03      	cmp	r3, #3
 8008268:	d101      	bne.n	800826e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e099      	b.n	80083a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800826e:	4b4f      	ldr	r3, [pc, #316]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a4e      	ldr	r2, [pc, #312]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800827a:	f7f9 fab9 	bl	80017f0 <HAL_GetTick>
 800827e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008280:	e008      	b.n	8008294 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008282:	f7f9 fab5 	bl	80017f0 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e086      	b.n	80083a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008294:	4b45      	ldr	r3, [pc, #276]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f0      	bne.n	8008282 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082a0:	4b42      	ldr	r3, [pc, #264]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	051b      	lsls	r3, r3, #20
 80082ae:	493f      	ldr	r1, [pc, #252]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	025b      	lsls	r3, r3, #9
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	041b      	lsls	r3, r3, #16
 80082d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	3b01      	subs	r3, #1
 80082de:	061b      	lsls	r3, r3, #24
 80082e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082e4:	4931      	ldr	r1, [pc, #196]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082ea:	4b30      	ldr	r3, [pc, #192]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	492d      	ldr	r1, [pc, #180]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082fc:	4b2b      	ldr	r3, [pc, #172]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	4928      	ldr	r1, [pc, #160]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 800830a:	4313      	orrs	r3, r2
 800830c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800830e:	4b27      	ldr	r3, [pc, #156]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008312:	4a26      	ldr	r2, [pc, #152]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800831a:	4b24      	ldr	r3, [pc, #144]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 800831c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800831e:	4b24      	ldr	r3, [pc, #144]	@ (80083b0 <RCCEx_PLL3_Config+0x160>)
 8008320:	4013      	ands	r3, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	69d2      	ldr	r2, [r2, #28]
 8008326:	00d2      	lsls	r2, r2, #3
 8008328:	4920      	ldr	r1, [pc, #128]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800832e:	4b1f      	ldr	r3, [pc, #124]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008332:	4a1e      	ldr	r2, [pc, #120]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008340:	4b1a      	ldr	r3, [pc, #104]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4a19      	ldr	r2, [pc, #100]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800834a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800834c:	e00f      	b.n	800836e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d106      	bne.n	8008362 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008354:	4b15      	ldr	r3, [pc, #84]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	4a14      	ldr	r2, [pc, #80]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 800835a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800835e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008360:	e005      	b.n	800836e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	4a11      	ldr	r2, [pc, #68]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008368:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800836c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800836e:	4b0f      	ldr	r3, [pc, #60]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a0e      	ldr	r2, [pc, #56]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800837a:	f7f9 fa39 	bl	80017f0 <HAL_GetTick>
 800837e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008380:	e008      	b.n	8008394 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008382:	f7f9 fa35 	bl	80017f0 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e006      	b.n	80083a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <RCCEx_PLL3_Config+0x15c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0f0      	beq.n	8008382 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
 80083b0:	ffff0007 	.word	0xffff0007

080083b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e049      	b.n	800845a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7f8 ff9a 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f000 f836 	bl	8008464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a46      	ldr	r2, [pc, #280]	@ (8008590 <TIM_Base_SetConfig+0x12c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008482:	d00f      	beq.n	80084a4 <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a43      	ldr	r2, [pc, #268]	@ (8008594 <TIM_Base_SetConfig+0x130>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00b      	beq.n	80084a4 <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a42      	ldr	r2, [pc, #264]	@ (8008598 <TIM_Base_SetConfig+0x134>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d007      	beq.n	80084a4 <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a41      	ldr	r2, [pc, #260]	@ (800859c <TIM_Base_SetConfig+0x138>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d003      	beq.n	80084a4 <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a40      	ldr	r2, [pc, #256]	@ (80085a0 <TIM_Base_SetConfig+0x13c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d108      	bne.n	80084b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a35      	ldr	r2, [pc, #212]	@ (8008590 <TIM_Base_SetConfig+0x12c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01f      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c4:	d01b      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a32      	ldr	r2, [pc, #200]	@ (8008594 <TIM_Base_SetConfig+0x130>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d017      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a31      	ldr	r2, [pc, #196]	@ (8008598 <TIM_Base_SetConfig+0x134>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a30      	ldr	r2, [pc, #192]	@ (800859c <TIM_Base_SetConfig+0x138>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2f      	ldr	r2, [pc, #188]	@ (80085a0 <TIM_Base_SetConfig+0x13c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2e      	ldr	r2, [pc, #184]	@ (80085a4 <TIM_Base_SetConfig+0x140>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a2d      	ldr	r2, [pc, #180]	@ (80085a8 <TIM_Base_SetConfig+0x144>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_Base_SetConfig+0x9a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a2c      	ldr	r2, [pc, #176]	@ (80085ac <TIM_Base_SetConfig+0x148>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d108      	bne.n	8008510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a16      	ldr	r2, [pc, #88]	@ (8008590 <TIM_Base_SetConfig+0x12c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00f      	beq.n	800855c <TIM_Base_SetConfig+0xf8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a18      	ldr	r2, [pc, #96]	@ (80085a0 <TIM_Base_SetConfig+0x13c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00b      	beq.n	800855c <TIM_Base_SetConfig+0xf8>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a17      	ldr	r2, [pc, #92]	@ (80085a4 <TIM_Base_SetConfig+0x140>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d007      	beq.n	800855c <TIM_Base_SetConfig+0xf8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a16      	ldr	r2, [pc, #88]	@ (80085a8 <TIM_Base_SetConfig+0x144>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_Base_SetConfig+0xf8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	@ (80085ac <TIM_Base_SetConfig+0x148>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d103      	bne.n	8008564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	d105      	bne.n	8008582 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	611a      	str	r2, [r3, #16]
  }
}
 8008582:	bf00      	nop
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40010000 	.word	0x40010000
 8008594:	40000400 	.word	0x40000400
 8008598:	40000800 	.word	0x40000800
 800859c:	40000c00 	.word	0x40000c00
 80085a0:	40010400 	.word	0x40010400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800

080085b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e06d      	b.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a30      	ldr	r2, [pc, #192]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2f      	ldr	r2, [pc, #188]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d108      	bne.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d022      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	d01d      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1d      	ldr	r2, [pc, #116]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d018      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d013      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00e      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a15      	ldr	r2, [pc, #84]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d009      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a16      	ldr	r2, [pc, #88]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d004      	beq.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a15      	ldr	r2, [pc, #84]	@ (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d10c      	bne.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800867e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	4313      	orrs	r3, r2
 8008688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40001800 	.word	0x40001800
 80086c8:	40014000 	.word	0x40014000

080086cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e042      	b.n	8008764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7f8 fe7d 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2224      	movs	r2, #36	@ 0x24
 80086fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0201 	bic.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fd90 	bl	800923c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f825 	bl	800876c <UART_SetConfig>
 8008722:	4603      	mov	r3, r0
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e01b      	b.n	8008764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800873a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800874a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fe0f 	bl	8009380 <UART_CheckIdleState>
 8008762:	4603      	mov	r3, r0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800876c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008770:	b092      	sub	sp, #72	@ 0x48
 8008772:	af00      	add	r7, sp, #0
 8008774:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	431a      	orrs	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	431a      	orrs	r2, r3
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	4313      	orrs	r3, r2
 8008792:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4bbe      	ldr	r3, [pc, #760]	@ (8008a94 <UART_SetConfig+0x328>)
 800879c:	4013      	ands	r3, r2
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087a4:	430b      	orrs	r3, r1
 80087a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4ab3      	ldr	r2, [pc, #716]	@ (8008a98 <UART_SetConfig+0x32c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d004      	beq.n	80087d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087d4:	4313      	orrs	r3, r2
 80087d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	4baf      	ldr	r3, [pc, #700]	@ (8008a9c <UART_SetConfig+0x330>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	f023 010f 	bic.w	r1, r3, #15
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4aa6      	ldr	r2, [pc, #664]	@ (8008aa0 <UART_SetConfig+0x334>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d177      	bne.n	80088fc <UART_SetConfig+0x190>
 800880c:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa4 <UART_SetConfig+0x338>)
 800880e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008814:	2b28      	cmp	r3, #40	@ 0x28
 8008816:	d86d      	bhi.n	80088f4 <UART_SetConfig+0x188>
 8008818:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <UART_SetConfig+0xb4>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	080088c5 	.word	0x080088c5
 8008824:	080088f5 	.word	0x080088f5
 8008828:	080088f5 	.word	0x080088f5
 800882c:	080088f5 	.word	0x080088f5
 8008830:	080088f5 	.word	0x080088f5
 8008834:	080088f5 	.word	0x080088f5
 8008838:	080088f5 	.word	0x080088f5
 800883c:	080088f5 	.word	0x080088f5
 8008840:	080088cd 	.word	0x080088cd
 8008844:	080088f5 	.word	0x080088f5
 8008848:	080088f5 	.word	0x080088f5
 800884c:	080088f5 	.word	0x080088f5
 8008850:	080088f5 	.word	0x080088f5
 8008854:	080088f5 	.word	0x080088f5
 8008858:	080088f5 	.word	0x080088f5
 800885c:	080088f5 	.word	0x080088f5
 8008860:	080088d5 	.word	0x080088d5
 8008864:	080088f5 	.word	0x080088f5
 8008868:	080088f5 	.word	0x080088f5
 800886c:	080088f5 	.word	0x080088f5
 8008870:	080088f5 	.word	0x080088f5
 8008874:	080088f5 	.word	0x080088f5
 8008878:	080088f5 	.word	0x080088f5
 800887c:	080088f5 	.word	0x080088f5
 8008880:	080088dd 	.word	0x080088dd
 8008884:	080088f5 	.word	0x080088f5
 8008888:	080088f5 	.word	0x080088f5
 800888c:	080088f5 	.word	0x080088f5
 8008890:	080088f5 	.word	0x080088f5
 8008894:	080088f5 	.word	0x080088f5
 8008898:	080088f5 	.word	0x080088f5
 800889c:	080088f5 	.word	0x080088f5
 80088a0:	080088e5 	.word	0x080088e5
 80088a4:	080088f5 	.word	0x080088f5
 80088a8:	080088f5 	.word	0x080088f5
 80088ac:	080088f5 	.word	0x080088f5
 80088b0:	080088f5 	.word	0x080088f5
 80088b4:	080088f5 	.word	0x080088f5
 80088b8:	080088f5 	.word	0x080088f5
 80088bc:	080088f5 	.word	0x080088f5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e222      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e21e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e21a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e216      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088e4:	2320      	movs	r3, #32
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e212      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088ec:	2340      	movs	r3, #64	@ 0x40
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e20e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e20a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a69      	ldr	r2, [pc, #420]	@ (8008aa8 <UART_SetConfig+0x33c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d130      	bne.n	8008968 <UART_SetConfig+0x1fc>
 8008906:	4b67      	ldr	r3, [pc, #412]	@ (8008aa4 <UART_SetConfig+0x338>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b05      	cmp	r3, #5
 8008910:	d826      	bhi.n	8008960 <UART_SetConfig+0x1f4>
 8008912:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <UART_SetConfig+0x1ac>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008931 	.word	0x08008931
 800891c:	08008939 	.word	0x08008939
 8008920:	08008941 	.word	0x08008941
 8008924:	08008949 	.word	0x08008949
 8008928:	08008951 	.word	0x08008951
 800892c:	08008959 	.word	0x08008959
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008936:	e1ec      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e1e8      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e1e4      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e1e0      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008950:	2320      	movs	r3, #32
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1dc      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008958:	2340      	movs	r3, #64	@ 0x40
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e1d8      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008960:	2380      	movs	r3, #128	@ 0x80
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e1d4      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a4f      	ldr	r2, [pc, #316]	@ (8008aac <UART_SetConfig+0x340>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d130      	bne.n	80089d4 <UART_SetConfig+0x268>
 8008972:	4b4c      	ldr	r3, [pc, #304]	@ (8008aa4 <UART_SetConfig+0x338>)
 8008974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b05      	cmp	r3, #5
 800897c:	d826      	bhi.n	80089cc <UART_SetConfig+0x260>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x218>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	0800899d 	.word	0x0800899d
 8008988:	080089a5 	.word	0x080089a5
 800898c:	080089ad 	.word	0x080089ad
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089c5 	.word	0x080089c5
 800899c:	2300      	movs	r3, #0
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a2:	e1b6      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089a4:	2304      	movs	r3, #4
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e1b2      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089ac:	2308      	movs	r3, #8
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e1ae      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089b4:	2310      	movs	r3, #16
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e1aa      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089bc:	2320      	movs	r3, #32
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e1a6      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089c4:	2340      	movs	r3, #64	@ 0x40
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e1a2      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e19e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a35      	ldr	r2, [pc, #212]	@ (8008ab0 <UART_SetConfig+0x344>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d130      	bne.n	8008a40 <UART_SetConfig+0x2d4>
 80089de:	4b31      	ldr	r3, [pc, #196]	@ (8008aa4 <UART_SetConfig+0x338>)
 80089e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d826      	bhi.n	8008a38 <UART_SetConfig+0x2cc>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <UART_SetConfig+0x284>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a09 	.word	0x08008a09
 80089f4:	08008a11 	.word	0x08008a11
 80089f8:	08008a19 	.word	0x08008a19
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0e:	e180      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a10:	2304      	movs	r3, #4
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e17c      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e178      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e174      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e170      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a30:	2340      	movs	r3, #64	@ 0x40
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e16c      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e168      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab4 <UART_SetConfig+0x348>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d142      	bne.n	8008ad0 <UART_SetConfig+0x364>
 8008a4a:	4b16      	ldr	r3, [pc, #88]	@ (8008aa4 <UART_SetConfig+0x338>)
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	d838      	bhi.n	8008ac8 <UART_SetConfig+0x35c>
 8008a56:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <UART_SetConfig+0x2f0>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a75 	.word	0x08008a75
 8008a60:	08008a7d 	.word	0x08008a7d
 8008a64:	08008a85 	.word	0x08008a85
 8008a68:	08008a8d 	.word	0x08008a8d
 8008a6c:	08008ab9 	.word	0x08008ab9
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	2300      	movs	r3, #0
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7a:	e14a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a82:	e146      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a84:	2308      	movs	r3, #8
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8a:	e142      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a92:	e13e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008a94:	cfff69f3 	.word	0xcfff69f3
 8008a98:	58000c00 	.word	0x58000c00
 8008a9c:	11fff4ff 	.word	0x11fff4ff
 8008aa0:	40011000 	.word	0x40011000
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	40004400 	.word	0x40004400
 8008aac:	40004800 	.word	0x40004800
 8008ab0:	40004c00 	.word	0x40004c00
 8008ab4:	40005000 	.word	0x40005000
 8008ab8:	2320      	movs	r3, #32
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008abe:	e128      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ac0:	2340      	movs	r3, #64	@ 0x40
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac6:	e124      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ac8:	2380      	movs	r3, #128	@ 0x80
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ace:	e120      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4acb      	ldr	r2, [pc, #812]	@ (8008e04 <UART_SetConfig+0x698>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d176      	bne.n	8008bc8 <UART_SetConfig+0x45c>
 8008ada:	4bcb      	ldr	r3, [pc, #812]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae2:	2b28      	cmp	r3, #40	@ 0x28
 8008ae4:	d86c      	bhi.n	8008bc0 <UART_SetConfig+0x454>
 8008ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aec <UART_SetConfig+0x380>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b91 	.word	0x08008b91
 8008af0:	08008bc1 	.word	0x08008bc1
 8008af4:	08008bc1 	.word	0x08008bc1
 8008af8:	08008bc1 	.word	0x08008bc1
 8008afc:	08008bc1 	.word	0x08008bc1
 8008b00:	08008bc1 	.word	0x08008bc1
 8008b04:	08008bc1 	.word	0x08008bc1
 8008b08:	08008bc1 	.word	0x08008bc1
 8008b0c:	08008b99 	.word	0x08008b99
 8008b10:	08008bc1 	.word	0x08008bc1
 8008b14:	08008bc1 	.word	0x08008bc1
 8008b18:	08008bc1 	.word	0x08008bc1
 8008b1c:	08008bc1 	.word	0x08008bc1
 8008b20:	08008bc1 	.word	0x08008bc1
 8008b24:	08008bc1 	.word	0x08008bc1
 8008b28:	08008bc1 	.word	0x08008bc1
 8008b2c:	08008ba1 	.word	0x08008ba1
 8008b30:	08008bc1 	.word	0x08008bc1
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008bc1 	.word	0x08008bc1
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008bc1 	.word	0x08008bc1
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008ba9 	.word	0x08008ba9
 8008b50:	08008bc1 	.word	0x08008bc1
 8008b54:	08008bc1 	.word	0x08008bc1
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008bc1 	.word	0x08008bc1
 8008b60:	08008bc1 	.word	0x08008bc1
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	08008bc1 	.word	0x08008bc1
 8008b74:	08008bc1 	.word	0x08008bc1
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bc1 	.word	0x08008bc1
 8008b88:	08008bc1 	.word	0x08008bc1
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e0bc      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e0b8      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e0b4      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e0b0      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e0ac      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008bb8:	2340      	movs	r3, #64	@ 0x40
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e0a8      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008bc0:	2380      	movs	r3, #128	@ 0x80
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e0a4      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a8f      	ldr	r2, [pc, #572]	@ (8008e0c <UART_SetConfig+0x6a0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d130      	bne.n	8008c34 <UART_SetConfig+0x4c8>
 8008bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	d826      	bhi.n	8008c2c <UART_SetConfig+0x4c0>
 8008bde:	a201      	add	r2, pc, #4	@ (adr r2, 8008be4 <UART_SetConfig+0x478>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008bfd 	.word	0x08008bfd
 8008be8:	08008c05 	.word	0x08008c05
 8008bec:	08008c0d 	.word	0x08008c0d
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008c1d 	.word	0x08008c1d
 8008bf8:	08008c25 	.word	0x08008c25
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e086      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c04:	2304      	movs	r3, #4
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e082      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e07e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c14:	2310      	movs	r3, #16
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e07a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e076      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c24:	2340      	movs	r3, #64	@ 0x40
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e072      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c2c:	2380      	movs	r3, #128	@ 0x80
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e06e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a75      	ldr	r2, [pc, #468]	@ (8008e10 <UART_SetConfig+0x6a4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d130      	bne.n	8008ca0 <UART_SetConfig+0x534>
 8008c3e:	4b72      	ldr	r3, [pc, #456]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	d826      	bhi.n	8008c98 <UART_SetConfig+0x52c>
 8008c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <UART_SetConfig+0x4e4>)
 8008c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c50:	08008c69 	.word	0x08008c69
 8008c54:	08008c71 	.word	0x08008c71
 8008c58:	08008c79 	.word	0x08008c79
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008c89 	.word	0x08008c89
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e050      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c70:	2304      	movs	r3, #4
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e04c      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e048      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c80:	2310      	movs	r3, #16
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e044      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c88:	2320      	movs	r3, #32
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e040      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c90:	2340      	movs	r3, #64	@ 0x40
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e03c      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008c98:	2380      	movs	r3, #128	@ 0x80
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e038      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a5b      	ldr	r2, [pc, #364]	@ (8008e14 <UART_SetConfig+0x6a8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d130      	bne.n	8008d0c <UART_SetConfig+0x5a0>
 8008caa:	4b57      	ldr	r3, [pc, #348]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	d826      	bhi.n	8008d04 <UART_SetConfig+0x598>
 8008cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cbc <UART_SetConfig+0x550>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008cd5 	.word	0x08008cd5
 8008cc0:	08008cdd 	.word	0x08008cdd
 8008cc4:	08008ce5 	.word	0x08008ce5
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	08008cf5 	.word	0x08008cf5
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e01a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008cdc:	2304      	movs	r3, #4
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e016      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e012      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008cec:	2310      	movs	r3, #16
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e00e      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e00a      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008cfc:	2340      	movs	r3, #64	@ 0x40
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e006      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008d04:	2380      	movs	r3, #128	@ 0x80
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e002      	b.n	8008d12 <UART_SetConfig+0x5a6>
 8008d0c:	2380      	movs	r3, #128	@ 0x80
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a3f      	ldr	r2, [pc, #252]	@ (8008e14 <UART_SetConfig+0x6a8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	f040 80f8 	bne.w	8008f0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d22:	2b20      	cmp	r3, #32
 8008d24:	dc46      	bgt.n	8008db4 <UART_SetConfig+0x648>
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f2c0 8082 	blt.w	8008e30 <UART_SetConfig+0x6c4>
 8008d2c:	3b02      	subs	r3, #2
 8008d2e:	2b1e      	cmp	r3, #30
 8008d30:	d87e      	bhi.n	8008e30 <UART_SetConfig+0x6c4>
 8008d32:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <UART_SetConfig+0x5cc>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008dbb 	.word	0x08008dbb
 8008d3c:	08008e31 	.word	0x08008e31
 8008d40:	08008dc3 	.word	0x08008dc3
 8008d44:	08008e31 	.word	0x08008e31
 8008d48:	08008e31 	.word	0x08008e31
 8008d4c:	08008e31 	.word	0x08008e31
 8008d50:	08008dd3 	.word	0x08008dd3
 8008d54:	08008e31 	.word	0x08008e31
 8008d58:	08008e31 	.word	0x08008e31
 8008d5c:	08008e31 	.word	0x08008e31
 8008d60:	08008e31 	.word	0x08008e31
 8008d64:	08008e31 	.word	0x08008e31
 8008d68:	08008e31 	.word	0x08008e31
 8008d6c:	08008e31 	.word	0x08008e31
 8008d70:	08008de3 	.word	0x08008de3
 8008d74:	08008e31 	.word	0x08008e31
 8008d78:	08008e31 	.word	0x08008e31
 8008d7c:	08008e31 	.word	0x08008e31
 8008d80:	08008e31 	.word	0x08008e31
 8008d84:	08008e31 	.word	0x08008e31
 8008d88:	08008e31 	.word	0x08008e31
 8008d8c:	08008e31 	.word	0x08008e31
 8008d90:	08008e31 	.word	0x08008e31
 8008d94:	08008e31 	.word	0x08008e31
 8008d98:	08008e31 	.word	0x08008e31
 8008d9c:	08008e31 	.word	0x08008e31
 8008da0:	08008e31 	.word	0x08008e31
 8008da4:	08008e31 	.word	0x08008e31
 8008da8:	08008e31 	.word	0x08008e31
 8008dac:	08008e31 	.word	0x08008e31
 8008db0:	08008e23 	.word	0x08008e23
 8008db4:	2b40      	cmp	r3, #64	@ 0x40
 8008db6:	d037      	beq.n	8008e28 <UART_SetConfig+0x6bc>
 8008db8:	e03a      	b.n	8008e30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dba:	f7fe fd87 	bl	80078cc <HAL_RCCEx_GetD3PCLK1Freq>
 8008dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e03c      	b.n	8008e3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fd96 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd0:	e034      	b.n	8008e3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd2:	f107 0318 	add.w	r3, r7, #24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fee2 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de0:	e02c      	b.n	8008e3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de2:	4b09      	ldr	r3, [pc, #36]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d016      	beq.n	8008e1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dee:	4b06      	ldr	r3, [pc, #24]	@ (8008e08 <UART_SetConfig+0x69c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	4a07      	ldr	r2, [pc, #28]	@ (8008e18 <UART_SetConfig+0x6ac>)
 8008dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e00:	e01c      	b.n	8008e3c <UART_SetConfig+0x6d0>
 8008e02:	bf00      	nop
 8008e04:	40011400 	.word	0x40011400
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	40007800 	.word	0x40007800
 8008e10:	40007c00 	.word	0x40007c00
 8008e14:	58000c00 	.word	0x58000c00
 8008e18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8009094 <UART_SetConfig+0x928>)
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e20:	e00c      	b.n	8008e3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e22:	4b9d      	ldr	r3, [pc, #628]	@ (8009098 <UART_SetConfig+0x92c>)
 8008e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e26:	e009      	b.n	8008e3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2e:	e005      	b.n	8008e3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 81de 	beq.w	8009200 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e48:	4a94      	ldr	r2, [pc, #592]	@ (800909c <UART_SetConfig+0x930>)
 8008e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	4413      	add	r3, r2
 8008e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d305      	bcc.n	8008e74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d903      	bls.n	8008e7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e7a:	e1c1      	b.n	8009200 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7e:	2200      	movs	r2, #0
 8008e80:	60bb      	str	r3, [r7, #8]
 8008e82:	60fa      	str	r2, [r7, #12]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	4a84      	ldr	r2, [pc, #528]	@ (800909c <UART_SetConfig+0x930>)
 8008e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2200      	movs	r2, #0
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e9e:	f7f7 fa1b 	bl	80002d8 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	020b      	lsls	r3, r1, #8
 8008eb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008eb8:	0202      	lsls	r2, r0, #8
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	6849      	ldr	r1, [r1, #4]
 8008ebe:	0849      	lsrs	r1, r1, #1
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	eb12 0804 	adds.w	r8, r2, r4
 8008eca:	eb43 0905 	adc.w	r9, r3, r5
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	4693      	mov	fp, r2
 8008ed8:	4652      	mov	r2, sl
 8008eda:	465b      	mov	r3, fp
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 f9fa 	bl	80002d8 <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4613      	mov	r3, r2
 8008eea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ef2:	d308      	bcc.n	8008f06 <UART_SetConfig+0x79a>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008efa:	d204      	bcs.n	8008f06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	e17c      	b.n	8009200 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f0c:	e178      	b.n	8009200 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f16:	f040 80c5 	bne.w	80090a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	dc48      	bgt.n	8008fb4 <UART_SetConfig+0x848>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db7b      	blt.n	800901e <UART_SetConfig+0x8b2>
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	d879      	bhi.n	800901e <UART_SetConfig+0x8b2>
 8008f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <UART_SetConfig+0x7c4>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	08008fc3 	.word	0x08008fc3
 8008f38:	0800901f 	.word	0x0800901f
 8008f3c:	0800901f 	.word	0x0800901f
 8008f40:	08008fcb 	.word	0x08008fcb
 8008f44:	0800901f 	.word	0x0800901f
 8008f48:	0800901f 	.word	0x0800901f
 8008f4c:	0800901f 	.word	0x0800901f
 8008f50:	08008fdb 	.word	0x08008fdb
 8008f54:	0800901f 	.word	0x0800901f
 8008f58:	0800901f 	.word	0x0800901f
 8008f5c:	0800901f 	.word	0x0800901f
 8008f60:	0800901f 	.word	0x0800901f
 8008f64:	0800901f 	.word	0x0800901f
 8008f68:	0800901f 	.word	0x0800901f
 8008f6c:	0800901f 	.word	0x0800901f
 8008f70:	08008feb 	.word	0x08008feb
 8008f74:	0800901f 	.word	0x0800901f
 8008f78:	0800901f 	.word	0x0800901f
 8008f7c:	0800901f 	.word	0x0800901f
 8008f80:	0800901f 	.word	0x0800901f
 8008f84:	0800901f 	.word	0x0800901f
 8008f88:	0800901f 	.word	0x0800901f
 8008f8c:	0800901f 	.word	0x0800901f
 8008f90:	0800901f 	.word	0x0800901f
 8008f94:	0800901f 	.word	0x0800901f
 8008f98:	0800901f 	.word	0x0800901f
 8008f9c:	0800901f 	.word	0x0800901f
 8008fa0:	0800901f 	.word	0x0800901f
 8008fa4:	0800901f 	.word	0x0800901f
 8008fa8:	0800901f 	.word	0x0800901f
 8008fac:	0800901f 	.word	0x0800901f
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	2b40      	cmp	r3, #64	@ 0x40
 8008fb6:	d02e      	beq.n	8009016 <UART_SetConfig+0x8aa>
 8008fb8:	e031      	b.n	800901e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fba:	f7fc fcd1 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 8008fbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fc0:	e033      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc2:	f7fc fce3 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 8008fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e02f      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fc92 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd8:	e027      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fda:	f107 0318 	add.w	r3, r7, #24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fdde 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe8:	e01f      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fea:	4b2d      	ldr	r3, [pc, #180]	@ (80090a0 <UART_SetConfig+0x934>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80090a0 <UART_SetConfig+0x934>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	08db      	lsrs	r3, r3, #3
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	4a24      	ldr	r2, [pc, #144]	@ (8009094 <UART_SetConfig+0x928>)
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009008:	e00f      	b.n	800902a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800900a:	4b22      	ldr	r3, [pc, #136]	@ (8009094 <UART_SetConfig+0x928>)
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900e:	e00c      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009010:	4b21      	ldr	r3, [pc, #132]	@ (8009098 <UART_SetConfig+0x92c>)
 8009012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009014:	e009      	b.n	800902a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901c:	e005      	b.n	800902a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80e7 	beq.w	8009200 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	4a19      	ldr	r2, [pc, #100]	@ (800909c <UART_SetConfig+0x930>)
 8009038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800903c:	461a      	mov	r2, r3
 800903e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009040:	fbb3 f3f2 	udiv	r3, r3, r2
 8009044:	005a      	lsls	r2, r3, #1
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	441a      	add	r2, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	fbb2 f3f3 	udiv	r3, r2, r3
 8009056:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905a:	2b0f      	cmp	r3, #15
 800905c:	d916      	bls.n	800908c <UART_SetConfig+0x920>
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009064:	d212      	bcs.n	800908c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	b29b      	uxth	r3, r3
 800906a:	f023 030f 	bic.w	r3, r3, #15
 800906e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	b29a      	uxth	r2, r3
 800907c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800907e:	4313      	orrs	r3, r2
 8009080:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	e0b9      	b.n	8009200 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009092:	e0b5      	b.n	8009200 <UART_SetConfig+0xa94>
 8009094:	03d09000 	.word	0x03d09000
 8009098:	003d0900 	.word	0x003d0900
 800909c:	08009f1c 	.word	0x08009f1c
 80090a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	dc49      	bgt.n	8009140 <UART_SetConfig+0x9d4>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db7c      	blt.n	80091aa <UART_SetConfig+0xa3e>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d87a      	bhi.n	80091aa <UART_SetConfig+0xa3e>
 80090b4:	a201      	add	r2, pc, #4	@ (adr r2, 80090bc <UART_SetConfig+0x950>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	08009147 	.word	0x08009147
 80090c0:	0800914f 	.word	0x0800914f
 80090c4:	080091ab 	.word	0x080091ab
 80090c8:	080091ab 	.word	0x080091ab
 80090cc:	08009157 	.word	0x08009157
 80090d0:	080091ab 	.word	0x080091ab
 80090d4:	080091ab 	.word	0x080091ab
 80090d8:	080091ab 	.word	0x080091ab
 80090dc:	08009167 	.word	0x08009167
 80090e0:	080091ab 	.word	0x080091ab
 80090e4:	080091ab 	.word	0x080091ab
 80090e8:	080091ab 	.word	0x080091ab
 80090ec:	080091ab 	.word	0x080091ab
 80090f0:	080091ab 	.word	0x080091ab
 80090f4:	080091ab 	.word	0x080091ab
 80090f8:	080091ab 	.word	0x080091ab
 80090fc:	08009177 	.word	0x08009177
 8009100:	080091ab 	.word	0x080091ab
 8009104:	080091ab 	.word	0x080091ab
 8009108:	080091ab 	.word	0x080091ab
 800910c:	080091ab 	.word	0x080091ab
 8009110:	080091ab 	.word	0x080091ab
 8009114:	080091ab 	.word	0x080091ab
 8009118:	080091ab 	.word	0x080091ab
 800911c:	080091ab 	.word	0x080091ab
 8009120:	080091ab 	.word	0x080091ab
 8009124:	080091ab 	.word	0x080091ab
 8009128:	080091ab 	.word	0x080091ab
 800912c:	080091ab 	.word	0x080091ab
 8009130:	080091ab 	.word	0x080091ab
 8009134:	080091ab 	.word	0x080091ab
 8009138:	080091ab 	.word	0x080091ab
 800913c:	0800919d 	.word	0x0800919d
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	d02e      	beq.n	80091a2 <UART_SetConfig+0xa36>
 8009144:	e031      	b.n	80091aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009146:	f7fc fc0b 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 800914a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800914c:	e033      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800914e:	f7fc fc1d 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 8009152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009154:	e02f      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fbcc 	bl	80078f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	e027      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009166:	f107 0318 	add.w	r3, r7, #24
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fd18 	bl	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009174:	e01f      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009176:	4b2d      	ldr	r3, [pc, #180]	@ (800922c <UART_SetConfig+0xac0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009182:	4b2a      	ldr	r3, [pc, #168]	@ (800922c <UART_SetConfig+0xac0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	08db      	lsrs	r3, r3, #3
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	4a28      	ldr	r2, [pc, #160]	@ (8009230 <UART_SetConfig+0xac4>)
 800918e:	fa22 f303 	lsr.w	r3, r2, r3
 8009192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009194:	e00f      	b.n	80091b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009196:	4b26      	ldr	r3, [pc, #152]	@ (8009230 <UART_SetConfig+0xac4>)
 8009198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800919a:	e00c      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800919c:	4b25      	ldr	r3, [pc, #148]	@ (8009234 <UART_SetConfig+0xac8>)
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a0:	e009      	b.n	80091b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a8:	e005      	b.n	80091b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091b4:	bf00      	nop
    }

    if (pclk != 0U)
 80091b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d021      	beq.n	8009200 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <UART_SetConfig+0xacc>)
 80091c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091c6:	461a      	mov	r2, r3
 80091c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	441a      	add	r2, r3
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	2b0f      	cmp	r3, #15
 80091e4:	d909      	bls.n	80091fa <UART_SetConfig+0xa8e>
 80091e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ec:	d205      	bcs.n	80091fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60da      	str	r2, [r3, #12]
 80091f8:	e002      	b.n	8009200 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2200      	movs	r2, #0
 8009214:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2200      	movs	r2, #0
 800921a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800921c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009220:	4618      	mov	r0, r3
 8009222:	3748      	adds	r7, #72	@ 0x48
 8009224:	46bd      	mov	sp, r7
 8009226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800922a:	bf00      	nop
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	003d0900 	.word	0x003d0900
 8009238:	08009f1c 	.word	0x08009f1c

0800923c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01a      	beq.n	8009352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800933a:	d10a      	bne.n	8009352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	605a      	str	r2, [r3, #4]
  }
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b098      	sub	sp, #96	@ 0x60
 8009384:	af02      	add	r7, sp, #8
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009390:	f7f8 fa2e 	bl	80017f0 <HAL_GetTick>
 8009394:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0308 	and.w	r3, r3, #8
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d12f      	bne.n	8009404 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093ac:	2200      	movs	r2, #0
 80093ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f88e 	bl	80094d4 <UART_WaitOnFlagUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d022      	beq.n	8009404 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e6      	bne.n	80093be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e063      	b.n	80094cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b04      	cmp	r3, #4
 8009410:	d149      	bne.n	80094a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009412:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800941a:	2200      	movs	r2, #0
 800941c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f857 	bl	80094d4 <UART_WaitOnFlagUntilTimeout>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d03c      	beq.n	80094a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	623b      	str	r3, [r7, #32]
   return(result);
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800944a:	633b      	str	r3, [r7, #48]	@ 0x30
 800944c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e6      	bne.n	800942c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	60fb      	str	r3, [r7, #12]
   return(result);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f023 0301 	bic.w	r3, r3, #1
 8009474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	69b9      	ldr	r1, [r7, #24]
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	617b      	str	r3, [r7, #20]
   return(result);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e5      	bne.n	800945e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e012      	b.n	80094cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3758      	adds	r7, #88	@ 0x58
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e4:	e04f      	b.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d04b      	beq.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ee:	f7f8 f97f 	bl	80017f0 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d302      	bcc.n	8009504 <UART_WaitOnFlagUntilTimeout+0x30>
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e04e      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	d037      	beq.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b80      	cmp	r3, #128	@ 0x80
 800951a:	d034      	beq.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b40      	cmp	r3, #64	@ 0x40
 8009520:	d031      	beq.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f003 0308 	and.w	r3, r3, #8
 800952c:	2b08      	cmp	r3, #8
 800952e:	d110      	bne.n	8009552 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2208      	movs	r2, #8
 8009536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f839 	bl	80095b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2208      	movs	r2, #8
 8009542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e029      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800955c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009560:	d111      	bne.n	8009586 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800956a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f81f 	bl	80095b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2220      	movs	r2, #32
 8009576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e00f      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69da      	ldr	r2, [r3, #28]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4013      	ands	r3, r2
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	429a      	cmp	r2, r3
 8009594:	bf0c      	ite	eq
 8009596:	2301      	moveq	r3, #1
 8009598:	2300      	movne	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d0a0      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b095      	sub	sp, #84	@ 0x54
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80095d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e6      	bne.n	80095b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <UART_EndRxTransfer+0xc8>)
 80095fe:	4013      	ands	r3, r2
 8009600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800960a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800960c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009622:	2b01      	cmp	r3, #1
 8009624:	d118      	bne.n	8009658 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	60bb      	str	r3, [r7, #8]
   return(result);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f023 0310 	bic.w	r3, r3, #16
 800963a:	647b      	str	r3, [r7, #68]	@ 0x44
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6979      	ldr	r1, [r7, #20]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	613b      	str	r3, [r7, #16]
   return(result);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e6      	bne.n	8009626 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800966c:	bf00      	nop
 800966e:	3754      	adds	r7, #84	@ 0x54
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	effffffe 	.word	0xeffffffe

0800967c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_UARTEx_DisableFifoMode+0x16>
 800968e:	2302      	movs	r3, #2
 8009690:	e027      	b.n	80096e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	@ 0x24
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d101      	bne.n	8009706 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009702:	2302      	movs	r3, #2
 8009704:	e02d      	b.n	8009762 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2224      	movs	r2, #36	@ 0x24
 8009712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0201 	bic.w	r2, r2, #1
 800972c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f850 	bl	80097e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800977e:	2302      	movs	r3, #2
 8009780:	e02d      	b.n	80097de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2224      	movs	r2, #36	@ 0x24
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f812 	bl	80097e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d108      	bne.n	800980a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009808:	e031      	b.n	800986e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800980a:	2310      	movs	r3, #16
 800980c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800980e:	2310      	movs	r3, #16
 8009810:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	0e5b      	lsrs	r3, r3, #25
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	0f5b      	lsrs	r3, r3, #29
 800982a:	b2db      	uxtb	r3, r3
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	7b3a      	ldrb	r2, [r7, #12]
 8009836:	4911      	ldr	r1, [pc, #68]	@ (800987c <UARTEx_SetNbDataToProcess+0x94>)
 8009838:	5c8a      	ldrb	r2, [r1, r2]
 800983a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800983e:	7b3a      	ldrb	r2, [r7, #12]
 8009840:	490f      	ldr	r1, [pc, #60]	@ (8009880 <UARTEx_SetNbDataToProcess+0x98>)
 8009842:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009844:	fb93 f3f2 	sdiv	r3, r3, r2
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	7b7a      	ldrb	r2, [r7, #13]
 8009854:	4909      	ldr	r1, [pc, #36]	@ (800987c <UARTEx_SetNbDataToProcess+0x94>)
 8009856:	5c8a      	ldrb	r2, [r1, r2]
 8009858:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800985c:	7b7a      	ldrb	r2, [r7, #13]
 800985e:	4908      	ldr	r1, [pc, #32]	@ (8009880 <UARTEx_SetNbDataToProcess+0x98>)
 8009860:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009862:	fb93 f3f2 	sdiv	r3, r3, r2
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	08009f34 	.word	0x08009f34
 8009880:	08009f3c 	.word	0x08009f3c

08009884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009884:	b084      	sub	sp, #16
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	f107 001c 	add.w	r0, r7, #28
 8009892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009896:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800989a:	2b01      	cmp	r3, #1
 800989c:	d121      	bne.n	80098e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009960 <USB_CoreInit+0xdc>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d105      	bne.n	80098d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 faaa 	bl	8009e30 <USB_CoreReset>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]
 80098e0:	e01b      	b.n	800991a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa9e 	bl	8009e30 <USB_CoreReset>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009904:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	639a      	str	r2, [r3, #56]	@ 0x38
 800990c:	e005      	b.n	800991a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009912:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800991a:	7fbb      	ldrb	r3, [r7, #30]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d116      	bne.n	800994e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009924:	b29a      	uxth	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800992e:	4b0d      	ldr	r3, [pc, #52]	@ (8009964 <USB_CoreInit+0xe0>)
 8009930:	4313      	orrs	r3, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f043 0206 	orr.w	r2, r3, #6
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f043 0220 	orr.w	r2, r3, #32
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800995a:	b004      	add	sp, #16
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	ffbdffbf 	.word	0xffbdffbf
 8009964:	03ee0000 	.word	0x03ee0000

08009968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f023 0201 	bic.w	r2, r3, #1
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d115      	bne.n	80099d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80099b8:	200a      	movs	r0, #10
 80099ba:	f7f7 ff25 	bl	8001808 <HAL_Delay>
      ms += 10U;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	330a      	adds	r3, #10
 80099c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa25 	bl	8009e14 <USB_GetMode>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d01e      	beq.n	8009a0e <USB_SetCurrentMode+0x84>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80099d4:	d9f0      	bls.n	80099b8 <USB_SetCurrentMode+0x2e>
 80099d6:	e01a      	b.n	8009a0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d115      	bne.n	8009a0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80099ea:	200a      	movs	r0, #10
 80099ec:	f7f7 ff0c 	bl	8001808 <HAL_Delay>
      ms += 10U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	330a      	adds	r3, #10
 80099f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa0c 	bl	8009e14 <USB_GetMode>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <USB_SetCurrentMode+0x84>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a06:	d9f0      	bls.n	80099ea <USB_SetCurrentMode+0x60>
 8009a08:	e001      	b.n	8009a0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e005      	b.n	8009a1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2bc8      	cmp	r3, #200	@ 0xc8
 8009a12:	d101      	bne.n	8009a18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a24:	b084      	sub	sp, #16
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b086      	sub	sp, #24
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a3e:	2300      	movs	r3, #0
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	e009      	b.n	8009a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	3340      	adds	r3, #64	@ 0x40
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	3301      	adds	r3, #1
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2b0e      	cmp	r3, #14
 8009a5c:	d9f2      	bls.n	8009a44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11c      	bne.n	8009aa0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a74:	f043 0302 	orr.w	r3, r3, #2
 8009a78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e005      	b.n	8009aac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ab8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d10d      	bne.n	8009adc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f968 	bl	8009da0 <USB_SetDevSpeed>
 8009ad0:	e008      	b.n	8009ae4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f963 	bl	8009da0 <USB_SetDevSpeed>
 8009ada:	e003      	b.n	8009ae4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009adc:	2103      	movs	r1, #3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f95e 	bl	8009da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ae4:	2110      	movs	r1, #16
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8fa 	bl	8009ce0 <USB_FlushTxFifo>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f924 	bl	8009d44 <USB_FlushRxFifo>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b24:	461a      	mov	r2, r3
 8009b26:	2300      	movs	r3, #0
 8009b28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	e043      	b.n	8009bb8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b46:	d118      	bne.n	8009b7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	e013      	b.n	8009b8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b70:	461a      	mov	r2, r3
 8009b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	e008      	b.n	8009b8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b86:	461a      	mov	r2, r3
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b98:	461a      	mov	r2, r3
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009baa:	461a      	mov	r2, r3
 8009bac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d3b5      	bcc.n	8009b30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	e043      	b.n	8009c52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009be0:	d118      	bne.n	8009c14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	e013      	b.n	8009c26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	e008      	b.n	8009c26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c32:	461a      	mov	r2, r3
 8009c34:	2300      	movs	r3, #0
 8009c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c44:	461a      	mov	r2, r3
 8009c46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c56:	461a      	mov	r2, r3
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d3b5      	bcc.n	8009bca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d105      	bne.n	8009c94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f043 0210 	orr.w	r2, r3, #16
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699a      	ldr	r2, [r3, #24]
 8009c98:	4b0f      	ldr	r3, [pc, #60]	@ (8009cd8 <USB_DevInit+0x2b4>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	f043 0208 	orr.w	r2, r3, #8
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d105      	bne.n	8009cc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699a      	ldr	r2, [r3, #24]
 8009cc0:	4b06      	ldr	r3, [pc, #24]	@ (8009cdc <USB_DevInit+0x2b8>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cd4:	b004      	add	sp, #16
 8009cd6:	4770      	bx	lr
 8009cd8:	803c3800 	.word	0x803c3800
 8009cdc:	40000004 	.word	0x40000004

08009ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cfa:	d901      	bls.n	8009d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e01b      	b.n	8009d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	daf2      	bge.n	8009cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	019b      	lsls	r3, r3, #6
 8009d10:	f043 0220 	orr.w	r2, r3, #32
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d24:	d901      	bls.n	8009d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e006      	b.n	8009d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b20      	cmp	r3, #32
 8009d34:	d0f0      	beq.n	8009d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3301      	adds	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d5c:	d901      	bls.n	8009d62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e018      	b.n	8009d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	daf2      	bge.n	8009d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2210      	movs	r2, #16
 8009d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3301      	adds	r3, #1
 8009d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d80:	d901      	bls.n	8009d86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e006      	b.n	8009d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d0f0      	beq.n	8009d74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	68f9      	ldr	r1, [r7, #12]
 8009dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e00:	f043 0302 	orr.w	r3, r3, #2
 8009e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f003 0301 	and.w	r3, r3, #1
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e48:	d901      	bls.n	8009e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e01b      	b.n	8009e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	daf2      	bge.n	8009e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f043 0201 	orr.w	r2, r3, #1
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e72:	d901      	bls.n	8009e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e006      	b.n	8009e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d0f0      	beq.n	8009e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <memset>:
 8009e92:	4402      	add	r2, r0
 8009e94:	4603      	mov	r3, r0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d100      	bne.n	8009e9c <memset+0xa>
 8009e9a:	4770      	bx	lr
 8009e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea0:	e7f9      	b.n	8009e96 <memset+0x4>
	...

08009ea4 <__libc_init_array>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8009edc <__libc_init_array+0x38>)
 8009ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ee0 <__libc_init_array+0x3c>)
 8009eaa:	1b64      	subs	r4, r4, r5
 8009eac:	10a4      	asrs	r4, r4, #2
 8009eae:	2600      	movs	r6, #0
 8009eb0:	42a6      	cmp	r6, r4
 8009eb2:	d109      	bne.n	8009ec8 <__libc_init_array+0x24>
 8009eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ee4 <__libc_init_array+0x40>)
 8009eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ee8 <__libc_init_array+0x44>)
 8009eb8:	f000 f818 	bl	8009eec <_init>
 8009ebc:	1b64      	subs	r4, r4, r5
 8009ebe:	10a4      	asrs	r4, r4, #2
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	42a6      	cmp	r6, r4
 8009ec4:	d105      	bne.n	8009ed2 <__libc_init_array+0x2e>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ecc:	4798      	blx	r3
 8009ece:	3601      	adds	r6, #1
 8009ed0:	e7ee      	b.n	8009eb0 <__libc_init_array+0xc>
 8009ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed6:	4798      	blx	r3
 8009ed8:	3601      	adds	r6, #1
 8009eda:	e7f2      	b.n	8009ec2 <__libc_init_array+0x1e>
 8009edc:	08009f4c 	.word	0x08009f4c
 8009ee0:	08009f4c 	.word	0x08009f4c
 8009ee4:	08009f4c 	.word	0x08009f4c
 8009ee8:	08009f50 	.word	0x08009f50

08009eec <_init>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	bf00      	nop
 8009ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef2:	bc08      	pop	{r3}
 8009ef4:	469e      	mov	lr, r3
 8009ef6:	4770      	bx	lr

08009ef8 <_fini>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	bf00      	nop
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr
