
Dude_My_Ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a690  0800a690  0000b690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6d0  0800a6d0  0000b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6d8  0800a6d8  0000b6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6dc  0800a6dc  0000b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  0800a6e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000910  24000018  0800a6f8  0000c018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000928  0800a6f8  0000c928  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c6f  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000421a  00000000  00000000  0002ccb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c0  00000000  00000000  00030ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000131c  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c475  00000000  00000000  00033aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000259e3  00000000  00000000  0006ff21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d082  00000000  00000000  00095904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00212986  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006854  00000000  00000000  002129cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00219220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a678 	.word	0x0800a678

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800a678 	.word	0x0800a678

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <DMA_setup_ADC>:
unsigned char *pointer = (unsigned char *)(&index_stop);




void DMA_setup_ADC(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA1_Stream0 ->M0AR = (uint32_t) &DMA_data;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <DMA_setup_ADC+0x2c>)
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <DMA_setup_ADC+0x30>)
 80005d0:	60da      	str	r2, [r3, #12]
	DMA1_Stream0 ->PAR = (uint32_t) &(ADC3->DR);
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <DMA_setup_ADC+0x2c>)
 80005d4:	4a09      	ldr	r2, [pc, #36]	@ (80005fc <DMA_setup_ADC+0x34>)
 80005d6:	609a      	str	r2, [r3, #8]
	DMA1_Stream0 ->NDTR = (uint16_t) vec_len;
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <DMA_setup_ADC+0x2c>)
 80005da:	22c8      	movs	r2, #200	@ 0xc8
 80005dc:	605a      	str	r2, [r3, #4]
	//ADC3->CFGR |= ADC_CFGR_DMNGT;
	DMA1_Stream0 ->CR |= DMA_SxCR_TCIE;
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <DMA_setup_ADC+0x2c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <DMA_setup_ADC+0x2c>)
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40020010 	.word	0x40020010
 80005f8:	24000034 	.word	0x24000034
 80005fc:	58026040 	.word	0x58026040

08000600 <DMA_reset>:

void DMA_reset(void){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	DMA2->LIFCR = 0xffffffff;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <DMA_reset+0x30>)
 8000606:	f04f 32ff 	mov.w	r2, #4294967295
 800060a:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <DMA_reset+0x30>)
 800060e:	f04f 32ff 	mov.w	r2, #4294967295
 8000612:	60da      	str	r2, [r3, #12]

	DMA1->LIFCR = 0xffffffff;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <DMA_reset+0x34>)
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
 800061a:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <DMA_reset+0x34>)
 800061e:	f04f 32ff 	mov.w	r2, #4294967295
 8000622:	60da      	str	r2, [r3, #12]

}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40020400 	.word	0x40020400
 8000634:	40020000 	.word	0x40020000

08000638 <DMA_setup_USART>:
void DMA_setup_USART(void){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	DMA2_Stream0 ->M0AR = (uint32_t) &DMA_data;
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <DMA_setup_USART+0x3c>)
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <DMA_setup_USART+0x40>)
 8000640:	60da      	str	r2, [r3, #12]
	DMA2_Stream0 ->PAR = (uint32_t) &(USART3->TDR);
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <DMA_setup_USART+0x3c>)
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <DMA_setup_USART+0x44>)
 8000646:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 ->NDTR = (uint16_t) vec_len*2;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <DMA_setup_USART+0x3c>)
 800064a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800064e:	605a      	str	r2, [r3, #4]
	USART3->CR3 |= USART_CR3_DMAT;
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <DMA_setup_USART+0x48>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <DMA_setup_USART+0x48>)
 8000656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065a:	6093      	str	r3, [r2, #8]
	DMA2_Stream0->CR |=DMA_SxCR_TCIE;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <DMA_setup_USART+0x3c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <DMA_setup_USART+0x3c>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40020410 	.word	0x40020410
 8000678:	24000034 	.word	0x24000034
 800067c:	40004828 	.word	0x40004828
 8000680:	40004800 	.word	0x40004800

08000684 <ESPE_USART_init>:



void ESPE_USART_init(void){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

	//Accendo la trasmissione
	USART3 ->CR1 |= USART_CR1_TE;
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <ESPE_USART_init+0x34>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <ESPE_USART_init+0x34>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <ESPE_USART_init+0x34>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <ESPE_USART_init+0x34>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
	//USART3 -> CR1 |= USART_CR1_TCIE;

	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <ESPE_USART_init+0x34>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <ESPE_USART_init+0x34>)
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione


}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40004800 	.word	0x40004800

080006bc <ESPE_ADC_init>:


//Queste sono le operazioni che dobbiamo fare, magari con una funzione, nel main(), prima del while(1) (va fatta una sola volta)
void ESPE_ADC_init(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

	// azzeriamo per evitare casini di configurazione
	ADC3 -> SQR1 = 0;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	631a      	str	r2, [r3, #48]	@ 0x30

	// ogni numero è collegato ad un pin a sèstante
	ADC3->SQR1 |= 0 <<ADC_SQR1_L_Pos;							// ti dice quante misure deve prendere (n+1)
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006c8:	4a2c      	ldr	r2, [pc, #176]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= 0 << ADC_SQR1_SQ1_Pos; 						// ti dice qual è la prima misura da fare
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006d0:	4a2a      	ldr	r2, [pc, #168]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
//	ADC3->SQR1 |= 19 << ADC_SQR1_SQ2_Pos; 						// ti dice qual è la seconda misura da fare




	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		//segna quali sono i canali in lettura per velocità massima
 80006d6:	4b29      	ldr	r3, [pc, #164]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a28      	ldr	r2, [pc, #160]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	61d3      	str	r3, [r2, #28]
//  ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;



	ADC3 -> CR &= ~ADC_CR_DEEPPWD_Pos;						//Deep power down state (se attivo non overclocka)
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	4a25      	ldr	r2, [pc, #148]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006e8:	f023 031d 	bic.w	r3, r3, #29
 80006ec:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1 << ADC_CR_ADVREGEN_Pos;						//Voltage regulator activated
 80006ee:	4b23      	ldr	r3, [pc, #140]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	4a22      	ldr	r2, [pc, #136]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	6093      	str	r3, [r2, #8]




	ADC3 -> CR &= ~ADC_CR_ADCALDIF_Pos;							//seleziona modalità differenziata di calibrazione (a 0)
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <ESPE_ADC_init+0xc0>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a1f      	ldr	r2, [pc, #124]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000700:	f023 031e 	bic.w	r3, r3, #30
 8000704:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCALLIN_Pos;	//seleziona la modalità lineare di calibrazione (a 1)
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <ESPE_ADC_init+0xc0>)
 800070c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000710:	6093      	str	r3, [r2, #8]
	ADC3 -> CR &= ~ADC_CR_ADEN_Pos;								//Controlliamo che l'ADC non sia acceso e che il bit sia stato resettato
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000714:	4a19      	ldr	r2, [pc, #100]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= 1<< ADC_CR_ADCAL_Pos;							// Inizia la calibrazione
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <ESPE_ADC_init+0xc0>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000724:	6093      	str	r3, [r2, #8]

	while( ADC3->CR & ADC_CR_ADCAL ){							//Aspetti che la calibrazione sia finita, il bit viene cambiato dall'hardware
 8000726:	bf00      	nop
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <ESPE_ADC_init+0xc0>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dbfb      	blt.n	8000728 <ESPE_ADC_init+0x6c>
	}



	ADC3->ISR &= ~ADC_ISR_ADRDY_Pos;							//Controlli che il bit per l'inizio della presa dati sia a 0
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6013      	str	r3, [r2, #0]
	ADC3->CR |= 1<<ADC_CR_ADEN_Pos;								//Attiviamo l'ADC (non la presa dati)
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <ESPE_ADC_init+0xc0>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <ESPE_ADC_init+0xc0>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6093      	str	r3, [r2, #8]
	while( !(ADC3->ISR & ADC_ISR_ADRDY)){						//Aspettiamo che sia setuppato correttamente
 8000744:	bf00      	nop
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f9      	beq.n	8000746 <ESPE_ADC_init+0x8a>
	}

	ADC3 -> CFGR |=(3<<ADC_CFGR_DMNGT_Pos);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	4a09      	ldr	r2, [pc, #36]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000758:	f043 0303 	orr.w	r3, r3, #3
 800075c:	60d3      	str	r3, [r2, #12]

	ADC3 -> IER |= ADC_IER_EOCIE;								//Attiviamo l'interrupt
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <ESPE_ADC_init+0xc0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6053      	str	r3, [r2, #4]

	ADC3 -> SMPR1 |= 0<<ADC_SMPR1_SMP0_Pos; 					//Inseriamo un ritardo di 7 cicli prima della prima misura in modo da dare al termometro il tempo di regolarsi
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <ESPE_ADC_init+0xc0>)
 800076c:	4a03      	ldr	r2, [pc, #12]	@ (800077c <ESPE_ADC_init+0xc0>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	6153      	str	r3, [r2, #20]


}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	58026000 	.word	0x58026000

08000780 <ESPE_TIM6_init>:

void ESPE_TIM6_init(void){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <ESPE_TIM6_init+0x20>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->ARR = 10;
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <ESPE_TIM6_init+0x20>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC = 24;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <ESPE_TIM6_init+0x20>)
 8000792:	2218      	movs	r2, #24
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40001000 	.word	0x40001000

080007a4 <ESPE_COMP_init>:

void ESPE_COMP_init(void){
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	COMP2->CFGR |= COMP_CFGRx_EN;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <ESPE_COMP_init+0x34>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <ESPE_COMP_init+0x34>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]
	DAC1 -> CR |= DAC_CR_EN1;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <ESPE_COMP_init+0x38>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ESPE_COMP_init+0x38>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]
	DAC1 -> DHR12R1 = 1200;										// soglia di trigger
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <ESPE_COMP_init+0x38>)
 80007c2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80007c6:	609a      	str	r2, [r3, #8]
	DAC1 -> SWTRIGR = DAC_SWTRIGR_SWTRIG1;
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <ESPE_COMP_init+0x38>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	58003810 	.word	0x58003810
 80007dc:	40007400 	.word	0x40007400

080007e0 <ESPE_USART_invert_mode>:



void ESPE_USART_invert_mode(void){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	if(USART3 -> CR1 & USART_CR1_RXNEIE){
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00c      	beq.n	800080a <ESPE_USART_invert_mode+0x2a>
		USART3 -> CR1 &= ~USART_CR1_RXNEIE;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 80007f6:	f023 0320 	bic.w	r3, r3, #32
 80007fa:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 |= USART_CR1_TCIE;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 8000802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000806:	6013      	str	r3, [r2, #0]
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
		USART3 -> CR1 |= USART_CR1_RXNEIE;
		USART3 -> CR1 &= ~USART_CR1_TCIE;
	}
}
 8000808:	e011      	b.n	800082e <ESPE_USART_invert_mode+0x4e>
	}else if(USART3 -> CR1 & USART_CR1_TCIE){
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00b      	beq.n	800082e <ESPE_USART_invert_mode+0x4e>
		USART3 -> CR1 |= USART_CR1_RXNEIE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	6013      	str	r3, [r2, #0]
		USART3 -> CR1 &= ~USART_CR1_TCIE;
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <ESPE_USART_invert_mode+0x58>)
 8000828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800082c:	6013      	str	r3, [r2, #0]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40004800 	.word	0x40004800

0800083c <ESPE_USART_char_start>:


//Zona definizione di funzioni
void ESPE_USART_char_start(void){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	if ( USART3 ->ISR & USART_ISR_RXNE_RXFNE){
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <ESPE_USART_char_start+0x1e>
		if ( USART3 -> RDR == char_trigger){
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000850:	2b65      	cmp	r3, #101	@ 0x65
 8000852:	d102      	bne.n	800085a <ESPE_USART_char_start+0x1e>
			//flag_USART = 1;
			flag_Trigger_EN = 1;
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <ESPE_USART_char_start+0x50>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]

		}
	}

//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <ESPE_USART_char_start+0x4c>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40004800 	.word	0x40004800
 800088c:	240001c6 	.word	0x240001c6

08000890 <ESPE_DMA_switch_mode>:


void ESPE_DMA_switch_mode(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	//if(flag_USART){
	if( flag_Triggered){
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <ESPE_DMA_switch_mode+0x34>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00f      	beq.n	80008be <ESPE_DMA_switch_mode+0x2e>
		TIM6_stop;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <ESPE_DMA_switch_mode+0x38>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a09      	ldr	r2, [pc, #36]	@ (80008c8 <ESPE_DMA_switch_mode+0x38>)
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]
		DMA_reset();
 80008aa:	f7ff fea9 	bl	8000600 <DMA_reset>
		ESPE_USART_invert_mode();
 80008ae:	f7ff ff97 	bl	80007e0 <ESPE_USART_invert_mode>
		DMA_start_USART;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <ESPE_DMA_switch_mode+0x3c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <ESPE_DMA_switch_mode+0x3c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6013      	str	r3, [r2, #0]
		//flag_USART = 0;

	}
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	240001c5 	.word	0x240001c5
 80008c8:	40001000 	.word	0x40001000
 80008cc:	40020410 	.word	0x40020410

080008d0 <ESPE_DMA_switch_back>:


void ESPE_DMA_switch_back(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if( !(DMA2_Stream0 -> NDTR)){
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <ESPE_DMA_switch_back+0x44>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d119      	bne.n	8000910 <ESPE_DMA_switch_back+0x40>
		flag_Triggered = 0;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <ESPE_DMA_switch_back+0x48>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
		ESPE_USART_invert_mode();
 80008e2:	f7ff ff7d 	bl	80007e0 <ESPE_USART_invert_mode>
		DMA_stop_USART;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <ESPE_DMA_switch_back+0x44>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <ESPE_DMA_switch_back+0x44>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]
		DMA_reset();
 80008f2:	f7ff fe85 	bl	8000600 <DMA_reset>
		DMA2_Stream0 -> NDTR = 2*vec_len;
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <ESPE_DMA_switch_back+0x44>)
 80008f8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80008fc:	605a      	str	r2, [r3, #4]
		index_stop = vec_len + 1;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <ESPE_DMA_switch_back+0x4c>)
 8000900:	22c9      	movs	r2, #201	@ 0xc9
 8000902:	801a      	strh	r2, [r3, #0]
		TIM6_start;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <ESPE_DMA_switch_back+0x50>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <ESPE_DMA_switch_back+0x50>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6013      	str	r3, [r2, #0]

	}
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020410 	.word	0x40020410
 8000918:	240001c5 	.word	0x240001c5
 800091c:	24000000 	.word	0x24000000
 8000920:	40001000 	.word	0x40001000

08000924 <ESPE_DMA_COMP_Trigger_Pretrigger>:
			}
			//TIM6_start;
		}
}

void ESPE_DMA_COMP_Trigger_Pretrigger(void){
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	if(!flag_Triggered && flag_Trigger_EN){
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <ESPE_DMA_COMP_Trigger_Pretrigger+0x88>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d137      	bne.n	80009a2 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7e>
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x8c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d032      	beq.n	80009a2 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7e>
		if( flag_Pretriggered){
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <ESPE_DMA_COMP_Trigger_Pretrigger+0x90>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d022      	beq.n	800098c <ESPE_DMA_COMP_Trigger_Pretrigger+0x68>
			if( COMP12 -> SR & COMP_SR_C2VAL){
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <ESPE_DMA_COMP_Trigger_Pretrigger+0x94>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d026      	beq.n	80009a0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7c>
				flag_Triggered = 1;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <ESPE_DMA_COMP_Trigger_Pretrigger+0x88>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
				flag_Trigger_EN = 0;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
				flag_Pretriggered = 0;
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <ESPE_DMA_COMP_Trigger_Pretrigger+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
				//index_stop = (DMA1_Stream0 ->NDTR + vec_len - data_len)%vec_len;
				index_stop = vec_len - (vec_len - DMA1_Stream0 -> NDTR + data_len +1)%vec_len;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <ESPE_DMA_COMP_Trigger_Pretrigger+0x98>)
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	f240 132d 	movw	r3, #301	@ 0x12d
 800096c:	1a9b      	subs	r3, r3, r2
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x9c>)
 8000970:	fba2 1203 	umull	r1, r2, r2, r3
 8000974:	0992      	lsrs	r2, r2, #6
 8000976:	21c8      	movs	r1, #200	@ 0xc8
 8000978:	fb01 f202 	mul.w	r2, r1, r2
 800097c:	1a9a      	subs	r2, r3, r2
 800097e:	b293      	uxth	r3, r2
 8000980:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <ESPE_DMA_COMP_Trigger_Pretrigger+0xa0>)
 8000988:	801a      	strh	r2, [r3, #0]

			}
			return;
 800098a:	e009      	b.n	80009a0 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7c>
		}
		if( !(COMP12-> SR & COMP_SR_C2VAL) ){
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <ESPE_DMA_COMP_Trigger_Pretrigger+0x94>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d104      	bne.n	80009a2 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7e>
			flag_Pretriggered = 1;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <ESPE_DMA_COMP_Trigger_Pretrigger+0x90>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e000      	b.n	80009a2 <ESPE_DMA_COMP_Trigger_Pretrigger+0x7e>
			return;
 80009a0:	bf00      	nop
		}
	}
}
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	240001c5 	.word	0x240001c5
 80009b0:	240001c6 	.word	0x240001c6
 80009b4:	240001c4 	.word	0x240001c4
 80009b8:	58003800 	.word	0x58003800
 80009bc:	40020010 	.word	0x40020010
 80009c0:	51eb851f 	.word	0x51eb851f
 80009c4:	24000000 	.word	0x24000000

080009c8 <ESPE_DMA_data_manipulation>:


void ESPE_DMA_data_manipulation(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(flag_Triggered && DMA1_Stream0 ->NDTR == (index_stop)){
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <ESPE_DMA_data_manipulation+0x30>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00d      	beq.n	80009f2 <ESPE_DMA_data_manipulation+0x2a>
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <ESPE_DMA_data_manipulation+0x34>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	4a09      	ldr	r2, [pc, #36]	@ (8000a00 <ESPE_DMA_data_manipulation+0x38>)
 80009dc:	8812      	ldrh	r2, [r2, #0]
 80009de:	4293      	cmp	r3, r2
 80009e0:	d107      	bne.n	80009f2 <ESPE_DMA_data_manipulation+0x2a>
		TIM6_stop;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <ESPE_DMA_data_manipulation+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <ESPE_DMA_data_manipulation+0x3c>)
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	6013      	str	r3, [r2, #0]
		ESPE_DMA_switch_mode();
 80009ee:	f7ff ff4f 	bl	8000890 <ESPE_DMA_switch_mode>
	}
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	240001c5 	.word	0x240001c5
 80009fc:	40020010 	.word	0x40020010
 8000a00:	24000000 	.word	0x24000000
 8000a04:	40001000 	.word	0x40001000

08000a08 <ESPE_DMA_end_transmission>:

void ESPE_DMA_end_transmission(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if( flag_Triggered){
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <ESPE_DMA_end_transmission+0x5c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d024      	beq.n	8000a60 <ESPE_DMA_end_transmission+0x58>
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000a16:	bf00      	nop
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <ESPE_DMA_end_transmission+0x60>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f9      	beq.n	8000a18 <ESPE_DMA_end_transmission+0x10>
		if(USART3 ->CR1 & USART_CR1_TCIE){
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <ESPE_DMA_end_transmission+0x60>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d017      	beq.n	8000a60 <ESPE_DMA_end_transmission+0x58>
			if( index_transmission < 2){
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <ESPE_DMA_end_transmission+0x64>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d80e      	bhi.n	8000a56 <ESPE_DMA_end_transmission+0x4e>
				USART3->TDR = pointer[index_transmission];
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <ESPE_DMA_end_transmission+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <ESPE_DMA_end_transmission+0x64>)
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <ESPE_DMA_end_transmission+0x60>)
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
				index_transmission ++;
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <ESPE_DMA_end_transmission+0x64>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <ESPE_DMA_end_transmission+0x64>)
 8000a52:	801a      	strh	r2, [r3, #0]
			}

		}
	}

}
 8000a54:	e004      	b.n	8000a60 <ESPE_DMA_end_transmission+0x58>
				index_transmission = 0;
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <ESPE_DMA_end_transmission+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
				ESPE_DMA_switch_back();
 8000a5c:	f7ff ff38 	bl	80008d0 <ESPE_DMA_switch_back>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	240001c5 	.word	0x240001c5
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	240001c8 	.word	0x240001c8
 8000a70:	24000004 	.word	0x24000004

08000a74 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <MX_ADC3_Init+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000abe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aee:	f001 f995 	bl	8001e1c <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000af8:	f000 fbda 	bl	80012b0 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b04:	f001 f98a 	bl	8001e1c <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b0e:	f000 fbcf 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b16:	2306      	movs	r3, #6
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b36:	f001 fb13 	bl	8002160 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b40:	f000 fbb6 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240001cc 	.word	0x240001cc
 8000b50:	58026000 	.word	0x58026000

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0b4      	sub	sp, #208	@ 0xd0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	22c0      	movs	r2, #192	@ 0xc0
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f009 fd5a 	bl	800a61e <memset>
  if(adcHandle->Instance==ADC3)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a43      	ldr	r2, [pc, #268]	@ (8000c7c <HAL_ADC_MspInit+0x128>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d17e      	bne.n	8000c72 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000b84:	2313      	movs	r3, #19
 8000b86:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b98:	2320      	movs	r3, #32
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 faca 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000bb6:	f000 fb7b 	bl	80012b0 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be8:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <HAL_ADC_MspInit+0x12c>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000bf6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000bfa:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000bfe:	f000 ff6b 	bl	8001ad8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c04:	4a20      	ldr	r2, [pc, #128]	@ (8000c88 <HAL_ADC_MspInit+0x134>)
 8000c06:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c0a:	2273      	movs	r2, #115	@ 0x73
 8000c0c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c20:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c28:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c40:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c46:	480f      	ldr	r0, [pc, #60]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c48:	f002 fa90 	bl	800316c <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000c52:	f000 fb2d 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c5c:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <HAL_ADC_MspInit+0x130>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	207f      	movs	r0, #127	@ 0x7f
 8000c68:	f002 f8e7 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c6c:	207f      	movs	r0, #127	@ 0x7f
 8000c6e:	f002 f8fe 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	37d0      	adds	r7, #208	@ 0xd0
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	58026000 	.word	0x58026000
 8000c80:	58024400 	.word	0x58024400
 8000c84:	24000230 	.word	0x24000230
 8000c88:	40020010 	.word	0x40020010

08000c8c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000c92:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <MX_COMP2_Init+0x58>)
 8000c94:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000c98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c9c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000cc6:	2212      	movs	r2, #18
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000ccc:	f001 feb0 	bl	8002a30 <HAL_COMP_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8000cd6:	f000 faeb 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240002a8 	.word	0x240002a8
 8000ce4:	58003810 	.word	0x58003810

08000ce8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a18      	ldr	r2, [pc, #96]	@ (8000d68 <HAL_COMP_MspInit+0x80>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12a      	bne.n	8000d60 <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	4a16      	ldr	r2, [pc, #88]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_COMP_MspInit+0x84>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_COMP_MspInit+0x88>)
 8000d5c:	f003 fec8 	bl	8004af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58003810 	.word	0x58003810
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58021000 	.word	0x58021000

08000d74 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2224      	movs	r2, #36	@ 0x24
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f009 fc4c 	bl	800a61e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_DAC1_Init+0x5c>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_DAC1_Init+0x60>)
 8000d8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d8c:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <MX_DAC1_Init+0x5c>)
 8000d8e:	f002 f888 	bl	8002ea2 <HAL_DAC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d98:	f000 fa8a 	bl	80012b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000da8:	2302      	movs	r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_DAC1_Init+0x5c>)
 8000db8:	f002 f896 	bl	8002ee8 <HAL_DAC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 fa75 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	240002d4 	.word	0x240002d4
 8000dd4:	40007400 	.word	0x40007400

08000dd8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <HAL_DAC_MspInit+0x3c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10e      	bne.n	8000e08 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_DAC_MspInit+0x40>)
 8000dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df0:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_DAC_MspInit+0x40>)
 8000df2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000df6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_DAC_MspInit+0x40>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40007400 	.word	0x40007400
 8000e18:	58024400 	.word	0x58024400

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e28:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <MX_DMA_Init+0x6c>)
 8000e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200b      	movs	r0, #11
 8000e64:	f001 ffe9 	bl	8002e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f002 f800 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2038      	movs	r0, #56	@ 0x38
 8000e74:	f001 ffe1 	bl	8002e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e78:	2038      	movs	r0, #56	@ 0x38
 8000e7a:	f001 fff8 	bl	8002e6e <HAL_NVIC_EnableIRQ>

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	58024400 	.word	0x58024400

08000e8c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	@ 0x30
 8000e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b83      	ldr	r3, [pc, #524]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	4a81      	ldr	r2, [pc, #516]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a7a      	ldr	r2, [pc, #488]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b77      	ldr	r3, [pc, #476]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b74      	ldr	r3, [pc, #464]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	4a72      	ldr	r2, [pc, #456]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eee:	4b70      	ldr	r3, [pc, #448]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b6c      	ldr	r3, [pc, #432]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	4a6b      	ldr	r2, [pc, #428]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0c:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b65      	ldr	r3, [pc, #404]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	4a63      	ldr	r2, [pc, #396]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2a:	4b61      	ldr	r3, [pc, #388]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	4b5d      	ldr	r3, [pc, #372]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f48:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f56:	4b56      	ldr	r3, [pc, #344]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a54      	ldr	r2, [pc, #336]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b52      	ldr	r3, [pc, #328]	@ (80010b0 <MX_GPIO_Init+0x224>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f7a:	484e      	ldr	r0, [pc, #312]	@ (80010b4 <MX_GPIO_Init+0x228>)
 8000f7c:	f003 ff68 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f86:	484c      	ldr	r0, [pc, #304]	@ (80010b8 <MX_GPIO_Init+0x22c>)
 8000f88:	f003 ff62 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	484a      	ldr	r0, [pc, #296]	@ (80010bc <MX_GPIO_Init+0x230>)
 8000f92:	f003 ff5d 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4845      	ldr	r0, [pc, #276]	@ (80010c0 <MX_GPIO_Init+0x234>)
 8000fac:	f003 fda0 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fb0:	2332      	movs	r3, #50	@ 0x32
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc0:	230b      	movs	r3, #11
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483d      	ldr	r0, [pc, #244]	@ (80010c0 <MX_GPIO_Init+0x234>)
 8000fcc:	f003 fd90 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fd0:	2386      	movs	r3, #134	@ 0x86
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4836      	ldr	r0, [pc, #216]	@ (80010c4 <MX_GPIO_Init+0x238>)
 8000fec:	f003 fd80 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ff0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	482a      	ldr	r0, [pc, #168]	@ (80010b4 <MX_GPIO_Init+0x228>)
 800100a:	f003 fd71 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800100e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001020:	230b      	movs	r3, #11
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <MX_GPIO_Init+0x228>)
 800102c:	f003 fd60 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	@ (80010b8 <MX_GPIO_Init+0x22c>)
 800104a:	f003 fd51 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4819      	ldr	r0, [pc, #100]	@ (80010c8 <MX_GPIO_Init+0x23c>)
 8001064:	f003 fd44 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001068:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107a:	230b      	movs	r3, #11
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4810      	ldr	r0, [pc, #64]	@ (80010c8 <MX_GPIO_Init+0x23c>)
 8001086:	f003 fd33 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800108a:	2302      	movs	r3, #2
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_GPIO_Init+0x230>)
 80010a2:	f003 fd25 	bl	8004af0 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	@ 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020400 	.word	0x58020400
 80010b8:	58020c00 	.word	0x58020c00
 80010bc:	58021000 	.word	0x58021000
 80010c0:	58020800 	.word	0x58020800
 80010c4:	58020000 	.word	0x58020000
 80010c8:	58021800 	.word	0x58021800

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fc1c 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f83e 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f7ff fed8 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80010dc:	f7ff fe9e 	bl	8000e1c <MX_DMA_Init>
  MX_ADC3_Init();
 80010e0:	f7ff fcc8 	bl	8000a74 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80010e4:	f000 fa4c 	bl	8001580 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010e8:	f000 fb38 	bl	800175c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80010ec:	f000 f9f0 	bl	80014d0 <MX_TIM6_Init>
  MX_COMP2_Init();
 80010f0:	f7ff fdcc 	bl	8000c8c <MX_COMP2_Init>
  MX_DAC1_Init();
 80010f4:	f7ff fe3e 	bl	8000d74 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  ESPE_TIM6_init();
 80010f8:	f7ff fb42 	bl	8000780 <ESPE_TIM6_init>
  ESPE_ADC_init();
 80010fc:	f7ff fade 	bl	80006bc <ESPE_ADC_init>
  ESPE_USART_init();
 8001100:	f7ff fac0 	bl	8000684 <ESPE_USART_init>
  ESPE_COMP_init();
 8001104:	f7ff fb4e 	bl	80007a4 <ESPE_COMP_init>
  DMA_setup_ADC();
 8001108:	f7ff fa5e 	bl	80005c8 <DMA_setup_ADC>
  DMA_setup_USART();
 800110c:	f7ff fa94 	bl	8000638 <DMA_setup_USART>
  USART_start;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <main+0x78>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <main+0x78>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]
  TIM6_start;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <main+0x7c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <main+0x7c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
  ADC_start;
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <main+0x80>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <main+0x80>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6093      	str	r3, [r2, #8]
  DMA_start_ADC;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <main+0x84>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <main+0x84>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <main+0x74>
 8001144:	40004800 	.word	0x40004800
 8001148:	40001000 	.word	0x40001000
 800114c:	58026000 	.word	0x58026000
 8001150:	40020010 	.word	0x40020010

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09e      	sub	sp, #120	@ 0x78
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115e:	224c      	movs	r2, #76	@ 0x4c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f009 fa5b 	bl	800a61e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2220      	movs	r2, #32
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f009 fa54 	bl	800a61e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001176:	2002      	movs	r0, #2
 8001178:	f003 ffb4 	bl	80050e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b48      	ldr	r3, [pc, #288]	@ (80012a4 <SystemClock_Config+0x150>)
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	4a47      	ldr	r2, [pc, #284]	@ (80012a4 <SystemClock_Config+0x150>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800118c:	4b45      	ldr	r3, [pc, #276]	@ (80012a4 <SystemClock_Config+0x150>)
 800118e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <SystemClock_Config+0x154>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a43      	ldr	r2, [pc, #268]	@ (80012a8 <SystemClock_Config+0x154>)
 800119c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <SystemClock_Config+0x154>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ae:	bf00      	nop
 80011b0:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <SystemClock_Config+0x154>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011bc:	d1f8      	bne.n	80011b0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <SystemClock_Config+0x158>)
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011c4:	4a39      	ldr	r2, [pc, #228]	@ (80012ac <SystemClock_Config+0x158>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011ce:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <SystemClock_Config+0x158>)
 80011d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <SystemClock_Config+0x154>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <SystemClock_Config+0x154>)
 80011e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <SystemClock_Config+0x154>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <SystemClock_Config+0x150>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <SystemClock_Config+0x150>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <SystemClock_Config+0x150>)
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800120e:	bf00      	nop
 8001210:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemClock_Config+0x154>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800121c:	d1f8      	bne.n	8001210 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121e:	2301      	movs	r3, #1
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001222:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122c:	2302      	movs	r3, #2
 800122e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001234:	2378      	movs	r3, #120	@ 0x78
 8001236:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800123c:	230f      	movs	r3, #15
 800123e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001244:	230c      	movs	r3, #12
 8001246:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001248:	2300      	movs	r3, #0
 800124a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ff8f 	bl	8005178 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001260:	f000 f826 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	233f      	movs	r3, #63	@ 0x3f
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2303      	movs	r3, #3
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001270:	2308      	movs	r3, #8
 8001272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001274:	2340      	movs	r3, #64	@ 0x40
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800127c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001282:	2340      	movs	r3, #64	@ 0x40
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2104      	movs	r1, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fbcd 	bl	8005a2c <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001298:	f000 f80a 	bl	80012b0 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3778      	adds	r7, #120	@ 0x78
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58000400 	.word	0x58000400
 80012a8:	58024800 	.word	0x58024800
 80012ac:	58024400 	.word	0x58024400

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_MspInit+0x54>)
 80012c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012c8:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <HAL_MspInit+0x54>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_MspInit+0x54>)
 80012d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_MspInit+0x54>)
 80012e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_MspInit+0x54>)
 80012e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_MspInit+0x54>)
 80012f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80012fe:	f000 fbdb 	bl	8001ab8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001302:	2002      	movs	r0, #2
 8001304:	f000 fbc4 	bl	8001a90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 fb41 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <DMA1_Stream0_IRQHandler+0x10>)
 800137a:	f002 fa53 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000230 	.word	0x24000230

08001388 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_char_start();
 800138c:	f7ff fa56 	bl	800083c <ESPE_USART_char_start>
	ESPE_DMA_end_transmission();
 8001390:	f7ff fb3a 	bl	8000a08 <ESPE_DMA_end_transmission>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	ESPE_DMA_end_transmission();
 800139c:	f7ff fb34 	bl	8000a08 <ESPE_DMA_end_transmission>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA2_Stream0_IRQHandler+0x14>)
 80013a2:	f002 fa3f 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240003c8 	.word	0x240003c8

080013b0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	//ESPE_DMA_Trigger_Pretrigger();
	ESPE_DMA_COMP_Trigger_Pretrigger();
 80013b4:	f7ff fab6 	bl	8000924 <ESPE_DMA_COMP_Trigger_Pretrigger>
	ESPE_DMA_data_manipulation();
 80013b8:	f7ff fb06 	bl	80009c8 <ESPE_DMA_data_manipulation>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c4:	4b37      	ldr	r3, [pc, #220]	@ (80014a4 <SystemInit+0xe4>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ca:	4a36      	ldr	r2, [pc, #216]	@ (80014a4 <SystemInit+0xe4>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d4:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <SystemInit+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d807      	bhi.n	80013f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <SystemInit+0xe8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	4a2f      	ldr	r2, [pc, #188]	@ (80014a8 <SystemInit+0xe8>)
 80013ea:	f043 0307 	orr.w	r3, r3, #7
 80013ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f0:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <SystemInit+0xec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2d      	ldr	r2, [pc, #180]	@ (80014ac <SystemInit+0xec>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <SystemInit+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <SystemInit+0xec>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4929      	ldr	r1, [pc, #164]	@ (80014ac <SystemInit+0xec>)
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <SystemInit+0xf0>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <SystemInit+0xe8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <SystemInit+0xe8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 030f 	bic.w	r3, r3, #15
 8001422:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <SystemInit+0xe8>)
 8001424:	f043 0307 	orr.w	r3, r3, #7
 8001428:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <SystemInit+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <SystemInit+0xec>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <SystemInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <SystemInit+0xec>)
 800143e:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <SystemInit+0xf4>)
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <SystemInit+0xec>)
 8001444:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <SystemInit+0xf8>)
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <SystemInit+0xec>)
 800144a:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <SystemInit+0xfc>)
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <SystemInit+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <SystemInit+0xec>)
 8001456:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <SystemInit+0xfc>)
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <SystemInit+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <SystemInit+0xec>)
 8001462:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <SystemInit+0xfc>)
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <SystemInit+0xec>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <SystemInit+0xec>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <SystemInit+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <SystemInit+0x100>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <SystemInit+0x104>)
 8001484:	4013      	ands	r3, r2
 8001486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800148a:	d202      	bcs.n	8001492 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <SystemInit+0x108>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <SystemInit+0x10c>)
 8001494:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	52002000 	.word	0x52002000
 80014ac:	58024400 	.word	0x58024400
 80014b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b4:	02020200 	.word	0x02020200
 80014b8:	01ff0000 	.word	0x01ff0000
 80014bc:	01010280 	.word	0x01010280
 80014c0:	5c001000 	.word	0x5c001000
 80014c4:	ffff0000 	.word	0xffff0000
 80014c8:	51008108 	.word	0x51008108
 80014cc:	52004000 	.word	0x52004000

080014d0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_TIM6_Init+0x64>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <MX_TIM6_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_TIM6_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <MX_TIM6_Init+0x64>)
 80014f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_TIM6_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <MX_TIM6_Init+0x64>)
 8001502:	f007 fb1d 	bl	8008b40 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800150c:	f7ff fed0 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001510:	2320      	movs	r3, #32
 8001512:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_TIM6_Init+0x64>)
 800151e:	f007 fc0d 	bl	8008d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001528:	f7ff fec2 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240002e8 	.word	0x240002e8
 8001538:	40001000 	.word	0x40001000

0800153c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_TIM_Base_MspInit+0x3c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10e      	bne.n	800156c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_TIM_Base_MspInit+0x40>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <HAL_TIM_Base_MspInit+0x40>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <HAL_TIM_Base_MspInit+0x40>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40001000 	.word	0x40001000
 800157c:	58024400 	.word	0x58024400

08001580 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001584:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 8001586:	4a23      	ldr	r2, [pc, #140]	@ (8001614 <MX_USART3_UART_Init+0x94>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c8:	4811      	ldr	r0, [pc, #68]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015ca:	f007 fc45 	bl	8008e58 <HAL_UART_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015d4:	f7ff fe6c 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015dc:	f008 fc4d 	bl	8009e7a <HAL_UARTEx_SetTxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015e6:	f7ff fe63 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ea:	2100      	movs	r1, #0
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015ee:	f008 fc82 	bl	8009ef6 <HAL_UARTEx_SetRxFifoThreshold>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015f8:	f7ff fe5a 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_USART3_UART_Init+0x90>)
 80015fe:	f008 fc03 	bl	8009e08 <HAL_UARTEx_DisableFifoMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001608:	f7ff fe52 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000334 	.word	0x24000334
 8001614:	40004800 	.word	0x40004800

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ba      	sub	sp, #232	@ 0xe8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	22c0      	movs	r2, #192	@ 0xc0
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f008 fff0 	bl	800a61e <memset>
  if(uartHandle->Instance==USART3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a41      	ldr	r2, [pc, #260]	@ (8001748 <HAL_UART_MspInit+0x130>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d17b      	bne.n	8001740 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001648:	f04f 0202 	mov.w	r2, #2
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fd70 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800166a:	f7ff fe21 	bl	80012b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800166e:	4b37      	ldr	r3, [pc, #220]	@ (800174c <HAL_UART_MspInit+0x134>)
 8001670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001674:	4a35      	ldr	r2, [pc, #212]	@ (800174c <HAL_UART_MspInit+0x134>)
 8001676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800167e:	4b33      	ldr	r3, [pc, #204]	@ (800174c <HAL_UART_MspInit+0x134>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168c:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_UART_MspInit+0x134>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <HAL_UART_MspInit+0x134>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_UART_MspInit+0x134>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c4:	2307      	movs	r3, #7
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ce:	4619      	mov	r1, r3
 80016d0:	481f      	ldr	r0, [pc, #124]	@ (8001750 <HAL_UART_MspInit+0x138>)
 80016d2:	f003 fa0d 	bl	8004af0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 80016d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <HAL_UART_MspInit+0x140>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016de:	222e      	movs	r2, #46	@ 0x2e
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016e4:	2240      	movs	r2, #64	@ 0x40
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001714:	480f      	ldr	r0, [pc, #60]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 8001716:	f001 fd29 	bl	800316c <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001720:	f7ff fdc6 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 8001728:	67da      	str	r2, [r3, #124]	@ 0x7c
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <HAL_UART_MspInit+0x13c>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2027      	movs	r0, #39	@ 0x27
 8001736:	f001 fb80 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800173a:	2027      	movs	r0, #39	@ 0x27
 800173c:	f001 fb97 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001740:	bf00      	nop
 8001742:	37e8      	adds	r7, #232	@ 0xe8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40004800 	.word	0x40004800
 800174c:	58024400 	.word	0x58024400
 8001750:	58020c00 	.word	0x58020c00
 8001754:	240003c8 	.word	0x240003c8
 8001758:	40020410 	.word	0x40020410

0800175c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001764:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001768:	2209      	movs	r2, #9
 800176a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800176e:	2202      	movs	r2, #2
 8001770:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800177a:	2202      	movs	r2, #2
 800177c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001780:	2201      	movs	r2, #1
 8001782:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001792:	2201      	movs	r2, #1
 8001794:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001798:	2201      	movs	r2, #1
 800179a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017a4:	f003 fb6d 	bl	8004e82 <HAL_PCD_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017ae:	f7ff fd7f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000440 	.word	0x24000440
 80017bc:	40080000 	.word	0x40080000

080017c0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ba      	sub	sp, #232	@ 0xe8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	22c0      	movs	r2, #192	@ 0xc0
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 ff1c 	bl	800a61e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a30      	ldr	r2, [pc, #192]	@ (80018ac <HAL_PCD_MspInit+0xec>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d159      	bne.n	80018a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fc9b 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001814:	f7ff fd4c 	bl	80012b0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001818:	f003 fc9e 	bl	8005158 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001822:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182c:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800183a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800183e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001854:	230a      	movs	r3, #10
 8001856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800185e:	4619      	mov	r1, r3
 8001860:	4814      	ldr	r0, [pc, #80]	@ (80018b4 <HAL_PCD_MspInit+0xf4>)
 8001862:	f003 f945 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <HAL_PCD_MspInit+0xf4>)
 8001882:	f003 f935 	bl	8004af0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 8001888:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800188c:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 800188e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001892:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_PCD_MspInit+0xf0>)
 8001898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800189c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018a4:	bf00      	nop
 80018a6:	37e8      	adds	r7, #232	@ 0xe8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40080000 	.word	0x40080000
 80018b0:	58024400 	.word	0x58024400
 80018b4:	58020000 	.word	0x58020000

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
	   ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018bc:	f7ff fd80 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f008 fea3 	bl	800a630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff fbef 	bl	80010cc <main>
  bx  lr
 80018ee:	4770      	bx	lr
	   ldr   sp, =_estack      /* set stack pointer */
 80018f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018f8:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 80018fc:	0800a6e0 	.word	0x0800a6e0
  ldr r2, =_sbss
 8001900:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001904:	24000928 	.word	0x24000928

08001908 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f001 fa86 	bl	8002e24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001918:	f004 fa3e 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_Init+0x68>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4913      	ldr	r1, [pc, #76]	@ (8001978 <HAL_Init+0x6c>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_Init+0x68>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a0e      	ldr	r2, [pc, #56]	@ (8001978 <HAL_Init+0x6c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <HAL_Init+0x70>)
 800194e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_Init+0x74>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f814 	bl	8001984 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e002      	b.n	800196c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001966:	f7ff fca9 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024400 	.word	0x58024400
 8001978:	0800a690 	.word	0x0800a690
 800197c:	2400000c 	.word	0x2400000c
 8001980:	24000008 	.word	0x24000008

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_InitTick+0x60>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e021      	b.n	80019dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_InitTick+0x64>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_InitTick+0x60>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 fa6b 	bl	8002e8a <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f001 fa35 	bl	8002e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_InitTick+0x68>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	24000014 	.word	0x24000014
 80019e8:	24000008 	.word	0x24000008
 80019ec:	24000010 	.word	0x24000010

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	24000014 	.word	0x24000014
 8001a14:	24000924 	.word	0x24000924

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	24000924 	.word	0x24000924

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	24000014 	.word	0x24000014

08001a78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetREVID+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0c1b      	lsrs	r3, r3, #16
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	5c001000 	.word	0x5c001000

08001a90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 0202 	bic.w	r2, r3, #2
 8001aa0:	4904      	ldr	r1, [pc, #16]	@ (8001ab4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	58003c00 	.word	0x58003c00

08001ab8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	58003c00 	.word	0x58003c00

08001ad8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	4904      	ldr	r1, [pc, #16]	@ (8001b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	58000400 	.word	0x58000400

08001b04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3360      	adds	r3, #96	@ 0x60
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3360      	adds	r3, #96	@ 0x60
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
  }
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3330      	adds	r3, #48	@ 0x30
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	211f      	movs	r1, #31
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 011f 	and.w	r1, r3, #31
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0e5b      	lsrs	r3, r3, #25
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0d1b      	lsrs	r3, r3, #20
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2107      	movs	r1, #7
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0318 	and.w	r3, r3, #24
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ce8:	40d9      	lsrs	r1, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	400b      	ands	r3, r1
 8001cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	000fffff 	.word	0x000fffff

08001d0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6093      	str	r3, [r2, #8]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	5fffffc0 	.word	0x5fffffc0

08001d30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <LL_ADC_EnableInternalRegulator+0x24>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	6fffffc0 	.word	0x6fffffc0

08001d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <LL_ADC_IsEnabled+0x18>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <LL_ADC_IsEnabled+0x1a>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e18f      	b.n	8002156 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fe85 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff67 	bl	8001d30 <LL_ADC_IsDeepPowerDownEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff4d 	bl	8001d0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff82 	bl	8001d80 <LL_ADC_IsInternalRegulatorEnabled>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d114      	bne.n	8001eac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff66 	bl	8001d58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8c:	4b87      	ldr	r3, [pc, #540]	@ (80020ac <HAL_ADC_Init+0x290>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	4a87      	ldr	r2, [pc, #540]	@ (80020b0 <HAL_ADC_Init+0x294>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e9e:	e002      	b.n	8001ea6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff65 	bl	8001d80 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff76 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 8001ee2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 8129 	bne.w	8002144 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 8125 	bne.w	8002144 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff4a 	bl	8001da8 <LL_ADC_IsEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d136      	bne.n	8001f88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x112>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10e      	bne.n	8001f4c <HAL_ADC_Init+0x130>
 8001f2e:	4861      	ldr	r0, [pc, #388]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f30:	f7ff ff3a 	bl	8001da8 <LL_ADC_IsEnabled>
 8001f34:	4604      	mov	r4, r0
 8001f36:	4860      	ldr	r0, [pc, #384]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f38:	f7ff ff36 	bl	8001da8 <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e008      	b.n	8001f5e <HAL_ADC_Init+0x142>
 8001f4c:	485b      	ldr	r0, [pc, #364]	@ (80020bc <HAL_ADC_Init+0x2a0>)
 8001f4e:	f7ff ff2b 	bl	8001da8 <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a53      	ldr	r2, [pc, #332]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Init+0x15a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a51      	ldr	r2, [pc, #324]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Init+0x15e>
 8001f76:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_ADC_Init+0x2a4>)
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_Init+0x160>
 8001f7a:	4a52      	ldr	r2, [pc, #328]	@ (80020c4 <HAL_ADC_Init+0x2a8>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7ff fdbe 	bl	8001b04 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f88:	f7ff fd76 	bl	8001a78 <HAL_GetREVID>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d914      	bls.n	8001fc0 <HAL_ADC_Init+0x1a4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d110      	bne.n	8001fc0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7d5b      	ldrb	r3, [r3, #21]
 8001fa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7f1b      	ldrb	r3, [r3, #28]
 8001fb4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fb6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb8:	f043 030c 	orr.w	r3, r3, #12
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e00d      	b.n	8001fdc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d5b      	ldrb	r3, [r3, #21]
 8001fc4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fd0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7f1b      	ldrb	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	045b      	lsls	r3, r3, #17
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <HAL_ADC_Init+0x2ac>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	430b      	orrs	r3, r1
 8002020:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fed1 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 800202c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fede 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 8002038:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15f      	bne.n	8002100 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d15c      	bne.n	8002100 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7d1b      	ldrb	r3, [r3, #20]
 800204a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_ADC_Init+0x2b0>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800206e:	2b01      	cmp	r3, #1
 8002070:	d130      	bne.n	80020d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_ADC_Init+0x2b4>)
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002086:	3a01      	subs	r2, #1
 8002088:	0411      	lsls	r1, r2, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800209a:	430a      	orrs	r2, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	e01c      	b.n	80020e4 <HAL_ADC_Init+0x2c8>
 80020aa:	bf00      	nop
 80020ac:	24000008 	.word	0x24000008
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40022100 	.word	0x40022100
 80020bc:	58026000 	.word	0x58026000
 80020c0:	40022300 	.word	0x40022300
 80020c4:	58026300 	.word	0x58026300
 80020c8:	fff0c003 	.word	0xfff0c003
 80020cc:	ffffbffc 	.word	0xffffbffc
 80020d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fb8c 	bl	8002818 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f023 010f 	bic.w	r1, r3, #15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002120:	e007      	b.n	8002132 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020f 	bic.w	r2, r2, #15
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
 8002142:	e007      	b.n	8002154 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002154:	7ffb      	ldrb	r3, [r7, #31]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop

08002160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b0a1      	sub	sp, #132	@ 0x84
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_ADC_ConfigChannel+0x1b0>)
 800217a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x2a>
 8002186:	2302      	movs	r3, #2
 8002188:	e32e      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x688>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe19 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8313 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db2c      	blt.n	8002206 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x6a>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	2201      	movs	r2, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	e016      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x98>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021da:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80021e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2201      	movs	r2, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	69d1      	ldr	r1, [r2, #28]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	430b      	orrs	r3, r1
 8002204:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	f7ff fcfe 	bl	8001c14 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fdd6 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 8002222:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fde3 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 800222e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 80b8 	bne.w	80023a8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80b4 	bne.w	80023a8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff fd0d 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002252:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <HAL_ADC_ConfigChannel+0x1b4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800225a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x118>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	e01d      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x154>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_ADC_ConfigChannel+0x13e>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	e00a      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x154>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d02c      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022cc:	f7ff fc4e 	bl	8001b6c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6919      	ldr	r1, [r3, #16]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	7e5b      	ldrb	r3, [r3, #25]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d102      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x186>
 80022e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022e4:	e000      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x188>
 80022e6:	2300      	movs	r3, #0
 80022e8:	461a      	mov	r2, r3
 80022ea:	f7ff fc78 	bl	8001bde <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6919      	ldr	r1, [r3, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	7e1b      	ldrb	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1a4>
 80022fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002302:	e000      	b.n	8002306 <HAL_ADC_ConfigChannel+0x1a6>
 8002304:	2300      	movs	r3, #0
 8002306:	461a      	mov	r2, r3
 8002308:	f7ff fc50 	bl	8001bac <LL_ADC_SetDataRightShift>
 800230c:	e04c      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x248>
 800230e:	bf00      	nop
 8002310:	47ff0000 	.word	0x47ff0000
 8002314:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	069b      	lsls	r3, r3, #26
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800233a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800235e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002382:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fcfb 	bl	8001da8 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 8211 	bne.w	80027dc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7ff fc7c 	bl	8001cc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4aa1      	ldr	r2, [pc, #644]	@ (8002658 <HAL_ADC_ConfigChannel+0x4f8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f040 812e 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2a0>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e019      	b.n	8002434 <HAL_ADC_ConfigChannel+0x2d4>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e003      	b.n	8002424 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800241c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2b09      	cmp	r3, #9
 800242c:	bf94      	ite	ls
 800242e:	2301      	movls	r3, #1
 8002430:	2300      	movhi	r3, #0
 8002432:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	2b00      	cmp	r3, #0
 8002436:	d079      	beq.n	800252c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x2f4>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	e015      	b.n	8002480 <HAL_ADC_ConfigChannel+0x320>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002464:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x340>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x370>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80024bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x396>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	051b      	lsls	r3, r3, #20
 80024f4:	e018      	b.n	8002528 <HAL_ADC_ConfigChannel+0x3c8>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e003      	b.n	800251a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002528:	430b      	orrs	r3, r1
 800252a:	e07e      	b.n	800262a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x3e8>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002546:	e015      	b.n	8002574 <HAL_ADC_ConfigChannel+0x414>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800255a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x434>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	e017      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x464>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	61bb      	str	r3, [r7, #24]
  return result;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	ea42 0103 	orr.w	r1, r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10d      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x490>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	3b1e      	subs	r3, #30
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	e01b      	b.n	8002628 <HAL_ADC_ConfigChannel+0x4c8>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	60fb      	str	r3, [r7, #12]
  return result;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	051b      	lsls	r3, r3, #20
 8002624:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	4619      	mov	r1, r3
 8002630:	f7ff fb1c 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f280 80cf 	bge.w	80027dc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a06      	ldr	r2, [pc, #24]	@ (800265c <HAL_ADC_ConfigChannel+0x4fc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_ADC_ConfigChannel+0x4f2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <HAL_ADC_ConfigChannel+0x500>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x508>
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <HAL_ADC_ConfigChannel+0x504>)
 8002654:	e009      	b.n	800266a <HAL_ADC_ConfigChannel+0x50a>
 8002656:	bf00      	nop
 8002658:	47ff0000 	.word	0x47ff0000
 800265c:	40022000 	.word	0x40022000
 8002660:	40022100 	.word	0x40022100
 8002664:	40022300 	.word	0x40022300
 8002668:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_ADC_ConfigChannel+0x690>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fa70 	bl	8001b50 <LL_ADC_GetCommonPathInternalCh>
 8002670:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5f      	ldr	r2, [pc, #380]	@ (80027f4 <HAL_ADC_ConfigChannel+0x694>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x526>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5d      	ldr	r2, [pc, #372]	@ (80027f8 <HAL_ADC_ConfigChannel+0x698>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x544>
 8002686:	485b      	ldr	r0, [pc, #364]	@ (80027f4 <HAL_ADC_ConfigChannel+0x694>)
 8002688:	f7ff fb8e 	bl	8001da8 <LL_ADC_IsEnabled>
 800268c:	4604      	mov	r4, r0
 800268e:	485a      	ldr	r0, [pc, #360]	@ (80027f8 <HAL_ADC_ConfigChannel+0x698>)
 8002690:	f7ff fb8a 	bl	8001da8 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	4323      	orrs	r3, r4
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x556>
 80026a4:	4855      	ldr	r0, [pc, #340]	@ (80027fc <HAL_ADC_ConfigChannel+0x69c>)
 80026a6:	f7ff fb7f 	bl	8001da8 <LL_ADC_IsEnabled>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d07d      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_ADC_ConfigChannel+0x6a0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d130      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x5c6>
 80026c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12b      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <HAL_ADC_ConfigChannel+0x69c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f040 8081 	bne.w	80027dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a45      	ldr	r2, [pc, #276]	@ (80027f4 <HAL_ADC_ConfigChannel+0x694>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x58e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a43      	ldr	r2, [pc, #268]	@ (80027f8 <HAL_ADC_ConfigChannel+0x698>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x592>
 80026ee:	4a45      	ldr	r2, [pc, #276]	@ (8002804 <HAL_ADC_ConfigChannel+0x6a4>)
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x594>
 80026f2:	4a3f      	ldr	r2, [pc, #252]	@ (80027f0 <HAL_ADC_ConfigChannel+0x690>)
 80026f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7ff fa14 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_ADC_ConfigChannel+0x6a8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	4a40      	ldr	r2, [pc, #256]	@ (800280c <HAL_ADC_ConfigChannel+0x6ac>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	3301      	adds	r3, #1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002724:	e05a      	b.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <HAL_ADC_ConfigChannel+0x6b0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d11e      	bne.n	800276e <HAL_ADC_ConfigChannel+0x60e>
 8002730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_ADC_ConfigChannel+0x69c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d14b      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2a      	ldr	r2, [pc, #168]	@ (80027f4 <HAL_ADC_ConfigChannel+0x694>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x5f8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_ADC_ConfigChannel+0x698>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x5fc>
 8002758:	4a2a      	ldr	r2, [pc, #168]	@ (8002804 <HAL_ADC_ConfigChannel+0x6a4>)
 800275a:	e000      	b.n	800275e <HAL_ADC_ConfigChannel+0x5fe>
 800275c:	4a24      	ldr	r2, [pc, #144]	@ (80027f0 <HAL_ADC_ConfigChannel+0x690>)
 800275e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7ff f9df 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276c:	e036      	b.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a28      	ldr	r2, [pc, #160]	@ (8002814 <HAL_ADC_ConfigChannel+0x6b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d131      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
 8002778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d12c      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <HAL_ADC_ConfigChannel+0x69c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d127      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_ADC_ConfigChannel+0x694>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x640>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <HAL_ADC_ConfigChannel+0x698>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x644>
 80027a0:	4a18      	ldr	r2, [pc, #96]	@ (8002804 <HAL_ADC_ConfigChannel+0x6a4>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x646>
 80027a4:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <HAL_ADC_ConfigChannel+0x690>)
 80027a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7ff f9bb 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
 80027b4:	e012      	b.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027c8:	e008      	b.n	80027dc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3784      	adds	r7, #132	@ 0x84
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	58026300 	.word	0x58026300
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40022100 	.word	0x40022100
 80027fc:	58026000 	.word	0x58026000
 8002800:	cb840000 	.word	0xcb840000
 8002804:	40022300 	.word	0x40022300
 8002808:	24000008 	.word	0x24000008
 800280c:	053e2d63 	.word	0x053e2d63
 8002810:	c7520000 	.word	0xc7520000
 8002814:	cfb80000 	.word	0xcfb80000

08002818 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7a      	ldr	r2, [pc, #488]	@ (8002a10 <ADC_ConfigureBoostMode+0x1f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d004      	beq.n	8002834 <ADC_ConfigureBoostMode+0x1c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a79      	ldr	r2, [pc, #484]	@ (8002a14 <ADC_ConfigureBoostMode+0x1fc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d109      	bne.n	8002848 <ADC_ConfigureBoostMode+0x30>
 8002834:	4b78      	ldr	r3, [pc, #480]	@ (8002a18 <ADC_ConfigureBoostMode+0x200>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e008      	b.n	800285a <ADC_ConfigureBoostMode+0x42>
 8002848:	4b74      	ldr	r3, [pc, #464]	@ (8002a1c <ADC_ConfigureBoostMode+0x204>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800285e:	f003 fc15 	bl	800608c <HAL_RCC_GetHCLKFreq>
 8002862:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800286c:	d010      	beq.n	8002890 <ADC_ConfigureBoostMode+0x78>
 800286e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002872:	d873      	bhi.n	800295c <ADC_ConfigureBoostMode+0x144>
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002878:	d002      	beq.n	8002880 <ADC_ConfigureBoostMode+0x68>
 800287a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800287e:	d16d      	bne.n	800295c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	60fb      	str	r3, [r7, #12]
        break;
 800288e:	e068      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	60fb      	str	r3, [r7, #12]
        break;
 8002896:	e064      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002898:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800289c:	f04f 0100 	mov.w	r1, #0
 80028a0:	f004 fe5a 	bl	8007558 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028ae:	d051      	beq.n	8002954 <ADC_ConfigureBoostMode+0x13c>
 80028b0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028b4:	d854      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028ba:	d047      	beq.n	800294c <ADC_ConfigureBoostMode+0x134>
 80028bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028c0:	d84e      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028c6:	d03d      	beq.n	8002944 <ADC_ConfigureBoostMode+0x12c>
 80028c8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028cc:	d848      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028d2:	d033      	beq.n	800293c <ADC_ConfigureBoostMode+0x124>
 80028d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028d8:	d842      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028da:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028de:	d029      	beq.n	8002934 <ADC_ConfigureBoostMode+0x11c>
 80028e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028e4:	d83c      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028ea:	d01a      	beq.n	8002922 <ADC_ConfigureBoostMode+0x10a>
 80028ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028f0:	d836      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028f6:	d014      	beq.n	8002922 <ADC_ConfigureBoostMode+0x10a>
 80028f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028fc:	d830      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 80028fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002902:	d00e      	beq.n	8002922 <ADC_ConfigureBoostMode+0x10a>
 8002904:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002908:	d82a      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 800290a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800290e:	d008      	beq.n	8002922 <ADC_ConfigureBoostMode+0x10a>
 8002910:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002914:	d824      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x148>
 8002916:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800291a:	d002      	beq.n	8002922 <ADC_ConfigureBoostMode+0x10a>
 800291c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002920:	d11e      	bne.n	8002960 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c9b      	lsrs	r3, r3, #18
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	60fb      	str	r3, [r7, #12]
        break;
 8002932:	e016      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
        break;
 800293a:	e012      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	60fb      	str	r3, [r7, #12]
        break;
 8002942:	e00e      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	60fb      	str	r3, [r7, #12]
        break;
 800294a:	e00a      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	09db      	lsrs	r3, r3, #7
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e006      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	60fb      	str	r3, [r7, #12]
        break;
 800295a:	e002      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
        break;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002960:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002962:	f7ff f889 	bl	8001a78 <HAL_GetREVID>
 8002966:	4603      	mov	r3, r0
 8002968:	f241 0203 	movw	r2, #4099	@ 0x1003
 800296c:	4293      	cmp	r3, r2
 800296e:	d815      	bhi.n	800299c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <ADC_ConfigureBoostMode+0x208>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d908      	bls.n	800298a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002986:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002988:	e03e      	b.n	8002a08 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	e035      	b.n	8002a08 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <ADC_ConfigureBoostMode+0x20c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d808      	bhi.n	80029bc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	e025      	b.n	8002a08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a1a      	ldr	r2, [pc, #104]	@ (8002a28 <ADC_ConfigureBoostMode+0x210>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d80a      	bhi.n	80029da <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d6:	609a      	str	r2, [r3, #8]
}
 80029d8:	e016      	b.n	8002a08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <ADC_ConfigureBoostMode+0x214>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d80a      	bhi.n	80029f8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	e007      	b.n	8002a08 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40022100 	.word	0x40022100
 8002a18:	40022300 	.word	0x40022300
 8002a1c:	58026300 	.word	0x58026300
 8002a20:	01312d00 	.word	0x01312d00
 8002a24:	005f5e10 	.word	0x005f5e10
 8002a28:	00bebc20 	.word	0x00bebc20
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e10e      	b.n	8002c6a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a5a:	d102      	bne.n	8002a62 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e103      	b.n	8002c6a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fe f933 	bl	8000ce8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002a96:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002a9c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002aa2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002aa8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b6e      	ldr	r3, [pc, #440]	@ (8002c74 <HAL_COMP_Init+0x244>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d108      	bne.n	8002ae0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0210 	orr.w	r2, r2, #16
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0210 	bic.w	r2, r2, #16
 8002aee:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_COMP_Init+0xfc>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b04:	4b5c      	ldr	r3, [pc, #368]	@ (8002c78 <HAL_COMP_Init+0x248>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c7c <HAL_COMP_Init+0x24c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002b1e:	e002      	b.n	8002b26 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a53      	ldr	r2, [pc, #332]	@ (8002c80 <HAL_COMP_Init+0x250>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d102      	bne.n	8002b3c <HAL_COMP_Init+0x10c>
 8002b36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b3a:	e001      	b.n	8002b40 <HAL_COMP_Init+0x110>
 8002b3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b40:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06d      	beq.n	8002c2a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
 8002b6a:	e008      	b.n	8002b7e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
 8002b9a:	e008      	b.n	8002bae <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002baa:	4013      	ands	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002bd8:	e00a      	b.n	8002bf0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bde:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bea:	4013      	ands	r3, r2
 8002bec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c00:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002c10:	e021      	b.n	8002c56 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c22:	4013      	ands	r3, r2
 8002c24:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002c28:	e015      	b.n	8002c56 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c50:	4013      	ands	r3, r2
 8002c52:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	f0e8cce1 	.word	0xf0e8cce1
 8002c78:	24000008 	.word	0x24000008
 8002c7c:	053e2d63 	.word	0x053e2d63
 8002c80:	5800380c 	.word	0x5800380c

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	05fa0000 	.word	0x05fa0000

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d301      	bcc.n	8002df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <SysTick_Config+0x40>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfe:	210f      	movs	r1, #15
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f7ff ff8e 	bl	8002d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <SysTick_Config+0x40>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <SysTick_Config+0x40>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff29 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff40 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff90 	bl	8002d78 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5f 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff33 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffa4 	bl	8002de0 <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e014      	b.n	8002ede <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fd ff87 	bl	8000dd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_DAC_ConfigChannel+0x1e>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12a      	b.n	8003160 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	795b      	ldrb	r3, [r3, #5]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0x2e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e124      	b.n	8003160 <HAL_DAC_ConfigChannel+0x278>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d17a      	bne.n	8003020 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f2a:	f7fe fd75 	bl	8001a18 <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f36:	e018      	b.n	8002f6a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f38:	f7fe fd6e 	bl	8001a18 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d911      	bls.n	8002f6a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f4c:	4b86      	ldr	r3, [pc, #536]	@ (8003168 <HAL_DAC_ConfigChannel+0x280>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f043 0208 	orr.w	r2, r3, #8
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0fa      	b.n	8003160 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f70:	4b7d      	ldr	r3, [pc, #500]	@ (8003168 <HAL_DAC_ConfigChannel+0x280>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1df      	bne.n	8002f38 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	6992      	ldr	r2, [r2, #24]
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f82:	e020      	b.n	8002fc6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f84:	f7fe fd48 	bl	8001a18 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d90f      	bls.n	8002fb2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da0a      	bge.n	8002fb2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f043 0208 	orr.w	r2, r3, #8
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2203      	movs	r2, #3
 8002fac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0d6      	b.n	8003160 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dbe3      	blt.n	8002f84 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	6992      	ldr	r2, [r2, #24]
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	ea02 0103 	and.w	r1, r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	21ff      	movs	r1, #255	@ 0xff
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	ea02 0103 	and.w	r1, r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11d      	bne.n	8003064 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2207      	movs	r2, #7
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
 800308c:	e00f      	b.n	80030ae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d102      	bne.n	800309c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
 800309a:	e008      	b.n	80030ae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a8:	e001      	b.n	80030ae <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	22c0      	movs	r2, #192	@ 0xc0
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	400a      	ands	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800315c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20008000 	.word	0x20008000

0800316c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7fe fc50 	bl	8001a18 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e316      	b.n	80037b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_DMA_Init+0x1b8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a65      	ldr	r2, [pc, #404]	@ (8003328 <HAL_DMA_Init+0x1bc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a63      	ldr	r2, [pc, #396]	@ (800332c <HAL_DMA_Init+0x1c0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a62      	ldr	r2, [pc, #392]	@ (8003330 <HAL_DMA_Init+0x1c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a60      	ldr	r2, [pc, #384]	@ (8003334 <HAL_DMA_Init+0x1c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003338 <HAL_DMA_Init+0x1cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_DMA_Init+0x1d0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003340 <HAL_DMA_Init+0x1d4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_DMA_Init+0x1d8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <HAL_DMA_Init+0x1dc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_DMA_Init+0x1e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_DMA_Init+0x1e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_DMA_Init+0x1e8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a53      	ldr	r2, [pc, #332]	@ (8003358 <HAL_DMA_Init+0x1ec>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_DMA_Init+0x1f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_Init+0xb8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <HAL_DMA_Init+0x1f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0xbc>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_DMA_Init+0xbe>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 813b 	beq.w	80034a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <HAL_DMA_Init+0x1b8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d04a      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a36      	ldr	r2, [pc, #216]	@ (8003328 <HAL_DMA_Init+0x1bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d045      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a34      	ldr	r2, [pc, #208]	@ (800332c <HAL_DMA_Init+0x1c0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d040      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a33      	ldr	r2, [pc, #204]	@ (8003330 <HAL_DMA_Init+0x1c4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d03b      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	@ (8003334 <HAL_DMA_Init+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d036      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a30      	ldr	r2, [pc, #192]	@ (8003338 <HAL_DMA_Init+0x1cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d031      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2e      	ldr	r2, [pc, #184]	@ (800333c <HAL_DMA_Init+0x1d0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d02c      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2d      	ldr	r2, [pc, #180]	@ (8003340 <HAL_DMA_Init+0x1d4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d027      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2b      	ldr	r2, [pc, #172]	@ (8003344 <HAL_DMA_Init+0x1d8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2a      	ldr	r2, [pc, #168]	@ (8003348 <HAL_DMA_Init+0x1dc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01d      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a28      	ldr	r2, [pc, #160]	@ (800334c <HAL_DMA_Init+0x1e0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a27      	ldr	r2, [pc, #156]	@ (8003350 <HAL_DMA_Init+0x1e4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	@ (8003354 <HAL_DMA_Init+0x1e8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a24      	ldr	r2, [pc, #144]	@ (8003358 <HAL_DMA_Init+0x1ec>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	@ (800335c <HAL_DMA_Init+0x1f0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_DMA_Init+0x174>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_DMA_Init+0x1f4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <HAL_DMA_Init+0x186>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e007      	b.n	8003302 <HAL_DMA_Init+0x196>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003302:	e02f      	b.n	8003364 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003304:	f7fe fb88 	bl	8001a18 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d928      	bls.n	8003364 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e246      	b.n	80037b2 <HAL_DMA_Init+0x646>
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1c8      	bne.n	8003304 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4b83      	ldr	r3, [pc, #524]	@ (800358c <HAL_DMA_Init+0x420>)
 800337e:	4013      	ands	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800338a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	4313      	orrs	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033c8:	4b71      	ldr	r3, [pc, #452]	@ (8003590 <HAL_DMA_Init+0x424>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b71      	ldr	r3, [pc, #452]	@ (8003594 <HAL_DMA_Init+0x428>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d4:	d328      	bcc.n	8003428 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b28      	cmp	r3, #40	@ 0x28
 80033dc:	d903      	bls.n	80033e6 <HAL_DMA_Init+0x27a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80033e4:	d917      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80033ec:	d903      	bls.n	80033f6 <HAL_DMA_Init+0x28a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b42      	cmp	r3, #66	@ 0x42
 80033f4:	d90f      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b46      	cmp	r3, #70	@ 0x46
 80033fc:	d903      	bls.n	8003406 <HAL_DMA_Init+0x29a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b48      	cmp	r3, #72	@ 0x48
 8003404:	d907      	bls.n	8003416 <HAL_DMA_Init+0x2aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b4e      	cmp	r3, #78	@ 0x4e
 800340c:	d905      	bls.n	800341a <HAL_DMA_Init+0x2ae>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b52      	cmp	r3, #82	@ 0x52
 8003414:	d801      	bhi.n	800341a <HAL_DMA_Init+0x2ae>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_DMA_Init+0x2b0>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003426:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	2b04      	cmp	r3, #4
 8003450:	d117      	bne.n	8003482 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f001 f9b9 	bl	80047dc <DMA_CheckFifoParam>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e197      	b.n	80037b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f8f4 	bl	8004678 <DMA_CalcBaseAndBitshift>
 8003490:	4603      	mov	r3, r0
 8003492:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e0cd      	b.n	8003642 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003598 <HAL_DMA_Init+0x42c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a39      	ldr	r2, [pc, #228]	@ (800359c <HAL_DMA_Init+0x430>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a38      	ldr	r2, [pc, #224]	@ (80035a0 <HAL_DMA_Init+0x434>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a36      	ldr	r2, [pc, #216]	@ (80035a4 <HAL_DMA_Init+0x438>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a35      	ldr	r2, [pc, #212]	@ (80035a8 <HAL_DMA_Init+0x43c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a33      	ldr	r2, [pc, #204]	@ (80035ac <HAL_DMA_Init+0x440>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a32      	ldr	r2, [pc, #200]	@ (80035b0 <HAL_DMA_Init+0x444>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_Init+0x38a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	@ (80035b4 <HAL_DMA_Init+0x448>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Init+0x38e>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_DMA_Init+0x390>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	@ (8003598 <HAL_DMA_Init+0x42c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d021      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <HAL_DMA_Init+0x430>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01c      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_DMA_Init+0x434>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d017      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_DMA_Init+0x438>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d012      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_DMA_Init+0x43c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <HAL_DMA_Init+0x440>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d008      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_DMA_Init+0x444>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <HAL_DMA_Init+0x3e4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <HAL_DMA_Init+0x448>)
 800354e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <HAL_DMA_Init+0x44c>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d021      	beq.n	80035bc <HAL_DMA_Init+0x450>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b80      	cmp	r3, #128	@ 0x80
 800357e:	d102      	bne.n	8003586 <HAL_DMA_Init+0x41a>
 8003580:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003584:	e01b      	b.n	80035be <HAL_DMA_Init+0x452>
 8003586:	2300      	movs	r3, #0
 8003588:	e019      	b.n	80035be <HAL_DMA_Init+0x452>
 800358a:	bf00      	nop
 800358c:	fe10803f 	.word	0xfe10803f
 8003590:	5c001000 	.word	0x5c001000
 8003594:	ffff0000 	.word	0xffff0000
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
 80035b8:	fffe000f 	.word	0xfffe000f
 80035bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b6e      	ldr	r3, [pc, #440]	@ (80037bc <HAL_DMA_Init+0x650>)
 8003604:	4413      	add	r3, r2
 8003606:	4a6e      	ldr	r2, [pc, #440]	@ (80037c0 <HAL_DMA_Init+0x654>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	009a      	lsls	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f001 f82f 	bl	8004678 <DMA_CalcBaseAndBitshift>
 800361a:	4603      	mov	r3, r0
 800361c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e008      	b.n	8003642 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	@ 0x40
 8003634:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0b7      	b.n	80037b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5f      	ldr	r2, [pc, #380]	@ (80037c4 <HAL_DMA_Init+0x658>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d072      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5d      	ldr	r2, [pc, #372]	@ (80037c8 <HAL_DMA_Init+0x65c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d06d      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5c      	ldr	r2, [pc, #368]	@ (80037cc <HAL_DMA_Init+0x660>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d068      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_DMA_Init+0x664>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d063      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a59      	ldr	r2, [pc, #356]	@ (80037d4 <HAL_DMA_Init+0x668>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d05e      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a57      	ldr	r2, [pc, #348]	@ (80037d8 <HAL_DMA_Init+0x66c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d059      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a56      	ldr	r2, [pc, #344]	@ (80037dc <HAL_DMA_Init+0x670>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d054      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a54      	ldr	r2, [pc, #336]	@ (80037e0 <HAL_DMA_Init+0x674>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d04f      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a53      	ldr	r2, [pc, #332]	@ (80037e4 <HAL_DMA_Init+0x678>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04a      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a51      	ldr	r2, [pc, #324]	@ (80037e8 <HAL_DMA_Init+0x67c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d045      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a50      	ldr	r2, [pc, #320]	@ (80037ec <HAL_DMA_Init+0x680>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d040      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4e      	ldr	r2, [pc, #312]	@ (80037f0 <HAL_DMA_Init+0x684>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d03b      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4d      	ldr	r2, [pc, #308]	@ (80037f4 <HAL_DMA_Init+0x688>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d036      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	@ (80037f8 <HAL_DMA_Init+0x68c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4a      	ldr	r2, [pc, #296]	@ (80037fc <HAL_DMA_Init+0x690>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d02c      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a48      	ldr	r2, [pc, #288]	@ (8003800 <HAL_DMA_Init+0x694>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d027      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a47      	ldr	r2, [pc, #284]	@ (8003804 <HAL_DMA_Init+0x698>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a45      	ldr	r2, [pc, #276]	@ (8003808 <HAL_DMA_Init+0x69c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01d      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a44      	ldr	r2, [pc, #272]	@ (800380c <HAL_DMA_Init+0x6a0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_DMA_Init+0x6a4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a41      	ldr	r2, [pc, #260]	@ (8003814 <HAL_DMA_Init+0x6a8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3f      	ldr	r2, [pc, #252]	@ (8003818 <HAL_DMA_Init+0x6ac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3e      	ldr	r2, [pc, #248]	@ (800381c <HAL_DMA_Init+0x6b0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_DMA_Init+0x5c6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3c      	ldr	r2, [pc, #240]	@ (8003820 <HAL_DMA_Init+0x6b4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_DMA_Init+0x5ca>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_DMA_Init+0x5cc>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d032      	beq.n	80037a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 f8c9 	bl	80048d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d102      	bne.n	8003750 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003764:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_DMA_Init+0x624>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d80c      	bhi.n	8003790 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 f946 	bl	8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	a7fdabf8 	.word	0xa7fdabf8
 80037c0:	cccccccd 	.word	0xcccccccd
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	58025408 	.word	0x58025408
 8003808:	5802541c 	.word	0x5802541c
 800380c:	58025430 	.word	0x58025430
 8003810:	58025444 	.word	0x58025444
 8003814:	58025458 	.word	0x58025458
 8003818:	5802546c 	.word	0x5802546c
 800381c:	58025480 	.word	0x58025480
 8003820:	58025494 	.word	0x58025494

08003824 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003830:	4b67      	ldr	r3, [pc, #412]	@ (80039d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a67      	ldr	r2, [pc, #412]	@ (80039d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5f      	ldr	r2, [pc, #380]	@ (80039d8 <HAL_DMA_IRQHandler+0x1b4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04a      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5d      	ldr	r2, [pc, #372]	@ (80039dc <HAL_DMA_IRQHandler+0x1b8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d045      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5c      	ldr	r2, [pc, #368]	@ (80039e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d040      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5a      	ldr	r2, [pc, #360]	@ (80039e4 <HAL_DMA_IRQHandler+0x1c0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d03b      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a59      	ldr	r2, [pc, #356]	@ (80039e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d036      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_DMA_IRQHandler+0x1c8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a56      	ldr	r2, [pc, #344]	@ (80039f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d02c      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a54      	ldr	r2, [pc, #336]	@ (80039f4 <HAL_DMA_IRQHandler+0x1d0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d027      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a53      	ldr	r2, [pc, #332]	@ (80039f8 <HAL_DMA_IRQHandler+0x1d4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a51      	ldr	r2, [pc, #324]	@ (80039fc <HAL_DMA_IRQHandler+0x1d8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a50      	ldr	r2, [pc, #320]	@ (8003a00 <HAL_DMA_IRQHandler+0x1dc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003a04 <HAL_DMA_IRQHandler+0x1e0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003a08 <HAL_DMA_IRQHandler+0x1e4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	@ (8003a0c <HAL_DMA_IRQHandler+0x1e8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003a10 <HAL_DMA_IRQHandler+0x1ec>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a48      	ldr	r2, [pc, #288]	@ (8003a14 <HAL_DMA_IRQHandler+0x1f0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_IRQHandler+0xd6>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_DMA_IRQHandler+0xd8>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 842b 	beq.w	8004158 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2208      	movs	r2, #8
 800390c:	409a      	lsls	r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a2 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <HAL_DMA_IRQHandler+0x1b4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2d      	ldr	r2, [pc, #180]	@ (80039dc <HAL_DMA_IRQHandler+0x1b8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2b      	ldr	r2, [pc, #172]	@ (80039e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2a      	ldr	r2, [pc, #168]	@ (80039e4 <HAL_DMA_IRQHandler+0x1c0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <HAL_DMA_IRQHandler+0x1c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a25      	ldr	r2, [pc, #148]	@ (80039f0 <HAL_DMA_IRQHandler+0x1cc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a24      	ldr	r2, [pc, #144]	@ (80039f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a22      	ldr	r2, [pc, #136]	@ (80039f8 <HAL_DMA_IRQHandler+0x1d4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a21      	ldr	r2, [pc, #132]	@ (80039fc <HAL_DMA_IRQHandler+0x1d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <HAL_DMA_IRQHandler+0x1dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <HAL_DMA_IRQHandler+0x1e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1c      	ldr	r2, [pc, #112]	@ (8003a08 <HAL_DMA_IRQHandler+0x1e4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a0c <HAL_DMA_IRQHandler+0x1e8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a19      	ldr	r2, [pc, #100]	@ (8003a10 <HAL_DMA_IRQHandler+0x1ec>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <HAL_DMA_IRQHandler+0x1f0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d12f      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x1f4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e02e      	b.n	8003a2c <HAL_DMA_IRQHandler+0x208>
 80039ce:	bf00      	nop
 80039d0:	24000008 	.word	0x24000008
 80039d4:	1b4e81b5 	.word	0x1b4e81b5
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2208      	movs	r2, #8
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06e      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a69      	ldr	r2, [pc, #420]	@ (8003c1c <HAL_DMA_IRQHandler+0x3f8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a67      	ldr	r2, [pc, #412]	@ (8003c20 <HAL_DMA_IRQHandler+0x3fc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a66      	ldr	r2, [pc, #408]	@ (8003c24 <HAL_DMA_IRQHandler+0x400>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a64      	ldr	r2, [pc, #400]	@ (8003c28 <HAL_DMA_IRQHandler+0x404>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a63      	ldr	r2, [pc, #396]	@ (8003c2c <HAL_DMA_IRQHandler+0x408>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a61      	ldr	r2, [pc, #388]	@ (8003c30 <HAL_DMA_IRQHandler+0x40c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a60      	ldr	r2, [pc, #384]	@ (8003c34 <HAL_DMA_IRQHandler+0x410>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5e      	ldr	r2, [pc, #376]	@ (8003c38 <HAL_DMA_IRQHandler+0x414>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c3c <HAL_DMA_IRQHandler+0x418>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c40 <HAL_DMA_IRQHandler+0x41c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5a      	ldr	r2, [pc, #360]	@ (8003c44 <HAL_DMA_IRQHandler+0x420>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	@ (8003c48 <HAL_DMA_IRQHandler+0x424>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a57      	ldr	r2, [pc, #348]	@ (8003c4c <HAL_DMA_IRQHandler+0x428>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a55      	ldr	r2, [pc, #340]	@ (8003c50 <HAL_DMA_IRQHandler+0x42c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a54      	ldr	r2, [pc, #336]	@ (8003c54 <HAL_DMA_IRQHandler+0x430>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	@ (8003c58 <HAL_DMA_IRQHandler+0x434>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10a      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x304>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e003      	b.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	f043 0202 	orr.w	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2204      	movs	r2, #4
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808f 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c1c <HAL_DMA_IRQHandler+0x3f8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <HAL_DMA_IRQHandler+0x3fc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <HAL_DMA_IRQHandler+0x400>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <HAL_DMA_IRQHandler+0x404>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <HAL_DMA_IRQHandler+0x408>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <HAL_DMA_IRQHandler+0x40c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a23      	ldr	r2, [pc, #140]	@ (8003c34 <HAL_DMA_IRQHandler+0x410>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <HAL_DMA_IRQHandler+0x414>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_DMA_IRQHandler+0x418>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c40 <HAL_DMA_IRQHandler+0x41c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1d      	ldr	r2, [pc, #116]	@ (8003c44 <HAL_DMA_IRQHandler+0x420>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_DMA_IRQHandler+0x424>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <HAL_DMA_IRQHandler+0x428>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_DMA_IRQHandler+0x42c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_DMA_IRQHandler+0x430>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <HAL_DMA_IRQHandler+0x434>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d12a      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x438>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e023      	b.n	8003c64 <HAL_DMA_IRQHandler+0x440>
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2204      	movs	r2, #4
 8003c72:	409a      	lsls	r2, r3
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a85      	ldr	r2, [pc, #532]	@ (8003eb4 <HAL_DMA_IRQHandler+0x690>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04a      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a83      	ldr	r2, [pc, #524]	@ (8003eb8 <HAL_DMA_IRQHandler+0x694>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d045      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a82      	ldr	r2, [pc, #520]	@ (8003ebc <HAL_DMA_IRQHandler+0x698>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d040      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a80      	ldr	r2, [pc, #512]	@ (8003ec0 <HAL_DMA_IRQHandler+0x69c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d036      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d031      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7c      	ldr	r2, [pc, #496]	@ (8003ecc <HAL_DMA_IRQHandler+0x6a8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d02c      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d027      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a79      	ldr	r2, [pc, #484]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a77      	ldr	r2, [pc, #476]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01d      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a76      	ldr	r2, [pc, #472]	@ (8003edc <HAL_DMA_IRQHandler+0x6b8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a74      	ldr	r2, [pc, #464]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a73      	ldr	r2, [pc, #460]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a71      	ldr	r2, [pc, #452]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a70      	ldr	r2, [pc, #448]	@ (8003eec <HAL_DMA_IRQHandler+0x6c8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10a      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x52c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e009      	b.n	8003d64 <HAL_DMA_IRQHandler+0x540>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2210      	movs	r2, #16
 8003d72:	409a      	lsls	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d108      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d024      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
 8003da4:	e01f      	b.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	e016      	b.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0208 	bic.w	r2, r2, #8
 8003dd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2220      	movs	r2, #32
 8003df0:	409a      	lsls	r2, r3
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8110 	beq.w	800401c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <HAL_DMA_IRQHandler+0x690>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb8 <HAL_DMA_IRQHandler+0x694>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a29      	ldr	r2, [pc, #164]	@ (8003ebc <HAL_DMA_IRQHandler+0x698>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <HAL_DMA_IRQHandler+0x69c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a26      	ldr	r2, [pc, #152]	@ (8003ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a25      	ldr	r2, [pc, #148]	@ (8003ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a23      	ldr	r2, [pc, #140]	@ (8003ecc <HAL_DMA_IRQHandler+0x6a8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a20      	ldr	r2, [pc, #128]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_DMA_IRQHandler+0x6b8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a19      	ldr	r2, [pc, #100]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a17      	ldr	r2, [pc, #92]	@ (8003eec <HAL_DMA_IRQHandler+0x6c8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d12b      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x6d0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e02a      	b.n	8003f08 <HAL_DMA_IRQHandler+0x6e4>
 8003eb2:	bf00      	nop
 8003eb4:	40020010 	.word	0x40020010
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40020040 	.word	0x40020040
 8003ec0:	40020058 	.word	0x40020058
 8003ec4:	40020070 	.word	0x40020070
 8003ec8:	40020088 	.word	0x40020088
 8003ecc:	400200a0 	.word	0x400200a0
 8003ed0:	400200b8 	.word	0x400200b8
 8003ed4:	40020410 	.word	0x40020410
 8003ed8:	40020428 	.word	0x40020428
 8003edc:	40020440 	.word	0x40020440
 8003ee0:	40020458 	.word	0x40020458
 8003ee4:	40020470 	.word	0x40020470
 8003ee8:	40020488 	.word	0x40020488
 8003eec:	400204a0 	.word	0x400204a0
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8087 	beq.w	800401c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2220      	movs	r2, #32
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d139      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0216 	bic.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x736>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	223f      	movs	r2, #63	@ 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 834a 	beq.w	8004628 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
          }
          return;
 8003f9c:	e344      	b.n	8004628 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e027      	b.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
 8003fdc:	e01e      	b.n	800401c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0210 	bic.w	r2, r2, #16
 8003ffa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8306 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8088 	beq.w	8004144 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7a      	ldr	r2, [pc, #488]	@ (800422c <HAL_DMA_IRQHandler+0xa08>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a79      	ldr	r2, [pc, #484]	@ (8004230 <HAL_DMA_IRQHandler+0xa0c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a77      	ldr	r2, [pc, #476]	@ (8004234 <HAL_DMA_IRQHandler+0xa10>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a76      	ldr	r2, [pc, #472]	@ (8004238 <HAL_DMA_IRQHandler+0xa14>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a74      	ldr	r2, [pc, #464]	@ (800423c <HAL_DMA_IRQHandler+0xa18>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a73      	ldr	r2, [pc, #460]	@ (8004240 <HAL_DMA_IRQHandler+0xa1c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a71      	ldr	r2, [pc, #452]	@ (8004244 <HAL_DMA_IRQHandler+0xa20>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a70      	ldr	r2, [pc, #448]	@ (8004248 <HAL_DMA_IRQHandler+0xa24>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6e      	ldr	r2, [pc, #440]	@ (800424c <HAL_DMA_IRQHandler+0xa28>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6d      	ldr	r2, [pc, #436]	@ (8004250 <HAL_DMA_IRQHandler+0xa2c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004254 <HAL_DMA_IRQHandler+0xa30>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <HAL_DMA_IRQHandler+0xa34>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a68      	ldr	r2, [pc, #416]	@ (800425c <HAL_DMA_IRQHandler+0xa38>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a67      	ldr	r2, [pc, #412]	@ (8004260 <HAL_DMA_IRQHandler+0xa3c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a65      	ldr	r2, [pc, #404]	@ (8004264 <HAL_DMA_IRQHandler+0xa40>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a64      	ldr	r2, [pc, #400]	@ (8004268 <HAL_DMA_IRQHandler+0xa44>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <HAL_DMA_IRQHandler+0x8ca>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e007      	b.n	80040fe <HAL_DMA_IRQHandler+0x8da>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004106:	429a      	cmp	r2, r3
 8004108:	d307      	bcc.n	800411a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f2      	bne.n	80040fe <HAL_DMA_IRQHandler+0x8da>
 8004118:	e000      	b.n	800411c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800411a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004132:	e003      	b.n	800413c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8272 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
 8004156:	e26c      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a43      	ldr	r2, [pc, #268]	@ (800426c <HAL_DMA_IRQHandler+0xa48>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <HAL_DMA_IRQHandler+0xa4c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01d      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a40      	ldr	r2, [pc, #256]	@ (8004274 <HAL_DMA_IRQHandler+0xa50>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3f      	ldr	r2, [pc, #252]	@ (8004278 <HAL_DMA_IRQHandler+0xa54>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3d      	ldr	r2, [pc, #244]	@ (800427c <HAL_DMA_IRQHandler+0xa58>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3c      	ldr	r2, [pc, #240]	@ (8004280 <HAL_DMA_IRQHandler+0xa5c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	@ (8004284 <HAL_DMA_IRQHandler+0xa60>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a39      	ldr	r2, [pc, #228]	@ (8004288 <HAL_DMA_IRQHandler+0xa64>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_DMA_IRQHandler+0x988>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_DMA_IRQHandler+0x98a>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 823f 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2204      	movs	r2, #4
 80041c6:	409a      	lsls	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80cd 	beq.w	800436c <HAL_DMA_IRQHandler+0xb48>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80c7 	beq.w	800436c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	2204      	movs	r2, #4
 80041e8:	409a      	lsls	r2, r3
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d049      	beq.n	800428c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8210 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004214:	e20a      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8206 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004228:	e200      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
 800422a:	bf00      	nop
 800422c:	40020010 	.word	0x40020010
 8004230:	40020028 	.word	0x40020028
 8004234:	40020040 	.word	0x40020040
 8004238:	40020058 	.word	0x40020058
 800423c:	40020070 	.word	0x40020070
 8004240:	40020088 	.word	0x40020088
 8004244:	400200a0 	.word	0x400200a0
 8004248:	400200b8 	.word	0x400200b8
 800424c:	40020410 	.word	0x40020410
 8004250:	40020428 	.word	0x40020428
 8004254:	40020440 	.word	0x40020440
 8004258:	40020458 	.word	0x40020458
 800425c:	40020470 	.word	0x40020470
 8004260:	40020488 	.word	0x40020488
 8004264:	400204a0 	.word	0x400204a0
 8004268:	400204b8 	.word	0x400204b8
 800426c:	58025408 	.word	0x58025408
 8004270:	5802541c 	.word	0x5802541c
 8004274:	58025430 	.word	0x58025430
 8004278:	58025444 	.word	0x58025444
 800427c:	58025458 	.word	0x58025458
 8004280:	5802546c 	.word	0x5802546c
 8004284:	58025480 	.word	0x58025480
 8004288:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d160      	bne.n	8004358 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7f      	ldr	r2, [pc, #508]	@ (8004498 <HAL_DMA_IRQHandler+0xc74>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7d      	ldr	r2, [pc, #500]	@ (800449c <HAL_DMA_IRQHandler+0xc78>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7c      	ldr	r2, [pc, #496]	@ (80044a0 <HAL_DMA_IRQHandler+0xc7c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7a      	ldr	r2, [pc, #488]	@ (80044a4 <HAL_DMA_IRQHandler+0xc80>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a79      	ldr	r2, [pc, #484]	@ (80044a8 <HAL_DMA_IRQHandler+0xc84>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a77      	ldr	r2, [pc, #476]	@ (80044ac <HAL_DMA_IRQHandler+0xc88>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a76      	ldr	r2, [pc, #472]	@ (80044b0 <HAL_DMA_IRQHandler+0xc8c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a74      	ldr	r2, [pc, #464]	@ (80044b4 <HAL_DMA_IRQHandler+0xc90>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	@ (80044b8 <HAL_DMA_IRQHandler+0xc94>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a71      	ldr	r2, [pc, #452]	@ (80044bc <HAL_DMA_IRQHandler+0xc98>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a70      	ldr	r2, [pc, #448]	@ (80044c0 <HAL_DMA_IRQHandler+0xc9c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a6e      	ldr	r2, [pc, #440]	@ (80044c4 <HAL_DMA_IRQHandler+0xca0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6d      	ldr	r2, [pc, #436]	@ (80044c8 <HAL_DMA_IRQHandler+0xca4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	@ (80044cc <HAL_DMA_IRQHandler+0xca8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6a      	ldr	r2, [pc, #424]	@ (80044d0 <HAL_DMA_IRQHandler+0xcac>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a68      	ldr	r2, [pc, #416]	@ (80044d4 <HAL_DMA_IRQHandler+0xcb0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0xb24>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0208 	bic.w	r2, r2, #8
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <HAL_DMA_IRQHandler+0xb34>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8165 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800436a:	e15f      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2202      	movs	r2, #2
 8004376:	409a      	lsls	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80c5 	beq.w	800450c <HAL_DMA_IRQHandler+0xce8>
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80bf 	beq.w	800450c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2202      	movs	r2, #2
 8004398:	409a      	lsls	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 813a 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c4:	e134      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8130 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d8:	e12a      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 8089 	bne.w	80044f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004498 <HAL_DMA_IRQHandler+0xc74>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <HAL_DMA_IRQHandler+0xc78>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a28      	ldr	r2, [pc, #160]	@ (80044a0 <HAL_DMA_IRQHandler+0xc7c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <HAL_DMA_IRQHandler+0xc80>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <HAL_DMA_IRQHandler+0xc84>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	@ (80044ac <HAL_DMA_IRQHandler+0xc88>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <HAL_DMA_IRQHandler+0xc8c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a20      	ldr	r2, [pc, #128]	@ (80044b4 <HAL_DMA_IRQHandler+0xc90>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <HAL_DMA_IRQHandler+0xc94>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1d      	ldr	r2, [pc, #116]	@ (80044bc <HAL_DMA_IRQHandler+0xc98>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <HAL_DMA_IRQHandler+0xc9c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <HAL_DMA_IRQHandler+0xca0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a19      	ldr	r2, [pc, #100]	@ (80044c8 <HAL_DMA_IRQHandler+0xca4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	@ (80044cc <HAL_DMA_IRQHandler+0xca8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	@ (80044d0 <HAL_DMA_IRQHandler+0xcac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0xc62>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <HAL_DMA_IRQHandler+0xcb0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d128      	bne.n	80044d8 <HAL_DMA_IRQHandler+0xcb4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0214 	bic.w	r2, r2, #20
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e027      	b.n	80044e8 <HAL_DMA_IRQHandler+0xcc4>
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 020a 	bic.w	r2, r2, #10
 80044e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8097 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800450a:	e091      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8088 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8082 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <HAL_DMA_IRQHandler+0xe14>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a3f      	ldr	r2, [pc, #252]	@ (800463c <HAL_DMA_IRQHandler+0xe18>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3e      	ldr	r2, [pc, #248]	@ (8004640 <HAL_DMA_IRQHandler+0xe1c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3c      	ldr	r2, [pc, #240]	@ (8004644 <HAL_DMA_IRQHandler+0xe20>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3b      	ldr	r2, [pc, #236]	@ (8004648 <HAL_DMA_IRQHandler+0xe24>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a39      	ldr	r2, [pc, #228]	@ (800464c <HAL_DMA_IRQHandler+0xe28>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a38      	ldr	r2, [pc, #224]	@ (8004650 <HAL_DMA_IRQHandler+0xe2c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a36      	ldr	r2, [pc, #216]	@ (8004654 <HAL_DMA_IRQHandler+0xe30>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a35      	ldr	r2, [pc, #212]	@ (8004658 <HAL_DMA_IRQHandler+0xe34>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a33      	ldr	r2, [pc, #204]	@ (800465c <HAL_DMA_IRQHandler+0xe38>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a32      	ldr	r2, [pc, #200]	@ (8004660 <HAL_DMA_IRQHandler+0xe3c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <HAL_DMA_IRQHandler+0xe40>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004668 <HAL_DMA_IRQHandler+0xe44>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2d      	ldr	r2, [pc, #180]	@ (800466c <HAL_DMA_IRQHandler+0xe48>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2c      	ldr	r2, [pc, #176]	@ (8004670 <HAL_DMA_IRQHandler+0xe4c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004674 <HAL_DMA_IRQHandler+0xe50>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <HAL_DMA_IRQHandler+0xdbc>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 021c 	bic.w	r2, r2, #28
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e007      	b.n	80045f0 <HAL_DMA_IRQHandler+0xdcc>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2201      	movs	r2, #1
 80045fa:	409a      	lsls	r2, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
 8004626:	e004      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004630:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40020010 	.word	0x40020010
 800463c:	40020028 	.word	0x40020028
 8004640:	40020040 	.word	0x40020040
 8004644:	40020058 	.word	0x40020058
 8004648:	40020070 	.word	0x40020070
 800464c:	40020088 	.word	0x40020088
 8004650:	400200a0 	.word	0x400200a0
 8004654:	400200b8 	.word	0x400200b8
 8004658:	40020410 	.word	0x40020410
 800465c:	40020428 	.word	0x40020428
 8004660:	40020440 	.word	0x40020440
 8004664:	40020458 	.word	0x40020458
 8004668:	40020470 	.word	0x40020470
 800466c:	40020488 	.word	0x40020488
 8004670:	400204a0 	.word	0x400204a0
 8004674:	400204b8 	.word	0x400204b8

08004678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a42      	ldr	r2, [pc, #264]	@ (8004790 <DMA_CalcBaseAndBitshift+0x118>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04a      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a41      	ldr	r2, [pc, #260]	@ (8004794 <DMA_CalcBaseAndBitshift+0x11c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d045      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3f      	ldr	r2, [pc, #252]	@ (8004798 <DMA_CalcBaseAndBitshift+0x120>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d040      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3e      	ldr	r2, [pc, #248]	@ (800479c <DMA_CalcBaseAndBitshift+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03b      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3c      	ldr	r2, [pc, #240]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x128>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d036      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a3b      	ldr	r2, [pc, #236]	@ (80047a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d031      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a39      	ldr	r2, [pc, #228]	@ (80047a8 <DMA_CalcBaseAndBitshift+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02c      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a38      	ldr	r2, [pc, #224]	@ (80047ac <DMA_CalcBaseAndBitshift+0x134>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a36      	ldr	r2, [pc, #216]	@ (80047b0 <DMA_CalcBaseAndBitshift+0x138>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a35      	ldr	r2, [pc, #212]	@ (80047b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01d      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a33      	ldr	r2, [pc, #204]	@ (80047b8 <DMA_CalcBaseAndBitshift+0x140>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a32      	ldr	r2, [pc, #200]	@ (80047bc <DMA_CalcBaseAndBitshift+0x144>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x148>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2f      	ldr	r2, [pc, #188]	@ (80047c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2d      	ldr	r2, [pc, #180]	@ (80047c8 <DMA_CalcBaseAndBitshift+0x150>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <DMA_CalcBaseAndBitshift+0xa8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2c      	ldr	r2, [pc, #176]	@ (80047cc <DMA_CalcBaseAndBitshift+0x154>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <DMA_CalcBaseAndBitshift+0xac>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <DMA_CalcBaseAndBitshift+0xae>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d024      	beq.n	8004774 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3b10      	subs	r3, #16
 8004732:	4a27      	ldr	r2, [pc, #156]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x158>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	4a24      	ldr	r2, [pc, #144]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d908      	bls.n	8004764 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b1f      	ldr	r3, [pc, #124]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x160>)
 800475a:	4013      	ands	r3, r2
 800475c:	1d1a      	adds	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	659a      	str	r2, [r3, #88]	@ 0x58
 8004762:	e00d      	b.n	8004780 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x160>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6593      	str	r3, [r2, #88]	@ 0x58
 8004772:	e005      	b.n	8004780 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
 80047d0:	aaaaaaab 	.word	0xaaaaaaab
 80047d4:	0800a6a0 	.word	0x0800a6a0
 80047d8:	fffffc00 	.word	0xfffffc00

080047dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d120      	bne.n	8004832 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d858      	bhi.n	80048aa <DMA_CheckFifoParam+0xce>
 80047f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004800 <DMA_CheckFifoParam+0x24>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004811 	.word	0x08004811
 8004804:	08004823 	.word	0x08004823
 8004808:	08004811 	.word	0x08004811
 800480c:	080048ab 	.word	0x080048ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d048      	beq.n	80048ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004820:	e045      	b.n	80048ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800482a:	d142      	bne.n	80048b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004830:	e03f      	b.n	80048b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800483a:	d123      	bne.n	8004884 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004840:	2b03      	cmp	r3, #3
 8004842:	d838      	bhi.n	80048b6 <DMA_CheckFifoParam+0xda>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <DMA_CheckFifoParam+0x70>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	0800485d 	.word	0x0800485d
 8004850:	08004863 	.word	0x08004863
 8004854:	0800485d 	.word	0x0800485d
 8004858:	08004875 	.word	0x08004875
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
        break;
 8004860:	e030      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d025      	beq.n	80048ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004872:	e022      	b.n	80048ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800487c:	d11f      	bne.n	80048be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004882:	e01c      	b.n	80048be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <DMA_CheckFifoParam+0xb6>
 800488c:	2b03      	cmp	r3, #3
 800488e:	d003      	beq.n	8004898 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004890:	e018      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
        break;
 8004896:	e015      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
    break;
 80048a8:	e00b      	b.n	80048c2 <DMA_CheckFifoParam+0xe6>
        break;
 80048aa:	bf00      	nop
 80048ac:	e00a      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        break;
 80048ae:	bf00      	nop
 80048b0:	e008      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        break;
 80048b2:	bf00      	nop
 80048b4:	e006      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        break;
 80048b6:	bf00      	nop
 80048b8:	e004      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
        break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
    break;
 80048c2:	bf00      	nop
    }
  }

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a38      	ldr	r2, [pc, #224]	@ (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a36      	ldr	r2, [pc, #216]	@ (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a35      	ldr	r2, [pc, #212]	@ (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a33      	ldr	r2, [pc, #204]	@ (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a32      	ldr	r2, [pc, #200]	@ (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2f      	ldr	r2, [pc, #188]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b08      	subs	r3, #8
 8004944:	4a28      	ldr	r2, [pc, #160]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4b26      	ldr	r3, [pc, #152]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004960:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004970:	e024      	b.n	80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3b10      	subs	r3, #16
 800497a:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d806      	bhi.n	800499a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d902      	bls.n	800499a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3308      	adds	r3, #8
 8004998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	58025408 	.word	0x58025408
 80049cc:	5802541c 	.word	0x5802541c
 80049d0:	58025430 	.word	0x58025430
 80049d4:	58025444 	.word	0x58025444
 80049d8:	58025458 	.word	0x58025458
 80049dc:	5802546c 	.word	0x5802546c
 80049e0:	58025480 	.word	0x58025480
 80049e4:	58025494 	.word	0x58025494
 80049e8:	cccccccd 	.word	0xcccccccd
 80049ec:	16009600 	.word	0x16009600
 80049f0:	58025880 	.word	0x58025880
 80049f4:	aaaaaaab 	.word	0xaaaaaaab
 80049f8:	400204b8 	.word	0x400204b8
 80049fc:	4002040f 	.word	0x4002040f
 8004a00:	10008200 	.word	0x10008200
 8004a04:	40020880 	.word	0x40020880

08004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04a      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d847      	bhi.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a24      	ldr	r2, [pc, #144]	@ (8004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d01d      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a21      	ldr	r2, [pc, #132]	@ (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4b17      	ldr	r3, [pc, #92]	@ (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a90:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a92:	e009      	b.n	8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004aa6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	2201      	movs	r2, #1
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	58025408 	.word	0x58025408
 8004ac4:	5802541c 	.word	0x5802541c
 8004ac8:	58025430 	.word	0x58025430
 8004acc:	58025444 	.word	0x58025444
 8004ad0:	58025458 	.word	0x58025458
 8004ad4:	5802546c 	.word	0x5802546c
 8004ad8:	58025480 	.word	0x58025480
 8004adc:	58025494 	.word	0x58025494
 8004ae0:	1600963f 	.word	0x1600963f
 8004ae4:	58025940 	.word	0x58025940
 8004ae8:	1000823f 	.word	0x1000823f
 8004aec:	40020940 	.word	0x40020940

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004afe:	4b89      	ldr	r3, [pc, #548]	@ (8004d24 <HAL_GPIO_Init+0x234>)
 8004b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b02:	e194      	b.n	8004e2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2101      	movs	r1, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8186 	beq.w	8004e28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d005      	beq.n	8004b34 <HAL_GPIO_Init+0x44>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d130      	bne.n	8004b96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 0201 	and.w	r2, r3, #1
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d017      	beq.n	8004bd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	2203      	movs	r2, #3
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d123      	bne.n	8004c26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	08da      	lsrs	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3208      	adds	r2, #8
 8004be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	69b9      	ldr	r1, [r7, #24]
 8004c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	2203      	movs	r2, #3
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0203 	and.w	r2, r3, #3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80e0 	beq.w	8004e28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c68:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <HAL_GPIO_Init+0x238>)
 8004c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d28 <HAL_GPIO_Init+0x238>)
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c78:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <HAL_GPIO_Init+0x238>)
 8004c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c86:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <HAL_GPIO_Init+0x23c>)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a20      	ldr	r2, [pc, #128]	@ (8004d30 <HAL_GPIO_Init+0x240>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d052      	beq.n	8004d58 <HAL_GPIO_Init+0x268>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d34 <HAL_GPIO_Init+0x244>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_GPIO_Init+0x22e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <HAL_GPIO_Init+0x248>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02b      	beq.n	8004d1a <HAL_GPIO_Init+0x22a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d3c <HAL_GPIO_Init+0x24c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d025      	beq.n	8004d16 <HAL_GPIO_Init+0x226>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d40 <HAL_GPIO_Init+0x250>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <HAL_GPIO_Init+0x222>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_GPIO_Init+0x254>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x21e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8004d48 <HAL_GPIO_Init+0x258>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x21a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	@ (8004d4c <HAL_GPIO_Init+0x25c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x216>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a18      	ldr	r2, [pc, #96]	@ (8004d50 <HAL_GPIO_Init+0x260>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	@ (8004d54 <HAL_GPIO_Init+0x264>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x20e>
 8004cfa:	2309      	movs	r3, #9
 8004cfc:	e02d      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e02b      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d02:	2308      	movs	r3, #8
 8004d04:	e029      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d06:	2307      	movs	r3, #7
 8004d08:	e027      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d0a:	2306      	movs	r3, #6
 8004d0c:	e025      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d0e:	2305      	movs	r3, #5
 8004d10:	e023      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d12:	2304      	movs	r3, #4
 8004d14:	e021      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d16:	2303      	movs	r3, #3
 8004d18:	e01f      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e01d      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e01b      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d22:	bf00      	nop
 8004d24:	58000080 	.word	0x58000080
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	58000400 	.word	0x58000400
 8004d30:	58020000 	.word	0x58020000
 8004d34:	58020400 	.word	0x58020400
 8004d38:	58020800 	.word	0x58020800
 8004d3c:	58020c00 	.word	0x58020c00
 8004d40:	58021000 	.word	0x58021000
 8004d44:	58021400 	.word	0x58021400
 8004d48:	58021800 	.word	0x58021800
 8004d4c:	58021c00 	.word	0x58021c00
 8004d50:	58022000 	.word	0x58022000
 8004d54:	58022400 	.word	0x58022400
 8004d58:	2300      	movs	r3, #0
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f002 0203 	and.w	r2, r2, #3
 8004d60:	0092      	lsls	r2, r2, #2
 8004d62:	4093      	lsls	r3, r2
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d6a:	4938      	ldr	r1, [pc, #224]	@ (8004e4c <HAL_GPIO_Init+0x35c>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f ae63 	bne.w	8004b04 <HAL_GPIO_Init+0x14>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	3724      	adds	r7, #36	@ 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	58000400 	.word	0x58000400

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e6c:	e003      	b.n	8004e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	619a      	str	r2, [r3, #24]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0fe      	b.n	8005092 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7fc fc89 	bl	80017c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f005 f91a 	bl	800a0f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7c1a      	ldrb	r2, [r3, #16]
 8004ec8:	f88d 2000 	strb.w	r2, [sp]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ed0:	f005 f89e 	bl	800a010 <USB_CoreInit>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0d5      	b.n	8005092 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f005 f912 	bl	800a116 <USB_SetCurrentMode>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0c6      	b.n	8005092 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	e04a      	b.n	8004fa0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3315      	adds	r3, #21
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	b298      	uxth	r0, r3
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	332e      	adds	r3, #46	@ 0x2e
 8004f46:	4602      	mov	r2, r0
 8004f48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3318      	adds	r3, #24
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	331c      	adds	r3, #28
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3320      	adds	r3, #32
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	3324      	adds	r3, #36	@ 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	791b      	ldrb	r3, [r3, #4]
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3af      	bcc.n	8004f0a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	e044      	b.n	800503a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ff2:	7bfa      	ldrb	r2, [r7, #15]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005008:	7bfa      	ldrb	r2, [r7, #15]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800501e:	7bfa      	ldrb	r2, [r7, #15]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	3301      	adds	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	791b      	ldrb	r3, [r3, #4]
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	429a      	cmp	r2, r3
 8005042:	d3b5      	bcc.n	8004fb0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7c1a      	ldrb	r2, [r3, #16]
 800504c:	f88d 2000 	strb.w	r2, [sp]
 8005050:	3304      	adds	r3, #4
 8005052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005054:	f005 f8ac 	bl	800a1b0 <USB_DevInit>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e013      	b.n	8005092 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	7b1b      	ldrb	r3, [r3, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d102      	bne.n	8005086 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f80b 	bl	800509c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fa67 	bl	800a55e <USB_DevDisconnect>

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	10000003 	.word	0x10000003

080050e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <HAL_PWREx_ConfigSupply+0x70>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d00a      	beq.n	800510e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050f8:	4b16      	ldr	r3, [pc, #88]	@ (8005154 <HAL_PWREx_ConfigSupply+0x70>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d001      	beq.n	800510a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e01f      	b.n	800514a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e01d      	b.n	800514a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800510e:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <HAL_PWREx_ConfigSupply+0x70>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	490f      	ldr	r1, [pc, #60]	@ (8005154 <HAL_PWREx_ConfigSupply+0x70>)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4313      	orrs	r3, r2
 800511c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800511e:	f7fc fc7b 	bl	8001a18 <HAL_GetTick>
 8005122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005124:	e009      	b.n	800513a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005126:	f7fc fc77 	bl	8001a18 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005134:	d901      	bls.n	800513a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e007      	b.n	800514a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800513a:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_PWREx_ConfigSupply+0x70>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005146:	d1ee      	bne.n	8005126 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024800 	.word	0x58024800

08005158 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	58024800 	.word	0x58024800

08005178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08c      	sub	sp, #48	@ 0x30
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f000 bc48 	b.w	8005a1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8088 	beq.w	80052aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519a:	4b99      	ldr	r3, [pc, #612]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051a4:	4b96      	ldr	r3, [pc, #600]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d007      	beq.n	80051c0 <HAL_RCC_OscConfig+0x48>
 80051b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b2:	2b18      	cmp	r3, #24
 80051b4:	d111      	bne.n	80051da <HAL_RCC_OscConfig+0x62>
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d10c      	bne.n	80051da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d06d      	beq.n	80052a8 <HAL_RCC_OscConfig+0x130>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d169      	bne.n	80052a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f000 bc21 	b.w	8005a1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x7a>
 80051e4:	4b86      	ldr	r3, [pc, #536]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a85      	ldr	r2, [pc, #532]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80051ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	e02e      	b.n	8005250 <HAL_RCC_OscConfig+0xd8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x9c>
 80051fa:	4b81      	ldr	r3, [pc, #516]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a80      	ldr	r2, [pc, #512]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4b7e      	ldr	r3, [pc, #504]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7d      	ldr	r2, [pc, #500]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800520c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e01d      	b.n	8005250 <HAL_RCC_OscConfig+0xd8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0xc0>
 800521e:	4b78      	ldr	r3, [pc, #480]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a77      	ldr	r2, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	4b75      	ldr	r3, [pc, #468]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a74      	ldr	r2, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e00b      	b.n	8005250 <HAL_RCC_OscConfig+0xd8>
 8005238:	4b71      	ldr	r3, [pc, #452]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a70      	ldr	r2, [pc, #448]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800523e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b6e      	ldr	r3, [pc, #440]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a6d      	ldr	r2, [pc, #436]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800524a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800524e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d013      	beq.n	8005280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fbde 	bl	8001a18 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005260:	f7fc fbda 	bl	8001a18 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	@ 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e3d4      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005272:	4b63      	ldr	r3, [pc, #396]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0xe8>
 800527e:	e014      	b.n	80052aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc fbca 	bl	8001a18 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005288:	f7fc fbc6 	bl	8001a18 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	@ 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e3c0      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800529a:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x110>
 80052a6:	e000      	b.n	80052aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80ca 	beq.w	800544c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b8:	4b51      	ldr	r3, [pc, #324]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <HAL_RCC_OscConfig+0x166>
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b18      	cmp	r3, #24
 80052d2:	d156      	bne.n	8005382 <HAL_RCC_OscConfig+0x20a>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d151      	bne.n	8005382 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052de:	4b48      	ldr	r3, [pc, #288]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_RCC_OscConfig+0x17e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e392      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052f6:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 0219 	bic.w	r2, r3, #25
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	493f      	ldr	r1, [pc, #252]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc fb86 	bl	8001a18 <HAL_GetTick>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005310:	f7fc fb82 	bl	8001a18 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e37c      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005322:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532e:	f7fc fba3 	bl	8001a78 <HAL_GetREVID>
 8005332:	4603      	mov	r3, r0
 8005334:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005338:	4293      	cmp	r3, r2
 800533a:	d817      	bhi.n	800536c <HAL_RCC_OscConfig+0x1f4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b40      	cmp	r3, #64	@ 0x40
 8005342:	d108      	bne.n	8005356 <HAL_RCC_OscConfig+0x1de>
 8005344:	4b2e      	ldr	r3, [pc, #184]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800534c:	4a2c      	ldr	r2, [pc, #176]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800534e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005352:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005354:	e07a      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b2a      	ldr	r3, [pc, #168]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	031b      	lsls	r3, r3, #12
 8005364:	4926      	ldr	r1, [pc, #152]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005366:	4313      	orrs	r3, r2
 8005368:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536a:	e06f      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536c:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	4921      	ldr	r1, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005380:	e064      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d047      	beq.n	800541a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800538a:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 0219 	bic.w	r2, r3, #25
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	491a      	ldr	r1, [pc, #104]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fc fb3c 	bl	8001a18 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a4:	f7fc fb38 	bl	8001a18 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e332      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b6:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	f7fc fb59 	bl	8001a78 <HAL_GetREVID>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d819      	bhi.n	8005404 <HAL_RCC_OscConfig+0x28c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d108      	bne.n	80053ea <HAL_RCC_OscConfig+0x272>
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053e0:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e030      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
 80053ea:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	031b      	lsls	r3, r3, #12
 80053f8:	4901      	ldr	r1, [pc, #4]	@ (8005400 <HAL_RCC_OscConfig+0x288>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	604b      	str	r3, [r1, #4]
 80053fe:	e025      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
 8005400:	58024400 	.word	0x58024400
 8005404:	4b9a      	ldr	r3, [pc, #616]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	4997      	ldr	r1, [pc, #604]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	e018      	b.n	800544c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b95      	ldr	r3, [pc, #596]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a94      	ldr	r2, [pc, #592]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fc faf7 	bl	8001a18 <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542e:	f7fc faf3 	bl	8001a18 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e2ed      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005440:	4b8b      	ldr	r3, [pc, #556]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80a9 	beq.w	80055ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545a:	4b85      	ldr	r3, [pc, #532]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005462:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005464:	4b82      	ldr	r3, [pc, #520]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d007      	beq.n	8005480 <HAL_RCC_OscConfig+0x308>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b18      	cmp	r3, #24
 8005474:	d13a      	bne.n	80054ec <HAL_RCC_OscConfig+0x374>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d135      	bne.n	80054ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005480:	4b7b      	ldr	r3, [pc, #492]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_OscConfig+0x320>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b80      	cmp	r3, #128	@ 0x80
 8005492:	d001      	beq.n	8005498 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e2c1      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005498:	f7fc faee 	bl	8001a78 <HAL_GetREVID>
 800549c:	4603      	mov	r3, r0
 800549e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d817      	bhi.n	80054d6 <HAL_RCC_OscConfig+0x35e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d108      	bne.n	80054c0 <HAL_RCC_OscConfig+0x348>
 80054ae:	4b70      	ldr	r3, [pc, #448]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80054b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054be:	e075      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	069b      	lsls	r3, r3, #26
 80054ce:	4968      	ldr	r1, [pc, #416]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d4:	e06a      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054d6:	4b66      	ldr	r3, [pc, #408]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	4962      	ldr	r1, [pc, #392]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ea:	e05f      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d042      	beq.n	800557a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80054fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fc fa8a 	bl	8001a18 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005508:	f7fc fa86 	bl	8001a18 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e280      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800551a:	4b55      	ldr	r3, [pc, #340]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005526:	f7fc faa7 	bl	8001a78 <HAL_GetREVID>
 800552a:	4603      	mov	r3, r0
 800552c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005530:	4293      	cmp	r3, r2
 8005532:	d817      	bhi.n	8005564 <HAL_RCC_OscConfig+0x3ec>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	2b20      	cmp	r3, #32
 800553a:	d108      	bne.n	800554e <HAL_RCC_OscConfig+0x3d6>
 800553c:	4b4c      	ldr	r3, [pc, #304]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005544:	4a4a      	ldr	r2, [pc, #296]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800554a:	6053      	str	r3, [r2, #4]
 800554c:	e02e      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
 800554e:	4b48      	ldr	r3, [pc, #288]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	069b      	lsls	r3, r3, #26
 800555c:	4944      	ldr	r1, [pc, #272]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
 8005562:	e023      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
 8005564:	4b42      	ldr	r3, [pc, #264]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	493f      	ldr	r1, [pc, #252]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
 8005578:	e018      	b.n	80055ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800557a:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a3c      	ldr	r2, [pc, #240]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fc fa47 	bl	8001a18 <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800558e:	f7fc fa43 	bl	8001a18 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e23d      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055a0:	4b33      	ldr	r3, [pc, #204]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d036      	beq.n	8005626 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d019      	beq.n	80055f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055cc:	f7fc fa24 	bl	8001a18 <HAL_GetTick>
 80055d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d4:	f7fc fa20 	bl	8001a18 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e21a      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055e6:	4b22      	ldr	r3, [pc, #136]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x45c>
 80055f2:	e018      	b.n	8005626 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fc fa0a 	bl	8001a18 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005608:	f7fc fa06 	bl	8001a18 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e200      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800561a:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d039      	beq.n	80056a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01c      	beq.n	8005674 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0c      	ldr	r2, [pc, #48]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005646:	f7fc f9e7 	bl	8001a18 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800564e:	f7fc f9e3 	bl	8001a18 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1dd      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_RCC_OscConfig+0x4f8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x4d6>
 800566c:	e01b      	b.n	80056a6 <HAL_RCC_OscConfig+0x52e>
 800566e:	bf00      	nop
 8005670:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005674:	4b9b      	ldr	r3, [pc, #620]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a9a      	ldr	r2, [pc, #616]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800567a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800567e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005680:	f7fc f9ca 	bl	8001a18 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005688:	f7fc f9c6 	bl	8001a18 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1c0      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800569a:	4b92      	ldr	r3, [pc, #584]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8081 	beq.w	80057b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056b4:	4b8c      	ldr	r3, [pc, #560]	@ (80058e8 <HAL_RCC_OscConfig+0x770>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a8b      	ldr	r2, [pc, #556]	@ (80058e8 <HAL_RCC_OscConfig+0x770>)
 80056ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c0:	f7fc f9aa 	bl	8001a18 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c8:	f7fc f9a6 	bl	8001a18 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	@ 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e1a0      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056da:	4b83      	ldr	r3, [pc, #524]	@ (80058e8 <HAL_RCC_OscConfig+0x770>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d106      	bne.n	80056fc <HAL_RCC_OscConfig+0x584>
 80056ee:	4b7d      	ldr	r3, [pc, #500]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	4a7c      	ldr	r2, [pc, #496]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fa:	e02d      	b.n	8005758 <HAL_RCC_OscConfig+0x5e0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10c      	bne.n	800571e <HAL_RCC_OscConfig+0x5a6>
 8005704:	4b77      	ldr	r3, [pc, #476]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005708:	4a76      	ldr	r2, [pc, #472]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005710:	4b74      	ldr	r3, [pc, #464]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	4a73      	ldr	r2, [pc, #460]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005716:	f023 0304 	bic.w	r3, r3, #4
 800571a:	6713      	str	r3, [r2, #112]	@ 0x70
 800571c:	e01c      	b.n	8005758 <HAL_RCC_OscConfig+0x5e0>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b05      	cmp	r3, #5
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x5c8>
 8005726:	4b6f      	ldr	r3, [pc, #444]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572a:	4a6e      	ldr	r2, [pc, #440]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800572c:	f043 0304 	orr.w	r3, r3, #4
 8005730:	6713      	str	r3, [r2, #112]	@ 0x70
 8005732:	4b6c      	ldr	r3, [pc, #432]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	4a6b      	ldr	r2, [pc, #428]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	6713      	str	r3, [r2, #112]	@ 0x70
 800573e:	e00b      	b.n	8005758 <HAL_RCC_OscConfig+0x5e0>
 8005740:	4b68      	ldr	r3, [pc, #416]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005744:	4a67      	ldr	r2, [pc, #412]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	6713      	str	r3, [r2, #112]	@ 0x70
 800574c:	4b65      	ldr	r3, [pc, #404]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005750:	4a64      	ldr	r2, [pc, #400]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005752:	f023 0304 	bic.w	r3, r3, #4
 8005756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005760:	f7fc f95a 	bl	8001a18 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005766:	e00a      	b.n	800577e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	f7fc f956 	bl	8001a18 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e14e      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800577e:	4b59      	ldr	r3, [pc, #356]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ee      	beq.n	8005768 <HAL_RCC_OscConfig+0x5f0>
 800578a:	e014      	b.n	80057b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fc f944 	bl	8001a18 <HAL_GetTick>
 8005790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005792:	e00a      	b.n	80057aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fc f940 	bl	8001a18 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e138      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057aa:	4b4e      	ldr	r3, [pc, #312]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ee      	bne.n	8005794 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 812d 	beq.w	8005a1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057c0:	4b48      	ldr	r3, [pc, #288]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c8:	2b18      	cmp	r3, #24
 80057ca:	f000 80bd 	beq.w	8005948 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	f040 809e 	bne.w	8005914 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d8:	4b42      	ldr	r3, [pc, #264]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a41      	ldr	r2, [pc, #260]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80057de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc f918 	bl	8001a18 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fc f914 	bl	8001a18 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e10e      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057fe:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800580a:	4b36      	ldr	r3, [pc, #216]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800580c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800580e:	4b37      	ldr	r3, [pc, #220]	@ (80058ec <HAL_RCC_OscConfig+0x774>)
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	430a      	orrs	r2, r1
 800581e:	4931      	ldr	r1, [pc, #196]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005820:	4313      	orrs	r3, r2
 8005822:	628b      	str	r3, [r1, #40]	@ 0x28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	3b01      	subs	r3, #1
 800582a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005832:	3b01      	subs	r3, #1
 8005834:	025b      	lsls	r3, r3, #9
 8005836:	b29b      	uxth	r3, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	3b01      	subs	r3, #1
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	3b01      	subs	r3, #1
 800584e:	061b      	lsls	r3, r3, #24
 8005850:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005854:	4923      	ldr	r1, [pc, #140]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800585a:	4b22      	ldr	r3, [pc, #136]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	4a21      	ldr	r2, [pc, #132]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005866:	4b1f      	ldr	r3, [pc, #124]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800586a:	4b21      	ldr	r3, [pc, #132]	@ (80058f0 <HAL_RCC_OscConfig+0x778>)
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005872:	00d2      	lsls	r2, r2, #3
 8005874:	491b      	ldr	r1, [pc, #108]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800587a:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	f023 020c 	bic.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	4917      	ldr	r1, [pc, #92]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800588c:	4b15      	ldr	r3, [pc, #84]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	f023 0202 	bic.w	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	4912      	ldr	r1, [pc, #72]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 800589a:	4313      	orrs	r3, r2
 800589c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800589e:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058aa:	4b0e      	ldr	r3, [pc, #56]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a0d      	ldr	r2, [pc, #52]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	4a0a      	ldr	r2, [pc, #40]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058c2:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a07      	ldr	r2, [pc, #28]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ce:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fc f89d 	bl	8001a18 <HAL_GetTick>
 80058de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e0:	e011      	b.n	8005906 <HAL_RCC_OscConfig+0x78e>
 80058e2:	bf00      	nop
 80058e4:	58024400 	.word	0x58024400
 80058e8:	58024800 	.word	0x58024800
 80058ec:	fffffc0c 	.word	0xfffffc0c
 80058f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fc f890 	bl	8001a18 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e08a      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005906:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x77c>
 8005912:	e082      	b.n	8005a1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005914:	4b43      	ldr	r3, [pc, #268]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a42      	ldr	r2, [pc, #264]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 800591a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800591e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fc f87a 	bl	8001a18 <HAL_GetTick>
 8005924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fc f876 	bl	8001a18 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e070      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800593a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x7b0>
 8005946:	e068      	b.n	8005a1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005948:	4b36      	ldr	r3, [pc, #216]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800594e:	4b35      	ldr	r3, [pc, #212]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	2b01      	cmp	r3, #1
 800595a:	d031      	beq.n	80059c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f003 0203 	and.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d12a      	bne.n	80059c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d122      	bne.n	80059c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d11a      	bne.n	80059c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005996:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d111      	bne.n	80059c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d108      	bne.n	80059c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0e1b      	lsrs	r3, r3, #24
 80059b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e02b      	b.n	8005a1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059c4:	4b17      	ldr	r3, [pc, #92]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d01f      	beq.n	8005a1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059da:	4b12      	ldr	r3, [pc, #72]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	4a11      	ldr	r2, [pc, #68]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059e6:	f7fc f817 	bl	8001a18 <HAL_GetTick>
 80059ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059ec:	bf00      	nop
 80059ee:	f7fc f813 	bl	8001a18 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d0f9      	beq.n	80059ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 80059fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <HAL_RCC_OscConfig+0x8b0>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a06:	00d2      	lsls	r2, r2, #3
 8005a08:	4906      	ldr	r1, [pc, #24]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a0e:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	4a04      	ldr	r2, [pc, #16]	@ (8005a24 <HAL_RCC_OscConfig+0x8ac>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3730      	adds	r7, #48	@ 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	ffff0007 	.word	0xffff0007

08005a2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e19c      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a40:	4b8a      	ldr	r3, [pc, #552]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d910      	bls.n	8005a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b87      	ldr	r3, [pc, #540]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 020f 	bic.w	r2, r3, #15
 8005a56:	4985      	ldr	r1, [pc, #532]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b83      	ldr	r3, [pc, #524]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e184      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	4b7b      	ldr	r3, [pc, #492]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d908      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a8c:	4b78      	ldr	r3, [pc, #480]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	4975      	ldr	r1, [pc, #468]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	4b70      	ldr	r3, [pc, #448]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d908      	bls.n	8005acc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aba:	4b6d      	ldr	r3, [pc, #436]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	496a      	ldr	r1, [pc, #424]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	4b64      	ldr	r3, [pc, #400]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d908      	bls.n	8005afa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ae8:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	495e      	ldr	r1, [pc, #376]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	4b59      	ldr	r3, [pc, #356]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d908      	bls.n	8005b28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b16:	4b56      	ldr	r3, [pc, #344]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4953      	ldr	r1, [pc, #332]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4b4d      	ldr	r3, [pc, #308]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d908      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b44:	4b4a      	ldr	r3, [pc, #296]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f023 020f 	bic.w	r2, r3, #15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4947      	ldr	r1, [pc, #284]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d055      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b62:	4b43      	ldr	r3, [pc, #268]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4940      	ldr	r1, [pc, #256]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d121      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0f6      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b94:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d115      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0ea      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bac:	4b30      	ldr	r3, [pc, #192]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0de      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0d6      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bcc:	4b28      	ldr	r3, [pc, #160]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f023 0207 	bic.w	r2, r3, #7
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4925      	ldr	r1, [pc, #148]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fb ff1b 	bl	8001a18 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be6:	f7fb ff17 	bl	8001a18 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e0be      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d1eb      	bne.n	8005be6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d010      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d208      	bcs.n	8005c3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2a:	4b11      	ldr	r3, [pc, #68]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f023 020f 	bic.w	r2, r3, #15
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	490e      	ldr	r1, [pc, #56]	@ (8005c70 <HAL_RCC_ClockConfig+0x244>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d214      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 020f 	bic.w	r2, r3, #15
 8005c52:	4906      	ldr	r1, [pc, #24]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b04      	ldr	r3, [pc, #16]	@ (8005c6c <HAL_RCC_ClockConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e086      	b.n	8005d7a <HAL_RCC_ClockConfig+0x34e>
 8005c6c:	52002000 	.word	0x52002000
 8005c70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d010      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	4b3f      	ldr	r3, [pc, #252]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d208      	bcs.n	8005ca2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c90:	4b3c      	ldr	r3, [pc, #240]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	4939      	ldr	r1, [pc, #228]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d010      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695a      	ldr	r2, [r3, #20]
 8005cb2:	4b34      	ldr	r3, [pc, #208]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d208      	bcs.n	8005cd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cbe:	4b31      	ldr	r3, [pc, #196]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	492e      	ldr	r1, [pc, #184]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	4b28      	ldr	r3, [pc, #160]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d208      	bcs.n	8005cfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cec:	4b25      	ldr	r3, [pc, #148]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	4922      	ldr	r1, [pc, #136]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d208      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	4917      	ldr	r1, [pc, #92]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d2c:	f000 f834 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b14      	ldr	r3, [pc, #80]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	4912      	ldr	r1, [pc, #72]	@ (8005d88 <HAL_RCC_ClockConfig+0x35c>)
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
 8005d48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d84 <HAL_RCC_ClockConfig+0x358>)
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	4a0d      	ldr	r2, [pc, #52]	@ (8005d88 <HAL_RCC_ClockConfig+0x35c>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d60:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <HAL_RCC_ClockConfig+0x360>)
 8005d62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d64:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <HAL_RCC_ClockConfig+0x364>)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <HAL_RCC_ClockConfig+0x368>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fb fe08 	bl	8001984 <HAL_InitTick>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
 8005d88:	0800a690 	.word	0x0800a690
 8005d8c:	2400000c 	.word	0x2400000c
 8005d90:	24000008 	.word	0x24000008
 8005d94:	24000010 	.word	0x24000010

08005d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	@ 0x24
 8005d9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9e:	4bb3      	ldr	r3, [pc, #716]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da6:	2b18      	cmp	r3, #24
 8005da8:	f200 8155 	bhi.w	8006056 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dac:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08006057 	.word	0x08006057
 8005dbc:	08006057 	.word	0x08006057
 8005dc0:	08006057 	.word	0x08006057
 8005dc4:	08006057 	.word	0x08006057
 8005dc8:	08006057 	.word	0x08006057
 8005dcc:	08006057 	.word	0x08006057
 8005dd0:	08006057 	.word	0x08006057
 8005dd4:	08005e3f 	.word	0x08005e3f
 8005dd8:	08006057 	.word	0x08006057
 8005ddc:	08006057 	.word	0x08006057
 8005de0:	08006057 	.word	0x08006057
 8005de4:	08006057 	.word	0x08006057
 8005de8:	08006057 	.word	0x08006057
 8005dec:	08006057 	.word	0x08006057
 8005df0:	08006057 	.word	0x08006057
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08006057 	.word	0x08006057
 8005dfc:	08006057 	.word	0x08006057
 8005e00:	08006057 	.word	0x08006057
 8005e04:	08006057 	.word	0x08006057
 8005e08:	08006057 	.word	0x08006057
 8005e0c:	08006057 	.word	0x08006057
 8005e10:	08006057 	.word	0x08006057
 8005e14:	08005e4b 	.word	0x08005e4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e18:	4b94      	ldr	r3, [pc, #592]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e24:	4b91      	ldr	r3, [pc, #580]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	4a90      	ldr	r2, [pc, #576]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
 8005e34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e36:	e111      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e38:	4b8d      	ldr	r3, [pc, #564]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e3a:	61bb      	str	r3, [r7, #24]
      break;
 8005e3c:	e10e      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e40:	61bb      	str	r3, [r7, #24]
      break;
 8005e42:	e10b      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e44:	4b8c      	ldr	r3, [pc, #560]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e46:	61bb      	str	r3, [r7, #24]
      break;
 8005e48:	e108      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4a:	4b88      	ldr	r3, [pc, #544]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e54:	4b85      	ldr	r3, [pc, #532]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e60:	4b82      	ldr	r3, [pc, #520]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e6a:	4b80      	ldr	r3, [pc, #512]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6e:	08db      	lsrs	r3, r3, #3
 8005e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80e1 	beq.w	8006050 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	f000 8083 	beq.w	8005f9c <HAL_RCC_GetSysClockFreq+0x204>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f200 80a1 	bhi.w	8005fe0 <HAL_RCC_GetSysClockFreq+0x248>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x114>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d056      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005eaa:	e099      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eac:	4b6f      	ldr	r3, [pc, #444]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02d      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee2:	4b62      	ldr	r3, [pc, #392]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f12:	e087      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006080 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b51      	ldr	r3, [pc, #324]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f56:	e065      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b40      	ldr	r3, [pc, #256]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f9a:	e043      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006088 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fae:	4b2f      	ldr	r3, [pc, #188]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fde:	e021      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a02 	vldr	s12, [r7, #8]
 8006006:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e4>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006022:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006024:	4b11      	ldr	r3, [pc, #68]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	0a5b      	lsrs	r3, r3, #9
 800602a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800602e:	3301      	adds	r3, #1
 8006030:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800603c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006048:	ee17 3a90 	vmov	r3, s15
 800604c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800604e:	e005      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
      break;
 8006054:	e002      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006056:	4b07      	ldr	r3, [pc, #28]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006058:	61bb      	str	r3, [r7, #24]
      break;
 800605a:	bf00      	nop
  }

  return sysclockfreq;
 800605c:	69bb      	ldr	r3, [r7, #24]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3724      	adds	r7, #36	@ 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
 8006070:	03d09000 	.word	0x03d09000
 8006074:	003d0900 	.word	0x003d0900
 8006078:	007a1200 	.word	0x007a1200
 800607c:	46000000 	.word	0x46000000
 8006080:	4c742400 	.word	0x4c742400
 8006084:	4a742400 	.word	0x4a742400
 8006088:	4af42400 	.word	0x4af42400

0800608c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006092:	f7ff fe81 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 8006096:	4602      	mov	r2, r0
 8006098:	4b10      	ldr	r3, [pc, #64]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x50>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	490f      	ldr	r1, [pc, #60]	@ (80060e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80060a4:	5ccb      	ldrb	r3, [r1, r3]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x50>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	4a09      	ldr	r2, [pc, #36]	@ (80060e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80060ba:	5cd3      	ldrb	r3, [r2, r3]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	fa22 f303 	lsr.w	r3, r2, r3
 80060c6:	4a07      	ldr	r2, [pc, #28]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80060c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060ca:	4a07      	ldr	r2, [pc, #28]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060d0:	4b04      	ldr	r3, [pc, #16]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	58024400 	.word	0x58024400
 80060e0:	0800a690 	.word	0x0800a690
 80060e4:	2400000c 	.word	0x2400000c
 80060e8:	24000008 	.word	0x24000008

080060ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060f0:	f7ff ffcc 	bl	800608c <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4904      	ldr	r1, [pc, #16]	@ (8006114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}
 8006110:	58024400 	.word	0x58024400
 8006114:	0800a690 	.word	0x0800a690

08006118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800611c:	f7ff ffb6 	bl	800608c <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	@ (800613c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	@ (8006140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	58024400 	.word	0x58024400
 8006140:	0800a690 	.word	0x0800a690

08006144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006148:	b0ca      	sub	sp, #296	@ 0x128
 800614a:	af00      	add	r7, sp, #0
 800614c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006156:	2300      	movs	r3, #0
 8006158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006168:	2500      	movs	r5, #0
 800616a:	ea54 0305 	orrs.w	r3, r4, r5
 800616e:	d049      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006176:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800617a:	d02f      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800617c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006180:	d828      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006186:	d01a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006188:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800618c:	d822      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006196:	d007      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006198:	e01c      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619a:	4bb8      	ldr	r3, [pc, #736]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4ab7      	ldr	r2, [pc, #732]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061a6:	e01a      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	3308      	adds	r3, #8
 80061ae:	2102      	movs	r1, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f002 fb61 	bl	8008878 <RCCEx_PLL2_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061bc:	e00f      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	3328      	adds	r3, #40	@ 0x28
 80061c4:	2102      	movs	r1, #2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f002 fc08 	bl	80089dc <RCCEx_PLL3_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061d2:	e004      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80061dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061e6:	4ba5      	ldr	r3, [pc, #660]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f4:	4aa1      	ldr	r2, [pc, #644]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061f6:	430b      	orrs	r3, r1
 80061f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80061fa:	e003      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006210:	f04f 0900 	mov.w	r9, #0
 8006214:	ea58 0309 	orrs.w	r3, r8, r9
 8006218:	d047      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	2b04      	cmp	r3, #4
 8006222:	d82a      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006224:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006241 	.word	0x08006241
 8006230:	0800624f 	.word	0x0800624f
 8006234:	08006265 	.word	0x08006265
 8006238:	08006283 	.word	0x08006283
 800623c:	08006283 	.word	0x08006283
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4b8e      	ldr	r3, [pc, #568]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a8d      	ldr	r2, [pc, #564]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800624c:	e01a      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	3308      	adds	r3, #8
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f002 fb0e 	bl	8008878 <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006262:	e00f      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	3328      	adds	r3, #40	@ 0x28
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f002 fbb5 	bl	80089dc <RCCEx_PLL3_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006278:	e004      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006280:	e000      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800628c:	4b7b      	ldr	r3, [pc, #492]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006290:	f023 0107 	bic.w	r1, r3, #7
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	4a78      	ldr	r2, [pc, #480]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6513      	str	r3, [r2, #80]	@ 0x50
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80062b6:	f04f 0b00 	mov.w	fp, #0
 80062ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80062be:	d04c      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ca:	d030      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d0:	d829      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d4:	d02d      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80062d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d8:	d825      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d018      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80062de:	2b80      	cmp	r3, #128	@ 0x80
 80062e0:	d821      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d007      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80062ea:	e01c      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ec:	4b63      	ldr	r3, [pc, #396]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a62      	ldr	r2, [pc, #392]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062f8:	e01c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	3308      	adds	r3, #8
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f002 fab8 	bl	8008878 <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800630e:	e011      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	3328      	adds	r3, #40	@ 0x28
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f002 fb5f 	bl	80089dc <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800633c:	4b4f      	ldr	r3, [pc, #316]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006340:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634a:	4a4c      	ldr	r2, [pc, #304]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006366:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006370:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d053      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006386:	d035      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800638c:	d82e      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800638e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006392:	d031      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006398:	d828      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800639a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800639e:	d01a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a4:	d822      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80063aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ae:	d007      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80063b0:	e01c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b2:	4b32      	ldr	r3, [pc, #200]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a31      	ldr	r2, [pc, #196]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063be:	e01c      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	3308      	adds	r3, #8
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f002 fa55 	bl	8008878 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063d4:	e011      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	3328      	adds	r3, #40	@ 0x28
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f002 fafc 	bl	80089dc <RCCEx_PLL3_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ea:	e006      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f2:	e002      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80063f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006402:	4b1e      	ldr	r3, [pc, #120]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006412:	4a1a      	ldr	r2, [pc, #104]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006414:	430b      	orrs	r3, r1
 8006416:	6593      	str	r3, [r2, #88]	@ 0x58
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800642e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006438:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d056      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800644a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800644e:	d038      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006454:	d831      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800645a:	d034      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800645c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006460:	d82b      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006466:	d01d      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800646c:	d825      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d006      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006476:	d00a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006478:	e01f      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4ba2      	ldr	r3, [pc, #648]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4aa1      	ldr	r2, [pc, #644]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800648c:	e01c      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	3308      	adds	r3, #8
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f002 f9ee 	bl	8008878 <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064a2:	e011      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	3328      	adds	r3, #40	@ 0x28
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f002 fa95 	bl	80089dc <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10b      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064d0:	4b8e      	ldr	r3, [pc, #568]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064e0:	4a8a      	ldr	r2, [pc, #552]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064e2:	430b      	orrs	r3, r1
 80064e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80064e6:	e003      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006506:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d03a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006516:	2b30      	cmp	r3, #48	@ 0x30
 8006518:	d01f      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800651a:	2b30      	cmp	r3, #48	@ 0x30
 800651c:	d819      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800651e:	2b20      	cmp	r3, #32
 8006520:	d00c      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006522:	2b20      	cmp	r3, #32
 8006524:	d815      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800652a:	2b10      	cmp	r3, #16
 800652c:	d111      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652e:	4b77      	ldr	r3, [pc, #476]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	4a76      	ldr	r2, [pc, #472]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800653a:	e011      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006540:	3308      	adds	r3, #8
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f002 f997 	bl	8008878 <RCCEx_PLL2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006558:	e002      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800655e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006568:	4b68      	ldr	r3, [pc, #416]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006576:	4a65      	ldr	r2, [pc, #404]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006578:	430b      	orrs	r3, r1
 800657a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800657c:	e003      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006592:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006596:	2300      	movs	r3, #0
 8006598:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800659c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d051      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065b0:	d035      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065b6:	d82e      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065bc:	d031      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065c2:	d828      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065c8:	d01a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ce:	d822      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d007      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80065da:	e01c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065dc:	4b4b      	ldr	r3, [pc, #300]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4a4a      	ldr	r2, [pc, #296]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065e8:	e01c      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	3308      	adds	r3, #8
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 f940 	bl	8008878 <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	3328      	adds	r3, #40	@ 0x28
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f002 f9e7 	bl	80089dc <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800662c:	4b37      	ldr	r3, [pc, #220]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800662e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006630:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663a:	4a34      	ldr	r2, [pc, #208]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d056      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006674:	d033      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667a:	d82c      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800667c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006680:	d02f      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006686:	d826      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800668c:	d02b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800668e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006692:	d820      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006698:	d012      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800669a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669e:	d81a      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d022      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d115      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	3308      	adds	r3, #8
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 f8e0 	bl	8008878 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066be:	e015      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	3328      	adds	r3, #40	@ 0x28
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 f987 	bl	80089dc <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066dc:	e006      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80066ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10d      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006702:	4a02      	ldr	r2, [pc, #8]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6513      	str	r3, [r2, #80]	@ 0x50
 8006708:	e006      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800672e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006732:	460b      	mov	r3, r1
 8006734:	4313      	orrs	r3, r2
 8006736:	d055      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006744:	d033      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800674a:	d82c      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d02f      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	d826      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800675c:	d02b      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800675e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006762:	d820      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006768:	d012      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800676a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800676e:	d81a      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d022      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006778:	d115      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	3308      	adds	r3, #8
 8006780:	2101      	movs	r1, #1
 8006782:	4618      	mov	r0, r3
 8006784:	f002 f878 	bl	8008878 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800678e:	e015      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	3328      	adds	r3, #40	@ 0x28
 8006796:	2101      	movs	r1, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f002 f91f 	bl	80089dc <RCCEx_PLL3_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067a4:	e00a      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ac:	e006      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ae:	bf00      	nop
 80067b0:	e004      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067b2:	bf00      	nop
 80067b4:	e002      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067c4:	4ba3      	ldr	r3, [pc, #652]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067da:	e003      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d037      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800680e:	d00e      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006814:	d816      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d018      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800681a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800681e:	d111      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4b8c      	ldr	r3, [pc, #560]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4a8b      	ldr	r2, [pc, #556]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	3308      	adds	r3, #8
 8006834:	2101      	movs	r1, #1
 8006836:	4618      	mov	r0, r3
 8006838:	f002 f81e 	bl	8008878 <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006856:	4b7f      	ldr	r3, [pc, #508]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800685a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a7b      	ldr	r2, [pc, #492]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006866:	430b      	orrs	r3, r1
 8006868:	6513      	str	r3, [r2, #80]	@ 0x50
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006884:	2300      	movs	r3, #0
 8006886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800688a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d039      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689a:	2b03      	cmp	r3, #3
 800689c:	d81c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068e1 	.word	0x080068e1
 80068a8:	080068b5 	.word	0x080068b5
 80068ac:	080068c3 	.word	0x080068c3
 80068b0:	080068e1 	.word	0x080068e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4b67      	ldr	r3, [pc, #412]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	4a66      	ldr	r2, [pc, #408]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068c0:	e00f      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	3308      	adds	r3, #8
 80068c8:	2102      	movs	r1, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 ffd4 	bl	8008878 <RCCEx_PLL2_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ee:	f023 0103 	bic.w	r1, r3, #3
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f8:	4a56      	ldr	r2, [pc, #344]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068fe:	e003      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800691e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006922:	460b      	mov	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	f000 809f 	beq.w	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800692a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006936:	f7fb f86f 	bl	8001a18 <HAL_GetTick>
 800693a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800693e:	e00b      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006940:	f7fb f86a 	bl	8001a18 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b64      	cmp	r3, #100	@ 0x64
 800694e:	d903      	bls.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006958:	4b3f      	ldr	r3, [pc, #252]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ed      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006968:	2b00      	cmp	r3, #0
 800696a:	d179      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800696c:	4b39      	ldr	r3, [pc, #228]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800696e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006978:	4053      	eors	r3, r2
 800697a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697e:	2b00      	cmp	r3, #0
 8006980:	d015      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006982:	4b34      	ldr	r3, [pc, #208]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800698e:	4b31      	ldr	r3, [pc, #196]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	4a30      	ldr	r2, [pc, #192]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006998:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800699a:	4b2e      	ldr	r3, [pc, #184]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ba:	d118      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fb f82c 	bl	8001a18 <HAL_GetTick>
 80069c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c4:	e00d      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c6:	f7fb f827 	bl	8001a18 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0eb      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80069ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d129      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a06:	d10e      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a08:	4b12      	ldr	r3, [pc, #72]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a18:	091a      	lsrs	r2, r3, #4
 8006a1a:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6113      	str	r3, [r2, #16]
 8006a24:	e005      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a26:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a30:	6113      	str	r3, [r2, #16]
 8006a32:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a42:	4a04      	ldr	r2, [pc, #16]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a48:	e00e      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006a52:	e009      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a54:	58024400 	.word	0x58024400
 8006a58:	58024800 	.word	0x58024800
 8006a5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f002 0301 	and.w	r3, r2, #1
 8006a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f000 8089 	beq.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a90:	2b28      	cmp	r3, #40	@ 0x28
 8006a92:	d86b      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a94:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006b75 	.word	0x08006b75
 8006aa0:	08006b6d 	.word	0x08006b6d
 8006aa4:	08006b6d 	.word	0x08006b6d
 8006aa8:	08006b6d 	.word	0x08006b6d
 8006aac:	08006b6d 	.word	0x08006b6d
 8006ab0:	08006b6d 	.word	0x08006b6d
 8006ab4:	08006b6d 	.word	0x08006b6d
 8006ab8:	08006b6d 	.word	0x08006b6d
 8006abc:	08006b41 	.word	0x08006b41
 8006ac0:	08006b6d 	.word	0x08006b6d
 8006ac4:	08006b6d 	.word	0x08006b6d
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b6d 	.word	0x08006b6d
 8006ad0:	08006b6d 	.word	0x08006b6d
 8006ad4:	08006b6d 	.word	0x08006b6d
 8006ad8:	08006b6d 	.word	0x08006b6d
 8006adc:	08006b57 	.word	0x08006b57
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b6d 	.word	0x08006b6d
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006b6d 	.word	0x08006b6d
 8006af0:	08006b6d 	.word	0x08006b6d
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006b6d 	.word	0x08006b6d
 8006afc:	08006b75 	.word	0x08006b75
 8006b00:	08006b6d 	.word	0x08006b6d
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b6d 	.word	0x08006b6d
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b75 	.word	0x08006b75
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b6d 	.word	0x08006b6d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b6d 	.word	0x08006b6d
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b6d 	.word	0x08006b6d
 8006b3c:	08006b75 	.word	0x08006b75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b44:	3308      	adds	r3, #8
 8006b46:	2101      	movs	r1, #1
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fe95 	bl	8008878 <RCCEx_PLL2_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b54:	e00f      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5a:	3328      	adds	r3, #40	@ 0x28
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 ff3c 	bl	80089dc <RCCEx_PLL3_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e004      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b72:	e000      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b7e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8c:	4abb      	ldr	r2, [pc, #748]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f002 0302 	and.w	r3, r2, #2
 8006ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d041      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d824      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bfb 	.word	0x08006bfb
 8006bd8:	08006c19 	.word	0x08006c19
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006c19 	.word	0x08006c19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be8:	3308      	adds	r3, #8
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fe43 	bl	8008878 <RCCEx_PLL2_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e00f      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfe:	3328      	adds	r3, #40	@ 0x28
 8006c00:	2101      	movs	r1, #1
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 feea 	bl	80089dc <RCCEx_PLL3_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c22:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	f023 0107 	bic.w	r1, r3, #7
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c30:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 0304 	and.w	r3, r2, #4
 8006c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d044      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d825      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006ca3 	.word	0x08006ca3
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	3308      	adds	r3, #8
 8006c92:	2101      	movs	r1, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fdef 	bl	8008878 <RCCEx_PLL2_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ca0:	e00f      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	3328      	adds	r3, #40	@ 0x28
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fe96 	bl	80089dc <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cca:	4b6c      	ldr	r3, [pc, #432]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cce:	f023 0107 	bic.w	r1, r3, #7
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cda:	4a68      	ldr	r2, [pc, #416]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ce0:	e003      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f002 0320 	and.w	r3, r2, #32
 8006cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d04:	460b      	mov	r3, r1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	d055      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d16:	d033      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d1c:	d82c      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d02f      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d28:	d826      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d2e:	d02b      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d34:	d820      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d3a:	d012      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d40:	d81a      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d4a:	d115      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d50:	3308      	adds	r3, #8
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 fd8f 	bl	8008878 <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d60:	e015      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	3328      	adds	r3, #40	@ 0x28
 8006d68:	2102      	movs	r1, #2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fe36 	bl	80089dc <RCCEx_PLL3_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d76:	e00a      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d7e:	e006      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d80:	bf00      	nop
 8006d82:	e004      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d96:	4b39      	ldr	r3, [pc, #228]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da6:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d058      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006de2:	d033      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006de4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006de8:	d82c      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dee:	d02f      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d826      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dfa:	d02b      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006dfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e00:	d820      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e06:	d012      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e0c:	d81a      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d022      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d115      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 fd29 	bl	8008878 <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e015      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	3328      	adds	r3, #40	@ 0x28
 8006e34:	2102      	movs	r1, #2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fdd0 	bl	80089dc <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e42:	e00a      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e4a:	e006      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e004      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e50:	bf00      	nop
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e54:	bf00      	nop
 8006e56:	e000      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10e      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e62:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e72:	4a02      	ldr	r2, [pc, #8]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e78:	e006      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d055      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006eb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eb4:	d033      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006eb6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eba:	d82c      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec0:	d02f      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec6:	d826      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ec8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ecc:	d02b      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ece:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ed2:	d820      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ed8:	d012      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ede:	d81a      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d022      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee8:	d115      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fcc0 	bl	8008878 <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006efe:	e015      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	3328      	adds	r3, #40	@ 0x28
 8006f06:	2102      	movs	r1, #2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fd67 	bl	80089dc <RCCEx_PLL3_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f14:	e00a      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f34:	4ba1      	ldr	r3, [pc, #644]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f44:	4a9d      	ldr	r2, [pc, #628]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f002 0308 	and.w	r3, r2, #8
 8006f60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d01e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fd26 	bl	80089dc <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f9c:	4b87      	ldr	r3, [pc, #540]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fac:	4a83      	ldr	r2, [pc, #524]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f002 0310 	and.w	r3, r2, #16
 8006fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d01e      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	3328      	adds	r3, #40	@ 0x28
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fcf7 	bl	80089dc <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ffa:	4b70      	ldr	r3, [pc, #448]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800700a:	4a6c      	ldr	r2, [pc, #432]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800700c:	430b      	orrs	r3, r1
 800700e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800701c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007020:	2300      	movs	r3, #0
 8007022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007026:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800702a:	460b      	mov	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	d03e      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703c:	d022      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800703e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007042:	d81b      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704c:	d00b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800704e:	e015      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	3308      	adds	r3, #8
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 fc0d 	bl	8008878 <RCCEx_PLL2_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007064:	e00f      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	3328      	adds	r3, #40	@ 0x28
 800706c:	2102      	movs	r1, #2
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fcb4 	bl	80089dc <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800707a:	e004      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007082:	e000      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800708e:	4b4b      	ldr	r3, [pc, #300]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800709e:	4a47      	ldr	r2, [pc, #284]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070a4:	e003      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070bc:	2300      	movs	r3, #0
 80070be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070c4:	460b      	mov	r3, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d6:	d01f      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80070d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070dc:	d818      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e2:	d003      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80070e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070e8:	d007      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80070ea:	e011      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ec:	4b33      	ldr	r3, [pc, #204]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	4a32      	ldr	r2, [pc, #200]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070f8:	e00f      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fe:	3328      	adds	r3, #40	@ 0x28
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fc6a 	bl	80089dc <RCCEx_PLL3_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800710e:	e004      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007122:	4b26      	ldr	r3, [pc, #152]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007132:	4a22      	ldr	r2, [pc, #136]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6553      	str	r3, [r2, #84]	@ 0x54
 8007138:	e003      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800714e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007150:	2300      	movs	r3, #0
 8007152:	677b      	str	r3, [r7, #116]	@ 0x74
 8007154:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007158:	460b      	mov	r3, r1
 800715a:	4313      	orrs	r3, r2
 800715c:	d034      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800716c:	d007      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800716e:	e011      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007170:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	4a11      	ldr	r2, [pc, #68]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800717a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800717c:	e00e      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	3308      	adds	r3, #8
 8007184:	2102      	movs	r1, #2
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fb76 	bl	8008878 <RCCEx_PLL2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007192:	e003      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800719a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10d      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b2:	4a02      	ldr	r2, [pc, #8]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b4:	430b      	orrs	r3, r1
 80071b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071b8:	e006      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d6:	2300      	movs	r3, #0
 80071d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d00c      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	3328      	adds	r3, #40	@ 0x28
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fbf5 	bl	80089dc <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800720a:	663b      	str	r3, [r7, #96]	@ 0x60
 800720c:	2300      	movs	r3, #0
 800720e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007210:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007214:	460b      	mov	r3, r1
 8007216:	4313      	orrs	r3, r2
 8007218:	d038      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007226:	d018      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800722c:	d811      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800722e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007232:	d014      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007238:	d80b      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d011      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800723e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007242:	d106      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007244:	4bc3      	ldr	r3, [pc, #780]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007248:	4ac2      	ldr	r2, [pc, #776]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800724e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007250:	e008      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007258:	e004      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800725a:	bf00      	nop
 800725c:	e002      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800725e:	bf00      	nop
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10b      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800726c:	4bb9      	ldr	r3, [pc, #740]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800726e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007270:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800727c:	4ab5      	ldr	r2, [pc, #724]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727e:	430b      	orrs	r3, r1
 8007280:	6553      	str	r3, [r2, #84]	@ 0x54
 8007282:	e003      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800729a:	2300      	movs	r3, #0
 800729c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800729e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d009      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072a8:	4baa      	ldr	r3, [pc, #680]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b6:	4aa7      	ldr	r2, [pc, #668]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80072c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ca:	2300      	movs	r3, #0
 80072cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d00a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072d8:	4b9e      	ldr	r3, [pc, #632]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072e8:	4a9a      	ldr	r2, [pc, #616]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072fc:	2300      	movs	r3, #0
 80072fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007300:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007304:	460b      	mov	r3, r1
 8007306:	4313      	orrs	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800730a:	4b92      	ldr	r3, [pc, #584]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800730c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007318:	4a8e      	ldr	r2, [pc, #568]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800731a:	430b      	orrs	r3, r1
 800731c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800732a:	643b      	str	r3, [r7, #64]	@ 0x40
 800732c:	2300      	movs	r3, #0
 800732e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007330:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800733a:	4b86      	ldr	r3, [pc, #536]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	4a85      	ldr	r2, [pc, #532]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007340:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007344:	6113      	str	r3, [r2, #16]
 8007346:	4b83      	ldr	r3, [pc, #524]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007348:	6919      	ldr	r1, [r3, #16]
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007352:	4a80      	ldr	r2, [pc, #512]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007366:	2300      	movs	r3, #0
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800736a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d009      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007374:	4b77      	ldr	r3, [pc, #476]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007378:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007382:	4a74      	ldr	r2, [pc, #464]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007384:	430b      	orrs	r3, r1
 8007386:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007394:	633b      	str	r3, [r7, #48]	@ 0x30
 8007396:	2300      	movs	r3, #0
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
 800739a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800739e:	460b      	mov	r3, r1
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b4:	4a67      	ldr	r2, [pc, #412]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b6:	430b      	orrs	r3, r1
 80073b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	2100      	movs	r1, #0
 80073c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d011      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	3308      	adds	r3, #8
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fa4a 	bl	8008878 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	2100      	movs	r1, #0
 8007404:	6239      	str	r1, [r7, #32]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
 800740c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d011      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3308      	adds	r3, #8
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa2a 	bl	8008878 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	2100      	movs	r1, #0
 8007444:	61b9      	str	r1, [r7, #24]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d011      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	3308      	adds	r3, #8
 800745c:	2102      	movs	r1, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fa0a 	bl	8008878 <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	2100      	movs	r1, #0
 8007484:	6139      	str	r1, [r7, #16]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007490:	460b      	mov	r3, r1
 8007492:	4313      	orrs	r3, r2
 8007494:	d011      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	3328      	adds	r3, #40	@ 0x28
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fa9c 	bl	80089dc <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	2100      	movs	r1, #0
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074d0:	460b      	mov	r3, r1
 80074d2:	4313      	orrs	r3, r2
 80074d4:	d011      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074da:	3328      	adds	r3, #40	@ 0x28
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fa7c 	bl	80089dc <RCCEx_PLL3_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	2100      	movs	r1, #0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007510:	460b      	mov	r3, r1
 8007512:	4313      	orrs	r3, r2
 8007514:	d011      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	3328      	adds	r3, #40	@ 0x28
 800751c:	2102      	movs	r1, #2
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fa5c 	bl	80089dc <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800753a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	e000      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
}
 8007548:	4618      	mov	r0, r3
 800754a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800754e:	46bd      	mov	sp, r7
 8007550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007554:	58024400 	.word	0x58024400

08007558 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b090      	sub	sp, #64	@ 0x40
 800755c:	af00      	add	r7, sp, #0
 800755e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007566:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800756a:	430b      	orrs	r3, r1
 800756c:	f040 8094 	bne.w	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007570:	4b9e      	ldr	r3, [pc, #632]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2b04      	cmp	r3, #4
 800757e:	f200 8087 	bhi.w	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007582:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	0800759d 	.word	0x0800759d
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075ed 	.word	0x080075ed
 8007594:	08007689 	.word	0x08007689
 8007598:	08007615 	.word	0x08007615
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800759c:	4b93      	ldr	r3, [pc, #588]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a8:	d108      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f810 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b8:	f000 bd45 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c0:	f000 bd41 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075c4:	4b89      	ldr	r3, [pc, #548]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075d0:	d108      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d2:	f107 0318 	add.w	r3, r7, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fd54 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e0:	f000 bd31 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e8:	f000 bd2d 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075ec:	4b7f      	ldr	r3, [pc, #508]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f8:	d108      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fe94 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007608:	f000 bd1d 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007610:	f000 bd19 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007614:	4b75      	ldr	r3, [pc, #468]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800761e:	4b73      	ldr	r3, [pc, #460]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b04      	cmp	r3, #4
 8007628:	d10c      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007630:	4b6e      	ldr	r3, [pc, #440]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	08db      	lsrs	r3, r3, #3
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	4a6d      	ldr	r2, [pc, #436]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007642:	e01f      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007644:	4b69      	ldr	r3, [pc, #420]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800764c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007650:	d106      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007654:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007658:	d102      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800765a:	4b66      	ldr	r3, [pc, #408]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800765c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800765e:	e011      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007660:	4b62      	ldr	r3, [pc, #392]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800766c:	d106      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007674:	d102      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007676:	4b60      	ldr	r3, [pc, #384]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007680:	f000 bce1 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007684:	f000 bcdf 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007688:	4b5c      	ldr	r3, [pc, #368]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768c:	f000 bcdb 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007694:	f000 bcd7 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80076a0:	430b      	orrs	r3, r1
 80076a2:	f040 80ad 	bne.w	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80076a6:	4b51      	ldr	r3, [pc, #324]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80076ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d056      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076be:	f200 8090 	bhi.w	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80076c6:	f000 8088 	beq.w	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ce:	f200 8088 	bhi.w	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	2b80      	cmp	r3, #128	@ 0x80
 80076d6:	d032      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	2b80      	cmp	r3, #128	@ 0x80
 80076dc:	f200 8081 	bhi.w	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	2b40      	cmp	r3, #64	@ 0x40
 80076ea:	d014      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80076ec:	e079      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076ee:	4b3f      	ldr	r3, [pc, #252]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076fa:	d108      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007700:	4618      	mov	r0, r3
 8007702:	f000 ff67 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800770a:	f000 bc9c 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007712:	f000 bc98 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007716:	4b35      	ldr	r3, [pc, #212]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800771e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007722:	d108      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007724:	f107 0318 	add.w	r3, r7, #24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fcab 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007732:	f000 bc88 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773a:	f000 bc84 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800773e:	4b2b      	ldr	r3, [pc, #172]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774a:	d108      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774c:	f107 030c 	add.w	r3, r7, #12
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fdeb 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800775a:	f000 bc74 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007762:	f000 bc70 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007766:	4b21      	ldr	r3, [pc, #132]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007770:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d10c      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800777c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007782:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007794:	e01f      	b.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007796:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800779e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077a2:	d106      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80077a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077aa:	d102      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077ac:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b0:	e011      	b.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077b2:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077be:	d106      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c6:	d102      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077c8:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077cc:	e003      	b.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077d2:	f000 bc38 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077d6:	f000 bc36 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077de:	f000 bc32 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e6:	f000 bc2e 	b.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	003d0900 	.word	0x003d0900
 80077f8:	007a1200 	.word	0x007a1200
 80077fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007804:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007808:	430b      	orrs	r3, r1
 800780a:	f040 809c 	bne.w	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800780e:	4b9e      	ldr	r3, [pc, #632]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007812:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007816:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800781e:	d054      	beq.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007826:	f200 808b 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007830:	f000 8083 	beq.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800783a:	f200 8081 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007844:	d02f      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800784c:	d878      	bhi.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785a:	d012      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800785c:	e070      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800785e:	4b8a      	ldr	r3, [pc, #552]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800786a:	d107      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800786c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007870:	4618      	mov	r0, r3
 8007872:	f000 feaf 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800787a:	e3e4      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007880:	e3e1      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007882:	4b81      	ldr	r3, [pc, #516]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800788a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800788e:	d107      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007890:	f107 0318 	add.w	r3, r7, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fbf5 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800789e:	e3d2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a4:	e3cf      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078a6:	4b78      	ldr	r3, [pc, #480]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b2:	d107      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b4:	f107 030c 	add.w	r3, r7, #12
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fd37 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c2:	e3c0      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c8:	e3bd      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078ca:	4b6f      	ldr	r3, [pc, #444]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d10c      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80078e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e6:	4b68      	ldr	r3, [pc, #416]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	4a66      	ldr	r2, [pc, #408]	@ (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078f2:	fa22 f303 	lsr.w	r3, r2, r3
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	e01e      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078fa:	4b63      	ldr	r3, [pc, #396]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007906:	d106      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007910:	4b5f      	ldr	r3, [pc, #380]	@ (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007914:	e010      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007916:	4b5c      	ldr	r3, [pc, #368]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007922:	d106      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800792a:	d102      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800792c:	4b59      	ldr	r3, [pc, #356]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007930:	e002      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007936:	e386      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007938:	e385      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800793a:	4b57      	ldr	r3, [pc, #348]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800793c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800793e:	e382      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007944:	e37f      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800794e:	430b      	orrs	r3, r1
 8007950:	f040 80a7 	bne.w	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007954:	4b4c      	ldr	r3, [pc, #304]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007958:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800795c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007964:	d055      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800796c:	f200 8096 	bhi.w	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007976:	f000 8084 	beq.w	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007980:	f200 808c 	bhi.w	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800798a:	d030      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007992:	f200 8083 	bhi.w	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079a2:	d012      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80079a4:	e07a      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079a6:	4b38      	ldr	r3, [pc, #224]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079b2:	d107      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fe0b 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c2:	e340      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c8:	e33d      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d6:	d107      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d8:	f107 0318 	add.w	r3, r7, #24
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fb51 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e6:	e32e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ec:	e32b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ee:	4b26      	ldr	r3, [pc, #152]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079fa:	d107      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fc:	f107 030c 	add.w	r3, r7, #12
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fc93 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0a:	e31c      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a10:	e319      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a12:	4b1d      	ldr	r3, [pc, #116]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d10c      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a2e:	4b16      	ldr	r3, [pc, #88]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	4a14      	ldr	r2, [pc, #80]	@ (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a40:	e01e      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a42:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4e:	d106      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a56:	d102      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a58:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5c:	e010      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a72:	d102      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a74:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a7e:	e2e2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a80:	e2e1      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a82:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a86:	e2de      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	003d0900 	.word	0x003d0900
 8007a94:	007a1200 	.word	0x007a1200
 8007a98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa0:	e2d1      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	f040 809c 	bne.w	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007ab0:	4b93      	ldr	r3, [pc, #588]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac0:	d054      	beq.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac8:	f200 808b 	bhi.w	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ad2:	f000 8083 	beq.w	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007adc:	f200 8081 	bhi.w	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae6:	d02f      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aee:	d878      	bhi.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007afc:	d012      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007afe:	e070      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b00:	4b7f      	ldr	r3, [pc, #508]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fd5e 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b1c:	e293      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b22:	e290      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b24:	4b76      	ldr	r3, [pc, #472]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b30:	d107      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b32:	f107 0318 	add.w	r3, r7, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 faa4 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b40:	e281      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b46:	e27e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b48:	4b6d      	ldr	r3, [pc, #436]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b54:	d107      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b56:	f107 030c 	add.w	r3, r7, #12
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fbe6 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b64:	e26f      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b6a:	e26c      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b6c:	4b64      	ldr	r3, [pc, #400]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b76:	4b62      	ldr	r3, [pc, #392]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d10c      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b88:	4b5d      	ldr	r3, [pc, #372]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	08db      	lsrs	r3, r3, #3
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	4a5c      	ldr	r2, [pc, #368]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b9a:	e01e      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b9c:	4b58      	ldr	r3, [pc, #352]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba8:	d106      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb0:	d102      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bb2:	4b55      	ldr	r3, [pc, #340]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bb6:	e010      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bb8:	4b51      	ldr	r3, [pc, #324]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc4:	d106      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bcc:	d102      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007bce:	4b4f      	ldr	r3, [pc, #316]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd2:	e002      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007bd8:	e235      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bda:	e234      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be0:	e231      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be6:	e22e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	f040 808f 	bne.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007bf6:	4b42      	ldr	r3, [pc, #264]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c06:	d06b      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c0e:	d874      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c16:	d056      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c1e:	d86c      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c26:	d03b      	beq.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c2e:	d864      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c36:	d021      	beq.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3e:	d85c      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c4c:	d004      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007c4e:	e054      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c50:	f7fe fa4c 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 8007c54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c56:	e1f6      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c58:	4b29      	ldr	r3, [pc, #164]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c64:	d107      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c66:	f107 0318 	add.w	r3, r7, #24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fa0a 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c74:	e1e7      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7a:	e1e4      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c7c:	4b20      	ldr	r3, [pc, #128]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c88:	d107      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c8a:	f107 030c 	add.w	r3, r7, #12
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fb4c 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c98:	e1d5      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c9e:	e1d2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca0:	4b17      	ldr	r3, [pc, #92]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d109      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cac:	4b14      	ldr	r3, [pc, #80]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	4a13      	ldr	r2, [pc, #76]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cbe:	e1c2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc4:	e1bf      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd2:	d102      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd8:	e1b5      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cde:	e1b2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ce0:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cec:	d102      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007cee:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf2:	e1a8      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e1a5      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfe:	e1a2      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d00:	58024400 	.word	0x58024400
 8007d04:	03d09000 	.word	0x03d09000
 8007d08:	003d0900 	.word	0x003d0900
 8007d0c:	007a1200 	.word	0x007a1200
 8007d10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	d173      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007d20:	4b9c      	ldr	r3, [pc, #624]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d30:	d02f      	beq.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d38:	d863      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d46:	d012      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007d48:	e05b      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d4a:	4b92      	ldr	r3, [pc, #584]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d56:	d107      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d58:	f107 0318 	add.w	r3, r7, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 f991 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d66:	e16e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d6c:	e16b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d6e:	4b89      	ldr	r3, [pc, #548]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fad3 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8a:	e15c      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d90:	e159      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d92:	4b80      	ldr	r3, [pc, #512]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d10c      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dae:	4b79      	ldr	r3, [pc, #484]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	4a77      	ldr	r2, [pc, #476]	@ (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc0:	e01e      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dc2:	4b74      	ldr	r3, [pc, #464]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dce:	d106      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007dd8:	4b70      	ldr	r3, [pc, #448]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ddc:	e010      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dde:	4b6d      	ldr	r3, [pc, #436]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007df4:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df8:	e002      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007dfe:	e122      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e00:	e121      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e06:	e11e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e10:	430b      	orrs	r3, r1
 8007e12:	d133      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007e14:	4b5f      	ldr	r3, [pc, #380]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e2a:	d012      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007e2c:	e023      	b.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e2e:	4b59      	ldr	r3, [pc, #356]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e3a:	d107      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fbc7 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4a:	e0fc      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e50:	e0f9      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e52:	4b50      	ldr	r3, [pc, #320]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e60:	f107 0318 	add.w	r3, r7, #24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 f90d 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6e:	e0ea      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e0e7      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7a:	e0e4      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007e84:	430b      	orrs	r3, r1
 8007e86:	f040 808d 	bne.w	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e8a:	4b42      	ldr	r3, [pc, #264]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007e92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e9a:	d06b      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ea2:	d874      	bhi.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eaa:	d056      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	d86c      	bhi.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007eba:	d03b      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ec2:	d864      	bhi.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eca:	d021      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed2:	d85c      	bhi.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ee0:	d004      	beq.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007ee2:	e054      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ee4:	f000 f8b8 	bl	8008058 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ee8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eea:	e0ac      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eec:	4b29      	ldr	r3, [pc, #164]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f8c0 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f08:	e09d      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f0e:	e09a      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f10:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fa02 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2c:	e08b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	e088      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f34:	4b17      	ldr	r3, [pc, #92]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d109      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f40:	4b14      	ldr	r3, [pc, #80]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	08db      	lsrs	r3, r3, #3
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	4a13      	ldr	r2, [pc, #76]	@ (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f52:	e078      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f58:	e075      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f66:	d102      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f68:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f6c:	e06b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f72:	e068      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f74:	4b07      	ldr	r3, [pc, #28]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f80:	d102      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f82:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f86:	e05e      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	e05b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f92:	e058      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f94:	58024400 	.word	0x58024400
 8007f98:	03d09000 	.word	0x03d09000
 8007f9c:	003d0900 	.word	0x003d0900
 8007fa0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007fac:	430b      	orrs	r3, r1
 8007fae:	d148      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007fb0:	4b27      	ldr	r3, [pc, #156]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc0:	d02a      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc8:	d838      	bhi.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fd6:	d00d      	beq.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007fd8:	e030      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fda:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fe6:	d102      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fec:	e02b      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff2:	e028      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ff4:	4b16      	ldr	r3, [pc, #88]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008000:	d107      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fae4 	bl	80085d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008010:	e019      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008016:	e016      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008018:	4b0d      	ldr	r3, [pc, #52]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008024:	d107      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008026:	f107 0318 	add.w	r3, r7, #24
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f82a 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008034:	e007      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803a:	e004      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008040:	e001      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008048:	4618      	mov	r0, r3
 800804a:	3740      	adds	r7, #64	@ 0x40
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	58024400 	.word	0x58024400
 8008054:	007a1200 	.word	0x007a1200

08008058 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800805c:	f7fe f816 	bl	800608c <HAL_RCC_GetHCLKFreq>
 8008060:	4602      	mov	r2, r0
 8008062:	4b06      	ldr	r3, [pc, #24]	@ (800807c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	091b      	lsrs	r3, r3, #4
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	4904      	ldr	r1, [pc, #16]	@ (8008080 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800806e:	5ccb      	ldrb	r3, [r1, r3]
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	58024400 	.word	0x58024400
 8008080:	0800a690 	.word	0x0800a690

08008084 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	@ 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800808c:	4ba1      	ldr	r3, [pc, #644]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008096:	4b9f      	ldr	r3, [pc, #636]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	0b1b      	lsrs	r3, r3, #12
 800809c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80080a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	091b      	lsrs	r3, r3, #4
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80080ae:	4b99      	ldr	r3, [pc, #612]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8111 	beq.w	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	f000 8083 	beq.w	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	f200 80a1 	bhi.w	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d056      	beq.n	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080ee:	e099      	b.n	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080f0:	4b88      	ldr	r3, [pc, #544]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d02d      	beq.n	8008158 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080fc:	4b85      	ldr	r3, [pc, #532]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	08db      	lsrs	r3, r3, #3
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	4a84      	ldr	r2, [pc, #528]	@ (8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
 800810c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008126:	4b7b      	ldr	r3, [pc, #492]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008136:	ed97 6a03 	vldr	s12, [r7, #12]
 800813a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800831c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008152:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008156:	e087      	b.n	8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816a:	4b6a      	ldr	r3, [pc, #424]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817a:	ed97 6a03 	vldr	s12, [r7, #12]
 800817e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800831c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800819a:	e065      	b.n	8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ae:	4b59      	ldr	r3, [pc, #356]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800831c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081de:	e043      	b.n	8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f2:	4b48      	ldr	r3, [pc, #288]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008202:	ed97 6a03 	vldr	s12, [r7, #12]
 8008206:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800831c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800820a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008222:	e021      	b.n	8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008236:	4b37      	ldr	r3, [pc, #220]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008246:	ed97 6a03 	vldr	s12, [r7, #12]
 800824a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800831c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800824e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008266:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008268:	4b2a      	ldr	r3, [pc, #168]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826c:	0a5b      	lsrs	r3, r3, #9
 800826e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800827e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008282:	edd7 6a07 	vldr	s13, [r7, #28]
 8008286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800828e:	ee17 2a90 	vmov	r2, s15
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008296:	4b1f      	ldr	r3, [pc, #124]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a0:	ee07 3a90 	vmov	s15, r3
 80082a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082bc:	ee17 2a90 	vmov	r2, s15
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80082c4:	4b13      	ldr	r3, [pc, #76]	@ (8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c8:	0e1b      	lsrs	r3, r3, #24
 80082ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082de:	edd7 6a07 	vldr	s13, [r7, #28]
 80082e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ea:	ee17 2a90 	vmov	r2, s15
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082f2:	e008      	b.n	8008306 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	609a      	str	r2, [r3, #8]
}
 8008306:	bf00      	nop
 8008308:	3724      	adds	r7, #36	@ 0x24
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	58024400 	.word	0x58024400
 8008318:	03d09000 	.word	0x03d09000
 800831c:	46000000 	.word	0x46000000
 8008320:	4c742400 	.word	0x4c742400
 8008324:	4a742400 	.word	0x4a742400
 8008328:	4af42400 	.word	0x4af42400

0800832c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800832c:	b480      	push	{r7}
 800832e:	b089      	sub	sp, #36	@ 0x24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008334:	4ba1      	ldr	r3, [pc, #644]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800833e:	4b9f      	ldr	r3, [pc, #636]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	0d1b      	lsrs	r3, r3, #20
 8008344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008348:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800834a:	4b9c      	ldr	r3, [pc, #624]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834e:	0a1b      	lsrs	r3, r3, #8
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008356:	4b99      	ldr	r3, [pc, #612]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835a:	08db      	lsrs	r3, r3, #3
 800835c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	fb02 f303 	mul.w	r3, r2, r3
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8111 	beq.w	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b02      	cmp	r3, #2
 800837e:	f000 8083 	beq.w	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b02      	cmp	r3, #2
 8008386:	f200 80a1 	bhi.w	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d056      	beq.n	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008396:	e099      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008398:	4b88      	ldr	r3, [pc, #544]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02d      	beq.n	8008400 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083a4:	4b85      	ldr	r3, [pc, #532]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	08db      	lsrs	r3, r3, #3
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	4a84      	ldr	r2, [pc, #528]	@ (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80083b0:	fa22 f303 	lsr.w	r3, r2, r3
 80083b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b7b      	ldr	r3, [pc, #492]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083fe:	e087      	b.n	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b6a      	ldr	r3, [pc, #424]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a03 	vldr	s12, [r7, #12]
 8008426:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008442:	e065      	b.n	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008456:	4b59      	ldr	r3, [pc, #356]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008466:	ed97 6a03 	vldr	s12, [r7, #12]
 800846a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800846e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008486:	e043      	b.n	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849a:	4b48      	ldr	r3, [pc, #288]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ca:	e021      	b.n	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084de:	4b37      	ldr	r3, [pc, #220]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008510:	4b2a      	ldr	r3, [pc, #168]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	0a5b      	lsrs	r3, r3, #9
 8008516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800852a:	edd7 6a07 	vldr	s13, [r7, #28]
 800852e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008536:	ee17 2a90 	vmov	r2, s15
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800853e:	4b1f      	ldr	r3, [pc, #124]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008558:	edd7 6a07 	vldr	s13, [r7, #28]
 800855c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008564:	ee17 2a90 	vmov	r2, s15
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800856c:	4b13      	ldr	r3, [pc, #76]	@ (80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008570:	0e1b      	lsrs	r3, r3, #24
 8008572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008586:	edd7 6a07 	vldr	s13, [r7, #28]
 800858a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800858e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008592:	ee17 2a90 	vmov	r2, s15
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800859a:	e008      	b.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	609a      	str	r2, [r3, #8]
}
 80085ae:	bf00      	nop
 80085b0:	3724      	adds	r7, #36	@ 0x24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
 80085c0:	03d09000 	.word	0x03d09000
 80085c4:	46000000 	.word	0x46000000
 80085c8:	4c742400 	.word	0x4c742400
 80085cc:	4a742400 	.word	0x4a742400
 80085d0:	4af42400 	.word	0x4af42400

080085d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b089      	sub	sp, #36	@ 0x24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085dc:	4ba0      	ldr	r3, [pc, #640]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80085e6:	4b9e      	ldr	r3, [pc, #632]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	091b      	lsrs	r3, r3, #4
 80085ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085fc:	4b98      	ldr	r3, [pc, #608]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008600:	08db      	lsrs	r3, r3, #3
 8008602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008614:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8111 	beq.w	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	2b02      	cmp	r3, #2
 8008624:	f000 8083 	beq.w	800872e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b02      	cmp	r3, #2
 800862c:	f200 80a1 	bhi.w	8008772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d056      	beq.n	80086ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800863c:	e099      	b.n	8008772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800863e:	4b88      	ldr	r3, [pc, #544]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d02d      	beq.n	80086a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800864a:	4b85      	ldr	r3, [pc, #532]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	08db      	lsrs	r3, r3, #3
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	4a83      	ldr	r2, [pc, #524]	@ (8008864 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008656:	fa22 f303 	lsr.w	r3, r2, r3
 800865a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008674:	4b7a      	ldr	r3, [pc, #488]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008684:	ed97 6a03 	vldr	s12, [r7, #12]
 8008688:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800868c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086a4:	e087      	b.n	80087b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	ee07 3a90 	vmov	s15, r3
 80086ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800886c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b8:	4b69      	ldr	r3, [pc, #420]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80086cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e8:	e065      	b.n	80087b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008870 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80086f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fc:	4b58      	ldr	r3, [pc, #352]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008710:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008728:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872c:	e043      	b.n	80087b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008738:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008874 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800873c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008740:	4b47      	ldr	r3, [pc, #284]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008750:	ed97 6a03 	vldr	s12, [r7, #12]
 8008754:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008770:	e021      	b.n	80087b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800886c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008784:	4b36      	ldr	r3, [pc, #216]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008794:	ed97 6a03 	vldr	s12, [r7, #12]
 8008798:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800879c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80087b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ba:	0a5b      	lsrs	r3, r3, #9
 80087bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087dc:	ee17 2a90 	vmov	r2, s15
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80087e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800880a:	ee17 2a90 	vmov	r2, s15
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008812:	4b13      	ldr	r3, [pc, #76]	@ (8008860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008816:	0e1b      	lsrs	r3, r3, #24
 8008818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881c:	ee07 3a90 	vmov	s15, r3
 8008820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800882c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008838:	ee17 2a90 	vmov	r2, s15
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008840:	e008      	b.n	8008854 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	609a      	str	r2, [r3, #8]
}
 8008854:	bf00      	nop
 8008856:	3724      	adds	r7, #36	@ 0x24
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	58024400 	.word	0x58024400
 8008864:	03d09000 	.word	0x03d09000
 8008868:	46000000 	.word	0x46000000
 800886c:	4c742400 	.word	0x4c742400
 8008870:	4a742400 	.word	0x4a742400
 8008874:	4af42400 	.word	0x4af42400

08008878 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008886:	4b53      	ldr	r3, [pc, #332]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d101      	bne.n	8008896 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e099      	b.n	80089ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008896:	4b4f      	ldr	r3, [pc, #316]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4e      	ldr	r2, [pc, #312]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800889c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a2:	f7f9 f8b9 	bl	8001a18 <HAL_GetTick>
 80088a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088a8:	e008      	b.n	80088bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088aa:	f7f9 f8b5 	bl	8001a18 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d901      	bls.n	80088bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e086      	b.n	80089ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088bc:	4b45      	ldr	r3, [pc, #276]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f0      	bne.n	80088aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088c8:	4b42      	ldr	r3, [pc, #264]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	031b      	lsls	r3, r3, #12
 80088d6:	493f      	ldr	r1, [pc, #252]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	628b      	str	r3, [r1, #40]	@ 0x28
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	3b01      	subs	r3, #1
 8008906:	061b      	lsls	r3, r3, #24
 8008908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800890c:	4931      	ldr	r1, [pc, #196]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800890e:	4313      	orrs	r3, r2
 8008910:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008912:	4b30      	ldr	r3, [pc, #192]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	492d      	ldr	r1, [pc, #180]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008924:	4b2b      	ldr	r3, [pc, #172]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	f023 0220 	bic.w	r2, r3, #32
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	4928      	ldr	r1, [pc, #160]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008936:	4b27      	ldr	r3, [pc, #156]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893a:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008942:	4b24      	ldr	r3, [pc, #144]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008946:	4b24      	ldr	r3, [pc, #144]	@ (80089d8 <RCCEx_PLL2_Config+0x160>)
 8008948:	4013      	ands	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	69d2      	ldr	r2, [r2, #28]
 800894e:	00d2      	lsls	r2, r2, #3
 8008950:	4920      	ldr	r1, [pc, #128]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008956:	4b1f      	ldr	r3, [pc, #124]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	4a1e      	ldr	r2, [pc, #120]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800895c:	f043 0310 	orr.w	r3, r3, #16
 8008960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008968:	4b1a      	ldr	r3, [pc, #104]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a19      	ldr	r2, [pc, #100]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800896e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008974:	e00f      	b.n	8008996 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d106      	bne.n	800898a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800897c:	4b15      	ldr	r3, [pc, #84]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	4a14      	ldr	r2, [pc, #80]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008988:	e005      	b.n	8008996 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800898a:	4b12      	ldr	r3, [pc, #72]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	4a11      	ldr	r2, [pc, #68]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008994:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008996:	4b0f      	ldr	r3, [pc, #60]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a0e      	ldr	r2, [pc, #56]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 800899c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7f9 f839 	bl	8001a18 <HAL_GetTick>
 80089a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089a8:	e008      	b.n	80089bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089aa:	f7f9 f835 	bl	8001a18 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e006      	b.n	80089ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089bc:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <RCCEx_PLL2_Config+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0f0      	beq.n	80089aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	ffff0007 	.word	0xffff0007

080089dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089ea:	4b53      	ldr	r3, [pc, #332]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d101      	bne.n	80089fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e099      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a06:	f7f9 f807 	bl	8001a18 <HAL_GetTick>
 8008a0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a0c:	e008      	b.n	8008a20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a0e:	f7f9 f803 	bl	8001a18 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e086      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a20:	4b45      	ldr	r3, [pc, #276]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f0      	bne.n	8008a0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a2c:	4b42      	ldr	r3, [pc, #264]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	051b      	lsls	r3, r3, #20
 8008a3a:	493f      	ldr	r1, [pc, #252]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	025b      	lsls	r3, r3, #9
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a70:	4931      	ldr	r1, [pc, #196]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a76:	4b30      	ldr	r3, [pc, #192]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	492d      	ldr	r1, [pc, #180]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a88:	4b2b      	ldr	r3, [pc, #172]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	4928      	ldr	r1, [pc, #160]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a9a:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	4a26      	ldr	r2, [pc, #152]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008aa6:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	4b24      	ldr	r3, [pc, #144]	@ (8008b3c <RCCEx_PLL3_Config+0x160>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	69d2      	ldr	r2, [r2, #28]
 8008ab2:	00d2      	lsls	r2, r2, #3
 8008ab4:	4920      	ldr	r1, [pc, #128]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008aba:	4b1f      	ldr	r3, [pc, #124]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	4a1e      	ldr	r2, [pc, #120]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008acc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	4a19      	ldr	r2, [pc, #100]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ad2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ad8:	e00f      	b.n	8008afa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d106      	bne.n	8008aee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ae0:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008aec:	e005      	b.n	8008afa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008aee:	4b12      	ldr	r3, [pc, #72]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	4a11      	ldr	r2, [pc, #68]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008afa:	4b0f      	ldr	r3, [pc, #60]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b06:	f7f8 ff87 	bl	8001a18 <HAL_GetTick>
 8008b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b0c:	e008      	b.n	8008b20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b0e:	f7f8 ff83 	bl	8001a18 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e006      	b.n	8008b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b20:	4b05      	ldr	r3, [pc, #20]	@ (8008b38 <RCCEx_PLL3_Config+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	ffff0007 	.word	0xffff0007

08008b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e049      	b.n	8008be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7f8 fce8 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f000 f836 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a46      	ldr	r2, [pc, #280]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c0e:	d00f      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a43      	ldr	r2, [pc, #268]	@ (8008d20 <TIM_Base_SetConfig+0x130>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a42      	ldr	r2, [pc, #264]	@ (8008d24 <TIM_Base_SetConfig+0x134>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a41      	ldr	r2, [pc, #260]	@ (8008d28 <TIM_Base_SetConfig+0x138>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a40      	ldr	r2, [pc, #256]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d108      	bne.n	8008c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a35      	ldr	r2, [pc, #212]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01f      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d01b      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a32      	ldr	r2, [pc, #200]	@ (8008d20 <TIM_Base_SetConfig+0x130>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d017      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a31      	ldr	r2, [pc, #196]	@ (8008d24 <TIM_Base_SetConfig+0x134>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d013      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a30      	ldr	r2, [pc, #192]	@ (8008d28 <TIM_Base_SetConfig+0x138>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00f      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00b      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2e      	ldr	r2, [pc, #184]	@ (8008d30 <TIM_Base_SetConfig+0x140>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d007      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d34 <TIM_Base_SetConfig+0x144>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d003      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2c      	ldr	r2, [pc, #176]	@ (8008d38 <TIM_Base_SetConfig+0x148>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d108      	bne.n	8008c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a16      	ldr	r2, [pc, #88]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00f      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00b      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a17      	ldr	r2, [pc, #92]	@ (8008d30 <TIM_Base_SetConfig+0x140>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d007      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <TIM_Base_SetConfig+0x144>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <TIM_Base_SetConfig+0x148>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d103      	bne.n	8008cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d105      	bne.n	8008d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40014400 	.word	0x40014400
 8008d38:	40014800 	.word	0x40014800

08008d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e06d      	b.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a30      	ldr	r2, [pc, #192]	@ (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d004      	beq.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a2f      	ldr	r2, [pc, #188]	@ (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d108      	bne.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a20      	ldr	r2, [pc, #128]	@ (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d022      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc6:	d01d      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d018      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d013      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00e      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a15      	ldr	r2, [pc, #84]	@ (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d009      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a16      	ldr	r2, [pc, #88]	@ (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d004      	beq.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a15      	ldr	r2, [pc, #84]	@ (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d10c      	bne.n	8008e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	40010000 	.word	0x40010000
 8008e40:	40010400 	.word	0x40010400
 8008e44:	40000400 	.word	0x40000400
 8008e48:	40000800 	.word	0x40000800
 8008e4c:	40000c00 	.word	0x40000c00
 8008e50:	40001800 	.word	0x40001800
 8008e54:	40014000 	.word	0x40014000

08008e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e042      	b.n	8008ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7f8 fbcb 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2224      	movs	r2, #36	@ 0x24
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fd90 	bl	80099c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f825 	bl	8008ef8 <UART_SetConfig>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e01b      	b.n	8008ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fe0f 	bl	8009b0c <UART_CheckIdleState>
 8008eee:	4603      	mov	r3, r0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008efc:	b092      	sub	sp, #72	@ 0x48
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	4bbe      	ldr	r3, [pc, #760]	@ (8009220 <UART_SetConfig+0x328>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f30:	430b      	orrs	r3, r1
 8008f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4ab3      	ldr	r2, [pc, #716]	@ (8009224 <UART_SetConfig+0x32c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f60:	4313      	orrs	r3, r2
 8008f62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	4baf      	ldr	r3, [pc, #700]	@ (8009228 <UART_SetConfig+0x330>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	6812      	ldr	r2, [r2, #0]
 8008f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f74:	430b      	orrs	r3, r1
 8008f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7e:	f023 010f 	bic.w	r1, r3, #15
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4aa6      	ldr	r2, [pc, #664]	@ (800922c <UART_SetConfig+0x334>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d177      	bne.n	8009088 <UART_SetConfig+0x190>
 8008f98:	4ba5      	ldr	r3, [pc, #660]	@ (8009230 <UART_SetConfig+0x338>)
 8008f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fa0:	2b28      	cmp	r3, #40	@ 0x28
 8008fa2:	d86d      	bhi.n	8009080 <UART_SetConfig+0x188>
 8008fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fac <UART_SetConfig+0xb4>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08009051 	.word	0x08009051
 8008fb0:	08009081 	.word	0x08009081
 8008fb4:	08009081 	.word	0x08009081
 8008fb8:	08009081 	.word	0x08009081
 8008fbc:	08009081 	.word	0x08009081
 8008fc0:	08009081 	.word	0x08009081
 8008fc4:	08009081 	.word	0x08009081
 8008fc8:	08009081 	.word	0x08009081
 8008fcc:	08009059 	.word	0x08009059
 8008fd0:	08009081 	.word	0x08009081
 8008fd4:	08009081 	.word	0x08009081
 8008fd8:	08009081 	.word	0x08009081
 8008fdc:	08009081 	.word	0x08009081
 8008fe0:	08009081 	.word	0x08009081
 8008fe4:	08009081 	.word	0x08009081
 8008fe8:	08009081 	.word	0x08009081
 8008fec:	08009061 	.word	0x08009061
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009081 	.word	0x08009081
 8008ff8:	08009081 	.word	0x08009081
 8008ffc:	08009081 	.word	0x08009081
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009069 	.word	0x08009069
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009081 	.word	0x08009081
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	08009081 	.word	0x08009081
 8009028:	08009081 	.word	0x08009081
 800902c:	08009071 	.word	0x08009071
 8009030:	08009081 	.word	0x08009081
 8009034:	08009081 	.word	0x08009081
 8009038:	08009081 	.word	0x08009081
 800903c:	08009081 	.word	0x08009081
 8009040:	08009081 	.word	0x08009081
 8009044:	08009081 	.word	0x08009081
 8009048:	08009081 	.word	0x08009081
 800904c:	08009079 	.word	0x08009079
 8009050:	2301      	movs	r3, #1
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e222      	b.n	800949e <UART_SetConfig+0x5a6>
 8009058:	2304      	movs	r3, #4
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e21e      	b.n	800949e <UART_SetConfig+0x5a6>
 8009060:	2308      	movs	r3, #8
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e21a      	b.n	800949e <UART_SetConfig+0x5a6>
 8009068:	2310      	movs	r3, #16
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e216      	b.n	800949e <UART_SetConfig+0x5a6>
 8009070:	2320      	movs	r3, #32
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e212      	b.n	800949e <UART_SetConfig+0x5a6>
 8009078:	2340      	movs	r3, #64	@ 0x40
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e20e      	b.n	800949e <UART_SetConfig+0x5a6>
 8009080:	2380      	movs	r3, #128	@ 0x80
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e20a      	b.n	800949e <UART_SetConfig+0x5a6>
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a69      	ldr	r2, [pc, #420]	@ (8009234 <UART_SetConfig+0x33c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d130      	bne.n	80090f4 <UART_SetConfig+0x1fc>
 8009092:	4b67      	ldr	r3, [pc, #412]	@ (8009230 <UART_SetConfig+0x338>)
 8009094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b05      	cmp	r3, #5
 800909c:	d826      	bhi.n	80090ec <UART_SetConfig+0x1f4>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <UART_SetConfig+0x1ac>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090bd 	.word	0x080090bd
 80090a8:	080090c5 	.word	0x080090c5
 80090ac:	080090cd 	.word	0x080090cd
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	080090dd 	.word	0x080090dd
 80090b8:	080090e5 	.word	0x080090e5
 80090bc:	2300      	movs	r3, #0
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e1ec      	b.n	800949e <UART_SetConfig+0x5a6>
 80090c4:	2304      	movs	r3, #4
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e1e8      	b.n	800949e <UART_SetConfig+0x5a6>
 80090cc:	2308      	movs	r3, #8
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e1e4      	b.n	800949e <UART_SetConfig+0x5a6>
 80090d4:	2310      	movs	r3, #16
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e1e0      	b.n	800949e <UART_SetConfig+0x5a6>
 80090dc:	2320      	movs	r3, #32
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e1dc      	b.n	800949e <UART_SetConfig+0x5a6>
 80090e4:	2340      	movs	r3, #64	@ 0x40
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ea:	e1d8      	b.n	800949e <UART_SetConfig+0x5a6>
 80090ec:	2380      	movs	r3, #128	@ 0x80
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f2:	e1d4      	b.n	800949e <UART_SetConfig+0x5a6>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a4f      	ldr	r2, [pc, #316]	@ (8009238 <UART_SetConfig+0x340>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d130      	bne.n	8009160 <UART_SetConfig+0x268>
 80090fe:	4b4c      	ldr	r3, [pc, #304]	@ (8009230 <UART_SetConfig+0x338>)
 8009100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	2b05      	cmp	r3, #5
 8009108:	d826      	bhi.n	8009158 <UART_SetConfig+0x260>
 800910a:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <UART_SetConfig+0x218>)
 800910c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009110:	08009129 	.word	0x08009129
 8009114:	08009131 	.word	0x08009131
 8009118:	08009139 	.word	0x08009139
 800911c:	08009141 	.word	0x08009141
 8009120:	08009149 	.word	0x08009149
 8009124:	08009151 	.word	0x08009151
 8009128:	2300      	movs	r3, #0
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e1b6      	b.n	800949e <UART_SetConfig+0x5a6>
 8009130:	2304      	movs	r3, #4
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e1b2      	b.n	800949e <UART_SetConfig+0x5a6>
 8009138:	2308      	movs	r3, #8
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e1ae      	b.n	800949e <UART_SetConfig+0x5a6>
 8009140:	2310      	movs	r3, #16
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e1aa      	b.n	800949e <UART_SetConfig+0x5a6>
 8009148:	2320      	movs	r3, #32
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e1a6      	b.n	800949e <UART_SetConfig+0x5a6>
 8009150:	2340      	movs	r3, #64	@ 0x40
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009156:	e1a2      	b.n	800949e <UART_SetConfig+0x5a6>
 8009158:	2380      	movs	r3, #128	@ 0x80
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e19e      	b.n	800949e <UART_SetConfig+0x5a6>
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a35      	ldr	r2, [pc, #212]	@ (800923c <UART_SetConfig+0x344>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d130      	bne.n	80091cc <UART_SetConfig+0x2d4>
 800916a:	4b31      	ldr	r3, [pc, #196]	@ (8009230 <UART_SetConfig+0x338>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b05      	cmp	r3, #5
 8009174:	d826      	bhi.n	80091c4 <UART_SetConfig+0x2cc>
 8009176:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x284>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009195 	.word	0x08009195
 8009180:	0800919d 	.word	0x0800919d
 8009184:	080091a5 	.word	0x080091a5
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091bd 	.word	0x080091bd
 8009194:	2300      	movs	r3, #0
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e180      	b.n	800949e <UART_SetConfig+0x5a6>
 800919c:	2304      	movs	r3, #4
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e17c      	b.n	800949e <UART_SetConfig+0x5a6>
 80091a4:	2308      	movs	r3, #8
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e178      	b.n	800949e <UART_SetConfig+0x5a6>
 80091ac:	2310      	movs	r3, #16
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b2:	e174      	b.n	800949e <UART_SetConfig+0x5a6>
 80091b4:	2320      	movs	r3, #32
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e170      	b.n	800949e <UART_SetConfig+0x5a6>
 80091bc:	2340      	movs	r3, #64	@ 0x40
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e16c      	b.n	800949e <UART_SetConfig+0x5a6>
 80091c4:	2380      	movs	r3, #128	@ 0x80
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e168      	b.n	800949e <UART_SetConfig+0x5a6>
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009240 <UART_SetConfig+0x348>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d142      	bne.n	800925c <UART_SetConfig+0x364>
 80091d6:	4b16      	ldr	r3, [pc, #88]	@ (8009230 <UART_SetConfig+0x338>)
 80091d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d838      	bhi.n	8009254 <UART_SetConfig+0x35c>
 80091e2:	a201      	add	r2, pc, #4	@ (adr r2, 80091e8 <UART_SetConfig+0x2f0>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009245 	.word	0x08009245
 80091fc:	0800924d 	.word	0x0800924d
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e14a      	b.n	800949e <UART_SetConfig+0x5a6>
 8009208:	2304      	movs	r3, #4
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e146      	b.n	800949e <UART_SetConfig+0x5a6>
 8009210:	2308      	movs	r3, #8
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e142      	b.n	800949e <UART_SetConfig+0x5a6>
 8009218:	2310      	movs	r3, #16
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e13e      	b.n	800949e <UART_SetConfig+0x5a6>
 8009220:	cfff69f3 	.word	0xcfff69f3
 8009224:	58000c00 	.word	0x58000c00
 8009228:	11fff4ff 	.word	0x11fff4ff
 800922c:	40011000 	.word	0x40011000
 8009230:	58024400 	.word	0x58024400
 8009234:	40004400 	.word	0x40004400
 8009238:	40004800 	.word	0x40004800
 800923c:	40004c00 	.word	0x40004c00
 8009240:	40005000 	.word	0x40005000
 8009244:	2320      	movs	r3, #32
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e128      	b.n	800949e <UART_SetConfig+0x5a6>
 800924c:	2340      	movs	r3, #64	@ 0x40
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e124      	b.n	800949e <UART_SetConfig+0x5a6>
 8009254:	2380      	movs	r3, #128	@ 0x80
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e120      	b.n	800949e <UART_SetConfig+0x5a6>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4acb      	ldr	r2, [pc, #812]	@ (8009590 <UART_SetConfig+0x698>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d176      	bne.n	8009354 <UART_SetConfig+0x45c>
 8009266:	4bcb      	ldr	r3, [pc, #812]	@ (8009594 <UART_SetConfig+0x69c>)
 8009268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800926e:	2b28      	cmp	r3, #40	@ 0x28
 8009270:	d86c      	bhi.n	800934c <UART_SetConfig+0x454>
 8009272:	a201      	add	r2, pc, #4	@ (adr r2, 8009278 <UART_SetConfig+0x380>)
 8009274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009278:	0800931d 	.word	0x0800931d
 800927c:	0800934d 	.word	0x0800934d
 8009280:	0800934d 	.word	0x0800934d
 8009284:	0800934d 	.word	0x0800934d
 8009288:	0800934d 	.word	0x0800934d
 800928c:	0800934d 	.word	0x0800934d
 8009290:	0800934d 	.word	0x0800934d
 8009294:	0800934d 	.word	0x0800934d
 8009298:	08009325 	.word	0x08009325
 800929c:	0800934d 	.word	0x0800934d
 80092a0:	0800934d 	.word	0x0800934d
 80092a4:	0800934d 	.word	0x0800934d
 80092a8:	0800934d 	.word	0x0800934d
 80092ac:	0800934d 	.word	0x0800934d
 80092b0:	0800934d 	.word	0x0800934d
 80092b4:	0800934d 	.word	0x0800934d
 80092b8:	0800932d 	.word	0x0800932d
 80092bc:	0800934d 	.word	0x0800934d
 80092c0:	0800934d 	.word	0x0800934d
 80092c4:	0800934d 	.word	0x0800934d
 80092c8:	0800934d 	.word	0x0800934d
 80092cc:	0800934d 	.word	0x0800934d
 80092d0:	0800934d 	.word	0x0800934d
 80092d4:	0800934d 	.word	0x0800934d
 80092d8:	08009335 	.word	0x08009335
 80092dc:	0800934d 	.word	0x0800934d
 80092e0:	0800934d 	.word	0x0800934d
 80092e4:	0800934d 	.word	0x0800934d
 80092e8:	0800934d 	.word	0x0800934d
 80092ec:	0800934d 	.word	0x0800934d
 80092f0:	0800934d 	.word	0x0800934d
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	0800933d 	.word	0x0800933d
 80092fc:	0800934d 	.word	0x0800934d
 8009300:	0800934d 	.word	0x0800934d
 8009304:	0800934d 	.word	0x0800934d
 8009308:	0800934d 	.word	0x0800934d
 800930c:	0800934d 	.word	0x0800934d
 8009310:	0800934d 	.word	0x0800934d
 8009314:	0800934d 	.word	0x0800934d
 8009318:	08009345 	.word	0x08009345
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e0bc      	b.n	800949e <UART_SetConfig+0x5a6>
 8009324:	2304      	movs	r3, #4
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e0b8      	b.n	800949e <UART_SetConfig+0x5a6>
 800932c:	2308      	movs	r3, #8
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e0b4      	b.n	800949e <UART_SetConfig+0x5a6>
 8009334:	2310      	movs	r3, #16
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e0b0      	b.n	800949e <UART_SetConfig+0x5a6>
 800933c:	2320      	movs	r3, #32
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e0ac      	b.n	800949e <UART_SetConfig+0x5a6>
 8009344:	2340      	movs	r3, #64	@ 0x40
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e0a8      	b.n	800949e <UART_SetConfig+0x5a6>
 800934c:	2380      	movs	r3, #128	@ 0x80
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009352:	e0a4      	b.n	800949e <UART_SetConfig+0x5a6>
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a8f      	ldr	r2, [pc, #572]	@ (8009598 <UART_SetConfig+0x6a0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d130      	bne.n	80093c0 <UART_SetConfig+0x4c8>
 800935e:	4b8d      	ldr	r3, [pc, #564]	@ (8009594 <UART_SetConfig+0x69c>)
 8009360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b05      	cmp	r3, #5
 8009368:	d826      	bhi.n	80093b8 <UART_SetConfig+0x4c0>
 800936a:	a201      	add	r2, pc, #4	@ (adr r2, 8009370 <UART_SetConfig+0x478>)
 800936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009370:	08009389 	.word	0x08009389
 8009374:	08009391 	.word	0x08009391
 8009378:	08009399 	.word	0x08009399
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093a9 	.word	0x080093a9
 8009384:	080093b1 	.word	0x080093b1
 8009388:	2300      	movs	r3, #0
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e086      	b.n	800949e <UART_SetConfig+0x5a6>
 8009390:	2304      	movs	r3, #4
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e082      	b.n	800949e <UART_SetConfig+0x5a6>
 8009398:	2308      	movs	r3, #8
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e07e      	b.n	800949e <UART_SetConfig+0x5a6>
 80093a0:	2310      	movs	r3, #16
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e07a      	b.n	800949e <UART_SetConfig+0x5a6>
 80093a8:	2320      	movs	r3, #32
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e076      	b.n	800949e <UART_SetConfig+0x5a6>
 80093b0:	2340      	movs	r3, #64	@ 0x40
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e072      	b.n	800949e <UART_SetConfig+0x5a6>
 80093b8:	2380      	movs	r3, #128	@ 0x80
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e06e      	b.n	800949e <UART_SetConfig+0x5a6>
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a75      	ldr	r2, [pc, #468]	@ (800959c <UART_SetConfig+0x6a4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d130      	bne.n	800942c <UART_SetConfig+0x534>
 80093ca:	4b72      	ldr	r3, [pc, #456]	@ (8009594 <UART_SetConfig+0x69c>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d826      	bhi.n	8009424 <UART_SetConfig+0x52c>
 80093d6:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <UART_SetConfig+0x4e4>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	080093fd 	.word	0x080093fd
 80093e4:	08009405 	.word	0x08009405
 80093e8:	0800940d 	.word	0x0800940d
 80093ec:	08009415 	.word	0x08009415
 80093f0:	0800941d 	.word	0x0800941d
 80093f4:	2300      	movs	r3, #0
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e050      	b.n	800949e <UART_SetConfig+0x5a6>
 80093fc:	2304      	movs	r3, #4
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e04c      	b.n	800949e <UART_SetConfig+0x5a6>
 8009404:	2308      	movs	r3, #8
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e048      	b.n	800949e <UART_SetConfig+0x5a6>
 800940c:	2310      	movs	r3, #16
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e044      	b.n	800949e <UART_SetConfig+0x5a6>
 8009414:	2320      	movs	r3, #32
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e040      	b.n	800949e <UART_SetConfig+0x5a6>
 800941c:	2340      	movs	r3, #64	@ 0x40
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e03c      	b.n	800949e <UART_SetConfig+0x5a6>
 8009424:	2380      	movs	r3, #128	@ 0x80
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e038      	b.n	800949e <UART_SetConfig+0x5a6>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a5b      	ldr	r2, [pc, #364]	@ (80095a0 <UART_SetConfig+0x6a8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d130      	bne.n	8009498 <UART_SetConfig+0x5a0>
 8009436:	4b57      	ldr	r3, [pc, #348]	@ (8009594 <UART_SetConfig+0x69c>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943a:	f003 0307 	and.w	r3, r3, #7
 800943e:	2b05      	cmp	r3, #5
 8009440:	d826      	bhi.n	8009490 <UART_SetConfig+0x598>
 8009442:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <UART_SetConfig+0x550>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009461 	.word	0x08009461
 800944c:	08009469 	.word	0x08009469
 8009450:	08009471 	.word	0x08009471
 8009454:	08009479 	.word	0x08009479
 8009458:	08009481 	.word	0x08009481
 800945c:	08009489 	.word	0x08009489
 8009460:	2302      	movs	r3, #2
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e01a      	b.n	800949e <UART_SetConfig+0x5a6>
 8009468:	2304      	movs	r3, #4
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e016      	b.n	800949e <UART_SetConfig+0x5a6>
 8009470:	2308      	movs	r3, #8
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e012      	b.n	800949e <UART_SetConfig+0x5a6>
 8009478:	2310      	movs	r3, #16
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947e:	e00e      	b.n	800949e <UART_SetConfig+0x5a6>
 8009480:	2320      	movs	r3, #32
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e00a      	b.n	800949e <UART_SetConfig+0x5a6>
 8009488:	2340      	movs	r3, #64	@ 0x40
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e006      	b.n	800949e <UART_SetConfig+0x5a6>
 8009490:	2380      	movs	r3, #128	@ 0x80
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e002      	b.n	800949e <UART_SetConfig+0x5a6>
 8009498:	2380      	movs	r3, #128	@ 0x80
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a3f      	ldr	r2, [pc, #252]	@ (80095a0 <UART_SetConfig+0x6a8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	f040 80f8 	bne.w	800969a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	dc46      	bgt.n	8009540 <UART_SetConfig+0x648>
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	f2c0 8082 	blt.w	80095bc <UART_SetConfig+0x6c4>
 80094b8:	3b02      	subs	r3, #2
 80094ba:	2b1e      	cmp	r3, #30
 80094bc:	d87e      	bhi.n	80095bc <UART_SetConfig+0x6c4>
 80094be:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <UART_SetConfig+0x5cc>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	08009547 	.word	0x08009547
 80094c8:	080095bd 	.word	0x080095bd
 80094cc:	0800954f 	.word	0x0800954f
 80094d0:	080095bd 	.word	0x080095bd
 80094d4:	080095bd 	.word	0x080095bd
 80094d8:	080095bd 	.word	0x080095bd
 80094dc:	0800955f 	.word	0x0800955f
 80094e0:	080095bd 	.word	0x080095bd
 80094e4:	080095bd 	.word	0x080095bd
 80094e8:	080095bd 	.word	0x080095bd
 80094ec:	080095bd 	.word	0x080095bd
 80094f0:	080095bd 	.word	0x080095bd
 80094f4:	080095bd 	.word	0x080095bd
 80094f8:	080095bd 	.word	0x080095bd
 80094fc:	0800956f 	.word	0x0800956f
 8009500:	080095bd 	.word	0x080095bd
 8009504:	080095bd 	.word	0x080095bd
 8009508:	080095bd 	.word	0x080095bd
 800950c:	080095bd 	.word	0x080095bd
 8009510:	080095bd 	.word	0x080095bd
 8009514:	080095bd 	.word	0x080095bd
 8009518:	080095bd 	.word	0x080095bd
 800951c:	080095bd 	.word	0x080095bd
 8009520:	080095bd 	.word	0x080095bd
 8009524:	080095bd 	.word	0x080095bd
 8009528:	080095bd 	.word	0x080095bd
 800952c:	080095bd 	.word	0x080095bd
 8009530:	080095bd 	.word	0x080095bd
 8009534:	080095bd 	.word	0x080095bd
 8009538:	080095bd 	.word	0x080095bd
 800953c:	080095af 	.word	0x080095af
 8009540:	2b40      	cmp	r3, #64	@ 0x40
 8009542:	d037      	beq.n	80095b4 <UART_SetConfig+0x6bc>
 8009544:	e03a      	b.n	80095bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009546:	f7fe fd87 	bl	8008058 <HAL_RCCEx_GetD3PCLK1Freq>
 800954a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800954c:	e03c      	b.n	80095c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fd96 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955c:	e034      	b.n	80095c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955e:	f107 0318 	add.w	r3, r7, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fee2 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956c:	e02c      	b.n	80095c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956e:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <UART_SetConfig+0x69c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d016      	beq.n	80095a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800957a:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <UART_SetConfig+0x69c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	08db      	lsrs	r3, r3, #3
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	4a07      	ldr	r2, [pc, #28]	@ (80095a4 <UART_SetConfig+0x6ac>)
 8009586:	fa22 f303 	lsr.w	r3, r2, r3
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800958c:	e01c      	b.n	80095c8 <UART_SetConfig+0x6d0>
 800958e:	bf00      	nop
 8009590:	40011400 	.word	0x40011400
 8009594:	58024400 	.word	0x58024400
 8009598:	40007800 	.word	0x40007800
 800959c:	40007c00 	.word	0x40007c00
 80095a0:	58000c00 	.word	0x58000c00
 80095a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80095a8:	4b9d      	ldr	r3, [pc, #628]	@ (8009820 <UART_SetConfig+0x928>)
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ac:	e00c      	b.n	80095c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095ae:	4b9d      	ldr	r3, [pc, #628]	@ (8009824 <UART_SetConfig+0x92c>)
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b2:	e009      	b.n	80095c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ba:	e005      	b.n	80095c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 81de 	beq.w	800998c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	4a94      	ldr	r2, [pc, #592]	@ (8009828 <UART_SetConfig+0x930>)
 80095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095da:	461a      	mov	r2, r3
 80095dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095de:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	4613      	mov	r3, r2
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4413      	add	r3, r2
 80095ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d305      	bcc.n	8009600 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d903      	bls.n	8009608 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009606:	e1c1      	b.n	800998c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960a:	2200      	movs	r2, #0
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	4a84      	ldr	r2, [pc, #528]	@ (8009828 <UART_SetConfig+0x930>)
 8009616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800961a:	b29b      	uxth	r3, r3
 800961c:	2200      	movs	r2, #0
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800962a:	f7f6 fe55 	bl	80002d8 <__aeabi_uldivmod>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4610      	mov	r0, r2
 8009634:	4619      	mov	r1, r3
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	020b      	lsls	r3, r1, #8
 8009640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009644:	0202      	lsls	r2, r0, #8
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	6849      	ldr	r1, [r1, #4]
 800964a:	0849      	lsrs	r1, r1, #1
 800964c:	2000      	movs	r0, #0
 800964e:	460c      	mov	r4, r1
 8009650:	4605      	mov	r5, r0
 8009652:	eb12 0804 	adds.w	r8, r2, r4
 8009656:	eb43 0905 	adc.w	r9, r3, r5
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	469a      	mov	sl, r3
 8009662:	4693      	mov	fp, r2
 8009664:	4652      	mov	r2, sl
 8009666:	465b      	mov	r3, fp
 8009668:	4640      	mov	r0, r8
 800966a:	4649      	mov	r1, r9
 800966c:	f7f6 fe34 	bl	80002d8 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4613      	mov	r3, r2
 8009676:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800967e:	d308      	bcc.n	8009692 <UART_SetConfig+0x79a>
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009686:	d204      	bcs.n	8009692 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	e17c      	b.n	800998c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009698:	e178      	b.n	800998c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096a2:	f040 80c5 	bne.w	8009830 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80096a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	dc48      	bgt.n	8009740 <UART_SetConfig+0x848>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db7b      	blt.n	80097aa <UART_SetConfig+0x8b2>
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d879      	bhi.n	80097aa <UART_SetConfig+0x8b2>
 80096b6:	a201      	add	r2, pc, #4	@ (adr r2, 80096bc <UART_SetConfig+0x7c4>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	08009747 	.word	0x08009747
 80096c0:	0800974f 	.word	0x0800974f
 80096c4:	080097ab 	.word	0x080097ab
 80096c8:	080097ab 	.word	0x080097ab
 80096cc:	08009757 	.word	0x08009757
 80096d0:	080097ab 	.word	0x080097ab
 80096d4:	080097ab 	.word	0x080097ab
 80096d8:	080097ab 	.word	0x080097ab
 80096dc:	08009767 	.word	0x08009767
 80096e0:	080097ab 	.word	0x080097ab
 80096e4:	080097ab 	.word	0x080097ab
 80096e8:	080097ab 	.word	0x080097ab
 80096ec:	080097ab 	.word	0x080097ab
 80096f0:	080097ab 	.word	0x080097ab
 80096f4:	080097ab 	.word	0x080097ab
 80096f8:	080097ab 	.word	0x080097ab
 80096fc:	08009777 	.word	0x08009777
 8009700:	080097ab 	.word	0x080097ab
 8009704:	080097ab 	.word	0x080097ab
 8009708:	080097ab 	.word	0x080097ab
 800970c:	080097ab 	.word	0x080097ab
 8009710:	080097ab 	.word	0x080097ab
 8009714:	080097ab 	.word	0x080097ab
 8009718:	080097ab 	.word	0x080097ab
 800971c:	080097ab 	.word	0x080097ab
 8009720:	080097ab 	.word	0x080097ab
 8009724:	080097ab 	.word	0x080097ab
 8009728:	080097ab 	.word	0x080097ab
 800972c:	080097ab 	.word	0x080097ab
 8009730:	080097ab 	.word	0x080097ab
 8009734:	080097ab 	.word	0x080097ab
 8009738:	080097ab 	.word	0x080097ab
 800973c:	0800979d 	.word	0x0800979d
 8009740:	2b40      	cmp	r3, #64	@ 0x40
 8009742:	d02e      	beq.n	80097a2 <UART_SetConfig+0x8aa>
 8009744:	e031      	b.n	80097aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009746:	f7fc fcd1 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 800974a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800974c:	e033      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800974e:	f7fc fce3 	bl	8006118 <HAL_RCC_GetPCLK2Freq>
 8009752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009754:	e02f      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fc92 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e027      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fdde 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009774:	e01f      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009776:	4b2d      	ldr	r3, [pc, #180]	@ (800982c <UART_SetConfig+0x934>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d009      	beq.n	8009796 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009782:	4b2a      	ldr	r3, [pc, #168]	@ (800982c <UART_SetConfig+0x934>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	08db      	lsrs	r3, r3, #3
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	4a24      	ldr	r2, [pc, #144]	@ (8009820 <UART_SetConfig+0x928>)
 800978e:	fa22 f303 	lsr.w	r3, r2, r3
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009794:	e00f      	b.n	80097b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009796:	4b22      	ldr	r3, [pc, #136]	@ (8009820 <UART_SetConfig+0x928>)
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979a:	e00c      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800979c:	4b21      	ldr	r3, [pc, #132]	@ (8009824 <UART_SetConfig+0x92c>)
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a0:	e009      	b.n	80097b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a8:	e005      	b.n	80097b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80e7 	beq.w	800998c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <UART_SetConfig+0x930>)
 80097c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80097d0:	005a      	lsls	r2, r3, #1
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	441a      	add	r2, r3
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	2b0f      	cmp	r3, #15
 80097e8:	d916      	bls.n	8009818 <UART_SetConfig+0x920>
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f0:	d212      	bcs.n	8009818 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f023 030f 	bic.w	r3, r3, #15
 80097fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	b29a      	uxth	r2, r3
 8009808:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800980a:	4313      	orrs	r3, r2
 800980c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009814:	60da      	str	r2, [r3, #12]
 8009816:	e0b9      	b.n	800998c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800981e:	e0b5      	b.n	800998c <UART_SetConfig+0xa94>
 8009820:	03d09000 	.word	0x03d09000
 8009824:	003d0900 	.word	0x003d0900
 8009828:	0800a6a8 	.word	0x0800a6a8
 800982c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009830:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009834:	2b20      	cmp	r3, #32
 8009836:	dc49      	bgt.n	80098cc <UART_SetConfig+0x9d4>
 8009838:	2b00      	cmp	r3, #0
 800983a:	db7c      	blt.n	8009936 <UART_SetConfig+0xa3e>
 800983c:	2b20      	cmp	r3, #32
 800983e:	d87a      	bhi.n	8009936 <UART_SetConfig+0xa3e>
 8009840:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <UART_SetConfig+0x950>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	080098d3 	.word	0x080098d3
 800984c:	080098db 	.word	0x080098db
 8009850:	08009937 	.word	0x08009937
 8009854:	08009937 	.word	0x08009937
 8009858:	080098e3 	.word	0x080098e3
 800985c:	08009937 	.word	0x08009937
 8009860:	08009937 	.word	0x08009937
 8009864:	08009937 	.word	0x08009937
 8009868:	080098f3 	.word	0x080098f3
 800986c:	08009937 	.word	0x08009937
 8009870:	08009937 	.word	0x08009937
 8009874:	08009937 	.word	0x08009937
 8009878:	08009937 	.word	0x08009937
 800987c:	08009937 	.word	0x08009937
 8009880:	08009937 	.word	0x08009937
 8009884:	08009937 	.word	0x08009937
 8009888:	08009903 	.word	0x08009903
 800988c:	08009937 	.word	0x08009937
 8009890:	08009937 	.word	0x08009937
 8009894:	08009937 	.word	0x08009937
 8009898:	08009937 	.word	0x08009937
 800989c:	08009937 	.word	0x08009937
 80098a0:	08009937 	.word	0x08009937
 80098a4:	08009937 	.word	0x08009937
 80098a8:	08009937 	.word	0x08009937
 80098ac:	08009937 	.word	0x08009937
 80098b0:	08009937 	.word	0x08009937
 80098b4:	08009937 	.word	0x08009937
 80098b8:	08009937 	.word	0x08009937
 80098bc:	08009937 	.word	0x08009937
 80098c0:	08009937 	.word	0x08009937
 80098c4:	08009937 	.word	0x08009937
 80098c8:	08009929 	.word	0x08009929
 80098cc:	2b40      	cmp	r3, #64	@ 0x40
 80098ce:	d02e      	beq.n	800992e <UART_SetConfig+0xa36>
 80098d0:	e031      	b.n	8009936 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d2:	f7fc fc0b 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 80098d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098d8:	e033      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098da:	f7fc fc1d 	bl	8006118 <HAL_RCC_GetPCLK2Freq>
 80098de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e0:	e02f      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fbcc 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f0:	e027      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f2:	f107 0318 	add.w	r3, r7, #24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fd18 	bl	800832c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e01f      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009902:	4b2d      	ldr	r3, [pc, #180]	@ (80099b8 <UART_SetConfig+0xac0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800990e:	4b2a      	ldr	r3, [pc, #168]	@ (80099b8 <UART_SetConfig+0xac0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	08db      	lsrs	r3, r3, #3
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	4a28      	ldr	r2, [pc, #160]	@ (80099bc <UART_SetConfig+0xac4>)
 800991a:	fa22 f303 	lsr.w	r3, r2, r3
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009920:	e00f      	b.n	8009942 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009922:	4b26      	ldr	r3, [pc, #152]	@ (80099bc <UART_SetConfig+0xac4>)
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	e00c      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009928:	4b25      	ldr	r3, [pc, #148]	@ (80099c0 <UART_SetConfig+0xac8>)
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e009      	b.n	8009942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800992e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e005      	b.n	8009942 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009940:	bf00      	nop
    }

    if (pclk != 0U)
 8009942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d021      	beq.n	800998c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994c:	4a1d      	ldr	r2, [pc, #116]	@ (80099c4 <UART_SetConfig+0xacc>)
 800994e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009952:	461a      	mov	r2, r3
 8009954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009956:	fbb3 f2f2 	udiv	r2, r3, r2
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	441a      	add	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d909      	bls.n	8009986 <UART_SetConfig+0xa8e>
 8009972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009978:	d205      	bcs.n	8009986 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	b29a      	uxth	r2, r3
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60da      	str	r2, [r3, #12]
 8009984:	e002      	b.n	800998c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2201      	movs	r2, #1
 8009990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2201      	movs	r2, #1
 8009998:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2200      	movs	r2, #0
 80099a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3748      	adds	r7, #72	@ 0x48
 80099b0:	46bd      	mov	sp, r7
 80099b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
 80099bc:	03d09000 	.word	0x03d09000
 80099c0:	003d0900 	.word	0x003d0900
 80099c4:	0800a6a8 	.word	0x0800a6a8

080099c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d4:	f003 0308 	and.w	r3, r3, #8
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01a      	beq.n	8009ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ac6:	d10a      	bne.n	8009ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]
  }
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b098      	sub	sp, #96	@ 0x60
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b1c:	f7f7 ff7c 	bl	8001a18 <HAL_GetTick>
 8009b20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d12f      	bne.n	8009b90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f88e 	bl	8009c60 <UART_WaitOnFlagUntilTimeout>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d022      	beq.n	8009b90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e6      	bne.n	8009b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e063      	b.n	8009c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d149      	bne.n	8009c32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f857 	bl	8009c60 <UART_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d03c      	beq.n	8009c32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e6      	bne.n	8009bb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f023 0301 	bic.w	r3, r3, #1
 8009c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c0a:	61fa      	str	r2, [r7, #28]
 8009c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	69b9      	ldr	r1, [r7, #24]
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	617b      	str	r3, [r7, #20]
   return(result);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e5      	bne.n	8009bea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e012      	b.n	8009c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3758      	adds	r7, #88	@ 0x58
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c70:	e04f      	b.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c78:	d04b      	beq.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c7a:	f7f7 fecd 	bl	8001a18 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d302      	bcc.n	8009c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e04e      	b.n	8009d32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d037      	beq.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b80      	cmp	r3, #128	@ 0x80
 8009ca6:	d034      	beq.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b40      	cmp	r3, #64	@ 0x40
 8009cac:	d031      	beq.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d110      	bne.n	8009cde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f839 	bl	8009d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2208      	movs	r2, #8
 8009cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e029      	b.n	8009d32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cec:	d111      	bne.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f81f 	bl	8009d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e00f      	b.n	8009d32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69da      	ldr	r2, [r3, #28]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	bf0c      	ite	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	2300      	movne	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d0a0      	beq.n	8009c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b095      	sub	sp, #84	@ 0x54
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e6      	bne.n	8009d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	4b1e      	ldr	r3, [pc, #120]	@ (8009e04 <UART_EndRxTransfer+0xc8>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d118      	bne.n	8009de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f023 0310 	bic.w	r3, r3, #16
 8009dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dd0:	61bb      	str	r3, [r7, #24]
 8009dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd4:	6979      	ldr	r1, [r7, #20]
 8009dd6:	69ba      	ldr	r2, [r7, #24]
 8009dd8:	e841 2300 	strex	r3, r2, [r1]
 8009ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e6      	bne.n	8009db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009df8:	bf00      	nop
 8009dfa:	3754      	adds	r7, #84	@ 0x54
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	effffffe 	.word	0xeffffffe

08009e08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <HAL_UARTEx_DisableFifoMode+0x16>
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	e027      	b.n	8009e6e <HAL_UARTEx_DisableFifoMode+0x66>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2224      	movs	r2, #36	@ 0x24
 8009e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0201 	bic.w	r2, r2, #1
 8009e44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d101      	bne.n	8009e92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e02d      	b.n	8009eee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2224      	movs	r2, #36	@ 0x24
 8009e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f850 	bl	8009f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2220      	movs	r2, #32
 8009ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e02d      	b.n	8009f6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f812 	bl	8009f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d108      	bne.n	8009f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f94:	e031      	b.n	8009ffa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f96:	2310      	movs	r3, #16
 8009f98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	0e5b      	lsrs	r3, r3, #25
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	f003 0307 	and.w	r3, r3, #7
 8009fac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	0f5b      	lsrs	r3, r3, #29
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 0307 	and.w	r3, r3, #7
 8009fbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	7b3a      	ldrb	r2, [r7, #12]
 8009fc2:	4911      	ldr	r1, [pc, #68]	@ (800a008 <UARTEx_SetNbDataToProcess+0x94>)
 8009fc4:	5c8a      	ldrb	r2, [r1, r2]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fca:	7b3a      	ldrb	r2, [r7, #12]
 8009fcc:	490f      	ldr	r1, [pc, #60]	@ (800a00c <UARTEx_SetNbDataToProcess+0x98>)
 8009fce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	7b7a      	ldrb	r2, [r7, #13]
 8009fe0:	4909      	ldr	r1, [pc, #36]	@ (800a008 <UARTEx_SetNbDataToProcess+0x94>)
 8009fe2:	5c8a      	ldrb	r2, [r1, r2]
 8009fe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fe8:	7b7a      	ldrb	r2, [r7, #13]
 8009fea:	4908      	ldr	r1, [pc, #32]	@ (800a00c <UARTEx_SetNbDataToProcess+0x98>)
 8009fec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	0800a6c0 	.word	0x0800a6c0
 800a00c:	0800a6c8 	.word	0x0800a6c8

0800a010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a010:	b084      	sub	sp, #16
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	f107 001c 	add.w	r0, r7, #28
 800a01e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a022:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a026:	2b01      	cmp	r3, #1
 800a028:	d121      	bne.n	800a06e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	4b2c      	ldr	r3, [pc, #176]	@ (800a0ec <USB_CoreInit+0xdc>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a04e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a052:	2b01      	cmp	r3, #1
 800a054:	d105      	bne.n	800a062 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 faaa 	bl	800a5bc <USB_CoreReset>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
 800a06c:	e01b      	b.n	800a0a6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa9e 	bl	800a5bc <USB_CoreReset>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a084:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d106      	bne.n	800a09a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	639a      	str	r2, [r3, #56]	@ 0x38
 800a098:	e005      	b.n	800a0a6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0a6:	7fbb      	ldrb	r3, [r7, #30]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d116      	bne.n	800a0da <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f0 <USB_CoreInit+0xe0>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f043 0206 	orr.w	r2, r3, #6
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f043 0220 	orr.w	r2, r3, #32
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0e6:	b004      	add	sp, #16
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	ffbdffbf 	.word	0xffbdffbf
 800a0f0:	03ee0000 	.word	0x03ee0000

0800a0f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f023 0201 	bic.w	r2, r3, #1
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d115      	bne.n	800a164 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a144:	200a      	movs	r0, #10
 800a146:	f7f7 fc73 	bl	8001a30 <HAL_Delay>
      ms += 10U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	330a      	adds	r3, #10
 800a14e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fa25 	bl	800a5a0 <USB_GetMode>
 800a156:	4603      	mov	r3, r0
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d01e      	beq.n	800a19a <USB_SetCurrentMode+0x84>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a160:	d9f0      	bls.n	800a144 <USB_SetCurrentMode+0x2e>
 800a162:	e01a      	b.n	800a19a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d115      	bne.n	800a196 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a176:	200a      	movs	r0, #10
 800a178:	f7f7 fc5a 	bl	8001a30 <HAL_Delay>
      ms += 10U;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	330a      	adds	r3, #10
 800a180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa0c 	bl	800a5a0 <USB_GetMode>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <USB_SetCurrentMode+0x84>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2bc7      	cmp	r3, #199	@ 0xc7
 800a192:	d9f0      	bls.n	800a176 <USB_SetCurrentMode+0x60>
 800a194:	e001      	b.n	800a19a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e005      	b.n	800a1a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2bc8      	cmp	r3, #200	@ 0xc8
 800a19e:	d101      	bne.n	800a1a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	e009      	b.n	800a1e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3340      	adds	r3, #64	@ 0x40
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2b0e      	cmp	r3, #14
 800a1e8:	d9f2      	bls.n	800a1d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d11c      	bne.n	800a22c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a200:	f043 0302 	orr.w	r3, r3, #2
 800a204:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	e005      	b.n	800a238 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a230:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a23e:	461a      	mov	r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a244:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d10d      	bne.n	800a268 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a254:	2100      	movs	r1, #0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f968 	bl	800a52c <USB_SetDevSpeed>
 800a25c:	e008      	b.n	800a270 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a25e:	2101      	movs	r1, #1
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f963 	bl	800a52c <USB_SetDevSpeed>
 800a266:	e003      	b.n	800a270 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a268:	2103      	movs	r1, #3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f95e 	bl	800a52c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a270:	2110      	movs	r1, #16
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8fa 	bl	800a46c <USB_FlushTxFifo>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f924 	bl	800a4d0 <USB_FlushRxFifo>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a298:	461a      	mov	r2, r3
 800a29a:	2300      	movs	r3, #0
 800a29c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	613b      	str	r3, [r7, #16]
 800a2ba:	e043      	b.n	800a344 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2d2:	d118      	bne.n	800a306 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	e013      	b.n	800a318 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	e008      	b.n	800a318 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a312:	461a      	mov	r2, r3
 800a314:	2300      	movs	r3, #0
 800a316:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	461a      	mov	r2, r3
 800a326:	2300      	movs	r3, #0
 800a328:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a336:	461a      	mov	r2, r3
 800a338:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a33c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	3301      	adds	r3, #1
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a348:	461a      	mov	r2, r3
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d3b5      	bcc.n	800a2bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a350:	2300      	movs	r3, #0
 800a352:	613b      	str	r3, [r7, #16]
 800a354:	e043      	b.n	800a3de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a36c:	d118      	bne.n	800a3a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	461a      	mov	r2, r3
 800a382:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	e013      	b.n	800a3b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a396:	461a      	mov	r2, r3
 800a398:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	e008      	b.n	800a3b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	613b      	str	r3, [r7, #16]
 800a3de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d3b5      	bcc.n	800a356 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a40a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a40c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a410:	2b00      	cmp	r3, #0
 800a412:	d105      	bne.n	800a420 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	f043 0210 	orr.w	r2, r3, #16
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	4b0f      	ldr	r3, [pc, #60]	@ (800a464 <USB_DevInit+0x2b4>)
 800a426:	4313      	orrs	r3, r2
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a42c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a430:	2b00      	cmp	r3, #0
 800a432:	d005      	beq.n	800a440 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	f043 0208 	orr.w	r2, r3, #8
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a440:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a444:	2b01      	cmp	r3, #1
 800a446:	d105      	bne.n	800a454 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	699a      	ldr	r2, [r3, #24]
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <USB_DevInit+0x2b8>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a460:	b004      	add	sp, #16
 800a462:	4770      	bx	lr
 800a464:	803c3800 	.word	0x803c3800
 800a468:	40000004 	.word	0x40000004

0800a46c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a486:	d901      	bls.n	800a48c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e01b      	b.n	800a4c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	daf2      	bge.n	800a47a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	019b      	lsls	r3, r3, #6
 800a49c:	f043 0220 	orr.w	r2, r3, #32
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4b0:	d901      	bls.n	800a4b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e006      	b.n	800a4c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	d0f0      	beq.n	800a4a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4e8:	d901      	bls.n	800a4ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e018      	b.n	800a520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	daf2      	bge.n	800a4dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a50c:	d901      	bls.n	800a512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e006      	b.n	800a520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f003 0310 	and.w	r3, r3, #16
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d0f0      	beq.n	800a500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a54c:	4313      	orrs	r3, r2
 800a54e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a58c:	f043 0302 	orr.w	r3, r3, #2
 800a590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	f003 0301 	and.w	r3, r3, #1
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5d4:	d901      	bls.n	800a5da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e01b      	b.n	800a612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	daf2      	bge.n	800a5c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	f043 0201 	orr.w	r2, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5fe:	d901      	bls.n	800a604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e006      	b.n	800a612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d0f0      	beq.n	800a5f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <memset>:
 800a61e:	4402      	add	r2, r0
 800a620:	4603      	mov	r3, r0
 800a622:	4293      	cmp	r3, r2
 800a624:	d100      	bne.n	800a628 <memset+0xa>
 800a626:	4770      	bx	lr
 800a628:	f803 1b01 	strb.w	r1, [r3], #1
 800a62c:	e7f9      	b.n	800a622 <memset+0x4>
	...

0800a630 <__libc_init_array>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	4d0d      	ldr	r5, [pc, #52]	@ (800a668 <__libc_init_array+0x38>)
 800a634:	4c0d      	ldr	r4, [pc, #52]	@ (800a66c <__libc_init_array+0x3c>)
 800a636:	1b64      	subs	r4, r4, r5
 800a638:	10a4      	asrs	r4, r4, #2
 800a63a:	2600      	movs	r6, #0
 800a63c:	42a6      	cmp	r6, r4
 800a63e:	d109      	bne.n	800a654 <__libc_init_array+0x24>
 800a640:	4d0b      	ldr	r5, [pc, #44]	@ (800a670 <__libc_init_array+0x40>)
 800a642:	4c0c      	ldr	r4, [pc, #48]	@ (800a674 <__libc_init_array+0x44>)
 800a644:	f000 f818 	bl	800a678 <_init>
 800a648:	1b64      	subs	r4, r4, r5
 800a64a:	10a4      	asrs	r4, r4, #2
 800a64c:	2600      	movs	r6, #0
 800a64e:	42a6      	cmp	r6, r4
 800a650:	d105      	bne.n	800a65e <__libc_init_array+0x2e>
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	f855 3b04 	ldr.w	r3, [r5], #4
 800a658:	4798      	blx	r3
 800a65a:	3601      	adds	r6, #1
 800a65c:	e7ee      	b.n	800a63c <__libc_init_array+0xc>
 800a65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a662:	4798      	blx	r3
 800a664:	3601      	adds	r6, #1
 800a666:	e7f2      	b.n	800a64e <__libc_init_array+0x1e>
 800a668:	0800a6d8 	.word	0x0800a6d8
 800a66c:	0800a6d8 	.word	0x0800a6d8
 800a670:	0800a6d8 	.word	0x0800a6d8
 800a674:	0800a6dc 	.word	0x0800a6dc

0800a678 <_init>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	bf00      	nop
 800a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67e:	bc08      	pop	{r3}
 800a680:	469e      	mov	lr, r3
 800a682:	4770      	bx	lr

0800a684 <_fini>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr
