
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d6c  08005d6c  00006d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d74  08005d74  00006d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005d78  08005d78  00006d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005d7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000598  24000010  08005d8c  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005a8  08005d8c  000075a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a55  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002971  00000000  00000000  0001aa93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd8  00000000  00000000  0001d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a92  00000000  00000000  0001e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036d2a  00000000  00000000  0001ec72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014ab7  00000000  00000000  0005599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157b4d  00000000  00000000  0006a453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c1fa0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038c4  00000000  00000000  001c1fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001c58a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005d1c 	.word	0x08005d1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005d1c 	.word	0x08005d1c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <inizializzo_USART>:
unsigned int count_pointer=0;

//Zona definizione variabili, vettori globali


void inizializzo_USART(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//Accendo la trasmissione

	USART3 ->CR1 |= USART_CR1_TE;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <inizializzo_USART+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <inizializzo_USART+0x40>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6013      	str	r3, [r2, #0]

	USART3 ->CR1 |= USART_CR1_RE;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <inizializzo_USART+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <inizializzo_USART+0x40>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6013      	str	r3, [r2, #0]
	//Abilito interrupt trasmissione: attenzione che il flag viene subito impostato ad 1
//	USART3 -> CR1 |= USART_CR1_TXEIE;
	USART3 -> CR1 |= USART_CR1_RXNEIE;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <inizializzo_USART+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <inizializzo_USART+0x40>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6013      	str	r3, [r2, #0]
	//Abilito interruput ricezione

	//Accendo USART
	USART3 ->CR1 |= USART_CR1_UE;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <inizializzo_USART+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <inizializzo_USART+0x40>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004800 	.word	0x40004800

0800060c <ESPE_USART_interrupt>:


//Zona definizione di funzioni
void ESPE_USART_interrupt(void){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

	if( USART3->ISR & USART_ISR_TC){
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000618:	2b00      	cmp	r3, #0
 800061a:	d009      	beq.n	8000630 <ESPE_USART_interrupt+0x24>

		if( USART3->ISR & USART_ISR_RXNE_RXFNE){
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800061e:	69db      	ldr	r3, [r3, #28]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <ESPE_USART_interrupt+0x24>
			//Qui mettiamo il codice per la gestione della sola ricezione
			USART3 -> TDR = USART3 -> RDR;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800062c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800062e:	6293      	str	r3, [r2, #40]	@ 0x28
		}
	}
//Per ovviare a dimenticanze azzeriamo all'uscita i flag della ricezione e trasmissione in ogni caso
	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF ;  //Azzeramento flag interrupt trasmissione
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 8000642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000646:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <ESPE_USART_interrupt+0x54>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
//	/* USER CODE END USART3_IRQn 0 */
//	HAL_UART_IRQHandler(&huart3);
//	/* USER CODE BEGIN USART3_IRQn 1 */
//}

}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40004800 	.word	0x40004800

08000664 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	@ 0x30
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b83      	ldr	r3, [pc, #524]	@ (8000888 <MX_GPIO_Init+0x224>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000680:	4a81      	ldr	r2, [pc, #516]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800068a:	4b7f      	ldr	r3, [pc, #508]	@ (8000888 <MX_GPIO_Init+0x224>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000698:	4b7b      	ldr	r3, [pc, #492]	@ (8000888 <MX_GPIO_Init+0x224>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069e:	4a7a      	ldr	r2, [pc, #488]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a8:	4b77      	ldr	r3, [pc, #476]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b74      	ldr	r3, [pc, #464]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006bc:	4a72      	ldr	r2, [pc, #456]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c6:	4b70      	ldr	r3, [pc, #448]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b6c      	ldr	r3, [pc, #432]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006da:	4a6b      	ldr	r2, [pc, #428]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e4:	4b68      	ldr	r3, [pc, #416]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	4b65      	ldr	r3, [pc, #404]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a63      	ldr	r2, [pc, #396]	@ (8000888 <MX_GPIO_Init+0x224>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b61      	ldr	r3, [pc, #388]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000710:	4b5d      	ldr	r3, [pc, #372]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a5c      	ldr	r2, [pc, #368]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b59      	ldr	r3, [pc, #356]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	4b56      	ldr	r3, [pc, #344]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	4a54      	ldr	r2, [pc, #336]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073e:	4b52      	ldr	r3, [pc, #328]	@ (8000888 <MX_GPIO_Init+0x224>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000752:	484e      	ldr	r0, [pc, #312]	@ (800088c <MX_GPIO_Init+0x228>)
 8000754:	f000 ff2c 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075e:	484c      	ldr	r0, [pc, #304]	@ (8000890 <MX_GPIO_Init+0x22c>)
 8000760:	f000 ff26 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	484a      	ldr	r0, [pc, #296]	@ (8000894 <MX_GPIO_Init+0x230>)
 800076a:	f000 ff21 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4845      	ldr	r0, [pc, #276]	@ (8000898 <MX_GPIO_Init+0x234>)
 8000784:	f000 fd64 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000788:	2332      	movs	r3, #50	@ 0x32
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <MX_GPIO_Init+0x234>)
 80007a4:	f000 fd54 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007a8:	2386      	movs	r3, #134	@ 0x86
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b8:	230b      	movs	r3, #11
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4836      	ldr	r0, [pc, #216]	@ (800089c <MX_GPIO_Init+0x238>)
 80007c4:	f000 fd44 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007c8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	482a      	ldr	r0, [pc, #168]	@ (800088c <MX_GPIO_Init+0x228>)
 80007e2:	f000 fd35 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4822      	ldr	r0, [pc, #136]	@ (800088c <MX_GPIO_Init+0x228>)
 8000804:	f000 fd24 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_GPIO_Init+0x22c>)
 8000822:	f000 fd15 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <MX_GPIO_Init+0x23c>)
 800083c:	f000 fd08 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000840:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000852:	230b      	movs	r3, #11
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4810      	ldr	r0, [pc, #64]	@ (80008a0 <MX_GPIO_Init+0x23c>)
 800085e:	f000 fcf7 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2302      	movs	r3, #2
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_GPIO_Init+0x230>)
 800087a:	f000 fce9 	bl	8001250 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400
 800088c:	58020400 	.word	0x58020400
 8000890:	58020c00 	.word	0x58020c00
 8000894:	58021000 	.word	0x58021000
 8000898:	58020800 	.word	0x58020800
 800089c:	58020000 	.word	0x58020000
 80008a0:	58021800 	.word	0x58021800

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fb00 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f80a 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff fed8 	bl	8000664 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008b4:	f000 f964 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b8:	f000 fa20 	bl	8000cfc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  inizializzo_USART();
 80008bc:	f7ff fe84 	bl	80005c8 <inizializzo_USART>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <main+0x1c>

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	@ 0x70
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	224c      	movs	r2, #76	@ 0x4c
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 f9f5 	bl	8005cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 f9ef 	bl	8005cc2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 ffad 	bl	8001844 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <SystemClock_Config+0xf8>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <SystemClock_Config+0xf8>)
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008fa:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <SystemClock_Config+0xf8>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <SystemClock_Config+0xfc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800090c:	4a2c      	ldr	r2, [pc, #176]	@ (80009c0 <SystemClock_Config+0xfc>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <SystemClock_Config+0xfc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <SystemClock_Config+0xfc>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000930:	2303      	movs	r3, #3
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	@ 0x40
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800094e:	2318      	movs	r3, #24
 8000950:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800095e:	230c      	movs	r3, #12
 8000960:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	4618      	mov	r0, r3
 8000970:	f000 ffb2 	bl	80018d8 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800097a:	f000 f823 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	@ 0x3f
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fbf2 	bl	800218c <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009ae:	f000 f809 	bl	80009c4 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3770      	adds	r7, #112	@ 0x70
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	58000400 	.word	0x58000400
 80009c0:	58024800 	.word	0x58024800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_MspInit+0x30>)
 80009d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x30>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x30>)
 80009e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	58024400 	.word	0x58024400

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 fa99 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ESPE_USART_interrupt();
 8000a66:	f7ff fdd1 	bl	800060c <ESPE_USART_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <SystemInit+0xe4>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a36      	ldr	r2, [pc, #216]	@ (8000b54 <SystemInit+0xe4>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a84:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <SystemInit+0xe8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	2b06      	cmp	r3, #6
 8000a8e:	d807      	bhi.n	8000aa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a90:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <SystemInit+0xe8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	4a2f      	ldr	r2, [pc, #188]	@ (8000b58 <SystemInit+0xe8>)
 8000a9a:	f043 0307 	orr.w	r3, r3, #7
 8000a9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <SystemInit+0xec>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b5c <SystemInit+0xec>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <SystemInit+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <SystemInit+0xec>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4929      	ldr	r1, [pc, #164]	@ (8000b5c <SystemInit+0xec>)
 8000ab8:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <SystemInit+0xf0>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <SystemInit+0xe8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <SystemInit+0xe8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <SystemInit+0xe8>)
 8000ad4:	f043 0307 	orr.w	r3, r3, #7
 8000ad8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <SystemInit+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <SystemInit+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <SystemInit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <SystemInit+0xec>)
 8000aee:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <SystemInit+0xf4>)
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <SystemInit+0xec>)
 8000af4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b68 <SystemInit+0xf8>)
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <SystemInit+0xec>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <SystemInit+0xfc>)
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <SystemInit+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <SystemInit+0xec>)
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <SystemInit+0xfc>)
 8000b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <SystemInit+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <SystemInit+0xec>)
 8000b12:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <SystemInit+0xfc>)
 8000b14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <SystemInit+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <SystemInit+0xec>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <SystemInit+0xec>)
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <SystemInit+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <SystemInit+0x100>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <SystemInit+0x104>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b3a:	d202      	bcs.n	8000b42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <SystemInit+0x108>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <SystemInit+0x10c>)
 8000b44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	52002000 	.word	0x52002000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b64:	02020200 	.word	0x02020200
 8000b68:	01ff0000 	.word	0x01ff0000
 8000b6c:	01010280 	.word	0x01010280
 8000b70:	5c001000 	.word	0x5c001000
 8000b74:	ffff0000 	.word	0xffff0000
 8000b78:	51008108 	.word	0x51008108
 8000b7c:	52004000 	.word	0x52004000

08000b80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <MX_USART3_UART_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bca:	f003 fc97 	bl	80044fc <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f7ff fef6 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bdc:	f004 fc9f 	bl	800551e <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f7ff feed 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bee:	f004 fcd4 	bl	800559a <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f7ff fee4 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bfe:	f004 fc55 	bl	80054ac <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f7ff fedc 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2400002c 	.word	0x2400002c
 8000c14:	40004800 	.word	0x40004800

08000c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22c0      	movs	r2, #192	@ 0xc0
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f842 	bl	8005cc2 <memset>
  if(uartHandle->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_UART_MspInit+0xd8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d14e      	bne.n	8000ce6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	f04f 0202 	mov.w	r2, #2
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fe20 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c6a:	f7ff feab 	bl	80009c4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c74:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_UART_MspInit+0xdc>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000caa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <HAL_UART_MspInit+0xe0>)
 8000cd2:	f000 fabd 	bl	8001250 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2027      	movs	r0, #39	@ 0x27
 8000cdc:	f000 fa83 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce0:	2027      	movs	r0, #39	@ 0x27
 8000ce2:	f000 fa9a 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37e8      	adds	r7, #232	@ 0xe8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004800 	.word	0x40004800
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020c00 	.word	0x58020c00

08000cfc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	2209      	movs	r2, #9
 8000d0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d44:	f000 fc4d 	bl	80015e2 <HAL_PCD_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d4e:	f7ff fe39 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	240000c0 	.word	0x240000c0
 8000d5c:	40080000 	.word	0x40080000

08000d60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ba      	sub	sp, #232	@ 0xe8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	22c0      	movs	r2, #192	@ 0xc0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 ff9e 	bl	8005cc2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a30      	ldr	r2, [pc, #192]	@ (8000e4c <HAL_PCD_MspInit+0xec>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d159      	bne.n	8000e44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d90:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fd7b 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000db4:	f7ff fe06 	bl	80009c4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000db8:	f000 fd7e 	bl	80018b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a23      	ldr	r2, [pc, #140]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dda:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000df4:	230a      	movs	r3, #10
 8000df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	@ (8000e54 <HAL_PCD_MspInit+0xf4>)
 8000e02:	f000 fa25 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <HAL_PCD_MspInit+0xf4>)
 8000e22:	f000 fa15 	bl	8001250 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e2c:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000e2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	37e8      	adds	r7, #232	@ 0xe8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40080000 	.word	0x40080000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020000 	.word	0x58020000

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff fe08 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 ff25 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fd0b 	bl	80008a4 <main>
  bx  lr
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e9c:	08005d7c 	.word	0x08005d7c
  ldr r2, =_sbss
 8000ea0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ea4:	240005a8 	.word	0x240005a8

08000ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC3_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f98c 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb8:	f001 fb1e 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_Init+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	4913      	ldr	r1, [pc, #76]	@ (8000f18 <HAL_Init+0x6c>)
 8000eca:	5ccb      	ldrb	r3, [r1, r3]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_Init+0x68>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <HAL_Init+0x6c>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_Init+0x70>)
 8000eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <HAL_Init+0x74>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f814 	bl	8000f24 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e002      	b.n	8000f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f06:	f7ff fd63 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	08005d34 	.word	0x08005d34
 8000f1c:	24000004 	.word	0x24000004
 8000f20:	24000000 	.word	0x24000000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e021      	b.n	8000f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <HAL_InitTick+0x64>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_InitTick+0x60>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f971 	bl	8001236 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f93b 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <HAL_InitTick+0x68>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2400000c 	.word	0x2400000c
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	24000008 	.word	0x24000008

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	240005a4 	.word	0x240005a4

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	240005a4 	.word	0x240005a4

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2400000c 	.word	0x2400000c

08001018 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetREVID+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0c1b      	lsrs	r3, r3, #16
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	5c001000 	.word	0x5c001000

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff40 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff33 	bl	8001094 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa4 	bl	800118c <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800125e:	4b89      	ldr	r3, [pc, #548]	@ (8001484 <HAL_GPIO_Init+0x234>)
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001262:	e194      	b.n	800158e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8186 	beq.w	8001588 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x44>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80e0 	beq.w	8001588 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a29      	ldr	r2, [pc, #164]	@ (800148c <HAL_GPIO_Init+0x23c>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <HAL_GPIO_Init+0x240>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d052      	beq.n	80014b8 <HAL_GPIO_Init+0x268>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <HAL_GPIO_Init+0x244>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d031      	beq.n	800147e <HAL_GPIO_Init+0x22e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <HAL_GPIO_Init+0x248>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x22a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_GPIO_Init+0x24c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x226>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <HAL_GPIO_Init+0x250>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x222>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <HAL_GPIO_Init+0x254>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <HAL_GPIO_Init+0x258>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x21a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <HAL_GPIO_Init+0x25c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x216>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <HAL_GPIO_Init+0x260>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x212>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_GPIO_Init+0x264>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20e>
 800145a:	2309      	movs	r3, #9
 800145c:	e02d      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800145e:	230a      	movs	r3, #10
 8001460:	e02b      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001462:	2308      	movs	r3, #8
 8001464:	e029      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001466:	2307      	movs	r3, #7
 8001468:	e027      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800146a:	2306      	movs	r3, #6
 800146c:	e025      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800146e:	2305      	movs	r3, #5
 8001470:	e023      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001472:	2304      	movs	r3, #4
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001476:	2303      	movs	r3, #3
 8001478:	e01f      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800147a:	2302      	movs	r3, #2
 800147c:	e01d      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800147e:	2301      	movs	r3, #1
 8001480:	e01b      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001482:	bf00      	nop
 8001484:	58000080 	.word	0x58000080
 8001488:	58024400 	.word	0x58024400
 800148c:	58000400 	.word	0x58000400
 8001490:	58020000 	.word	0x58020000
 8001494:	58020400 	.word	0x58020400
 8001498:	58020800 	.word	0x58020800
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58021000 	.word	0x58021000
 80014a4:	58021400 	.word	0x58021400
 80014a8:	58021800 	.word	0x58021800
 80014ac:	58021c00 	.word	0x58021c00
 80014b0:	58022000 	.word	0x58022000
 80014b4:	58022400 	.word	0x58022400
 80014b8:	2300      	movs	r3, #0
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ca:	4938      	ldr	r1, [pc, #224]	@ (80015ac <HAL_GPIO_Init+0x35c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3301      	adds	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	f47f ae63 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	@ 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	58000400 	.word	0x58000400

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0fe      	b.n	80017f2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fba9 	bl	8000d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f004 f8bc 	bl	8005798 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7c1a      	ldrb	r2, [r3, #16]
 8001628:	f88d 2000 	strb.w	r2, [sp]
 800162c:	3304      	adds	r3, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	f004 f840 	bl	80056b4 <USB_CoreInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0d5      	b.n	80017f2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f004 f8b4 	bl	80057ba <USB_SetCurrentMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0c6      	b.n	80017f2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e04a      	b.n	8001700 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3315      	adds	r3, #21
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3314      	adds	r3, #20
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	b298      	uxth	r0, r3
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	332e      	adds	r3, #46	@ 0x2e
 80016a6:	4602      	mov	r2, r0
 80016a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3318      	adds	r3, #24
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	331c      	adds	r3, #28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	3320      	adds	r3, #32
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	3324      	adds	r3, #36	@ 0x24
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3af      	bcc.n	800166a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e044      	b.n	800179a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	3301      	adds	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3b5      	bcc.n	8001710 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7c1a      	ldrb	r2, [r3, #16]
 80017ac:	f88d 2000 	strb.w	r2, [sp]
 80017b0:	3304      	adds	r3, #4
 80017b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b4:	f004 f84e 	bl	8005854 <USB_DevInit>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2202      	movs	r2, #2
 80017c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e013      	b.n	80017f2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7b1b      	ldrb	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f80b 	bl	80017fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fa09 	bl	8005c02 <USB_DevDisconnect>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_PCDEx_ActivateLPM+0x44>)
 800182c:	4313      	orrs	r3, r2
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	10000003 	.word	0x10000003

08001844 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_PWREx_ConfigSupply+0x70>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00a      	beq.n	800186e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_PWREx_ConfigSupply+0x70>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e01f      	b.n	80018aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e01d      	b.n	80018aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_PWREx_ConfigSupply+0x70>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	490f      	ldr	r1, [pc, #60]	@ (80018b4 <HAL_PWREx_ConfigSupply+0x70>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800187e:	f7ff fb9b 	bl	8000fb8 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001884:	e009      	b.n	800189a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001886:	f7ff fb97 	bl	8000fb8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001894:	d901      	bls.n	800189a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e007      	b.n	80018aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_PWREx_ConfigSupply+0x70>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a6:	d1ee      	bne.n	8001886 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	58024800 	.word	0x58024800

080018b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58024800 	.word	0x58024800

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f000 bc48 	b.w	800217c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8088 	beq.w	8001a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4b99      	ldr	r3, [pc, #612]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001904:	4b96      	ldr	r3, [pc, #600]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	2b10      	cmp	r3, #16
 800190e:	d007      	beq.n	8001920 <HAL_RCC_OscConfig+0x48>
 8001910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001912:	2b18      	cmp	r3, #24
 8001914:	d111      	bne.n	800193a <HAL_RCC_OscConfig+0x62>
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4b8f      	ldr	r3, [pc, #572]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d06d      	beq.n	8001a08 <HAL_RCC_OscConfig+0x130>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d169      	bne.n	8001a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f000 bc21 	b.w	800217c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x7a>
 8001944:	4b86      	ldr	r3, [pc, #536]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a85      	ldr	r2, [pc, #532]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x9c>
 800195a:	4b81      	ldr	r3, [pc, #516]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a80      	ldr	r2, [pc, #512]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b7e      	ldr	r3, [pc, #504]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xc0>
 800197e:	4b78      	ldr	r3, [pc, #480]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a77      	ldr	r2, [pc, #476]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b75      	ldr	r3, [pc, #468]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a74      	ldr	r2, [pc, #464]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd8>
 8001998:	4b71      	ldr	r3, [pc, #452]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a70      	ldr	r2, [pc, #448]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6d      	ldr	r2, [pc, #436]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fafe 	bl	8000fb8 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fafa 	bl	8000fb8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e3d4      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d2:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff faea 	bl	8000fb8 <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fae6 	bl	8000fb8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	@ 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e3c0      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019fa:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x110>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80ca 	beq.w	8001bac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a18:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_OscConfig+0x166>
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b18      	cmp	r3, #24
 8001a32:	d156      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x20a>
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d151      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3e:	4b48      	ldr	r3, [pc, #288]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e392      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a56:	4b42      	ldr	r3, [pc, #264]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0219 	bic.w	r2, r3, #25
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	493f      	ldr	r1, [pc, #252]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff faa6 	bl	8000fb8 <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff faa2 	bl	8000fb8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e37c      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	f7ff fac3 	bl	8001018 <HAL_GetREVID>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d817      	bhi.n	8001acc <HAL_RCC_OscConfig+0x1f4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b40      	cmp	r3, #64	@ 0x40
 8001aa2:	d108      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001aac:	4a2c      	ldr	r2, [pc, #176]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab4:	e07a      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	4926      	ldr	r1, [pc, #152]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aca:	e06f      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	4921      	ldr	r1, [pc, #132]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae0:	e064      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d047      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0219 	bic.w	r2, r3, #25
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	491a      	ldr	r1, [pc, #104]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fa5c 	bl	8000fb8 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fa58 	bl	8000fb8 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e332      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	f7ff fa79 	bl	8001018 <HAL_GetREVID>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d819      	bhi.n	8001b64 <HAL_RCC_OscConfig+0x28c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b40      	cmp	r3, #64	@ 0x40
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x272>
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	e030      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	4901      	ldr	r1, [pc, #4]	@ (8001b60 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e025      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
 8001b60:	58024400 	.word	0x58024400
 8001b64:	4b9a      	ldr	r3, [pc, #616]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	4997      	ldr	r1, [pc, #604]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
 8001b78:	e018      	b.n	8001bac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b95      	ldr	r3, [pc, #596]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a94      	ldr	r2, [pc, #592]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fa17 	bl	8000fb8 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fa13 	bl	8000fb8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e2ed      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba0:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a9 	beq.w	8001d0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4b85      	ldr	r3, [pc, #532]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc4:	4b82      	ldr	r3, [pc, #520]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d007      	beq.n	8001be0 <HAL_RCC_OscConfig+0x308>
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b18      	cmp	r3, #24
 8001bd4:	d13a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x374>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d135      	bne.n	8001c4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be0:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x320>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e2c1      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf8:	f7ff fa0e 	bl	8001018 <HAL_GetREVID>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d817      	bhi.n	8001c36 <HAL_RCC_OscConfig+0x35e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x348>
 8001c0e:	4b70      	ldr	r3, [pc, #448]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c16:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c1e:	e075      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c20:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	069b      	lsls	r3, r3, #26
 8001c2e:	4968      	ldr	r1, [pc, #416]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c34:	e06a      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c36:	4b66      	ldr	r3, [pc, #408]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	4962      	ldr	r1, [pc, #392]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4a:	e05f      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d042      	beq.n	8001cda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c54:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f9aa 	bl	8000fb8 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c68:	f7ff f9a6 	bl	8000fb8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e280      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c7a:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c86:	f7ff f9c7 	bl	8001018 <HAL_GetREVID>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d817      	bhi.n	8001cc4 <HAL_RCC_OscConfig+0x3ec>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d108      	bne.n	8001cae <HAL_RCC_OscConfig+0x3d6>
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001caa:	6053      	str	r3, [r2, #4]
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
 8001cae:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	069b      	lsls	r3, r3, #26
 8001cbc:	4944      	ldr	r1, [pc, #272]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
 8001cc2:	e023      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
 8001cc4:	4b42      	ldr	r3, [pc, #264]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	493f      	ldr	r1, [pc, #252]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f967 	bl	8000fb8 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cee:	f7ff f963 	bl	8000fb8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e23d      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d036      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d24:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f944 	bl	8000fb8 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f940 	bl	8000fb8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e21a      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x45c>
 8001d52:	e018      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d58:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f92a 	bl	8000fb8 <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff f926 	bl	8000fb8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e200      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d039      	beq.n	8001e06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001da6:	f7ff f907 	bl	8000fb8 <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dae:	f7ff f903 	bl	8000fb8 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1dd      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x4d6>
 8001dcc:	e01b      	b.n	8001e06 <HAL_RCC_OscConfig+0x52e>
 8001dce:	bf00      	nop
 8001dd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd4:	4b9b      	ldr	r3, [pc, #620]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a9a      	ldr	r2, [pc, #616]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001de0:	f7ff f8ea 	bl	8000fb8 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de8:	f7ff f8e6 	bl	8000fb8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1c0      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dfa:	4b92      	ldr	r3, [pc, #584]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8081 	beq.w	8001f16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e14:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <HAL_RCC_OscConfig+0x770>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a8b      	ldr	r2, [pc, #556]	@ (8002048 <HAL_RCC_OscConfig+0x770>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e20:	f7ff f8ca 	bl	8000fb8 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e28:	f7ff f8c6 	bl	8000fb8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1a0      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e3a:	4b83      	ldr	r3, [pc, #524]	@ (8002048 <HAL_RCC_OscConfig+0x770>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x584>
 8001e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a7c      	ldr	r2, [pc, #496]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5a:	e02d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5e0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5a6>
 8001e64:	4b77      	ldr	r3, [pc, #476]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	4a76      	ldr	r2, [pc, #472]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e70:	4b74      	ldr	r3, [pc, #464]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	4a73      	ldr	r2, [pc, #460]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e7c:	e01c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5e0>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c8>
 8001e86:	4b6f      	ldr	r3, [pc, #444]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e92:	4b6c      	ldr	r3, [pc, #432]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	4a6b      	ldr	r2, [pc, #428]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5e0>
 8001ea0:	4b68      	ldr	r3, [pc, #416]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea4:	4a67      	ldr	r2, [pc, #412]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eac:	4b65      	ldr	r3, [pc, #404]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4a64      	ldr	r2, [pc, #400]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d015      	beq.n	8001eec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f87a 	bl	8000fb8 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f876 	bl	8000fb8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e14e      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ede:	4b59      	ldr	r3, [pc, #356]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ee      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x5f0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff f864 	bl	8000fb8 <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f860 	bl	8000fb8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e138      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ee      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 812d 	beq.w	800217a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f20:	4b48      	ldr	r3, [pc, #288]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f28:	2b18      	cmp	r3, #24
 8001f2a:	f000 80bd 	beq.w	80020a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f040 809e 	bne.w	8002074 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a41      	ldr	r2, [pc, #260]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f838 	bl	8000fb8 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f834 	bl	8000fb8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e10e      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5e:	4b39      	ldr	r3, [pc, #228]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6a:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f6e:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0x774>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	4931      	ldr	r1, [pc, #196]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f92:	3b01      	subs	r3, #1
 8001f94:	025b      	lsls	r3, r3, #9
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	3b01      	subs	r3, #1
 8001fae:	061b      	lsls	r3, r3, #24
 8001fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_RCC_OscConfig+0x778>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd2:	00d2      	lsls	r2, r2, #3
 8001fd4:	491b      	ldr	r1, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	f023 020c 	bic.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4917      	ldr	r1, [pc, #92]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f023 0202 	bic.w	r2, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff8:	4912      	ldr	r1, [pc, #72]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	4a0d      	ldr	r2, [pc, #52]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <HAL_RCC_OscConfig+0x76c>)
 8002034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe ffbd 	bl	8000fb8 <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002040:	e011      	b.n	8002066 <HAL_RCC_OscConfig+0x78e>
 8002042:	bf00      	nop
 8002044:	58024400 	.word	0x58024400
 8002048:	58024800 	.word	0x58024800
 800204c:	fffffc0c 	.word	0xfffffc0c
 8002050:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ffb0 	bl	8000fb8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e08a      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x77c>
 8002072:	e082      	b.n	800217a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a42      	ldr	r2, [pc, #264]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 800207a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe ff9a 	bl	8000fb8 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe ff96 	bl	8000fb8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e070      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x7b0>
 80020a6:	e068      	b.n	800217a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020ae:	4b35      	ldr	r3, [pc, #212]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d031      	beq.n	8002120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0203 	and.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d12a      	bne.n	8002120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d122      	bne.n	8002120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d11a      	bne.n	8002120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0a5b      	lsrs	r3, r3, #9
 80020ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d111      	bne.n	8002120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002108:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d108      	bne.n	8002120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0e1b      	lsrs	r3, r3, #24
 8002112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e02b      	b.n	800217c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800212e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d01f      	beq.n	800217a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002146:	f7fe ff37 	bl	8000fb8 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800214c:	bf00      	nop
 800214e:	f7fe ff33 	bl	8000fb8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	4293      	cmp	r3, r2
 8002158:	d0f9      	beq.n	800214e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 800215c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_RCC_OscConfig+0x8b0>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002166:	00d2      	lsls	r2, r2, #3
 8002168:	4906      	ldr	r1, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 800216a:	4313      	orrs	r3, r2
 800216c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_RCC_OscConfig+0x8ac>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3730      	adds	r7, #48	@ 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	ffff0007 	.word	0xffff0007

0800218c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e19c      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b8a      	ldr	r3, [pc, #552]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b87      	ldr	r3, [pc, #540]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	4985      	ldr	r1, [pc, #532]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b83      	ldr	r3, [pc, #524]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e184      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b7b      	ldr	r3, [pc, #492]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d908      	bls.n	80021fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021ec:	4b78      	ldr	r3, [pc, #480]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4975      	ldr	r1, [pc, #468]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002216:	429a      	cmp	r2, r3
 8002218:	d908      	bls.n	800222c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800221a:	4b6d      	ldr	r3, [pc, #436]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	496a      	ldr	r1, [pc, #424]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	4b64      	ldr	r3, [pc, #400]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002244:	429a      	cmp	r2, r3
 8002246:	d908      	bls.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	495e      	ldr	r1, [pc, #376]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002256:	4313      	orrs	r3, r2
 8002258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002272:	429a      	cmp	r2, r3
 8002274:	d908      	bls.n	8002288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002276:	4b56      	ldr	r3, [pc, #344]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4953      	ldr	r1, [pc, #332]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002284:	4313      	orrs	r3, r2
 8002286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f023 020f 	bic.w	r2, r3, #15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4947      	ldr	r1, [pc, #284]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d055      	beq.n	800236e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022c2:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4940      	ldr	r1, [pc, #256]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022dc:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d121      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0f6      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f4:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d115      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0ea      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800230c:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0de      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231c:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d6      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b28      	ldr	r3, [pc, #160]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f023 0207 	bic.w	r2, r3, #7
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4925      	ldr	r1, [pc, #148]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233e:	f7fe fe3b 	bl	8000fb8 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e00a      	b.n	800235c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fe37 	bl	8000fb8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0be      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235c:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	429a      	cmp	r2, r3
 800236c:	d1eb      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	429a      	cmp	r2, r3
 8002388:	d208      	bcs.n	800239c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	490e      	ldr	r1, [pc, #56]	@ (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002398:	4313      	orrs	r3, r2
 800239a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d214      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	4906      	ldr	r1, [pc, #24]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e086      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
 80023cc:	52002000 	.word	0x52002000
 80023d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d010      	beq.n	8002402 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d208      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023f0:	4b3c      	ldr	r3, [pc, #240]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	4939      	ldr	r1, [pc, #228]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800241a:	429a      	cmp	r2, r3
 800241c:	d208      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800241e:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	492e      	ldr	r1, [pc, #184]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800242c:	4313      	orrs	r3, r2
 800242e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002448:	429a      	cmp	r2, r3
 800244a:	d208      	bcs.n	800245e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4922      	ldr	r1, [pc, #136]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800245a:	4313      	orrs	r3, r2
 800245c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002476:	429a      	cmp	r2, r3
 8002478:	d208      	bcs.n	800248c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800247a:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4917      	ldr	r1, [pc, #92]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002488:	4313      	orrs	r3, r2
 800248a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800248c:	f000 f834 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4912      	ldr	r1, [pc, #72]	@ (80024e8 <HAL_RCC_ClockConfig+0x35c>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a0d      	ldr	r2, [pc, #52]	@ (80024e8 <HAL_RCC_ClockConfig+0x35c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x360>)
 80024c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c4:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_RCC_ClockConfig+0x364>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_ClockConfig+0x368>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fd28 	bl	8000f24 <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	08005d34 	.word	0x08005d34
 80024ec:	24000004 	.word	0x24000004
 80024f0:	24000000 	.word	0x24000000
 80024f4:	24000008 	.word	0x24000008

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4bb3      	ldr	r3, [pc, #716]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002506:	2b18      	cmp	r3, #24
 8002508:	f200 8155 	bhi.w	80027b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <HAL_RCC_GetSysClockFreq+0x1c>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002579 	.word	0x08002579
 8002518:	080027b7 	.word	0x080027b7
 800251c:	080027b7 	.word	0x080027b7
 8002520:	080027b7 	.word	0x080027b7
 8002524:	080027b7 	.word	0x080027b7
 8002528:	080027b7 	.word	0x080027b7
 800252c:	080027b7 	.word	0x080027b7
 8002530:	080027b7 	.word	0x080027b7
 8002534:	0800259f 	.word	0x0800259f
 8002538:	080027b7 	.word	0x080027b7
 800253c:	080027b7 	.word	0x080027b7
 8002540:	080027b7 	.word	0x080027b7
 8002544:	080027b7 	.word	0x080027b7
 8002548:	080027b7 	.word	0x080027b7
 800254c:	080027b7 	.word	0x080027b7
 8002550:	080027b7 	.word	0x080027b7
 8002554:	080025a5 	.word	0x080025a5
 8002558:	080027b7 	.word	0x080027b7
 800255c:	080027b7 	.word	0x080027b7
 8002560:	080027b7 	.word	0x080027b7
 8002564:	080027b7 	.word	0x080027b7
 8002568:	080027b7 	.word	0x080027b7
 800256c:	080027b7 	.word	0x080027b7
 8002570:	080027b7 	.word	0x080027b7
 8002574:	080025ab 	.word	0x080025ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002578:	4b94      	ldr	r3, [pc, #592]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002584:	4b91      	ldr	r3, [pc, #580]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	4a90      	ldr	r2, [pc, #576]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002596:	e111      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002598:	4b8d      	ldr	r3, [pc, #564]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800259a:	61bb      	str	r3, [r7, #24]
      break;
 800259c:	e10e      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800259e:	4b8d      	ldr	r3, [pc, #564]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025a0:	61bb      	str	r3, [r7, #24]
      break;
 80025a2:	e10b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025a4:	4b8c      	ldr	r3, [pc, #560]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025a6:	61bb      	str	r3, [r7, #24]
      break;
 80025a8:	e108      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025aa:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80025b4:	4b85      	ldr	r3, [pc, #532]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025c0:	4b82      	ldr	r3, [pc, #520]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025ca:	4b80      	ldr	r3, [pc, #512]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80e1 	beq.w	80027b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f000 8083 	beq.w	80026fc <HAL_RCC_GetSysClockFreq+0x204>
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f200 80a1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x248>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x114>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d056      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800260a:	e099      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800260c:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02d      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002618:	4b6c      	ldr	r3, [pc, #432]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	4a6b      	ldr	r2, [pc, #428]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002642:	4b62      	ldr	r3, [pc, #392]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002652:	ed97 6a02 	vldr	s12, [r7, #8]
 8002656:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800265a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002672:	e087      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80027e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002686:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002696:	ed97 6a02 	vldr	s12, [r7, #8]
 800269a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800269e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026b6:	e065      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80027e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ca:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026da:	ed97 6a02 	vldr	s12, [r7, #8]
 80026de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026fa:	e043      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002706:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80027e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b2f      	ldr	r3, [pc, #188]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800273e:	e021      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80027e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002762:	ed97 6a02 	vldr	s12, [r7, #8]
 8002766:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800276a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002782:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	0a5b      	lsrs	r3, r3, #9
 800278a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278e:	3301      	adds	r3, #1
 8002790:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800279c:	edd7 6a07 	vldr	s13, [r7, #28]
 80027a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a8:	ee17 3a90 	vmov	r3, s15
 80027ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027ae:	e005      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
      break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027b8:	61bb      	str	r3, [r7, #24]
      break;
 80027ba:	bf00      	nop
  }

  return sysclockfreq;
 80027bc:	69bb      	ldr	r3, [r7, #24]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58024400 	.word	0x58024400
 80027d0:	03d09000 	.word	0x03d09000
 80027d4:	003d0900 	.word	0x003d0900
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	46000000 	.word	0x46000000
 80027e0:	4c742400 	.word	0x4c742400
 80027e4:	4a742400 	.word	0x4a742400
 80027e8:	4af42400 	.word	0x4af42400

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80027f2:	f7ff fe81 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_RCC_GetHCLKFreq+0x50>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490f      	ldr	r1, [pc, #60]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x54>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <HAL_RCC_GetHCLKFreq+0x50>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x54>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_RCC_GetHCLKFreq+0x58>)
 8002828:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800282a:	4a07      	ldr	r2, [pc, #28]	@ (8002848 <HAL_RCC_GetHCLKFreq+0x5c>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <HAL_RCC_GetHCLKFreq+0x58>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	58024400 	.word	0x58024400
 8002840:	08005d34 	.word	0x08005d34
 8002844:	24000004 	.word	0x24000004
 8002848:	24000000 	.word	0x24000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002850:	f7ff ffcc 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4904      	ldr	r1, [pc, #16]	@ (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	58024400 	.word	0x58024400
 8002874:	08005d34 	.word	0x08005d34

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800287c:	f7ff ffb6 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	58024400 	.word	0x58024400
 80028a0:	08005d34 	.word	0x08005d34

080028a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0ca      	sub	sp, #296	@ 0x128
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b0:	2300      	movs	r3, #0
 80028b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80028c8:	2500      	movs	r5, #0
 80028ca:	ea54 0305 	orrs.w	r3, r4, r5
 80028ce:	d049      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80028da:	d02f      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80028dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80028e0:	d828      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028e6:	d01a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80028e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028ec:	d822      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028f6:	d007      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028f8:	e01c      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fa:	4bb8      	ldr	r3, [pc, #736]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	4ab7      	ldr	r2, [pc, #732]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002906:	e01a      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800290c:	3308      	adds	r3, #8
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fc8f 	bl	8004234 <RCCEx_PLL2_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800291c:	e00f      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002922:	3328      	adds	r3, #40	@ 0x28
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fd36 	bl	8004398 <RCCEx_PLL3_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002932:	e004      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800293a:	e000      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800293c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002946:	4ba5      	ldr	r3, [pc, #660]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002954:	4aa1      	ldr	r2, [pc, #644]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002956:	430b      	orrs	r3, r1
 8002958:	6513      	str	r3, [r2, #80]	@ 0x50
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002970:	f04f 0900 	mov.w	r9, #0
 8002974:	ea58 0309 	orrs.w	r3, r8, r9
 8002978:	d047      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800297a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	2b04      	cmp	r3, #4
 8002982:	d82a      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002984:	a201      	add	r2, pc, #4	@ (adr r2, 800298c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	080029a1 	.word	0x080029a1
 8002990:	080029af 	.word	0x080029af
 8002994:	080029c5 	.word	0x080029c5
 8002998:	080029e3 	.word	0x080029e3
 800299c:	080029e3 	.word	0x080029e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a0:	4b8e      	ldr	r3, [pc, #568]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	4a8d      	ldr	r2, [pc, #564]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ac:	e01a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b2:	3308      	adds	r3, #8
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fc3c 	bl	8004234 <RCCEx_PLL2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029c2:	e00f      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c8:	3328      	adds	r3, #40	@ 0x28
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fce3 	bl	8004398 <RCCEx_PLL3_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029d8:	e004      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80029e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ec:	4b7b      	ldr	r3, [pc, #492]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f0:	f023 0107 	bic.w	r1, r3, #7
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	4a78      	ldr	r2, [pc, #480]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a00:	e003      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002a16:	f04f 0b00 	mov.w	fp, #0
 8002a1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a1e:	d04c      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2a:	d030      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a30:	d829      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a34:	d02d      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a38:	d825      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a3a:	2b80      	cmp	r3, #128	@ 0x80
 8002a3c:	d018      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a3e:	2b80      	cmp	r3, #128	@ 0x80
 8002a40:	d821      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d007      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002a4a:	e01c      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4c:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	4a62      	ldr	r2, [pc, #392]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a58:	e01c      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5e:	3308      	adds	r3, #8
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fbe6 	bl	8004234 <RCCEx_PLL2_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a6e:	e011      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a74:	3328      	adds	r3, #40	@ 0x28
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 fc8d 	bl	8004398 <RCCEx_PLL3_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a84:	e006      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a8c:	e002      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ab0:	e003      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002ac6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002ad0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	d053      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ae6:	d035      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ae8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002aec:	d82e      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002af2:	d031      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002af4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002af8:	d828      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002afe:	d01a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b04:	d822      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b10:	e01c      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b12:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b24:	3308      	adds	r3, #8
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fb83 	bl	8004234 <RCCEx_PLL2_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b34:	e011      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3a:	3328      	adds	r3, #40	@ 0x28
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fc2a 	bl	8004398 <RCCEx_PLL3_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b4a:	e006      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b72:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b78:	e003      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	d056      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002baa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bae:	d038      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bb4:	d831      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bba:	d034      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002bbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bc0:	d82b      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bc6:	d01d      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bcc:	d825      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002bd8:	e01f      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bda:	bf00      	nop
 8002bdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be0:	4ba2      	ldr	r3, [pc, #648]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	4aa1      	ldr	r2, [pc, #644]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bec:	e01c      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fb1c 	bl	8004234 <RCCEx_PLL2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c02:	e011      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c08:	3328      	adds	r3, #40	@ 0x28
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 fbc3 	bl	8004398 <RCCEx_PLL3_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c20:	e002      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c30:	4b8e      	ldr	r3, [pc, #568]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c40:	4a8a      	ldr	r2, [pc, #552]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c42:	430b      	orrs	r3, r1
 8002c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c46:	e003      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002c66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	d03a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	2b30      	cmp	r3, #48	@ 0x30
 8002c78:	d01f      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c7a:	2b30      	cmp	r3, #48	@ 0x30
 8002c7c:	d819      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d815      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d111      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8e:	4b77      	ldr	r3, [pc, #476]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	4a76      	ldr	r2, [pc, #472]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 fac5 	bl	8004234 <RCCEx_PLL2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cc8:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ccc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	4a65      	ldr	r2, [pc, #404]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cdc:	e003      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4313      	orrs	r3, r2
 8002d04:	d051      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d10:	d035      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d16:	d82e      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d1c:	d031      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d22:	d828      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d28:	d01a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2e:	d822      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d38:	d007      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	4a4a      	ldr	r2, [pc, #296]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d48:	e01c      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4e:	3308      	adds	r3, #8
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fa6e 	bl	8004234 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d5e:	e011      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d64:	3328      	adds	r3, #40	@ 0x28
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fb15 	bl	8004398 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d8c:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9a:	4a34      	ldr	r2, [pc, #208]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002dc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d056      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d033      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002dd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dda:	d82c      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002de0:	d02f      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002de6:	d826      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002de8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dec:	d02b      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002dee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002df2:	d820      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002df8:	d012      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dfe:	d81a      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d022      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d115      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0e:	3308      	adds	r3, #8
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fa0e 	bl	8004234 <RCCEx_PLL2_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e1e:	e015      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	3328      	adds	r3, #40	@ 0x28
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fab5 	bl	8004398 <RCCEx_PLL3_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e3c:	e006      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e3e:	bf00      	nop
 8002e40:	e004      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e62:	4a02      	ldr	r2, [pc, #8]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e6a:	bf00      	nop
 8002e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d055      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ea4:	d033      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eaa:	d82c      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb0:	d02f      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb6:	d826      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ebc:	d02b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ec2:	d820      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ec8:	d012      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ece:	d81a      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ede:	3308      	adds	r3, #8
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f9a6 	bl	8004234 <RCCEx_PLL2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002eee:	e015      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	3328      	adds	r3, #40	@ 0x28
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fa4d 	bl	8004398 <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f04:	e00a      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f0e:	bf00      	nop
 8002f10:	e004      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f24:	4ba3      	ldr	r3, [pc, #652]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f34:	4a9f      	ldr	r2, [pc, #636]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3a:	e003      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4313      	orrs	r3, r2
 8002f62:	d037      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f6e:	d00e      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f74:	d816      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f80:	4b8c      	ldr	r3, [pc, #560]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	4a8b      	ldr	r2, [pc, #556]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f8c:	e00f      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f92:	3308      	adds	r3, #8
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f94c 	bl	8004234 <RCCEx_PLL2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fa2:	e004      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a7b      	ldr	r2, [pc, #492]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fca:	e003      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002fea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	d039      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d81c      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003041 	.word	0x08003041
 8003008:	08003015 	.word	0x08003015
 800300c:	08003023 	.word	0x08003023
 8003010:	08003041 	.word	0x08003041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003014:	4b67      	ldr	r3, [pc, #412]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	4a66      	ldr	r2, [pc, #408]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800301a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003020:	e00f      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003026:	3308      	adds	r3, #8
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f902 	bl	8004234 <RCCEx_PLL2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003036:	e004      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800303e:	e000      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800304a:	4b5a      	ldr	r3, [pc, #360]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	f023 0103 	bic.w	r1, r3, #3
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003058:	4a56      	ldr	r2, [pc, #344]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305a:	430b      	orrs	r3, r1
 800305c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800305e:	e003      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800307e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003082:	460b      	mov	r3, r1
 8003084:	4313      	orrs	r3, r2
 8003086:	f000 809f 	beq.w	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308a:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4a      	ldr	r2, [pc, #296]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003096:	f7fd ff8f 	bl	8000fb8 <HAL_GetTick>
 800309a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800309e:	e00b      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd ff8a 	bl	8000fb8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	@ 0x64
 80030ae:	d903      	bls.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030b6:	e005      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ed      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80030c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d179      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030cc:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030d8:	4053      	eors	r3, r2
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d015      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e2:	4b34      	ldr	r3, [pc, #208]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	4b2e      	ldr	r3, [pc, #184]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fe:	4a2d      	ldr	r2, [pc, #180]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003104:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003106:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311a:	d118      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fd ff4c 	bl	8000fb8 <HAL_GetTick>
 8003120:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003124:	e00d      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd ff47 	bl	8000fb8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003136:	429a      	cmp	r2, r3
 8003138:	d903      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0eb      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003152:	2b00      	cmp	r3, #0
 8003154:	d129      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800315e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003166:	d10e      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003178:	091a      	lsrs	r2, r3, #4
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800317c:	4013      	ands	r3, r2
 800317e:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	430b      	orrs	r3, r1
 8003182:	6113      	str	r3, [r2, #16]
 8003184:	e005      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003190:	6113      	str	r3, [r2, #16]
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003194:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a8:	e00e      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80031b2:	e009      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80031b4:	58024400 	.word	0x58024400
 80031b8:	58024800 	.word	0x58024800
 80031bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f002 0301 	and.w	r3, r2, #1
 80031d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f000 8089 	beq.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80031ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f0:	2b28      	cmp	r3, #40	@ 0x28
 80031f2:	d86b      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	080032d5 	.word	0x080032d5
 8003200:	080032cd 	.word	0x080032cd
 8003204:	080032cd 	.word	0x080032cd
 8003208:	080032cd 	.word	0x080032cd
 800320c:	080032cd 	.word	0x080032cd
 8003210:	080032cd 	.word	0x080032cd
 8003214:	080032cd 	.word	0x080032cd
 8003218:	080032cd 	.word	0x080032cd
 800321c:	080032a1 	.word	0x080032a1
 8003220:	080032cd 	.word	0x080032cd
 8003224:	080032cd 	.word	0x080032cd
 8003228:	080032cd 	.word	0x080032cd
 800322c:	080032cd 	.word	0x080032cd
 8003230:	080032cd 	.word	0x080032cd
 8003234:	080032cd 	.word	0x080032cd
 8003238:	080032cd 	.word	0x080032cd
 800323c:	080032b7 	.word	0x080032b7
 8003240:	080032cd 	.word	0x080032cd
 8003244:	080032cd 	.word	0x080032cd
 8003248:	080032cd 	.word	0x080032cd
 800324c:	080032cd 	.word	0x080032cd
 8003250:	080032cd 	.word	0x080032cd
 8003254:	080032cd 	.word	0x080032cd
 8003258:	080032cd 	.word	0x080032cd
 800325c:	080032d5 	.word	0x080032d5
 8003260:	080032cd 	.word	0x080032cd
 8003264:	080032cd 	.word	0x080032cd
 8003268:	080032cd 	.word	0x080032cd
 800326c:	080032cd 	.word	0x080032cd
 8003270:	080032cd 	.word	0x080032cd
 8003274:	080032cd 	.word	0x080032cd
 8003278:	080032cd 	.word	0x080032cd
 800327c:	080032d5 	.word	0x080032d5
 8003280:	080032cd 	.word	0x080032cd
 8003284:	080032cd 	.word	0x080032cd
 8003288:	080032cd 	.word	0x080032cd
 800328c:	080032cd 	.word	0x080032cd
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032d5 	.word	0x080032d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a4:	3308      	adds	r3, #8
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 ffc3 	bl	8004234 <RCCEx_PLL2_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032b4:	e00f      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	3328      	adds	r3, #40	@ 0x28
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f86a 	bl	8004398 <RCCEx_PLL3_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032ca:	e004      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80032d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032de:	4bbf      	ldr	r3, [pc, #764]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ec:	4abb      	ldr	r2, [pc, #748]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80032f2:	e003      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f002 0302 	and.w	r3, r2, #2
 8003308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003312:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	d041      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003322:	2b05      	cmp	r3, #5
 8003324:	d824      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003379 	.word	0x08003379
 8003330:	08003345 	.word	0x08003345
 8003334:	0800335b 	.word	0x0800335b
 8003338:	08003379 	.word	0x08003379
 800333c:	08003379 	.word	0x08003379
 8003340:	08003379 	.word	0x08003379
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f000 ff71 	bl	8004234 <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003358:	e00f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3328      	adds	r3, #40	@ 0x28
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f818 	bl	8004398 <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003382:	4b96      	ldr	r3, [pc, #600]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	f023 0107 	bic.w	r1, r3, #7
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003390:	4a92      	ldr	r2, [pc, #584]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6553      	str	r3, [r2, #84]	@ 0x54
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 0304 	and.w	r3, r2, #4
 80033ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4313      	orrs	r3, r2
 80033be:	d044      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d825      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	08003421 	.word	0x08003421
 80033d8:	080033ed 	.word	0x080033ed
 80033dc:	08003403 	.word	0x08003403
 80033e0:	08003421 	.word	0x08003421
 80033e4:	08003421 	.word	0x08003421
 80033e8:	08003421 	.word	0x08003421
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	3308      	adds	r3, #8
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff1d 	bl	8004234 <RCCEx_PLL2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003400:	e00f      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	3328      	adds	r3, #40	@ 0x28
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f000 ffc4 	bl	8004398 <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800342a:	4b6c      	ldr	r3, [pc, #432]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f023 0107 	bic.w	r1, r3, #7
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343a:	4a68      	ldr	r2, [pc, #416]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f002 0320 	and.w	r3, r2, #32
 8003456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d055      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003476:	d033      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800347c:	d82c      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003482:	d02f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003488:	d826      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800348a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003490:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003494:	d820      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800349a:	d012      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034a0:	d81a      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d022      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034aa:	d115      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 febd 	bl	8004234 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034c0:	e015      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	3328      	adds	r3, #40	@ 0x28
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 ff64 	bl	8004398 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034de:	e006      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034e0:	bf00      	nop
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f6:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	4a35      	ldr	r2, [pc, #212]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6553      	str	r3, [r2, #84]	@ 0x54
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800352c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d058      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800353e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003542:	d033      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003544:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003548:	d82c      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354e:	d02f      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d826      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800355a:	d02b      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800355c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003560:	d820      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003566:	d012      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356c:	d81a      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d022      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003576:	d115      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	3308      	adds	r3, #8
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fe57 	bl	8004234 <RCCEx_PLL2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800358c:	e015      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3328      	adds	r3, #40	@ 0x28
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fefe 	bl	8004398 <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035a2:	e00a      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035aa:	e006      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035ac:	bf00      	nop
 80035ae:	e004      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035b0:	bf00      	nop
 80035b2:	e002      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035d2:	4a02      	ldr	r2, [pc, #8]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80035f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d055      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003610:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003614:	d033      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003616:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800361a:	d82c      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003620:	d02f      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003626:	d826      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003628:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800362c:	d02b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800362e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003632:	d820      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003638:	d012      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800363a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363e:	d81a      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d022      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003648:	d115      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	3308      	adds	r3, #8
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fdee 	bl	8004234 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800365e:	e015      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3328      	adds	r3, #40	@ 0x28
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fe95 	bl	8004398 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003674:	e00a      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800367e:	bf00      	nop
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003694:	4ba1      	ldr	r3, [pc, #644]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036a4:	4a9d      	ldr	r2, [pc, #628]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036aa:	e003      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f002 0308 	and.w	r3, r2, #8
 80036c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d01e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fe54 	bl	8004398 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036fc:	4b87      	ldr	r3, [pc, #540]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800370c:	4a83      	ldr	r2, [pc, #524]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370e:	430b      	orrs	r3, r1
 8003710:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f002 0310 	and.w	r3, r2, #16
 800371e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003728:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d01e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373e:	d10c      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3328      	adds	r3, #40	@ 0x28
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fe25 	bl	8004398 <RCCEx_PLL3_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800375a:	4b70      	ldr	r3, [pc, #448]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800376a:	4a6c      	ldr	r2, [pc, #432]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800377c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003786:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d03e      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800379c:	d022      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800379e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037a2:	d81b      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ac:	d00b      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80037ae:	e015      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3308      	adds	r3, #8
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd3b 	bl	8004234 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037c4:	e00f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	3328      	adds	r3, #40	@ 0x28
 80037cc:	2102      	movs	r1, #2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fde2 	bl	8004398 <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037da:	e004      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ee:	4b4b      	ldr	r3, [pc, #300]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037fe:	4a47      	ldr	r2, [pc, #284]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800381a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800381c:	2300      	movs	r3, #0
 800381e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003820:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003824:	460b      	mov	r3, r1
 8003826:	4313      	orrs	r3, r2
 8003828:	d03b      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003836:	d01f      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003838:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800383c:	d818      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800383e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003848:	d007      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800384a:	e011      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4b33      	ldr	r3, [pc, #204]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	4a32      	ldr	r2, [pc, #200]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003858:	e00f      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	3328      	adds	r3, #40	@ 0x28
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fd98 	bl	8004398 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800386e:	e004      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003882:	4b26      	ldr	r3, [pc, #152]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	4a22      	ldr	r2, [pc, #136]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6553      	str	r3, [r2, #84]	@ 0x54
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80038ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80038b0:	2300      	movs	r3, #0
 80038b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80038b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d034      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d007      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80038ce:	e011      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4a11      	ldr	r2, [pc, #68]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038dc:	e00e      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	3308      	adds	r3, #8
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fca4 	bl	8004234 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10d      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	4a02      	ldr	r2, [pc, #8]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003914:	430b      	orrs	r3, r1
 8003916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800391a:	bf00      	nop
 800391c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003936:	2300      	movs	r3, #0
 8003938:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800393a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	d00c      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	3328      	adds	r3, #40	@ 0x28
 800394a:	2102      	movs	r1, #2
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fd23 	bl	8004398 <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800396a:	663b      	str	r3, [r7, #96]	@ 0x60
 800396c:	2300      	movs	r3, #0
 800396e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003970:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d038      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003986:	d018      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003988:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800398c:	d811      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800398e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003992:	d014      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003998:	d80b      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800399e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a2:	d106      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4bc3      	ldr	r3, [pc, #780]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	4ac2      	ldr	r2, [pc, #776]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039b0:	e008      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b8:	e004      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039ba:	bf00      	nop
 80039bc:	e002      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039cc:	4bb9      	ldr	r3, [pc, #740]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039dc:	4ab5      	ldr	r2, [pc, #724]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80039f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039fa:	2300      	movs	r3, #0
 80039fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a08:	4baa      	ldr	r3, [pc, #680]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a16:	4aa7      	ldr	r2, [pc, #668]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a38:	4b9e      	ldr	r3, [pc, #632]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a48:	4a9a      	ldr	r2, [pc, #616]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a64:	460b      	mov	r3, r1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a6a:	4b92      	ldr	r3, [pc, #584]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a78:	4a8e      	ldr	r2, [pc, #568]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a9a:	4b86      	ldr	r3, [pc, #536]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4a85      	ldr	r2, [pc, #532]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003aa4:	6113      	str	r3, [r2, #16]
 8003aa6:	4b83      	ldr	r3, [pc, #524]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa8:	6919      	ldr	r1, [r3, #16]
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ab2:	4a80      	ldr	r2, [pc, #512]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ad4:	4b77      	ldr	r3, [pc, #476]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	4a74      	ldr	r2, [pc, #464]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003afa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003afe:	460b      	mov	r3, r1
 8003b00:	4313      	orrs	r3, r2
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b04:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b14:	4a67      	ldr	r2, [pc, #412]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b16:	430b      	orrs	r3, r1
 8003b18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	2100      	movs	r1, #0
 8003b24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b30:	460b      	mov	r3, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	d011      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb78 	bl	8004234 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	2100      	movs	r1, #0
 8003b64:	6239      	str	r1, [r7, #32]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d011      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fb58 	bl	8004234 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	61b9      	str	r1, [r7, #24]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d011      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fb38 	bl	8004234 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	2100      	movs	r1, #0
 8003be4:	6139      	str	r1, [r7, #16]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d011      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	3328      	adds	r3, #40	@ 0x28
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fbca 	bl	8004398 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	2100      	movs	r1, #0
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d011      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	3328      	adds	r3, #40	@ 0x28
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fbaa 	bl	8004398 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	2100      	movs	r1, #0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d011      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3328      	adds	r3, #40	@ 0x28
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fb8a 	bl	8004398 <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb4:	58024400 	.word	0x58024400

08003cb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003cbc:	f7fe fd96 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4904      	ldr	r1, [pc, #16]	@ (8003ce0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	08005d34 	.word	0x08005d34

08003ce4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	@ 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cec:	4ba1      	ldr	r3, [pc, #644]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003cf6:	4b9f      	ldr	r3, [pc, #636]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d02:	4b9c      	ldr	r3, [pc, #624]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d0e:	4b99      	ldr	r3, [pc, #612]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	08db      	lsrs	r3, r3, #3
 8003d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8111 	beq.w	8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f000 8083 	beq.w	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f200 80a1 	bhi.w	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d056      	beq.n	8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d4e:	e099      	b.n	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d50:	4b88      	ldr	r3, [pc, #544]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02d      	beq.n	8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d5c:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	08db      	lsrs	r3, r3, #3
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	4a84      	ldr	r2, [pc, #528]	@ (8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003db6:	e087      	b.n	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b6a      	ldr	r3, [pc, #424]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfa:	e065      	b.n	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b59      	ldr	r3, [pc, #356]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e3e:	e043      	b.n	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e82:	e021      	b.n	8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b37      	ldr	r3, [pc, #220]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eee:	ee17 2a90 	vmov	r2, s15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1c:	ee17 2a90 	vmov	r2, s15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003f24:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	0e1b      	lsrs	r3, r3, #24
 8003f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f4a:	ee17 2a90 	vmov	r2, s15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f52:	e008      	b.n	8003f66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	bf00      	nop
 8003f68:	3724      	adds	r7, #36	@ 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
 8003f78:	03d09000 	.word	0x03d09000
 8003f7c:	46000000 	.word	0x46000000
 8003f80:	4c742400 	.word	0x4c742400
 8003f84:	4a742400 	.word	0x4a742400
 8003f88:	4af42400 	.word	0x4af42400

08003f8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	@ 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f94:	4ba1      	ldr	r3, [pc, #644]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f9e:	4b9f      	ldr	r3, [pc, #636]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	0d1b      	lsrs	r3, r3, #20
 8003fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fa8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003faa:	4b9c      	ldr	r3, [pc, #624]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003fb6:	4b99      	ldr	r3, [pc, #612]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	08db      	lsrs	r3, r3, #3
 8003fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8111 	beq.w	80041fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	f000 8083 	beq.w	80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f200 80a1 	bhi.w	800412c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d056      	beq.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ff6:	e099      	b.n	800412c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ff8:	4b88      	ldr	r3, [pc, #544]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02d      	beq.n	8004060 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004004:	4b85      	ldr	r3, [pc, #532]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	4a84      	ldr	r2, [pc, #528]	@ (8004220 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	4b7b      	ldr	r3, [pc, #492]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004042:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800405e:	e087      	b.n	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004228 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004072:	4b6a      	ldr	r3, [pc, #424]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004082:	ed97 6a03 	vldr	s12, [r7, #12]
 8004086:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a2:	e065      	b.n	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800422c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b6:	4b59      	ldr	r3, [pc, #356]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e6:	e043      	b.n	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80040f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fa:	4b48      	ldr	r3, [pc, #288]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410a:	ed97 6a03 	vldr	s12, [r7, #12]
 800410e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800412a:	e021      	b.n	8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800422c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800413a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413e:	4b37      	ldr	r3, [pc, #220]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004152:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004170:	4b2a      	ldr	r3, [pc, #168]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	0a5b      	lsrs	r3, r3, #9
 8004176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800418a:	edd7 6a07 	vldr	s13, [r7, #28]
 800418e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004196:	ee17 2a90 	vmov	r2, s15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800419e:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c4:	ee17 2a90 	vmov	r2, s15
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041cc:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f2:	ee17 2a90 	vmov	r2, s15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041fa:	e008      	b.n	800420e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	03d09000 	.word	0x03d09000
 8004224:	46000000 	.word	0x46000000
 8004228:	4c742400 	.word	0x4c742400
 800422c:	4a742400 	.word	0x4a742400
 8004230:	4af42400 	.word	0x4af42400

08004234 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004242:	4b53      	ldr	r3, [pc, #332]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b03      	cmp	r3, #3
 800424c:	d101      	bne.n	8004252 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e099      	b.n	8004386 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004252:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a4e      	ldr	r2, [pc, #312]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004258:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800425c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425e:	f7fc feab 	bl	8000fb8 <HAL_GetTick>
 8004262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004264:	e008      	b.n	8004278 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004266:	f7fc fea7 	bl	8000fb8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e086      	b.n	8004386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004278:	4b45      	ldr	r3, [pc, #276]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004284:	4b42      	ldr	r3, [pc, #264]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	493f      	ldr	r1, [pc, #252]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	628b      	str	r3, [r1, #40]	@ 0x28
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	3b01      	subs	r3, #1
 800429e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	025b      	lsls	r3, r3, #9
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	061b      	lsls	r3, r3, #24
 80042c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042c8:	4931      	ldr	r1, [pc, #196]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042ce:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	492d      	ldr	r1, [pc, #180]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f023 0220 	bic.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	4928      	ldr	r1, [pc, #160]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042f2:	4b27      	ldr	r3, [pc, #156]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	4a26      	ldr	r2, [pc, #152]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004302:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <RCCEx_PLL2_Config+0x160>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	69d2      	ldr	r2, [r2, #28]
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	4920      	ldr	r1, [pc, #128]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004312:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a1e      	ldr	r2, [pc, #120]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004318:	f043 0310 	orr.w	r3, r3, #16
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004324:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	4a19      	ldr	r2, [pc, #100]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800432a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800432e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004330:	e00f      	b.n	8004352 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004338:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004344:	e005      	b.n	8004352 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004346:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4a11      	ldr	r2, [pc, #68]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800434c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004352:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a0e      	ldr	r2, [pc, #56]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 8004358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800435c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435e:	f7fc fe2b 	bl	8000fb8 <HAL_GetTick>
 8004362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004364:	e008      	b.n	8004378 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004366:	f7fc fe27 	bl	8000fb8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <RCCEx_PLL2_Config+0x15c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
 8004394:	ffff0007 	.word	0xffff0007

08004398 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043a6:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d101      	bne.n	80043b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e099      	b.n	80044ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043b6:	4b4f      	ldr	r3, [pc, #316]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4e      	ldr	r2, [pc, #312]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c2:	f7fc fdf9 	bl	8000fb8 <HAL_GetTick>
 80043c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043c8:	e008      	b.n	80043dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043ca:	f7fc fdf5 	bl	8000fb8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e086      	b.n	80044ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043dc:	4b45      	ldr	r3, [pc, #276]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043e8:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	051b      	lsls	r3, r3, #20
 80043f6:	493f      	ldr	r1, [pc, #252]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	3b01      	subs	r3, #1
 8004402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	3b01      	subs	r3, #1
 800440c:	025b      	lsls	r3, r3, #9
 800440e:	b29b      	uxth	r3, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	3b01      	subs	r3, #1
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800442c:	4931      	ldr	r1, [pc, #196]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004432:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	492d      	ldr	r1, [pc, #180]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004444:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4928      	ldr	r1, [pc, #160]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004456:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800445c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004466:	4b24      	ldr	r3, [pc, #144]	@ (80044f8 <RCCEx_PLL3_Config+0x160>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	69d2      	ldr	r2, [r2, #28]
 800446e:	00d2      	lsls	r2, r2, #3
 8004470:	4920      	ldr	r1, [pc, #128]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004476:	4b1f      	ldr	r3, [pc, #124]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004488:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800448e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004494:	e00f      	b.n	80044b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044a8:	e005      	b.n	80044b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044aa:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	4a11      	ldr	r2, [pc, #68]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c2:	f7fc fd79 	bl	8000fb8 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044c8:	e008      	b.n	80044dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044ca:	f7fc fd75 	bl	8000fb8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e006      	b.n	80044ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <RCCEx_PLL3_Config+0x15c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	ffff0007 	.word	0xffff0007

080044fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e042      	b.n	8004594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fc fb79 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2224      	movs	r2, #36	@ 0x24
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fd90 	bl	800506c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f825 	bl	800459c <UART_SetConfig>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e01b      	b.n	8004594 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800456a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800457a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fe0f 	bl	80051b0 <UART_CheckIdleState>
 8004592:	4603      	mov	r3, r0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b092      	sub	sp, #72	@ 0x48
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4bbe      	ldr	r3, [pc, #760]	@ (80048c4 <UART_SetConfig+0x328>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4ab3      	ldr	r2, [pc, #716]	@ (80048c8 <UART_SetConfig+0x32c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004604:	4313      	orrs	r3, r2
 8004606:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4baf      	ldr	r3, [pc, #700]	@ (80048cc <UART_SetConfig+0x330>)
 8004610:	4013      	ands	r3, r2
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004618:	430b      	orrs	r3, r1
 800461a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	f023 010f 	bic.w	r1, r3, #15
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4aa6      	ldr	r2, [pc, #664]	@ (80048d0 <UART_SetConfig+0x334>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d177      	bne.n	800472c <UART_SetConfig+0x190>
 800463c:	4ba5      	ldr	r3, [pc, #660]	@ (80048d4 <UART_SetConfig+0x338>)
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004644:	2b28      	cmp	r3, #40	@ 0x28
 8004646:	d86d      	bhi.n	8004724 <UART_SetConfig+0x188>
 8004648:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <UART_SetConfig+0xb4>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	080046f5 	.word	0x080046f5
 8004654:	08004725 	.word	0x08004725
 8004658:	08004725 	.word	0x08004725
 800465c:	08004725 	.word	0x08004725
 8004660:	08004725 	.word	0x08004725
 8004664:	08004725 	.word	0x08004725
 8004668:	08004725 	.word	0x08004725
 800466c:	08004725 	.word	0x08004725
 8004670:	080046fd 	.word	0x080046fd
 8004674:	08004725 	.word	0x08004725
 8004678:	08004725 	.word	0x08004725
 800467c:	08004725 	.word	0x08004725
 8004680:	08004725 	.word	0x08004725
 8004684:	08004725 	.word	0x08004725
 8004688:	08004725 	.word	0x08004725
 800468c:	08004725 	.word	0x08004725
 8004690:	08004705 	.word	0x08004705
 8004694:	08004725 	.word	0x08004725
 8004698:	08004725 	.word	0x08004725
 800469c:	08004725 	.word	0x08004725
 80046a0:	08004725 	.word	0x08004725
 80046a4:	08004725 	.word	0x08004725
 80046a8:	08004725 	.word	0x08004725
 80046ac:	08004725 	.word	0x08004725
 80046b0:	0800470d 	.word	0x0800470d
 80046b4:	08004725 	.word	0x08004725
 80046b8:	08004725 	.word	0x08004725
 80046bc:	08004725 	.word	0x08004725
 80046c0:	08004725 	.word	0x08004725
 80046c4:	08004725 	.word	0x08004725
 80046c8:	08004725 	.word	0x08004725
 80046cc:	08004725 	.word	0x08004725
 80046d0:	08004715 	.word	0x08004715
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004725 	.word	0x08004725
 80046dc:	08004725 	.word	0x08004725
 80046e0:	08004725 	.word	0x08004725
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004725 	.word	0x08004725
 80046ec:	08004725 	.word	0x08004725
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e222      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e21e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470a:	e21a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004712:	e216      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004714:	2320      	movs	r3, #32
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471a:	e212      	b.n	8004b42 <UART_SetConfig+0x5a6>
 800471c:	2340      	movs	r3, #64	@ 0x40
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004722:	e20e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472a:	e20a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a69      	ldr	r2, [pc, #420]	@ (80048d8 <UART_SetConfig+0x33c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d130      	bne.n	8004798 <UART_SetConfig+0x1fc>
 8004736:	4b67      	ldr	r3, [pc, #412]	@ (80048d4 <UART_SetConfig+0x338>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b05      	cmp	r3, #5
 8004740:	d826      	bhi.n	8004790 <UART_SetConfig+0x1f4>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <UART_SetConfig+0x1ac>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004761 	.word	0x08004761
 800474c:	08004769 	.word	0x08004769
 8004750:	08004771 	.word	0x08004771
 8004754:	08004779 	.word	0x08004779
 8004758:	08004781 	.word	0x08004781
 800475c:	08004789 	.word	0x08004789
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e1ec      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e1e8      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004776:	e1e4      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477e:	e1e0      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004780:	2320      	movs	r3, #32
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004786:	e1dc      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004788:	2340      	movs	r3, #64	@ 0x40
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478e:	e1d8      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004790:	2380      	movs	r3, #128	@ 0x80
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004796:	e1d4      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a4f      	ldr	r2, [pc, #316]	@ (80048dc <UART_SetConfig+0x340>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d130      	bne.n	8004804 <UART_SetConfig+0x268>
 80047a2:	4b4c      	ldr	r3, [pc, #304]	@ (80048d4 <UART_SetConfig+0x338>)
 80047a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d826      	bhi.n	80047fc <UART_SetConfig+0x260>
 80047ae:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <UART_SetConfig+0x218>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047cd 	.word	0x080047cd
 80047b8:	080047d5 	.word	0x080047d5
 80047bc:	080047dd 	.word	0x080047dd
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047f5 	.word	0x080047f5
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e1b6      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047d4:	2304      	movs	r3, #4
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e1b2      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047dc:	2308      	movs	r3, #8
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e2:	e1ae      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047e4:	2310      	movs	r3, #16
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ea:	e1aa      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047ec:	2320      	movs	r3, #32
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f2:	e1a6      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047f4:	2340      	movs	r3, #64	@ 0x40
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e1a2      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80047fc:	2380      	movs	r3, #128	@ 0x80
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004802:	e19e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a35      	ldr	r2, [pc, #212]	@ (80048e0 <UART_SetConfig+0x344>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d130      	bne.n	8004870 <UART_SetConfig+0x2d4>
 800480e:	4b31      	ldr	r3, [pc, #196]	@ (80048d4 <UART_SetConfig+0x338>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b05      	cmp	r3, #5
 8004818:	d826      	bhi.n	8004868 <UART_SetConfig+0x2cc>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <UART_SetConfig+0x284>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004839 	.word	0x08004839
 8004824:	08004841 	.word	0x08004841
 8004828:	08004849 	.word	0x08004849
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e180      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e17c      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484e:	e178      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e174      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004858:	2320      	movs	r3, #32
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e170      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004860:	2340      	movs	r3, #64	@ 0x40
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e16c      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e168      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <UART_SetConfig+0x348>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d142      	bne.n	8004900 <UART_SetConfig+0x364>
 800487a:	4b16      	ldr	r3, [pc, #88]	@ (80048d4 <UART_SetConfig+0x338>)
 800487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b05      	cmp	r3, #5
 8004884:	d838      	bhi.n	80048f8 <UART_SetConfig+0x35c>
 8004886:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0x2f0>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048a5 	.word	0x080048a5
 8004890:	080048ad 	.word	0x080048ad
 8004894:	080048b5 	.word	0x080048b5
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048e9 	.word	0x080048e9
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048aa:	e14a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048ac:	2304      	movs	r3, #4
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e146      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048b4:	2308      	movs	r3, #8
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	e142      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e13e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048c4:	cfff69f3 	.word	0xcfff69f3
 80048c8:	58000c00 	.word	0x58000c00
 80048cc:	11fff4ff 	.word	0x11fff4ff
 80048d0:	40011000 	.word	0x40011000
 80048d4:	58024400 	.word	0x58024400
 80048d8:	40004400 	.word	0x40004400
 80048dc:	40004800 	.word	0x40004800
 80048e0:	40004c00 	.word	0x40004c00
 80048e4:	40005000 	.word	0x40005000
 80048e8:	2320      	movs	r3, #32
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ee:	e128      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048f0:	2340      	movs	r3, #64	@ 0x40
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f6:	e124      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80048f8:	2380      	movs	r3, #128	@ 0x80
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fe:	e120      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4acb      	ldr	r2, [pc, #812]	@ (8004c34 <UART_SetConfig+0x698>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d176      	bne.n	80049f8 <UART_SetConfig+0x45c>
 800490a:	4bcb      	ldr	r3, [pc, #812]	@ (8004c38 <UART_SetConfig+0x69c>)
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004912:	2b28      	cmp	r3, #40	@ 0x28
 8004914:	d86c      	bhi.n	80049f0 <UART_SetConfig+0x454>
 8004916:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x380>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	080049c1 	.word	0x080049c1
 8004920:	080049f1 	.word	0x080049f1
 8004924:	080049f1 	.word	0x080049f1
 8004928:	080049f1 	.word	0x080049f1
 800492c:	080049f1 	.word	0x080049f1
 8004930:	080049f1 	.word	0x080049f1
 8004934:	080049f1 	.word	0x080049f1
 8004938:	080049f1 	.word	0x080049f1
 800493c:	080049c9 	.word	0x080049c9
 8004940:	080049f1 	.word	0x080049f1
 8004944:	080049f1 	.word	0x080049f1
 8004948:	080049f1 	.word	0x080049f1
 800494c:	080049f1 	.word	0x080049f1
 8004950:	080049f1 	.word	0x080049f1
 8004954:	080049f1 	.word	0x080049f1
 8004958:	080049f1 	.word	0x080049f1
 800495c:	080049d1 	.word	0x080049d1
 8004960:	080049f1 	.word	0x080049f1
 8004964:	080049f1 	.word	0x080049f1
 8004968:	080049f1 	.word	0x080049f1
 800496c:	080049f1 	.word	0x080049f1
 8004970:	080049f1 	.word	0x080049f1
 8004974:	080049f1 	.word	0x080049f1
 8004978:	080049f1 	.word	0x080049f1
 800497c:	080049d9 	.word	0x080049d9
 8004980:	080049f1 	.word	0x080049f1
 8004984:	080049f1 	.word	0x080049f1
 8004988:	080049f1 	.word	0x080049f1
 800498c:	080049f1 	.word	0x080049f1
 8004990:	080049f1 	.word	0x080049f1
 8004994:	080049f1 	.word	0x080049f1
 8004998:	080049f1 	.word	0x080049f1
 800499c:	080049e1 	.word	0x080049e1
 80049a0:	080049f1 	.word	0x080049f1
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e0bc      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e0b8      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d6:	e0b4      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049de:	e0b0      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049e0:	2320      	movs	r3, #32
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e6:	e0ac      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ee:	e0a8      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f6:	e0a4      	b.n	8004b42 <UART_SetConfig+0x5a6>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a8f      	ldr	r2, [pc, #572]	@ (8004c3c <UART_SetConfig+0x6a0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d130      	bne.n	8004a64 <UART_SetConfig+0x4c8>
 8004a02:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <UART_SetConfig+0x69c>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d826      	bhi.n	8004a5c <UART_SetConfig+0x4c0>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0x478>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a2d 	.word	0x08004a2d
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a3d 	.word	0x08004a3d
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a32:	e086      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3a:	e082      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a42:	e07e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4a:	e07a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e076      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a54:	2340      	movs	r3, #64	@ 0x40
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e072      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a62:	e06e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a75      	ldr	r2, [pc, #468]	@ (8004c40 <UART_SetConfig+0x6a4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d130      	bne.n	8004ad0 <UART_SetConfig+0x534>
 8004a6e:	4b72      	ldr	r3, [pc, #456]	@ (8004c38 <UART_SetConfig+0x69c>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d826      	bhi.n	8004ac8 <UART_SetConfig+0x52c>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0x4e4>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9e:	e050      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa6:	e04c      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aae:	e048      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab6:	e044      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004abe:	e040      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004ac0:	2340      	movs	r3, #64	@ 0x40
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac6:	e03c      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ace:	e038      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c44 <UART_SetConfig+0x6a8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d130      	bne.n	8004b3c <UART_SetConfig+0x5a0>
 8004ada:	4b57      	ldr	r3, [pc, #348]	@ (8004c38 <UART_SetConfig+0x69c>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d826      	bhi.n	8004b34 <UART_SetConfig+0x598>
 8004ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <UART_SetConfig+0x550>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	2302      	movs	r3, #2
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e01a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b12:	e016      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e012      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e00e      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b24:	2320      	movs	r3, #32
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e00a      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b2c:	2340      	movs	r3, #64	@ 0x40
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e006      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e002      	b.n	8004b42 <UART_SetConfig+0x5a6>
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3f      	ldr	r2, [pc, #252]	@ (8004c44 <UART_SetConfig+0x6a8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f040 80f8 	bne.w	8004d3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	dc46      	bgt.n	8004be4 <UART_SetConfig+0x648>
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	f2c0 8082 	blt.w	8004c60 <UART_SetConfig+0x6c4>
 8004b5c:	3b02      	subs	r3, #2
 8004b5e:	2b1e      	cmp	r3, #30
 8004b60:	d87e      	bhi.n	8004c60 <UART_SetConfig+0x6c4>
 8004b62:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0x5cc>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004beb 	.word	0x08004beb
 8004b6c:	08004c61 	.word	0x08004c61
 8004b70:	08004bf3 	.word	0x08004bf3
 8004b74:	08004c61 	.word	0x08004c61
 8004b78:	08004c61 	.word	0x08004c61
 8004b7c:	08004c61 	.word	0x08004c61
 8004b80:	08004c03 	.word	0x08004c03
 8004b84:	08004c61 	.word	0x08004c61
 8004b88:	08004c61 	.word	0x08004c61
 8004b8c:	08004c61 	.word	0x08004c61
 8004b90:	08004c61 	.word	0x08004c61
 8004b94:	08004c61 	.word	0x08004c61
 8004b98:	08004c61 	.word	0x08004c61
 8004b9c:	08004c61 	.word	0x08004c61
 8004ba0:	08004c13 	.word	0x08004c13
 8004ba4:	08004c61 	.word	0x08004c61
 8004ba8:	08004c61 	.word	0x08004c61
 8004bac:	08004c61 	.word	0x08004c61
 8004bb0:	08004c61 	.word	0x08004c61
 8004bb4:	08004c61 	.word	0x08004c61
 8004bb8:	08004c61 	.word	0x08004c61
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c61 	.word	0x08004c61
 8004bc4:	08004c61 	.word	0x08004c61
 8004bc8:	08004c61 	.word	0x08004c61
 8004bcc:	08004c61 	.word	0x08004c61
 8004bd0:	08004c61 	.word	0x08004c61
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c53 	.word	0x08004c53
 8004be4:	2b40      	cmp	r3, #64	@ 0x40
 8004be6:	d037      	beq.n	8004c58 <UART_SetConfig+0x6bc>
 8004be8:	e03a      	b.n	8004c60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004bea:	f7ff f865 	bl	8003cb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bf0:	e03c      	b.n	8004c6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff f874 	bl	8003ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c00:	e034      	b.n	8004c6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c02:	f107 0318 	add.w	r3, r7, #24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff f9c0 	bl	8003f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c10:	e02c      	b.n	8004c6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <UART_SetConfig+0x69c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <UART_SetConfig+0x69c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	4a07      	ldr	r2, [pc, #28]	@ (8004c48 <UART_SetConfig+0x6ac>)
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c30:	e01c      	b.n	8004c6c <UART_SetConfig+0x6d0>
 8004c32:	bf00      	nop
 8004c34:	40011400 	.word	0x40011400
 8004c38:	58024400 	.word	0x58024400
 8004c3c:	40007800 	.word	0x40007800
 8004c40:	40007c00 	.word	0x40007c00
 8004c44:	58000c00 	.word	0x58000c00
 8004c48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ec4 <UART_SetConfig+0x928>)
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c52:	4b9d      	ldr	r3, [pc, #628]	@ (8004ec8 <UART_SetConfig+0x92c>)
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c56:	e009      	b.n	8004c6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c5e:	e005      	b.n	8004c6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 81de 	beq.w	8005030 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	4a94      	ldr	r2, [pc, #592]	@ (8004ecc <UART_SetConfig+0x930>)
 8004c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d305      	bcc.n	8004ca4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d903      	bls.n	8004cac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004caa:	e1c1      	b.n	8005030 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	60fa      	str	r2, [r7, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	4a84      	ldr	r2, [pc, #528]	@ (8004ecc <UART_SetConfig+0x930>)
 8004cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cce:	f7fb fb03 	bl	80002d8 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	020b      	lsls	r3, r1, #8
 8004ce4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ce8:	0202      	lsls	r2, r0, #8
 8004cea:	6979      	ldr	r1, [r7, #20]
 8004cec:	6849      	ldr	r1, [r1, #4]
 8004cee:	0849      	lsrs	r1, r1, #1
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	eb12 0804 	adds.w	r8, r2, r4
 8004cfa:	eb43 0905 	adc.w	r9, r3, r5
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	469a      	mov	sl, r3
 8004d06:	4693      	mov	fp, r2
 8004d08:	4652      	mov	r2, sl
 8004d0a:	465b      	mov	r3, fp
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb fae2 	bl	80002d8 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d22:	d308      	bcc.n	8004d36 <UART_SetConfig+0x79a>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2a:	d204      	bcs.n	8004d36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e17c      	b.n	8005030 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d3c:	e178      	b.n	8005030 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d46:	f040 80c5 	bne.w	8004ed4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004d4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	dc48      	bgt.n	8004de4 <UART_SetConfig+0x848>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db7b      	blt.n	8004e4e <UART_SetConfig+0x8b2>
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d879      	bhi.n	8004e4e <UART_SetConfig+0x8b2>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <UART_SetConfig+0x7c4>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004deb 	.word	0x08004deb
 8004d64:	08004df3 	.word	0x08004df3
 8004d68:	08004e4f 	.word	0x08004e4f
 8004d6c:	08004e4f 	.word	0x08004e4f
 8004d70:	08004dfb 	.word	0x08004dfb
 8004d74:	08004e4f 	.word	0x08004e4f
 8004d78:	08004e4f 	.word	0x08004e4f
 8004d7c:	08004e4f 	.word	0x08004e4f
 8004d80:	08004e0b 	.word	0x08004e0b
 8004d84:	08004e4f 	.word	0x08004e4f
 8004d88:	08004e4f 	.word	0x08004e4f
 8004d8c:	08004e4f 	.word	0x08004e4f
 8004d90:	08004e4f 	.word	0x08004e4f
 8004d94:	08004e4f 	.word	0x08004e4f
 8004d98:	08004e4f 	.word	0x08004e4f
 8004d9c:	08004e4f 	.word	0x08004e4f
 8004da0:	08004e1b 	.word	0x08004e1b
 8004da4:	08004e4f 	.word	0x08004e4f
 8004da8:	08004e4f 	.word	0x08004e4f
 8004dac:	08004e4f 	.word	0x08004e4f
 8004db0:	08004e4f 	.word	0x08004e4f
 8004db4:	08004e4f 	.word	0x08004e4f
 8004db8:	08004e4f 	.word	0x08004e4f
 8004dbc:	08004e4f 	.word	0x08004e4f
 8004dc0:	08004e4f 	.word	0x08004e4f
 8004dc4:	08004e4f 	.word	0x08004e4f
 8004dc8:	08004e4f 	.word	0x08004e4f
 8004dcc:	08004e4f 	.word	0x08004e4f
 8004dd0:	08004e4f 	.word	0x08004e4f
 8004dd4:	08004e4f 	.word	0x08004e4f
 8004dd8:	08004e4f 	.word	0x08004e4f
 8004ddc:	08004e4f 	.word	0x08004e4f
 8004de0:	08004e41 	.word	0x08004e41
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d02e      	beq.n	8004e46 <UART_SetConfig+0x8aa>
 8004de8:	e031      	b.n	8004e4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dea:	f7fd fd2f 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8004dee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004df0:	e033      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df2:	f7fd fd41 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8004df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004df8:	e02f      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe ff70 	bl	8003ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e08:	e027      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e0a:	f107 0318 	add.w	r3, r7, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff f8bc 	bl	8003f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e18:	e01f      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed0 <UART_SetConfig+0x934>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e26:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed0 <UART_SetConfig+0x934>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	4a24      	ldr	r2, [pc, #144]	@ (8004ec4 <UART_SetConfig+0x928>)
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e38:	e00f      	b.n	8004e5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <UART_SetConfig+0x928>)
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e3e:	e00c      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e40:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <UART_SetConfig+0x92c>)
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80e7 	beq.w	8005030 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	4a19      	ldr	r2, [pc, #100]	@ (8004ecc <UART_SetConfig+0x930>)
 8004e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d916      	bls.n	8004ebc <UART_SetConfig+0x920>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d212      	bcs.n	8004ebc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f023 030f 	bic.w	r3, r3, #15
 8004e9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e0b9      	b.n	8005030 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ec2:	e0b5      	b.n	8005030 <UART_SetConfig+0xa94>
 8004ec4:	03d09000 	.word	0x03d09000
 8004ec8:	003d0900 	.word	0x003d0900
 8004ecc:	08005d44 	.word	0x08005d44
 8004ed0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ed4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	dc49      	bgt.n	8004f70 <UART_SetConfig+0x9d4>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	db7c      	blt.n	8004fda <UART_SetConfig+0xa3e>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d87a      	bhi.n	8004fda <UART_SetConfig+0xa3e>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <UART_SetConfig+0x950>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f77 	.word	0x08004f77
 8004ef0:	08004f7f 	.word	0x08004f7f
 8004ef4:	08004fdb 	.word	0x08004fdb
 8004ef8:	08004fdb 	.word	0x08004fdb
 8004efc:	08004f87 	.word	0x08004f87
 8004f00:	08004fdb 	.word	0x08004fdb
 8004f04:	08004fdb 	.word	0x08004fdb
 8004f08:	08004fdb 	.word	0x08004fdb
 8004f0c:	08004f97 	.word	0x08004f97
 8004f10:	08004fdb 	.word	0x08004fdb
 8004f14:	08004fdb 	.word	0x08004fdb
 8004f18:	08004fdb 	.word	0x08004fdb
 8004f1c:	08004fdb 	.word	0x08004fdb
 8004f20:	08004fdb 	.word	0x08004fdb
 8004f24:	08004fdb 	.word	0x08004fdb
 8004f28:	08004fdb 	.word	0x08004fdb
 8004f2c:	08004fa7 	.word	0x08004fa7
 8004f30:	08004fdb 	.word	0x08004fdb
 8004f34:	08004fdb 	.word	0x08004fdb
 8004f38:	08004fdb 	.word	0x08004fdb
 8004f3c:	08004fdb 	.word	0x08004fdb
 8004f40:	08004fdb 	.word	0x08004fdb
 8004f44:	08004fdb 	.word	0x08004fdb
 8004f48:	08004fdb 	.word	0x08004fdb
 8004f4c:	08004fdb 	.word	0x08004fdb
 8004f50:	08004fdb 	.word	0x08004fdb
 8004f54:	08004fdb 	.word	0x08004fdb
 8004f58:	08004fdb 	.word	0x08004fdb
 8004f5c:	08004fdb 	.word	0x08004fdb
 8004f60:	08004fdb 	.word	0x08004fdb
 8004f64:	08004fdb 	.word	0x08004fdb
 8004f68:	08004fdb 	.word	0x08004fdb
 8004f6c:	08004fcd 	.word	0x08004fcd
 8004f70:	2b40      	cmp	r3, #64	@ 0x40
 8004f72:	d02e      	beq.n	8004fd2 <UART_SetConfig+0xa36>
 8004f74:	e031      	b.n	8004fda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f76:	f7fd fc69 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8004f7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f7c:	e033      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f7e:	f7fd fc7b 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8004f82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f84:	e02f      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe feaa 	bl	8003ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f94:	e027      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f96:	f107 0318 	add.w	r3, r7, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fff6 	bl	8003f8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa4:	e01f      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <UART_SetConfig+0xac0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800505c <UART_SetConfig+0xac0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	4a28      	ldr	r2, [pc, #160]	@ (8005060 <UART_SetConfig+0xac4>)
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fc4:	e00f      	b.n	8004fe6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004fc6:	4b26      	ldr	r3, [pc, #152]	@ (8005060 <UART_SetConfig+0xac4>)
 8004fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fca:	e00c      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fcc:	4b25      	ldr	r3, [pc, #148]	@ (8005064 <UART_SetConfig+0xac8>)
 8004fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd8:	e005      	b.n	8004fe6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d021      	beq.n	8005030 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <UART_SetConfig+0xacc>)
 8004ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	441a      	add	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	2b0f      	cmp	r3, #15
 8005014:	d909      	bls.n	800502a <UART_SetConfig+0xa8e>
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501c:	d205      	bcs.n	800502a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	b29a      	uxth	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60da      	str	r2, [r3, #12]
 8005028:	e002      	b.n	8005030 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2201      	movs	r2, #1
 8005034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2201      	movs	r2, #1
 800503c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800504c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005050:	4618      	mov	r0, r3
 8005052:	3748      	adds	r7, #72	@ 0x48
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
 8005060:	03d09000 	.word	0x03d09000
 8005064:	003d0900 	.word	0x003d0900
 8005068:	08005d44 	.word	0x08005d44

0800506c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d10a      	bne.n	8005182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b098      	sub	sp, #96	@ 0x60
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c0:	f7fb fefa 	bl	8000fb8 <HAL_GetTick>
 80051c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d12f      	bne.n	8005234 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f88e 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d022      	beq.n	8005234 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005202:	653b      	str	r3, [r7, #80]	@ 0x50
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
 800520e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e063      	b.n	80052fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d149      	bne.n	80052d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005242:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f857 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d03c      	beq.n	80052d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	623b      	str	r3, [r7, #32]
   return(result);
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527a:	633b      	str	r3, [r7, #48]	@ 0x30
 800527c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	60fb      	str	r3, [r7, #12]
   return(result);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ae:	61fa      	str	r2, [r7, #28]
 80052b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	617b      	str	r3, [r7, #20]
   return(result);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e5      	bne.n	800528e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e012      	b.n	80052fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3758      	adds	r7, #88	@ 0x58
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	e04f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d04b      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fb fe4b 	bl	8000fb8 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <UART_WaitOnFlagUntilTimeout+0x30>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e04e      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d037      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b80      	cmp	r3, #128	@ 0x80
 800534a:	d034      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d031      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b08      	cmp	r3, #8
 800535e:	d110      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f839 	bl	80053e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2208      	movs	r2, #8
 8005372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e029      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d111      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f81f 	bl	80053e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e00f      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0a0      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b095      	sub	sp, #84	@ 0x54
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005406:	643b      	str	r3, [r7, #64]	@ 0x40
 8005408:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e6      	bne.n	80053e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	61fb      	str	r3, [r7, #28]
   return(result);
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	4b1e      	ldr	r3, [pc, #120]	@ (80054a8 <UART_EndRxTransfer+0xc8>)
 800542e:	4013      	ands	r3, r2
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e5      	bne.n	800541a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d118      	bne.n	8005488 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	60bb      	str	r3, [r7, #8]
   return(result);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 0310 	bic.w	r3, r3, #16
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	613b      	str	r3, [r7, #16]
   return(result);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800549c:	bf00      	nop
 800549e:	3754      	adds	r7, #84	@ 0x54
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	effffffe 	.word	0xeffffffe

080054ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054be:	2302      	movs	r3, #2
 80054c0:	e027      	b.n	8005512 <HAL_UARTEx_DisableFifoMode+0x66>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2224      	movs	r2, #36	@ 0x24
 80054ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005532:	2302      	movs	r3, #2
 8005534:	e02d      	b.n	8005592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2224      	movs	r2, #36	@ 0x24
 8005542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f850 	bl	8005618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e02d      	b.n	800560e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	@ 0x24
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f812 	bl	8005618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005638:	e031      	b.n	800569e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800563a:	2310      	movs	r3, #16
 800563c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800563e:	2310      	movs	r3, #16
 8005640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	0e5b      	lsrs	r3, r3, #25
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	0f5b      	lsrs	r3, r3, #29
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	7b3a      	ldrb	r2, [r7, #12]
 8005666:	4911      	ldr	r1, [pc, #68]	@ (80056ac <UARTEx_SetNbDataToProcess+0x94>)
 8005668:	5c8a      	ldrb	r2, [r1, r2]
 800566a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800566e:	7b3a      	ldrb	r2, [r7, #12]
 8005670:	490f      	ldr	r1, [pc, #60]	@ (80056b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005674:	fb93 f3f2 	sdiv	r3, r3, r2
 8005678:	b29a      	uxth	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	7b7a      	ldrb	r2, [r7, #13]
 8005684:	4909      	ldr	r1, [pc, #36]	@ (80056ac <UARTEx_SetNbDataToProcess+0x94>)
 8005686:	5c8a      	ldrb	r2, [r1, r2]
 8005688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800568c:	7b7a      	ldrb	r2, [r7, #13]
 800568e:	4908      	ldr	r1, [pc, #32]	@ (80056b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005692:	fb93 f3f2 	sdiv	r3, r3, r2
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	08005d5c 	.word	0x08005d5c
 80056b0:	08005d64 	.word	0x08005d64

080056b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b4:	b084      	sub	sp, #16
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	f107 001c 	add.w	r0, r7, #28
 80056c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d121      	bne.n	8005712 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <USB_CoreInit+0xdc>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 faaa 	bl	8005c60 <USB_CoreReset>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	e01b      	b.n	800574a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa9e 	bl	8005c60 <USB_CoreReset>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005728:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
 800573c:	e005      	b.n	800574a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800574a:	7fbb      	ldrb	r3, [r7, #30]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d116      	bne.n	800577e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <USB_CoreInit+0xe0>)
 8005760:	4313      	orrs	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f043 0206 	orr.w	r2, r3, #6
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578a:	b004      	add	sp, #16
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	ffbdffbf 	.word	0xffbdffbf
 8005794:	03ee0000 	.word	0x03ee0000

08005798 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 0201 	bic.w	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d115      	bne.n	8005808 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057e8:	200a      	movs	r0, #10
 80057ea:	f7fb fbf1 	bl	8000fd0 <HAL_Delay>
      ms += 10U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	330a      	adds	r3, #10
 80057f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa25 	bl	8005c44 <USB_GetMode>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d01e      	beq.n	800583e <USB_SetCurrentMode+0x84>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2bc7      	cmp	r3, #199	@ 0xc7
 8005804:	d9f0      	bls.n	80057e8 <USB_SetCurrentMode+0x2e>
 8005806:	e01a      	b.n	800583e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d115      	bne.n	800583a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800581a:	200a      	movs	r0, #10
 800581c:	f7fb fbd8 	bl	8000fd0 <HAL_Delay>
      ms += 10U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	330a      	adds	r3, #10
 8005824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa0c 	bl	8005c44 <USB_GetMode>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <USB_SetCurrentMode+0x84>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2bc7      	cmp	r3, #199	@ 0xc7
 8005836:	d9f0      	bls.n	800581a <USB_SetCurrentMode+0x60>
 8005838:	e001      	b.n	800583e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e005      	b.n	800584a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2bc8      	cmp	r3, #200	@ 0xc8
 8005842:	d101      	bne.n	8005848 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005854:	b084      	sub	sp, #16
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e009      	b.n	8005888 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3340      	adds	r3, #64	@ 0x40
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	2200      	movs	r2, #0
 8005880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3301      	adds	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b0e      	cmp	r3, #14
 800588c:	d9f2      	bls.n	8005874 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800588e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005892:	2b00      	cmp	r3, #0
 8005894:	d11c      	bne.n	80058d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a4:	f043 0302 	orr.w	r3, r3, #2
 80058a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e005      	b.n	80058dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d10d      	bne.n	800590c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058f8:	2100      	movs	r1, #0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f968 	bl	8005bd0 <USB_SetDevSpeed>
 8005900:	e008      	b.n	8005914 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005902:	2101      	movs	r1, #1
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f963 	bl	8005bd0 <USB_SetDevSpeed>
 800590a:	e003      	b.n	8005914 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800590c:	2103      	movs	r1, #3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f95e 	bl	8005bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005914:	2110      	movs	r1, #16
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8fa 	bl	8005b10 <USB_FlushTxFifo>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f924 	bl	8005b74 <USB_FlushRxFifo>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593c:	461a      	mov	r2, r3
 800593e:	2300      	movs	r3, #0
 8005940:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e043      	b.n	80059e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005976:	d118      	bne.n	80059aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598a:	461a      	mov	r2, r3
 800598c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e013      	b.n	80059bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	e008      	b.n	80059bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059da:	461a      	mov	r2, r3
 80059dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3301      	adds	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059ec:	461a      	mov	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d3b5      	bcc.n	8005960 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	e043      	b.n	8005a82 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a10:	d118      	bne.n	8005a44 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e013      	b.n	8005a56 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e008      	b.n	8005a56 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a62:	461a      	mov	r2, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a74:	461a      	mov	r2, r3
 8005a76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a86:	461a      	mov	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d3b5      	bcc.n	80059fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005aae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f043 0210 	orr.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <USB_DevInit+0x2b4>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f043 0208 	orr.w	r2, r3, #8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ae4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <USB_DevInit+0x2b8>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr
 8005b08:	803c3800 	.word	0x803c3800
 8005b0c:	40000004 	.word	0x40000004

08005b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b2a:	d901      	bls.n	8005b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e01b      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	daf2      	bge.n	8005b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	019b      	lsls	r3, r3, #6
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b54:	d901      	bls.n	8005b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d0f0      	beq.n	8005b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b8c:	d901      	bls.n	8005b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e018      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	daf2      	bge.n	8005b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bb0:	d901      	bls.n	8005bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e006      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d0f0      	beq.n	8005ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c78:	d901      	bls.n	8005c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e01b      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	daf2      	bge.n	8005c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ca2:	d901      	bls.n	8005ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d0f0      	beq.n	8005c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <memset>:
 8005cc2:	4402      	add	r2, r0
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d100      	bne.n	8005ccc <memset+0xa>
 8005cca:	4770      	bx	lr
 8005ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd0:	e7f9      	b.n	8005cc6 <memset+0x4>
	...

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8005d0c <__libc_init_array+0x38>)
 8005cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8005d10 <__libc_init_array+0x3c>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8005d14 <__libc_init_array+0x40>)
 8005ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8005d18 <__libc_init_array+0x44>)
 8005ce8:	f000 f818 	bl	8005d1c <_init>
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08005d74 	.word	0x08005d74
 8005d10:	08005d74 	.word	0x08005d74
 8005d14:	08005d74 	.word	0x08005d74
 8005d18:	08005d78 	.word	0x08005d78

08005d1c <_init>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr

08005d28 <_fini>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr
