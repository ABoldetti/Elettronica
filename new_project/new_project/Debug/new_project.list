
new_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a24  08005a24  00006a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08005a2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000014  08005a40  00007014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000114  08005a40  00007114  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014e1e  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000267c  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  0001e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c65  00000000  00000000  0001f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000370c8  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001533d  00000000  00000000  000571ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001619df  00000000  00000000  0006c52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cdf09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042c4  00000000  00000000  001cdf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001d2210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080059cc 	.word	0x080059cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080059cc 	.word	0x080059cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b90      	ldr	r3, [pc, #576]	@ (8000820 <MX_GPIO_Init+0x258>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a8e      	ldr	r2, [pc, #568]	@ (8000820 <MX_GPIO_Init+0x258>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b8c      	ldr	r3, [pc, #560]	@ (8000820 <MX_GPIO_Init+0x258>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b88      	ldr	r3, [pc, #544]	@ (8000820 <MX_GPIO_Init+0x258>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a87      	ldr	r2, [pc, #540]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b84      	ldr	r3, [pc, #528]	@ (8000820 <MX_GPIO_Init+0x258>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b81      	ldr	r3, [pc, #516]	@ (8000820 <MX_GPIO_Init+0x258>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a7f      	ldr	r2, [pc, #508]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b7d      	ldr	r3, [pc, #500]	@ (8000820 <MX_GPIO_Init+0x258>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b79      	ldr	r3, [pc, #484]	@ (8000820 <MX_GPIO_Init+0x258>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a78      	ldr	r2, [pc, #480]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b75      	ldr	r3, [pc, #468]	@ (8000820 <MX_GPIO_Init+0x258>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b72      	ldr	r3, [pc, #456]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a70      	ldr	r2, [pc, #448]	@ (8000820 <MX_GPIO_Init+0x258>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b6e      	ldr	r3, [pc, #440]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000674:	4b6a      	ldr	r3, [pc, #424]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a69      	ldr	r2, [pc, #420]	@ (8000820 <MX_GPIO_Init+0x258>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b66      	ldr	r3, [pc, #408]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b63      	ldr	r3, [pc, #396]	@ (8000820 <MX_GPIO_Init+0x258>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a61      	ldr	r2, [pc, #388]	@ (8000820 <MX_GPIO_Init+0x258>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000820 <MX_GPIO_Init+0x258>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80006b6:	485b      	ldr	r0, [pc, #364]	@ (8000824 <MX_GPIO_Init+0x25c>)
 80006b8:	f000 ff14 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c2:	4859      	ldr	r0, [pc, #356]	@ (8000828 <MX_GPIO_Init+0x260>)
 80006c4:	f000 ff0e 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	4857      	ldr	r0, [pc, #348]	@ (800082c <MX_GPIO_Init+0x264>)
 80006ce:	f000 ff09 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4851      	ldr	r0, [pc, #324]	@ (8000830 <MX_GPIO_Init+0x268>)
 80006ea:	f000 fd4b 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006ee:	2332      	movs	r3, #50	@ 0x32
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fe:	230b      	movs	r3, #11
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4849      	ldr	r0, [pc, #292]	@ (8000830 <MX_GPIO_Init+0x268>)
 800070a:	f000 fd3b 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800070e:	2386      	movs	r3, #134	@ 0x86
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071e:	230b      	movs	r3, #11
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4842      	ldr	r0, [pc, #264]	@ (8000834 <MX_GPIO_Init+0x26c>)
 800072a:	f000 fd2b 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB14 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_14;
 800072e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4837      	ldr	r0, [pc, #220]	@ (8000824 <MX_GPIO_Init+0x25c>)
 8000748:	f000 fd1c 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075e:	230b      	movs	r3, #11
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	482e      	ldr	r0, [pc, #184]	@ (8000824 <MX_GPIO_Init+0x25c>)
 800076a:	f000 fd0b 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800076e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4828      	ldr	r0, [pc, #160]	@ (8000828 <MX_GPIO_Init+0x260>)
 8000788:	f000 fcfc 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4825      	ldr	r0, [pc, #148]	@ (8000838 <MX_GPIO_Init+0x270>)
 80007a2:	f000 fcef 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007a6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007b8:	230a      	movs	r3, #10
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	481c      	ldr	r0, [pc, #112]	@ (8000834 <MX_GPIO_Init+0x26c>)
 80007c4:	f000 fcde 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007da:	230b      	movs	r3, #11
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4814      	ldr	r0, [pc, #80]	@ (8000838 <MX_GPIO_Init+0x270>)
 80007e6:	f000 fccd 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <MX_GPIO_Init+0x264>)
 8000802:	f000 fcbf 	bl	8001184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2028      	movs	r0, #40	@ 0x28
 800080c:	f000 fc85 	bl	800111a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000810:	2028      	movs	r0, #40	@ 0x28
 8000812:	f000 fc9c 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3730      	adds	r7, #48	@ 0x30
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58024400 	.word	0x58024400
 8000824:	58020400 	.word	0x58020400
 8000828:	58020c00 	.word	0x58020c00
 800082c:	58021000 	.word	0x58021000
 8000830:	58020800 	.word	0x58020800
 8000834:	58020000 	.word	0x58020000
 8000838:	58021800 	.word	0x58021800

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 faf2 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f822 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff febe 	bl	80005c8 <MX_GPIO_Init>
  MX_TIM6_Init();
 800084c:	f000 f9ae 	bl	8000bac <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000850:	f000 fa0a 	bl	8000c68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // dice al programma che c'è qualcosa nel Buffer dell'interrupt

  TIM6 -> DIER |= TIM_DIER_UIE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <main+0x4c>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <main+0x4c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	60d3      	str	r3, [r2, #12]
  TIM6 -> CNT = 0;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <main+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM6->PSC = 1000;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <main+0x4c>)
 8000868:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM6->ARR = 60000;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <main+0x4c>)
 8000870:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM6 -> CR1 |= TIM_CR1_CEN;
 8000876:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <main+0x4c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a03      	ldr	r2, [pc, #12]	@ (8000888 <main+0x4c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <main+0x46>
 8000886:	bf00      	nop
 8000888:	40001000 	.word	0x40001000

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	@ 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	224c      	movs	r2, #76	@ 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 f86a 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 f864 	bl	8005974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 fe57 	bl	8001560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <SystemClock_Config+0xcc>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	4a27      	ldr	r2, [pc, #156]	@ (8000958 <SystemClock_Config+0xcc>)
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <SystemClock_Config+0xcc>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <SystemClock_Config+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <SystemClock_Config+0xd0>)
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <SystemClock_Config+0xd0>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e8:	bf00      	nop
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <SystemClock_Config+0xd0>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008f6:	d1f8      	bne.n	80008ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fe61 	bl	80015d4 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000918:	f000 f822 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	@ 0x3f
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2101      	movs	r1, #1
 8000940:	4618      	mov	r0, r3
 8000942:	f001 faa1 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800094c:	f000 f808 	bl	8000960 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_MspInit+0x30>)
 8000974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000978:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x30>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x30>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	58024400 	.word	0x58024400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 fa89 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <EXTI15_10_IRQHandler>:
int flag = 1;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (flag){
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <EXTI15_10_IRQHandler+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <EXTI15_10_IRQHandler+0x20>
		GPIOE -> BSRR |= GPIO_BSRR_BS1;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <EXTI15_10_IRQHandler+0x44>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <EXTI15_10_IRQHandler+0x44>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6193      	str	r3, [r2, #24]
		flag = 0;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <EXTI15_10_IRQHandler+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e008      	b.n	8000a32 <EXTI15_10_IRQHandler+0x32>
	}else{
		GPIOE -> BSRR |= GPIO_BSRR_BR1;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <EXTI15_10_IRQHandler+0x44>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <EXTI15_10_IRQHandler+0x44>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2a:	6193      	str	r3, [r2, #24]
		flag = 1;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <EXTI15_10_IRQHandler+0x40>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a32:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a36:	f000 fd6e 	bl	8001516 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000000 	.word	0x24000000
 8000a44:	58021000 	.word	0x58021000

08000a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ( GPIOB ->IDR&1<<0){
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00c      	beq.n	8000a72 <TIM6_DAC_IRQHandler+0x2a>
		GPIOB -> BSRR |= GPIO_BSRR_BR0;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a62:	6193      	str	r3, [r2, #24]
		GPIOB -> BSRR |= GPIO_BSRR_BS14;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	e00b      	b.n	8000a8a <TIM6_DAC_IRQHandler+0x42>

	}
	else{
		GPIOB -> BSRR |= GPIO_BSRR_BS0;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
		GPIOB -> BSRR |= GPIO_BSRR_BR14;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <TIM6_DAC_IRQHandler+0x4c>)
 8000a84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000a88:	6193      	str	r3, [r2, #24]
	}
	//GPIOE -> BSRR |= GPIO_BSRR_BR10;
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <TIM6_DAC_IRQHandler+0x50>)
 8000a8c:	f003 fc0b 	bl	80042a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58020400 	.word	0x58020400
 8000a98:	24000030 	.word	0x24000030

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <SystemInit+0xe4>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa6:	4a36      	ldr	r2, [pc, #216]	@ (8000b80 <SystemInit+0xe4>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab0:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <SystemInit+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	d807      	bhi.n	8000acc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000abc:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <SystemInit+0xe8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <SystemInit+0xe8>)
 8000ac6:	f043 0307 	orr.w	r3, r3, #7
 8000aca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000acc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <SystemInit+0xec>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b88 <SystemInit+0xec>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <SystemInit+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <SystemInit+0xec>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4929      	ldr	r1, [pc, #164]	@ (8000b88 <SystemInit+0xec>)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <SystemInit+0xf0>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <SystemInit+0xe8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af6:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <SystemInit+0xe8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 030f 	bic.w	r3, r3, #15
 8000afe:	4a21      	ldr	r2, [pc, #132]	@ (8000b84 <SystemInit+0xe8>)
 8000b00:	f043 0307 	orr.w	r3, r3, #7
 8000b04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <SystemInit+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <SystemInit+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <SystemInit+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <SystemInit+0xec>)
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <SystemInit+0xf4>)
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <SystemInit+0xec>)
 8000b20:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <SystemInit+0xf8>)
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <SystemInit+0xec>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <SystemInit+0xfc>)
 8000b28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <SystemInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <SystemInit+0xec>)
 8000b32:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <SystemInit+0xfc>)
 8000b34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <SystemInit+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <SystemInit+0xec>)
 8000b3e:	4a16      	ldr	r2, [pc, #88]	@ (8000b98 <SystemInit+0xfc>)
 8000b40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <SystemInit+0xec>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <SystemInit+0xec>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <SystemInit+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <SystemInit+0x100>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <SystemInit+0x104>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b66:	d202      	bcs.n	8000b6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <SystemInit+0x108>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <SystemInit+0x10c>)
 8000b70:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	52002000 	.word	0x52002000
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b90:	02020200 	.word	0x02020200
 8000b94:	01ff0000 	.word	0x01ff0000
 8000b98:	01010280 	.word	0x01010280
 8000b9c:	5c001000 	.word	0x5c001000
 8000ba0:	ffff0000 	.word	0xffff0000
 8000ba4:	51008108 	.word	0x51008108
 8000ba8:	52004000 	.word	0x52004000

08000bac <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <MX_TIM6_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bde:	f003 fb0b 	bl	80041f8 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000be8:	f7ff feba 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_TIM6_Init+0x64>)
 8000bfa:	f003 fd33 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f7ff feac 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000030 	.word	0x24000030
 8000c14:	40001000 	.word	0x40001000

08000c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d116      	bne.n	8000c58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_TIM_Base_MspInit+0x4c>)
 8000c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <HAL_TIM_Base_MspInit+0x4c>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_TIM_Base_MspInit+0x4c>)
 8000c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2036      	movs	r0, #54	@ 0x36
 8000c4e:	f000 fa64 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c52:	2036      	movs	r0, #54	@ 0x36
 8000c54:	f000 fa7b 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40001000 	.word	0x40001000
 8000c64:	58024400 	.word	0x58024400

08000c68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c6e:	4a23      	ldr	r2, [pc, #140]	@ (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb0:	4811      	ldr	r0, [pc, #68]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cb2:	f003 fd83 	bl	80047bc <HAL_UART_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f7ff fe50 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cc4:	f004 fd8b 	bl	80057de <HAL_UARTEx_SetTxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f7ff fe47 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4808      	ldr	r0, [pc, #32]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000cd6:	f004 fdc0 	bl	800585a <HAL_UARTEx_SetRxFifoThreshold>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f7ff fe3e 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	@ (8000cf8 <MX_USART3_UART_Init+0x90>)
 8000ce6:	f004 fd41 	bl	800576c <HAL_UARTEx_DisableFifoMode>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f7ff fe36 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2400007c 	.word	0x2400007c
 8000cfc:	40004800 	.word	0x40004800

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ba      	sub	sp, #232	@ 0xe8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	22c0      	movs	r2, #192	@ 0xc0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 fe27 	bl	8005974 <memset>
  if(uartHandle->Instance==USART3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a27      	ldr	r2, [pc, #156]	@ (8000dc8 <HAL_UART_MspInit+0xc8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d146      	bne.n	8000dbe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d30:	f04f 0202 	mov.w	r2, #2
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fc2a 	bl	80025a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d52:	f7ff fe05 	bl	8000960 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_UART_MspInit+0xcc>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_UART_MspInit+0xd0>)
 8000dba:	f000 f9e3 	bl	8001184 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	37e8      	adds	r7, #232	@ 0xe8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020c00 	.word	0x58020c00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd8:	f7ff fe60 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f004 fdbf 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fd19 	bl	800083c <main>
  bx  lr
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e14:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000e18:	08005a2c 	.word	0x08005a2c
  ldr r2, =_sbss
 8000e1c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000e20:	24000114 	.word	0x24000114

08000e24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC3_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f968 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e34:	f001 f9de 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_Init+0x68>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	4913      	ldr	r1, [pc, #76]	@ (8000e94 <HAL_Init+0x6c>)
 8000e46:	5ccb      	ldrb	r3, [r1, r3]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_Init+0x68>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_Init+0x6c>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_Init+0x70>)
 8000e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_Init+0x74>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f814 	bl	8000ea0 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e002      	b.n	8000e88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e82:	f7ff fd73 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400
 8000e94:	080059e4 	.word	0x080059e4
 8000e98:	24000008 	.word	0x24000008
 8000e9c:	24000004 	.word	0x24000004

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e021      	b.n	8000ef8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_InitTick+0x64>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f94d 	bl	800116a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f000 f917 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x68>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000010 	.word	0x24000010
 8000f04:	24000004 	.word	0x24000004
 8000f08:	2400000c 	.word	0x2400000c

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	24000010 	.word	0x24000010
 8000f30:	24000110 	.word	0x24000110

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	24000110 	.word	0x24000110

08000f4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetREVID+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0c1b      	lsrs	r3, r3, #16
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	5c001000 	.word	0x5c001000

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	05fa0000 	.word	0x05fa0000

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	@ (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	@ (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	@ (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff40 	bl	8000fac <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff33 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa4 	bl	80010c0 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001192:	4b89      	ldr	r3, [pc, #548]	@ (80013b8 <HAL_GPIO_Init+0x234>)
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001196:	e194      	b.n	80014c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8186 	beq.w	80014bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x44>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	69b9      	ldr	r1, [r7, #24]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80e0 	beq.w	80014bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <HAL_GPIO_Init+0x238>)
 80012fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001302:	4a2e      	ldr	r2, [pc, #184]	@ (80013bc <HAL_GPIO_Init+0x238>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800130c:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_GPIO_Init+0x238>)
 800130e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131a:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_GPIO_Init+0x23c>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <HAL_GPIO_Init+0x240>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d052      	beq.n	80013ec <HAL_GPIO_Init+0x268>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1f      	ldr	r2, [pc, #124]	@ (80013c8 <HAL_GPIO_Init+0x244>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d031      	beq.n	80013b2 <HAL_GPIO_Init+0x22e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <HAL_GPIO_Init+0x248>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0x22a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1d      	ldr	r2, [pc, #116]	@ (80013d0 <HAL_GPIO_Init+0x24c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <HAL_GPIO_Init+0x250>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <HAL_GPIO_Init+0x254>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a1a      	ldr	r2, [pc, #104]	@ (80013dc <HAL_GPIO_Init+0x258>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_GPIO_Init+0x25c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <HAL_GPIO_Init+0x260>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_GPIO_Init+0x264>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x20e>
 800138e:	2309      	movs	r3, #9
 8001390:	e02d      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 8001392:	230a      	movs	r3, #10
 8001394:	e02b      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 8001396:	2308      	movs	r3, #8
 8001398:	e029      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 800139a:	2307      	movs	r3, #7
 800139c:	e027      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 800139e:	2306      	movs	r3, #6
 80013a0:	e025      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e023      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e021      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e01f      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e01d      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e01b      	b.n	80013ee <HAL_GPIO_Init+0x26a>
 80013b6:	bf00      	nop
 80013b8:	58000080 	.word	0x58000080
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58000400 	.word	0x58000400
 80013c4:	58020000 	.word	0x58020000
 80013c8:	58020400 	.word	0x58020400
 80013cc:	58020800 	.word	0x58020800
 80013d0:	58020c00 	.word	0x58020c00
 80013d4:	58021000 	.word	0x58021000
 80013d8:	58021400 	.word	0x58021400
 80013dc:	58021800 	.word	0x58021800
 80013e0:	58021c00 	.word	0x58021c00
 80013e4:	58022000 	.word	0x58022000
 80013e8:	58022400 	.word	0x58022400
 80013ec:	2300      	movs	r3, #0
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fe:	4938      	ldr	r1, [pc, #224]	@ (80014e0 <HAL_GPIO_Init+0x35c>)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3301      	adds	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f ae63 	bne.w	8001198 <HAL_GPIO_Init+0x14>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3724      	adds	r7, #36	@ 0x24
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	58000400 	.word	0x58000400

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001524:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f804 	bl	800154a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_PWREx_ConfigSupply+0x70>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b04      	cmp	r3, #4
 8001572:	d00a      	beq.n	800158a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e01f      	b.n	80015c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e01d      	b.n	80015c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_PWREx_ConfigSupply+0x70>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f023 0207 	bic.w	r2, r3, #7
 8001592:	490f      	ldr	r1, [pc, #60]	@ (80015d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800159a:	f7ff fccb 	bl	8000f34 <HAL_GetTick>
 800159e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015a0:	e009      	b.n	80015b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015a2:	f7ff fcc7 	bl	8000f34 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b0:	d901      	bls.n	80015b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e007      	b.n	80015c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_PWREx_ConfigSupply+0x70>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015c2:	d1ee      	bne.n	80015a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	58024800 	.word	0x58024800

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f000 bc48 	b.w	8001e78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8088 	beq.w	8001706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f6:	4b99      	ldr	r3, [pc, #612]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001600:	4b96      	ldr	r3, [pc, #600]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001608:	2b10      	cmp	r3, #16
 800160a:	d007      	beq.n	800161c <HAL_RCC_OscConfig+0x48>
 800160c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160e:	2b18      	cmp	r3, #24
 8001610:	d111      	bne.n	8001636 <HAL_RCC_OscConfig+0x62>
 8001612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b8f      	ldr	r3, [pc, #572]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06d      	beq.n	8001704 <HAL_RCC_OscConfig+0x130>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d169      	bne.n	8001704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	f000 bc21 	b.w	8001e78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x7a>
 8001640:	4b86      	ldr	r3, [pc, #536]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a85      	ldr	r2, [pc, #532]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e02e      	b.n	80016ac <HAL_RCC_OscConfig+0xd8>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x9c>
 8001656:	4b81      	ldr	r3, [pc, #516]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a80      	ldr	r2, [pc, #512]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800165c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b7e      	ldr	r3, [pc, #504]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7d      	ldr	r2, [pc, #500]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xd8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0xc0>
 800167a:	4b78      	ldr	r3, [pc, #480]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a77      	ldr	r2, [pc, #476]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b75      	ldr	r3, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a74      	ldr	r2, [pc, #464]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xd8>
 8001694:	4b71      	ldr	r3, [pc, #452]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a70      	ldr	r2, [pc, #448]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b6e      	ldr	r3, [pc, #440]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6d      	ldr	r2, [pc, #436]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc3e 	bl	8000f34 <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fc3a 	bl	8000f34 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e3d4      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ce:	4b63      	ldr	r3, [pc, #396]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc2a 	bl	8000f34 <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fc26 	bl	8000f34 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e3c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f6:	4b59      	ldr	r3, [pc, #356]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x110>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80ca 	beq.w	80018a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4b51      	ldr	r3, [pc, #324]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800171c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800171e:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_RCC_OscConfig+0x166>
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b18      	cmp	r3, #24
 800172e:	d156      	bne.n	80017de <HAL_RCC_OscConfig+0x20a>
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d151      	bne.n	80017de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173a:	4b48      	ldr	r3, [pc, #288]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e392      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001752:	4b42      	ldr	r3, [pc, #264]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 0219 	bic.w	r2, r3, #25
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	493f      	ldr	r1, [pc, #252]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fbe6 	bl	8000f34 <HAL_GetTick>
 8001768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fbe2 	bl	8000f34 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e37c      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	f7ff fbdf 	bl	8000f4c <HAL_GetREVID>
 800178e:	4603      	mov	r3, r0
 8001790:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001794:	4293      	cmp	r3, r2
 8001796:	d817      	bhi.n	80017c8 <HAL_RCC_OscConfig+0x1f4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b40      	cmp	r3, #64	@ 0x40
 800179e:	d108      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1de>
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017a8:	4a2c      	ldr	r2, [pc, #176]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b0:	e07a      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	4926      	ldr	r1, [pc, #152]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c6:	e06f      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b24      	ldr	r3, [pc, #144]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	4921      	ldr	r1, [pc, #132]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	e064      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d047      	beq.n	8001876 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0219 	bic.w	r2, r3, #25
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	491a      	ldr	r1, [pc, #104]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb9c 	bl	8000f34 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fb98 	bl	8000f34 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e332      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	f7ff fb95 	bl	8000f4c <HAL_GetREVID>
 8001822:	4603      	mov	r3, r0
 8001824:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001828:	4293      	cmp	r3, r2
 800182a:	d819      	bhi.n	8001860 <HAL_RCC_OscConfig+0x28c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b40      	cmp	r3, #64	@ 0x40
 8001832:	d108      	bne.n	8001846 <HAL_RCC_OscConfig+0x272>
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800183c:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 800183e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001842:	6053      	str	r3, [r2, #4]
 8001844:	e030      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	031b      	lsls	r3, r3, #12
 8001854:	4901      	ldr	r1, [pc, #4]	@ (800185c <HAL_RCC_OscConfig+0x288>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
 800185a:	e025      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
 800185c:	58024400 	.word	0x58024400
 8001860:	4b9a      	ldr	r3, [pc, #616]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4997      	ldr	r1, [pc, #604]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b95      	ldr	r3, [pc, #596]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a94      	ldr	r2, [pc, #592]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fb57 	bl	8000f34 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fb53 	bl	8000f34 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e2ed      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800189c:	4b8b      	ldr	r3, [pc, #556]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a9 	beq.w	8001a08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b6:	4b85      	ldr	r3, [pc, #532]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018c0:	4b82      	ldr	r3, [pc, #520]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d007      	beq.n	80018dc <HAL_RCC_OscConfig+0x308>
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b18      	cmp	r3, #24
 80018d0:	d13a      	bne.n	8001948 <HAL_RCC_OscConfig+0x374>
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d135      	bne.n	8001948 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018dc:	4b7b      	ldr	r3, [pc, #492]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x320>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b80      	cmp	r3, #128	@ 0x80
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e2c1      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018f4:	f7ff fb2a 	bl	8000f4c <HAL_GetREVID>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018fe:	4293      	cmp	r3, r2
 8001900:	d817      	bhi.n	8001932 <HAL_RCC_OscConfig+0x35e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	2b20      	cmp	r3, #32
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x348>
 800190a:	4b70      	ldr	r3, [pc, #448]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001912:	4a6e      	ldr	r2, [pc, #440]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001914:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001918:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800191a:	e075      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191c:	4b6b      	ldr	r3, [pc, #428]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	069b      	lsls	r3, r3, #26
 800192a:	4968      	ldr	r1, [pc, #416]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001930:	e06a      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001932:	4b66      	ldr	r3, [pc, #408]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	061b      	lsls	r3, r3, #24
 8001940:	4962      	ldr	r1, [pc, #392]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001942:	4313      	orrs	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001946:	e05f      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d042      	beq.n	80019d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001950:	4b5e      	ldr	r3, [pc, #376]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a5d      	ldr	r2, [pc, #372]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff faea 	bl	8000f34 <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001964:	f7ff fae6 	bl	8000f34 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e280      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001976:	4b55      	ldr	r3, [pc, #340]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001982:	f7ff fae3 	bl	8000f4c <HAL_GetREVID>
 8001986:	4603      	mov	r3, r0
 8001988:	f241 0203 	movw	r2, #4099	@ 0x1003
 800198c:	4293      	cmp	r3, r2
 800198e:	d817      	bhi.n	80019c0 <HAL_RCC_OscConfig+0x3ec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	2b20      	cmp	r3, #32
 8001996:	d108      	bne.n	80019aa <HAL_RCC_OscConfig+0x3d6>
 8001998:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019a0:	4a4a      	ldr	r2, [pc, #296]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019a6:	6053      	str	r3, [r2, #4]
 80019a8:	e02e      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
 80019aa:	4b48      	ldr	r3, [pc, #288]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	4944      	ldr	r1, [pc, #272]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
 80019be:	e023      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
 80019c0:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	493f      	ldr	r1, [pc, #252]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
 80019d4:	e018      	b.n	8001a08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a3c      	ldr	r2, [pc, #240]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff faa7 	bl	8000f34 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019ea:	f7ff faa3 	bl	8000f34 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e23d      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019fc:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d036      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d019      	beq.n	8001a50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a20:	4a2a      	ldr	r2, [pc, #168]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa84 	bl	8000f34 <HAL_GetTick>
 8001a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fa80 	bl	8000f34 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e21a      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x45c>
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa6a 	bl	8000f34 <HAL_GetTick>
 8001a60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa66 	bl	8000f34 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d039      	beq.n	8001b02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fa47 	bl	8000f34 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aaa:	f7ff fa43 	bl	8000f34 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1dd      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4d6>
 8001ac8:	e01b      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
 8001aca:	bf00      	nop
 8001acc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a9a      	ldr	r2, [pc, #616]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa2a 	bl	8000f34 <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae4:	f7ff fa26 	bl	8000f34 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001af6:	4b92      	ldr	r3, [pc, #584]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8081 	beq.w	8001c12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b10:	4b8c      	ldr	r3, [pc, #560]	@ (8001d44 <HAL_RCC_OscConfig+0x770>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a8b      	ldr	r2, [pc, #556]	@ (8001d44 <HAL_RCC_OscConfig+0x770>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fa0a 	bl	8000f34 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff fa06 	bl	8000f34 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1a0      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b36:	4b83      	ldr	r3, [pc, #524]	@ (8001d44 <HAL_RCC_OscConfig+0x770>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x584>
 8001b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b56:	e02d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x5e0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5a6>
 8001b60:	4b77      	ldr	r3, [pc, #476]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b64:	4a76      	ldr	r2, [pc, #472]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6c:	4b74      	ldr	r3, [pc, #464]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a73      	ldr	r2, [pc, #460]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x5e0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5c8>
 8001b82:	4b6f      	ldr	r3, [pc, #444]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a6e      	ldr	r2, [pc, #440]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	4a6b      	ldr	r2, [pc, #428]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x5e0>
 8001b9c:	4b68      	ldr	r3, [pc, #416]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba0:	4a67      	ldr	r2, [pc, #412]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba8:	4b65      	ldr	r3, [pc, #404]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bac:	4a64      	ldr	r2, [pc, #400]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001bae:	f023 0304 	bic.w	r3, r3, #4
 8001bb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d015      	beq.n	8001be8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f9ba 	bl	8000f34 <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f9b6 	bl	8000f34 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e14e      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bda:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0ee      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x5f0>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff f9a4 	bl	8000f34 <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f9a0 	bl	8000f34 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e138      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c06:	4b4e      	ldr	r3, [pc, #312]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 812d 	beq.w	8001e76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c1c:	4b48      	ldr	r3, [pc, #288]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c24:	2b18      	cmp	r3, #24
 8001c26:	f000 80bd 	beq.w	8001da4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 809e 	bne.w	8001d70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a41      	ldr	r2, [pc, #260]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f978 	bl	8000f34 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f974 	bl	8000f34 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e10e      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c5a:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c66:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6a:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <HAL_RCC_OscConfig+0x774>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4931      	ldr	r1, [pc, #196]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	3b01      	subs	r3, #1
 8001c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	025b      	lsls	r3, r3, #9
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001cb0:	4923      	ldr	r1, [pc, #140]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <HAL_RCC_OscConfig+0x778>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cce:	00d2      	lsls	r2, r2, #3
 8001cd0:	491b      	ldr	r1, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	f023 020c 	bic.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4917      	ldr	r1, [pc, #92]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	f023 0202 	bic.w	r2, r3, #2
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d22:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2a:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f8fd 	bl	8000f34 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3c:	e011      	b.n	8001d62 <HAL_RCC_OscConfig+0x78e>
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58024800 	.word	0x58024800
 8001d48:	fffffc0c 	.word	0xfffffc0c
 8001d4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f8f0 	bl	8000f34 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e08a      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x77c>
 8001d6e:	e082      	b.n	8001e76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b43      	ldr	r3, [pc, #268]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a42      	ldr	r2, [pc, #264]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8da 	bl	8000f34 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f8d6 	bl	8000f34 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e070      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d96:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7b0>
 8001da2:	e068      	b.n	8001e76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d031      	beq.n	8001e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d12a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d122      	bne.n	8001e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d11a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	0a5b      	lsrs	r3, r3, #9
 8001dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d111      	bne.n	8001e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0e1b      	lsrs	r3, r3, #24
 8001e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e02b      	b.n	8001e78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d01f      	beq.n	8001e76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e42:	f7ff f877 	bl	8000f34 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e48:	bf00      	nop
 8001e4a:	f7ff f873 	bl	8000f34 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d0f9      	beq.n	8001e4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_RCC_OscConfig+0x8b0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e62:	00d2      	lsls	r2, r2, #3
 8001e64:	4906      	ldr	r1, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <HAL_RCC_OscConfig+0x8ac>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3730      	adds	r7, #48	@ 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	58024400 	.word	0x58024400
 8001e84:	ffff0007 	.word	0xffff0007

08001e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e19c      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b8a      	ldr	r3, [pc, #552]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b87      	ldr	r3, [pc, #540]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4985      	ldr	r1, [pc, #532]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b83      	ldr	r3, [pc, #524]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e184      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b7b      	ldr	r3, [pc, #492]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee8:	4b78      	ldr	r3, [pc, #480]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4975      	ldr	r1, [pc, #468]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	4b70      	ldr	r3, [pc, #448]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f16:	4b6d      	ldr	r3, [pc, #436]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	496a      	ldr	r1, [pc, #424]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	4b64      	ldr	r3, [pc, #400]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d908      	bls.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	495e      	ldr	r1, [pc, #376]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	4b59      	ldr	r3, [pc, #356]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d908      	bls.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f72:	4b56      	ldr	r3, [pc, #344]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4953      	ldr	r1, [pc, #332]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d908      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f023 020f 	bic.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4947      	ldr	r1, [pc, #284]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d055      	beq.n	800206a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4940      	ldr	r1, [pc, #256]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d121      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0ea      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0de      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002018:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002028:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4925      	ldr	r1, [pc, #148]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002036:	4313      	orrs	r3, r2
 8002038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203a:	f7fe ff7b 	bl	8000f34 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002040:	e00a      	b.n	8002058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe ff77 	bl	8000f34 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0be      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	429a      	cmp	r2, r3
 8002068:	d1eb      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	490e      	ldr	r1, [pc, #56]	@ (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002094:	4313      	orrs	r3, r2
 8002096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d214      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 020f 	bic.w	r2, r3, #15
 80020ae:	4906      	ldr	r1, [pc, #24]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e086      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
 80020c8:	52002000 	.word	0x52002000
 80020cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	4b3f      	ldr	r3, [pc, #252]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ec:	4b3c      	ldr	r3, [pc, #240]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4939      	ldr	r1, [pc, #228]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d010      	beq.n	800212c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002116:	429a      	cmp	r2, r3
 8002118:	d208      	bcs.n	800212c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800211a:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	492e      	ldr	r1, [pc, #184]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002128:	4313      	orrs	r3, r2
 800212a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d010      	beq.n	800215a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002144:	429a      	cmp	r2, r3
 8002146:	d208      	bcs.n	800215a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4922      	ldr	r1, [pc, #136]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002156:	4313      	orrs	r3, r2
 8002158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002172:	429a      	cmp	r2, r3
 8002174:	d208      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4917      	ldr	r1, [pc, #92]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002184:	4313      	orrs	r3, r2
 8002186:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002188:	f000 f834 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	4912      	ldr	r1, [pc, #72]	@ (80021e4 <HAL_RCC_ClockConfig+0x35c>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_RCC_ClockConfig+0x35c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <HAL_RCC_ClockConfig+0x360>)
 80021be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_RCC_ClockConfig+0x364>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x368>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe68 	bl	8000ea0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58024400 	.word	0x58024400
 80021e4:	080059e4 	.word	0x080059e4
 80021e8:	24000008 	.word	0x24000008
 80021ec:	24000004 	.word	0x24000004
 80021f0:	2400000c 	.word	0x2400000c

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fa:	4bb3      	ldr	r3, [pc, #716]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002202:	2b18      	cmp	r3, #24
 8002204:	f200 8155 	bhi.w	80024b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002208:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002275 	.word	0x08002275
 8002214:	080024b3 	.word	0x080024b3
 8002218:	080024b3 	.word	0x080024b3
 800221c:	080024b3 	.word	0x080024b3
 8002220:	080024b3 	.word	0x080024b3
 8002224:	080024b3 	.word	0x080024b3
 8002228:	080024b3 	.word	0x080024b3
 800222c:	080024b3 	.word	0x080024b3
 8002230:	0800229b 	.word	0x0800229b
 8002234:	080024b3 	.word	0x080024b3
 8002238:	080024b3 	.word	0x080024b3
 800223c:	080024b3 	.word	0x080024b3
 8002240:	080024b3 	.word	0x080024b3
 8002244:	080024b3 	.word	0x080024b3
 8002248:	080024b3 	.word	0x080024b3
 800224c:	080024b3 	.word	0x080024b3
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080024b3 	.word	0x080024b3
 8002258:	080024b3 	.word	0x080024b3
 800225c:	080024b3 	.word	0x080024b3
 8002260:	080024b3 	.word	0x080024b3
 8002264:	080024b3 	.word	0x080024b3
 8002268:	080024b3 	.word	0x080024b3
 800226c:	080024b3 	.word	0x080024b3
 8002270:	080022a7 	.word	0x080022a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002274:	4b94      	ldr	r3, [pc, #592]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002280:	4b91      	ldr	r3, [pc, #580]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	4a90      	ldr	r2, [pc, #576]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
 8002290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002292:	e111      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002294:	4b8d      	ldr	r3, [pc, #564]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002296:	61bb      	str	r3, [r7, #24]
      break;
 8002298:	e10e      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800229a:	4b8d      	ldr	r3, [pc, #564]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800229c:	61bb      	str	r3, [r7, #24]
      break;
 800229e:	e10b      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022a0:	4b8c      	ldr	r3, [pc, #560]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022a2:	61bb      	str	r3, [r7, #24]
      break;
 80022a4:	e108      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022a6:	4b88      	ldr	r3, [pc, #544]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022b0:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022bc:	4b82      	ldr	r3, [pc, #520]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022c6:	4b80      	ldr	r3, [pc, #512]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80e1 	beq.w	80024ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	f000 8083 	beq.w	80023f8 <HAL_RCC_GetSysClockFreq+0x204>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	f200 80a1 	bhi.w	800243c <HAL_RCC_GetSysClockFreq+0x248>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x114>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d056      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002306:	e099      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002308:	4b6f      	ldr	r3, [pc, #444]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02d      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002314:	4b6c      	ldr	r3, [pc, #432]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	4a6b      	ldr	r2, [pc, #428]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233e:	4b62      	ldr	r3, [pc, #392]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002352:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800235a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800236e:	e087      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80024dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800237e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002382:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002392:	ed97 6a02 	vldr	s12, [r7, #8]
 8002396:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800239a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023b2:	e065      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80024e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c6:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023f6:	e043      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002402:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80024e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240a:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241a:	ed97 6a02 	vldr	s12, [r7, #8]
 800241e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800242e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800243a:	e021      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80024e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800244a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244e:	4b1e      	ldr	r3, [pc, #120]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002462:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800247e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	0a5b      	lsrs	r3, r3, #9
 8002486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800248a:	3301      	adds	r3, #1
 800248c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002498:	edd7 6a07 	vldr	s13, [r7, #28]
 800249c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a4:	ee17 3a90 	vmov	r3, s15
 80024a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
      break;
 80024b0:	e002      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024b4:	61bb      	str	r3, [r7, #24]
      break;
 80024b6:	bf00      	nop
  }

  return sysclockfreq;
 80024b8:	69bb      	ldr	r3, [r7, #24]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	58024400 	.word	0x58024400
 80024cc:	03d09000 	.word	0x03d09000
 80024d0:	003d0900 	.word	0x003d0900
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	46000000 	.word	0x46000000
 80024dc:	4c742400 	.word	0x4c742400
 80024e0:	4a742400 	.word	0x4a742400
 80024e4:	4af42400 	.word	0x4af42400

080024e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024ee:	f7ff fe81 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_RCC_GetHCLKFreq+0x50>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490f      	ldr	r1, [pc, #60]	@ (800253c <HAL_RCC_GetHCLKFreq+0x54>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800250c:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_GetHCLKFreq+0x50>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	4a09      	ldr	r2, [pc, #36]	@ (800253c <HAL_RCC_GetHCLKFreq+0x54>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <HAL_RCC_GetHCLKFreq+0x58>)
 8002524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002526:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_RCC_GetHCLKFreq+0x58>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	58024400 	.word	0x58024400
 800253c:	080059e4 	.word	0x080059e4
 8002540:	24000008 	.word	0x24000008
 8002544:	24000004 	.word	0x24000004

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800254c:	f7ff ffcc 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	58024400 	.word	0x58024400
 8002570:	080059e4 	.word	0x080059e4

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002578:	f7ff ffb6 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024400 	.word	0x58024400
 800259c:	080059e4 	.word	0x080059e4

080025a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b0ca      	sub	sp, #296	@ 0x128
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025c4:	2500      	movs	r5, #0
 80025c6:	ea54 0305 	orrs.w	r3, r4, r5
 80025ca:	d049      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025d6:	d02f      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80025d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025dc:	d828      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e2:	d01a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e8:	d822      	bhi.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025f2:	d007      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f4:	e01c      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f6:	4bb8      	ldr	r3, [pc, #736]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	4ab7      	ldr	r2, [pc, #732]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002602:	e01a      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002608:	3308      	adds	r3, #8
 800260a:	2102      	movs	r1, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fc8f 	bl	8003f30 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002618:	e00f      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800261e:	3328      	adds	r3, #40	@ 0x28
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fd36 	bl	8004094 <RCCEx_PLL3_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800262e:	e004      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800263a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002642:	4ba5      	ldr	r3, [pc, #660]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800264a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800264e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002650:	4aa1      	ldr	r2, [pc, #644]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	430b      	orrs	r3, r1
 8002654:	6513      	str	r3, [r2, #80]	@ 0x50
 8002656:	e003      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800265c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800266c:	f04f 0900 	mov.w	r9, #0
 8002670:	ea58 0309 	orrs.w	r3, r8, r9
 8002674:	d047      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	2b04      	cmp	r3, #4
 800267e:	d82a      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002680:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	0800269d 	.word	0x0800269d
 800268c:	080026ab 	.word	0x080026ab
 8002690:	080026c1 	.word	0x080026c1
 8002694:	080026df 	.word	0x080026df
 8002698:	080026df 	.word	0x080026df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800269c:	4b8e      	ldr	r3, [pc, #568]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	4a8d      	ldr	r2, [pc, #564]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026a8:	e01a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ae:	3308      	adds	r3, #8
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fc3c 	bl	8003f30 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026be:	e00f      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c4:	3328      	adds	r3, #40	@ 0x28
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fce3 	bl	8004094 <RCCEx_PLL3_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026d4:	e004      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026dc:	e000      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80026de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e8:	4b7b      	ldr	r3, [pc, #492]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ec:	f023 0107 	bic.w	r1, r3, #7
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	4a78      	ldr	r2, [pc, #480]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002712:	f04f 0b00 	mov.w	fp, #0
 8002716:	ea5a 030b 	orrs.w	r3, sl, fp
 800271a:	d04c      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002726:	d030      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800272c:	d829      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800272e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002730:	d02d      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002732:	2bc0      	cmp	r3, #192	@ 0xc0
 8002734:	d825      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002736:	2b80      	cmp	r3, #128	@ 0x80
 8002738:	d018      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d821      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002742:	2b40      	cmp	r3, #64	@ 0x40
 8002744:	d007      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002746:	e01c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	4a62      	ldr	r2, [pc, #392]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002754:	e01c      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275a:	3308      	adds	r3, #8
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f001 fbe6 	bl	8003f30 <RCCEx_PLL2_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800276a:	e011      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	3328      	adds	r3, #40	@ 0x28
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fc8d 	bl	8004094 <RCCEx_PLL3_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002788:	e002      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002798:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027d0:	460b      	mov	r3, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	d053      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027e2:	d035      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027e8:	d82e      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027ee:	d031      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027f4:	d828      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d01a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002800:	d822      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800280a:	d007      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800280c:	e01c      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280e:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800281a:	e01c      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002820:	3308      	adds	r3, #8
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fb83 	bl	8003f30 <RCCEx_PLL2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002830:	e011      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002836:	3328      	adds	r3, #40	@ 0x28
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f001 fc2a 	bl	8004094 <RCCEx_PLL3_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002846:	e006      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800284e:	e002      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800286e:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002870:	430b      	orrs	r3, r1
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800287a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800288a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002898:	460b      	mov	r3, r1
 800289a:	4313      	orrs	r3, r2
 800289c:	d056      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028aa:	d038      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028b0:	d831      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028b6:	d034      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028bc:	d82b      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c2:	d01d      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c8:	d825      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80028ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028d4:	e01f      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028d6:	bf00      	nop
 80028d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028e8:	e01c      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ee:	3308      	adds	r3, #8
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fb1c 	bl	8003f30 <RCCEx_PLL2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028fe:	e011      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002904:	3328      	adds	r3, #40	@ 0x28
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fbc3 	bl	8004094 <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800292c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800293c:	4a8a      	ldr	r2, [pc, #552]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293e:	430b      	orrs	r3, r1
 8002940:	6593      	str	r3, [r2, #88]	@ 0x58
 8002942:	e003      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800294c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002966:	460b      	mov	r3, r1
 8002968:	4313      	orrs	r3, r2
 800296a:	d03a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	2b30      	cmp	r3, #48	@ 0x30
 8002974:	d01f      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002976:	2b30      	cmp	r3, #48	@ 0x30
 8002978:	d819      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800297a:	2b20      	cmp	r3, #32
 800297c:	d00c      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d815      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002986:	2b10      	cmp	r3, #16
 8002988:	d111      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298a:	4b77      	ldr	r3, [pc, #476]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	4a76      	ldr	r2, [pc, #472]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299c:	3308      	adds	r3, #8
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fac5 	bl	8003f30 <RCCEx_PLL2_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029c4:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	4a65      	ldr	r2, [pc, #404]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80029ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	d051      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a0c:	d035      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a12:	d82e      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a18:	d031      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a1e:	d828      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d01a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	d822      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a34:	d007      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a36:	e01c      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a44:	e01c      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fa6e 	bl	8003f30 <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a5a:	e011      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a60:	3328      	adds	r3, #40	@ 0x28
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fb15 	bl	8004094 <RCCEx_PLL3_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	4a34      	ldr	r2, [pc, #208]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	d056      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad0:	d033      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad6:	d82c      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002adc:	d02f      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ae2:	d826      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ae8:	d02b      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aee:	d820      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002af4:	d012      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002afa:	d81a      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d022      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d115      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 fa0e 	bl	8003f30 <RCCEx_PLL2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b1a:	e015      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b20:	3328      	adds	r3, #40	@ 0x28
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fab5 	bl	8004094 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b30:	e00a      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b38:	e006      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b3a:	bf00      	nop
 8002b3c:	e004      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5e:	4a02      	ldr	r2, [pc, #8]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b64:	e006      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4313      	orrs	r3, r2
 8002b92:	d055      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba0:	d033      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba6:	d82c      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d02f      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d826      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bb8:	d02b      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bbe:	d820      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc4:	d012      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bca:	d81a      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d022      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	3308      	adds	r3, #8
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f9a6 	bl	8003f30 <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bea:	e015      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	3328      	adds	r3, #40	@ 0x28
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fa4d 	bl	8004094 <RCCEx_PLL3_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c00:	e00a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c08:	e006      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c0a:	bf00      	nop
 8002c0c:	e004      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c0e:	bf00      	nop
 8002c10:	e002      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c12:	bf00      	nop
 8002c14:	e000      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c20:	4ba3      	ldr	r3, [pc, #652]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c30:	4a9f      	ldr	r2, [pc, #636]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c36:	e003      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	d037      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c6a:	d00e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c70:	d816      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	4a8b      	ldr	r2, [pc, #556]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c88:	e00f      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8e:	3308      	adds	r3, #8
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 f94c 	bl	8003f30 <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c9e:	e004      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cc6:	e003      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4313      	orrs	r3, r2
 8002cee:	d039      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d81c      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d3d 	.word	0x08002d3d
 8002d04:	08002d11 	.word	0x08002d11
 8002d08:	08002d1f 	.word	0x08002d1f
 8002d0c:	08002d3d 	.word	0x08002d3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d10:	4b67      	ldr	r3, [pc, #412]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	4a66      	ldr	r2, [pc, #408]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d1c:	e00f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d22:	3308      	adds	r3, #8
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 f902 	bl	8003f30 <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d32:	e004      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	f023 0103 	bic.w	r1, r3, #3
 8002d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	4a56      	ldr	r2, [pc, #344]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d56:	430b      	orrs	r3, r1
 8002d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d5a:	e003      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f000 809f 	beq.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d86:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d92:	f7fe f8cf 	bl	8000f34 <HAL_GetTick>
 8002d96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9c:	f7fe f8ca 	bl	8000f34 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	@ 0x64
 8002daa:	d903      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ed      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d179      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dc8:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dd4:	4053      	eors	r3, r2
 8002dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dde:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	4a30      	ldr	r2, [pc, #192]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e02:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d118      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe f88c 	bl	8000f34 <HAL_GetTick>
 8002e1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e20:	e00d      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe f887 	bl	8000f34 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d903      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e3c:	e005      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0eb      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d129      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e62:	d10e      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e74:	091a      	lsrs	r2, r3, #4
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6113      	str	r3, [r2, #16]
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e8c:	6113      	str	r3, [r2, #16]
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea4:	e00e      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58024800 	.word	0x58024800
 8002eb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f002 0301 	and.w	r3, r2, #1
 8002ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f000 8089 	beq.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eec:	2b28      	cmp	r3, #40	@ 0x28
 8002eee:	d86b      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002fd1 	.word	0x08002fd1
 8002efc:	08002fc9 	.word	0x08002fc9
 8002f00:	08002fc9 	.word	0x08002fc9
 8002f04:	08002fc9 	.word	0x08002fc9
 8002f08:	08002fc9 	.word	0x08002fc9
 8002f0c:	08002fc9 	.word	0x08002fc9
 8002f10:	08002fc9 	.word	0x08002fc9
 8002f14:	08002fc9 	.word	0x08002fc9
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	08002fc9 	.word	0x08002fc9
 8002f20:	08002fc9 	.word	0x08002fc9
 8002f24:	08002fc9 	.word	0x08002fc9
 8002f28:	08002fc9 	.word	0x08002fc9
 8002f2c:	08002fc9 	.word	0x08002fc9
 8002f30:	08002fc9 	.word	0x08002fc9
 8002f34:	08002fc9 	.word	0x08002fc9
 8002f38:	08002fb3 	.word	0x08002fb3
 8002f3c:	08002fc9 	.word	0x08002fc9
 8002f40:	08002fc9 	.word	0x08002fc9
 8002f44:	08002fc9 	.word	0x08002fc9
 8002f48:	08002fc9 	.word	0x08002fc9
 8002f4c:	08002fc9 	.word	0x08002fc9
 8002f50:	08002fc9 	.word	0x08002fc9
 8002f54:	08002fc9 	.word	0x08002fc9
 8002f58:	08002fd1 	.word	0x08002fd1
 8002f5c:	08002fc9 	.word	0x08002fc9
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	08002fc9 	.word	0x08002fc9
 8002f6c:	08002fc9 	.word	0x08002fc9
 8002f70:	08002fc9 	.word	0x08002fc9
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fc9 	.word	0x08002fc9
 8002f80:	08002fc9 	.word	0x08002fc9
 8002f84:	08002fc9 	.word	0x08002fc9
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fd1 	.word	0x08002fd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 ffc3 	bl	8003f30 <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e00f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	3328      	adds	r3, #40	@ 0x28
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 f86a 	bl	8004094 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fda:	4bbf      	ldr	r3, [pc, #764]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe8:	4abb      	ldr	r2, [pc, #748]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fee:	e003      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f002 0302 	and.w	r3, r2, #2
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800300e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003012:	460b      	mov	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	d041      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301e:	2b05      	cmp	r3, #5
 8003020:	d824      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003022:	a201      	add	r2, pc, #4	@ (adr r2, 8003028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003075 	.word	0x08003075
 800302c:	08003041 	.word	0x08003041
 8003030:	08003057 	.word	0x08003057
 8003034:	08003075 	.word	0x08003075
 8003038:	08003075 	.word	0x08003075
 800303c:	08003075 	.word	0x08003075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	3308      	adds	r3, #8
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 ff71 	bl	8003f30 <RCCEx_PLL2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	3328      	adds	r3, #40	@ 0x28
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f818 	bl	8004094 <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800307e:	4b96      	ldr	r3, [pc, #600]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f023 0107 	bic.w	r1, r3, #7
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800308c:	4a92      	ldr	r2, [pc, #584]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800308e:	430b      	orrs	r3, r1
 8003090:	6553      	str	r3, [r2, #84]	@ 0x54
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f002 0304 	and.w	r3, r2, #4
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	d044      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d825      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	0800311d 	.word	0x0800311d
 80030e4:	0800311d 	.word	0x0800311d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ec:	3308      	adds	r3, #8
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 ff1d 	bl	8003f30 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030fc:	e00f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	3328      	adds	r3, #40	@ 0x28
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ffc4 	bl	8004094 <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003126:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f023 0107 	bic.w	r1, r3, #7
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003136:	4a68      	ldr	r2, [pc, #416]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6593      	str	r3, [r2, #88]	@ 0x58
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f002 0320 	and.w	r3, r2, #32
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800315c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d055      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003172:	d033      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003178:	d82c      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317e:	d02f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d826      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800318c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003190:	d820      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003196:	d012      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319c:	d81a      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d022      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a6:	d115      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	3308      	adds	r3, #8
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 febd 	bl	8003f30 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031bc:	e015      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	3328      	adds	r3, #40	@ 0x28
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 ff64 	bl	8004094 <RCCEx_PLL3_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031d2:	e00a      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f2:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	4a35      	ldr	r2, [pc, #212]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6553      	str	r3, [r2, #84]	@ 0x54
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d058      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800323e:	d033      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003240:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003244:	d82c      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d826      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003256:	d02b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800325c:	d820      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003262:	d012      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003268:	d81a      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003272:	d115      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	3308      	adds	r3, #8
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fe57 	bl	8003f30 <RCCEx_PLL2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003288:	e015      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328e:	3328      	adds	r3, #40	@ 0x28
 8003290:	2102      	movs	r1, #2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fefe 	bl	8004094 <RCCEx_PLL3_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032a8:	bf00      	nop
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032ce:	4a02      	ldr	r2, [pc, #8]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d4:	e006      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	d055      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800330c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003310:	d033      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003312:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003316:	d82c      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331c:	d02f      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003322:	d826      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003324:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003328:	d02b      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800332a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800332e:	d820      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003334:	d012      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333a:	d81a      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003344:	d115      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	3308      	adds	r3, #8
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fdee 	bl	8003f30 <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800335a:	e015      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	3328      	adds	r3, #40	@ 0x28
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fe95 	bl	8004094 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003370:	e00a      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003390:	4ba1      	ldr	r3, [pc, #644]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033a0:	4a9d      	ldr	r2, [pc, #628]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 0308 	and.w	r3, r2, #8
 80033bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d01e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	3328      	adds	r3, #40	@ 0x28
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fe54 	bl	8004094 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033f8:	4b87      	ldr	r3, [pc, #540]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003408:	4a83      	ldr	r2, [pc, #524]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f002 0310 	and.w	r3, r2, #16
 800341a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d01e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343a:	d10c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	3328      	adds	r3, #40	@ 0x28
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fe25 	bl	8004094 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003456:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003466:	4a6c      	ldr	r2, [pc, #432]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d03e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003498:	d022      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800349a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800349e:	d81b      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80034aa:	e015      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fd3b 	bl	8003f30 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	3328      	adds	r3, #40	@ 0x28
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fde2 	bl	8004094 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034fa:	4a47      	ldr	r2, [pc, #284]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003518:	2300      	movs	r3, #0
 800351a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800351c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003532:	d01f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003538:	d818      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353e:	d003      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	4a32      	ldr	r2, [pc, #200]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3328      	adds	r3, #40	@ 0x28
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd98 	bl	8004094 <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	4a22      	ldr	r2, [pc, #136]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6553      	str	r3, [r2, #84]	@ 0x54
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80035b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d034      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d007      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80035ca:	e011      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035d8:	e00e      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	3308      	adds	r3, #8
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fca4 	bl	8003f30 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360e:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003610:	430b      	orrs	r3, r1
 8003612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003632:	2300      	movs	r3, #0
 8003634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d00c      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd23 	bl	8004094 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003666:	663b      	str	r3, [r7, #96]	@ 0x60
 8003668:	2300      	movs	r3, #0
 800366a:	667b      	str	r3, [r7, #100]	@ 0x64
 800366c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d038      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003682:	d018      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003688:	d811      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800368a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368e:	d014      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003694:	d80b      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800369a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369e:	d106      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4bc3      	ldr	r3, [pc, #780]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4ac2      	ldr	r2, [pc, #776]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c8:	4bb9      	ldr	r3, [pc, #740]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d8:	4ab5      	ldr	r2, [pc, #724]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036f6:	2300      	movs	r3, #0
 80036f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003704:	4baa      	ldr	r3, [pc, #680]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	4aa7      	ldr	r2, [pc, #668]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003724:	653b      	str	r3, [r7, #80]	@ 0x50
 8003726:	2300      	movs	r3, #0
 8003728:	657b      	str	r3, [r7, #84]	@ 0x54
 800372a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003734:	4b9e      	ldr	r3, [pc, #632]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003744:	4a9a      	ldr	r2, [pc, #616]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003746:	430b      	orrs	r3, r1
 8003748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003766:	4b92      	ldr	r3, [pc, #584]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003774:	4a8e      	ldr	r2, [pc, #568]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003786:	643b      	str	r3, [r7, #64]	@ 0x40
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003790:	460b      	mov	r3, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003796:	4b86      	ldr	r3, [pc, #536]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	4a85      	ldr	r2, [pc, #532]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037a0:	6113      	str	r3, [r2, #16]
 80037a2:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037ae:	4a80      	ldr	r2, [pc, #512]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037c2:	2300      	movs	r3, #0
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037d0:	4b77      	ldr	r3, [pc, #476]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	4a74      	ldr	r2, [pc, #464]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003800:	4b6b      	ldr	r3, [pc, #428]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	4a67      	ldr	r2, [pc, #412]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	2100      	movs	r1, #0
 8003820:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3308      	adds	r3, #8
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fb78 	bl	8003f30 <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	2100      	movs	r1, #0
 8003860:	6239      	str	r1, [r7, #32]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
 8003868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d011      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb58 	bl	8003f30 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	2100      	movs	r1, #0
 80038a0:	61b9      	str	r1, [r7, #24]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d011      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	3308      	adds	r3, #8
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fb38 	bl	8003f30 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	2100      	movs	r1, #0
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fbca 	bl	8004094 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	2100      	movs	r1, #0
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	3328      	adds	r3, #40	@ 0x28
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fbaa 	bl	8004094 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	2100      	movs	r1, #0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	e9d7 1200 	ldrd	r1, r2, [r7]
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d011      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fb8a 	bl	8004094 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80039aa:	46bd      	mov	sp, r7
 80039ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b0:	58024400 	.word	0x58024400

080039b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039b8:	f7fe fd96 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4904      	ldr	r1, [pc, #16]	@ (80039dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58024400 	.word	0x58024400
 80039dc:	080059e4 	.word	0x080059e4

080039e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	@ 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039f2:	4b9f      	ldr	r3, [pc, #636]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	0b1b      	lsrs	r3, r3, #12
 80039f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a0a:	4b99      	ldr	r3, [pc, #612]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8111 	beq.w	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d056      	beq.n	8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a4a:	e099      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a4c:	4b88      	ldr	r3, [pc, #544]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a58:	4b85      	ldr	r3, [pc, #532]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	4a84      	ldr	r2, [pc, #528]	@ (8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ab2:	e087      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ada:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af6:	e065      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b59      	ldr	r3, [pc, #356]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e043      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b48      	ldr	r3, [pc, #288]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	e021      	b.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c18:	ee17 2a90 	vmov	r2, s15
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c20:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c46:	ee17 2a90 	vmov	r2, s15
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c4e:	e008      	b.n	8003c62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	bf00      	nop
 8003c64:	3724      	adds	r7, #36	@ 0x24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	03d09000 	.word	0x03d09000
 8003c78:	46000000 	.word	0x46000000
 8003c7c:	4c742400 	.word	0x4c742400
 8003c80:	4a742400 	.word	0x4a742400
 8003c84:	4af42400 	.word	0x4af42400

08003c88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c90:	4ba1      	ldr	r3, [pc, #644]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	0d1b      	lsrs	r3, r3, #20
 8003ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cb2:	4b99      	ldr	r3, [pc, #612]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8111 	beq.w	8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	f000 8083 	beq.w	8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	f200 80a1 	bhi.w	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d056      	beq.n	8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cf2:	e099      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf4:	4b88      	ldr	r3, [pc, #544]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02d      	beq.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d00:	4b85      	ldr	r3, [pc, #532]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	4a84      	ldr	r2, [pc, #528]	@ (8003f1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d5a:	e087      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e065      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de2:	e043      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b48      	ldr	r3, [pc, #288]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e26:	e021      	b.n	8003e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3a:	4b37      	ldr	r3, [pc, #220]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	0a5b      	lsrs	r3, r3, #9
 8003e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e92:	ee17 2a90 	vmov	r2, s15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec0:	ee17 2a90 	vmov	r2, s15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ec8:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	0e1b      	lsrs	r3, r3, #24
 8003ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eee:	ee17 2a90 	vmov	r2, s15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
}
 8003f0a:	bf00      	nop
 8003f0c:	3724      	adds	r7, #36	@ 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	03d09000 	.word	0x03d09000
 8003f20:	46000000 	.word	0x46000000
 8003f24:	4c742400 	.word	0x4c742400
 8003f28:	4a742400 	.word	0x4a742400
 8003f2c:	4af42400 	.word	0x4af42400

08003f30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f3e:	4b53      	ldr	r3, [pc, #332]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d101      	bne.n	8003f4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e099      	b.n	8004082 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4e      	ldr	r2, [pc, #312]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fc ffeb 	bl	8000f34 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f62:	f7fc ffe7 	bl	8000f34 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e086      	b.n	8004082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f74:	4b45      	ldr	r3, [pc, #276]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f80:	4b42      	ldr	r3, [pc, #264]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	493f      	ldr	r1, [pc, #252]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	025b      	lsls	r3, r3, #9
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fc4:	4931      	ldr	r1, [pc, #196]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	492d      	ldr	r1, [pc, #180]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	f023 0220 	bic.w	r2, r3, #32
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4928      	ldr	r1, [pc, #160]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fee:	4b27      	ldr	r3, [pc, #156]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	4a26      	ldr	r2, [pc, #152]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <RCCEx_PLL2_Config+0x160>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	69d2      	ldr	r2, [r2, #28]
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	4920      	ldr	r1, [pc, #128]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800400e:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004014:	f043 0310 	orr.w	r3, r3, #16
 8004018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004020:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4a19      	ldr	r2, [pc, #100]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800402c:	e00f      	b.n	800404e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004034:	4b15      	ldr	r3, [pc, #84]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	4a14      	ldr	r2, [pc, #80]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004040:	e005      	b.n	800404e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	4a11      	ldr	r2, [pc, #68]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800404c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fc ff6b 	bl	8000f34 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004060:	e008      	b.n	8004074 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004062:	f7fc ff67 	bl	8000f34 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <RCCEx_PLL2_Config+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
 8004090:	ffff0007 	.word	0xffff0007

08004094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040a2:	4b53      	ldr	r3, [pc, #332]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d101      	bne.n	80040b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e099      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040b2:	4b4f      	ldr	r3, [pc, #316]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a4e      	ldr	r2, [pc, #312]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fc ff39 	bl	8000f34 <HAL_GetTick>
 80040c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040c6:	f7fc ff35 	bl	8000f34 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e086      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040d8:	4b45      	ldr	r3, [pc, #276]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040e4:	4b42      	ldr	r3, [pc, #264]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	051b      	lsls	r3, r3, #20
 80040f2:	493f      	ldr	r1, [pc, #252]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	3b01      	subs	r3, #1
 8004108:	025b      	lsls	r3, r3, #9
 800410a:	b29b      	uxth	r3, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	3b01      	subs	r3, #1
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004128:	4931      	ldr	r1, [pc, #196]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800412e:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492d      	ldr	r1, [pc, #180]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004140:	4b2b      	ldr	r3, [pc, #172]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	4928      	ldr	r1, [pc, #160]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004152:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <RCCEx_PLL3_Config+0x160>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	69d2      	ldr	r2, [r2, #28]
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	4920      	ldr	r1, [pc, #128]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004172:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	4a1e      	ldr	r2, [pc, #120]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004184:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800418a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800418e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004190:	e00f      	b.n	80041b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004198:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a14      	ldr	r2, [pc, #80]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 800419e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041a4:	e005      	b.n	80041b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a0e      	ldr	r2, [pc, #56]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041be:	f7fc feb9 	bl	8000f34 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041c6:	f7fc feb5 	bl	8000f34 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <RCCEx_PLL3_Config+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	ffff0007 	.word	0xffff0007

080041f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e049      	b.n	800429e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fcfa 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f000 f96e 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01b      	beq.n	800430a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0202 	mvn.w	r2, #2
 80042da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8f3 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80042f6:	e005      	b.n	8004304 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8e5 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8f6 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0204 	mvn.w	r2, #4
 8004326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8cd 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 8004342:	e005      	b.n	8004350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8bf 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8d0 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01b      	beq.n	80043a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0208 	mvn.w	r2, #8
 8004372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2204      	movs	r2, #4
 8004378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8a7 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 800438e:	e005      	b.n	800439c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f899 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8aa 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01b      	beq.n	80043ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0210 	mvn.w	r2, #16
 80043be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2208      	movs	r2, #8
 80043c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f881 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80043da:	e005      	b.n	80043e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f873 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f884 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00c      	beq.n	8004412 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0201 	mvn.w	r2, #1
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f851 	bl	80044b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9aa 	bl	8004794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9a2 	bl	80047a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f83e 	bl	8004504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0220 	mvn.w	r2, #32
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f96a 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a43      	ldr	r2, [pc, #268]	@ (8004648 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a42      	ldr	r2, [pc, #264]	@ (800464c <TIM_Base_SetConfig+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <TIM_Base_SetConfig+0x138>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a40      	ldr	r2, [pc, #256]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a35      	ldr	r2, [pc, #212]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01f      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004578:	d01b      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a32      	ldr	r2, [pc, #200]	@ (8004648 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d017      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a31      	ldr	r2, [pc, #196]	@ (800464c <TIM_Base_SetConfig+0x134>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a30      	ldr	r2, [pc, #192]	@ (8004650 <TIM_Base_SetConfig+0x138>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00f      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2f      	ldr	r2, [pc, #188]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00b      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2e      	ldr	r2, [pc, #184]	@ (8004658 <TIM_Base_SetConfig+0x140>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	@ (800465c <TIM_Base_SetConfig+0x144>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d003      	beq.n	80045b2 <TIM_Base_SetConfig+0x9a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004660 <TIM_Base_SetConfig+0x148>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d108      	bne.n	80045c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a16      	ldr	r2, [pc, #88]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <TIM_Base_SetConfig+0x140>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <TIM_Base_SetConfig+0x144>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_Base_SetConfig+0x148>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
  }
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e06d      	b.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a30      	ldr	r2, [pc, #192]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a20      	ldr	r2, [pc, #128]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d01d      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a16      	ldr	r2, [pc, #88]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a15      	ldr	r2, [pc, #84]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10c      	bne.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40001800 	.word	0x40001800
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e042      	b.n	8004854 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc fa8d 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2224      	movs	r2, #36	@ 0x24
 80047ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fd90 	bl	800532c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f825 	bl	800485c <UART_SetConfig>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e01b      	b.n	8004854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800482a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800483a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fe0f 	bl	8005470 <UART_CheckIdleState>
 8004852:	4603      	mov	r3, r0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b092      	sub	sp, #72	@ 0x48
 8004862:	af00      	add	r7, sp, #0
 8004864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4313      	orrs	r3, r2
 8004882:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4bbe      	ldr	r3, [pc, #760]	@ (8004b84 <UART_SetConfig+0x328>)
 800488c:	4013      	ands	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004894:	430b      	orrs	r3, r1
 8004896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4ab3      	ldr	r2, [pc, #716]	@ (8004b88 <UART_SetConfig+0x32c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c4:	4313      	orrs	r3, r2
 80048c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	4baf      	ldr	r3, [pc, #700]	@ (8004b8c <UART_SetConfig+0x330>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048d8:	430b      	orrs	r3, r1
 80048da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	f023 010f 	bic.w	r1, r3, #15
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4aa6      	ldr	r2, [pc, #664]	@ (8004b90 <UART_SetConfig+0x334>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d177      	bne.n	80049ec <UART_SetConfig+0x190>
 80048fc:	4ba5      	ldr	r3, [pc, #660]	@ (8004b94 <UART_SetConfig+0x338>)
 80048fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004904:	2b28      	cmp	r3, #40	@ 0x28
 8004906:	d86d      	bhi.n	80049e4 <UART_SetConfig+0x188>
 8004908:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <UART_SetConfig+0xb4>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	080049b5 	.word	0x080049b5
 8004914:	080049e5 	.word	0x080049e5
 8004918:	080049e5 	.word	0x080049e5
 800491c:	080049e5 	.word	0x080049e5
 8004920:	080049e5 	.word	0x080049e5
 8004924:	080049e5 	.word	0x080049e5
 8004928:	080049e5 	.word	0x080049e5
 800492c:	080049e5 	.word	0x080049e5
 8004930:	080049bd 	.word	0x080049bd
 8004934:	080049e5 	.word	0x080049e5
 8004938:	080049e5 	.word	0x080049e5
 800493c:	080049e5 	.word	0x080049e5
 8004940:	080049e5 	.word	0x080049e5
 8004944:	080049e5 	.word	0x080049e5
 8004948:	080049e5 	.word	0x080049e5
 800494c:	080049e5 	.word	0x080049e5
 8004950:	080049c5 	.word	0x080049c5
 8004954:	080049e5 	.word	0x080049e5
 8004958:	080049e5 	.word	0x080049e5
 800495c:	080049e5 	.word	0x080049e5
 8004960:	080049e5 	.word	0x080049e5
 8004964:	080049e5 	.word	0x080049e5
 8004968:	080049e5 	.word	0x080049e5
 800496c:	080049e5 	.word	0x080049e5
 8004970:	080049cd 	.word	0x080049cd
 8004974:	080049e5 	.word	0x080049e5
 8004978:	080049e5 	.word	0x080049e5
 800497c:	080049e5 	.word	0x080049e5
 8004980:	080049e5 	.word	0x080049e5
 8004984:	080049e5 	.word	0x080049e5
 8004988:	080049e5 	.word	0x080049e5
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049d5 	.word	0x080049d5
 8004994:	080049e5 	.word	0x080049e5
 8004998:	080049e5 	.word	0x080049e5
 800499c:	080049e5 	.word	0x080049e5
 80049a0:	080049e5 	.word	0x080049e5
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049e5 	.word	0x080049e5
 80049ac:	080049e5 	.word	0x080049e5
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e222      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e21e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e21a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e216      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049d4:	2320      	movs	r3, #32
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e212      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049dc:	2340      	movs	r3, #64	@ 0x40
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e20e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e20a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a69      	ldr	r2, [pc, #420]	@ (8004b98 <UART_SetConfig+0x33c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d130      	bne.n	8004a58 <UART_SetConfig+0x1fc>
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <UART_SetConfig+0x338>)
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d826      	bhi.n	8004a50 <UART_SetConfig+0x1f4>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <UART_SetConfig+0x1ac>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a21 	.word	0x08004a21
 8004a0c:	08004a29 	.word	0x08004a29
 8004a10:	08004a31 	.word	0x08004a31
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e1ec      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e1e8      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a30:	2308      	movs	r3, #8
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e1e4      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e1e0      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a40:	2320      	movs	r3, #32
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e1dc      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a48:	2340      	movs	r3, #64	@ 0x40
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e1d8      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a56:	e1d4      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b9c <UART_SetConfig+0x340>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d130      	bne.n	8004ac4 <UART_SetConfig+0x268>
 8004a62:	4b4c      	ldr	r3, [pc, #304]	@ (8004b94 <UART_SetConfig+0x338>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d826      	bhi.n	8004abc <UART_SetConfig+0x260>
 8004a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <UART_SetConfig+0x218>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004a95 	.word	0x08004a95
 8004a7c:	08004a9d 	.word	0x08004a9d
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aad 	.word	0x08004aad
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e1b6      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e1b2      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e1ae      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e1aa      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004aac:	2320      	movs	r3, #32
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e1a6      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004ab4:	2340      	movs	r3, #64	@ 0x40
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e1a2      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e19e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a35      	ldr	r2, [pc, #212]	@ (8004ba0 <UART_SetConfig+0x344>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d130      	bne.n	8004b30 <UART_SetConfig+0x2d4>
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <UART_SetConfig+0x338>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d826      	bhi.n	8004b28 <UART_SetConfig+0x2cc>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x284>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e180      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e17c      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e178      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e174      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e170      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b20:	2340      	movs	r3, #64	@ 0x40
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e16c      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e168      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba4 <UART_SetConfig+0x348>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d142      	bne.n	8004bc0 <UART_SetConfig+0x364>
 8004b3a:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <UART_SetConfig+0x338>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d838      	bhi.n	8004bb8 <UART_SetConfig+0x35c>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <UART_SetConfig+0x2f0>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b75 	.word	0x08004b75
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004bb1 	.word	0x08004bb1
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e14a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e146      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e142      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e13e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004b84:	cfff69f3 	.word	0xcfff69f3
 8004b88:	58000c00 	.word	0x58000c00
 8004b8c:	11fff4ff 	.word	0x11fff4ff
 8004b90:	40011000 	.word	0x40011000
 8004b94:	58024400 	.word	0x58024400
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e128      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004bb0:	2340      	movs	r3, #64	@ 0x40
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e124      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004bb8:	2380      	movs	r3, #128	@ 0x80
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e120      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4acb      	ldr	r2, [pc, #812]	@ (8004ef4 <UART_SetConfig+0x698>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d176      	bne.n	8004cb8 <UART_SetConfig+0x45c>
 8004bca:	4bcb      	ldr	r3, [pc, #812]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd2:	2b28      	cmp	r3, #40	@ 0x28
 8004bd4:	d86c      	bhi.n	8004cb0 <UART_SetConfig+0x454>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0x380>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c81 	.word	0x08004c81
 8004be0:	08004cb1 	.word	0x08004cb1
 8004be4:	08004cb1 	.word	0x08004cb1
 8004be8:	08004cb1 	.word	0x08004cb1
 8004bec:	08004cb1 	.word	0x08004cb1
 8004bf0:	08004cb1 	.word	0x08004cb1
 8004bf4:	08004cb1 	.word	0x08004cb1
 8004bf8:	08004cb1 	.word	0x08004cb1
 8004bfc:	08004c89 	.word	0x08004c89
 8004c00:	08004cb1 	.word	0x08004cb1
 8004c04:	08004cb1 	.word	0x08004cb1
 8004c08:	08004cb1 	.word	0x08004cb1
 8004c0c:	08004cb1 	.word	0x08004cb1
 8004c10:	08004cb1 	.word	0x08004cb1
 8004c14:	08004cb1 	.word	0x08004cb1
 8004c18:	08004cb1 	.word	0x08004cb1
 8004c1c:	08004c91 	.word	0x08004c91
 8004c20:	08004cb1 	.word	0x08004cb1
 8004c24:	08004cb1 	.word	0x08004cb1
 8004c28:	08004cb1 	.word	0x08004cb1
 8004c2c:	08004cb1 	.word	0x08004cb1
 8004c30:	08004cb1 	.word	0x08004cb1
 8004c34:	08004cb1 	.word	0x08004cb1
 8004c38:	08004cb1 	.word	0x08004cb1
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004cb1 	.word	0x08004cb1
 8004c44:	08004cb1 	.word	0x08004cb1
 8004c48:	08004cb1 	.word	0x08004cb1
 8004c4c:	08004cb1 	.word	0x08004cb1
 8004c50:	08004cb1 	.word	0x08004cb1
 8004c54:	08004cb1 	.word	0x08004cb1
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004ca1 	.word	0x08004ca1
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004cb1 	.word	0x08004cb1
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004cb1 	.word	0x08004cb1
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e0bc      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e0b8      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e0b4      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e0b0      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e0ac      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004ca8:	2340      	movs	r3, #64	@ 0x40
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e0a8      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e0a4      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a8f      	ldr	r2, [pc, #572]	@ (8004efc <UART_SetConfig+0x6a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d130      	bne.n	8004d24 <UART_SetConfig+0x4c8>
 8004cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d826      	bhi.n	8004d1c <UART_SetConfig+0x4c0>
 8004cce:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <UART_SetConfig+0x478>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004cf5 	.word	0x08004cf5
 8004cdc:	08004cfd 	.word	0x08004cfd
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	2300      	movs	r3, #0
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e086      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e082      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e07e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e07a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e076      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d14:	2340      	movs	r3, #64	@ 0x40
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e072      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e06e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a75      	ldr	r2, [pc, #468]	@ (8004f00 <UART_SetConfig+0x6a4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d130      	bne.n	8004d90 <UART_SetConfig+0x534>
 8004d2e:	4b72      	ldr	r3, [pc, #456]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d826      	bhi.n	8004d88 <UART_SetConfig+0x52c>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <UART_SetConfig+0x4e4>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d59 	.word	0x08004d59
 8004d44:	08004d61 	.word	0x08004d61
 8004d48:	08004d69 	.word	0x08004d69
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e050      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d60:	2304      	movs	r3, #4
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e04c      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e048      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e044      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d78:	2320      	movs	r3, #32
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e040      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d80:	2340      	movs	r3, #64	@ 0x40
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e03c      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e038      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a5b      	ldr	r2, [pc, #364]	@ (8004f04 <UART_SetConfig+0x6a8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d130      	bne.n	8004dfc <UART_SetConfig+0x5a0>
 8004d9a:	4b57      	ldr	r3, [pc, #348]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d826      	bhi.n	8004df4 <UART_SetConfig+0x598>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <UART_SetConfig+0x550>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dc5 	.word	0x08004dc5
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	08004dd5 	.word	0x08004dd5
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dca:	e01a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e016      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e012      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e00e      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004de4:	2320      	movs	r3, #32
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dea:	e00a      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004dec:	2340      	movs	r3, #64	@ 0x40
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e006      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfa:	e002      	b.n	8004e02 <UART_SetConfig+0x5a6>
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3f      	ldr	r2, [pc, #252]	@ (8004f04 <UART_SetConfig+0x6a8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	f040 80f8 	bne.w	8004ffe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	dc46      	bgt.n	8004ea4 <UART_SetConfig+0x648>
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	f2c0 8082 	blt.w	8004f20 <UART_SetConfig+0x6c4>
 8004e1c:	3b02      	subs	r3, #2
 8004e1e:	2b1e      	cmp	r3, #30
 8004e20:	d87e      	bhi.n	8004f20 <UART_SetConfig+0x6c4>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <UART_SetConfig+0x5cc>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004eab 	.word	0x08004eab
 8004e2c:	08004f21 	.word	0x08004f21
 8004e30:	08004eb3 	.word	0x08004eb3
 8004e34:	08004f21 	.word	0x08004f21
 8004e38:	08004f21 	.word	0x08004f21
 8004e3c:	08004f21 	.word	0x08004f21
 8004e40:	08004ec3 	.word	0x08004ec3
 8004e44:	08004f21 	.word	0x08004f21
 8004e48:	08004f21 	.word	0x08004f21
 8004e4c:	08004f21 	.word	0x08004f21
 8004e50:	08004f21 	.word	0x08004f21
 8004e54:	08004f21 	.word	0x08004f21
 8004e58:	08004f21 	.word	0x08004f21
 8004e5c:	08004f21 	.word	0x08004f21
 8004e60:	08004ed3 	.word	0x08004ed3
 8004e64:	08004f21 	.word	0x08004f21
 8004e68:	08004f21 	.word	0x08004f21
 8004e6c:	08004f21 	.word	0x08004f21
 8004e70:	08004f21 	.word	0x08004f21
 8004e74:	08004f21 	.word	0x08004f21
 8004e78:	08004f21 	.word	0x08004f21
 8004e7c:	08004f21 	.word	0x08004f21
 8004e80:	08004f21 	.word	0x08004f21
 8004e84:	08004f21 	.word	0x08004f21
 8004e88:	08004f21 	.word	0x08004f21
 8004e8c:	08004f21 	.word	0x08004f21
 8004e90:	08004f21 	.word	0x08004f21
 8004e94:	08004f21 	.word	0x08004f21
 8004e98:	08004f21 	.word	0x08004f21
 8004e9c:	08004f21 	.word	0x08004f21
 8004ea0:	08004f13 	.word	0x08004f13
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d037      	beq.n	8004f18 <UART_SetConfig+0x6bc>
 8004ea8:	e03a      	b.n	8004f20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004eaa:	f7fe fd83 	bl	80039b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004eb0:	e03c      	b.n	8004f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fd92 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec0:	e034      	b.n	8004f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec2:	f107 0318 	add.w	r3, r7, #24
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fede 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ed0:	e02c      	b.n	8004f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d016      	beq.n	8004f0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <UART_SetConfig+0x69c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	4a07      	ldr	r2, [pc, #28]	@ (8004f08 <UART_SetConfig+0x6ac>)
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ef0:	e01c      	b.n	8004f2c <UART_SetConfig+0x6d0>
 8004ef2:	bf00      	nop
 8004ef4:	40011400 	.word	0x40011400
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	40007800 	.word	0x40007800
 8004f00:	40007c00 	.word	0x40007c00
 8004f04:	58000c00 	.word	0x58000c00
 8004f08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f0c:	4b9d      	ldr	r3, [pc, #628]	@ (8005184 <UART_SetConfig+0x928>)
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f10:	e00c      	b.n	8004f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f12:	4b9d      	ldr	r3, [pc, #628]	@ (8005188 <UART_SetConfig+0x92c>)
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f16:	e009      	b.n	8004f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1e:	e005      	b.n	8004f2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 81de 	beq.w	80052f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	4a94      	ldr	r2, [pc, #592]	@ (800518c <UART_SetConfig+0x930>)
 8004f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d305      	bcc.n	8004f64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d903      	bls.n	8004f6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f6a:	e1c1      	b.n	80052f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	2200      	movs	r2, #0
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	60fa      	str	r2, [r7, #12]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	4a84      	ldr	r2, [pc, #528]	@ (800518c <UART_SetConfig+0x930>)
 8004f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2200      	movs	r2, #0
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f8e:	f7fb f9a3 	bl	80002d8 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	020b      	lsls	r3, r1, #8
 8004fa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fa8:	0202      	lsls	r2, r0, #8
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	6849      	ldr	r1, [r1, #4]
 8004fae:	0849      	lsrs	r1, r1, #1
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	eb12 0804 	adds.w	r8, r2, r4
 8004fba:	eb43 0905 	adc.w	r9, r3, r5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	4693      	mov	fp, r2
 8004fc8:	4652      	mov	r2, sl
 8004fca:	465b      	mov	r3, fp
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb f982 	bl	80002d8 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe2:	d308      	bcc.n	8004ff6 <UART_SetConfig+0x79a>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fea:	d204      	bcs.n	8004ff6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	e17c      	b.n	80052f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ffc:	e178      	b.n	80052f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	f040 80c5 	bne.w	8005194 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800500a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800500e:	2b20      	cmp	r3, #32
 8005010:	dc48      	bgt.n	80050a4 <UART_SetConfig+0x848>
 8005012:	2b00      	cmp	r3, #0
 8005014:	db7b      	blt.n	800510e <UART_SetConfig+0x8b2>
 8005016:	2b20      	cmp	r3, #32
 8005018:	d879      	bhi.n	800510e <UART_SetConfig+0x8b2>
 800501a:	a201      	add	r2, pc, #4	@ (adr r2, 8005020 <UART_SetConfig+0x7c4>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	080050ab 	.word	0x080050ab
 8005024:	080050b3 	.word	0x080050b3
 8005028:	0800510f 	.word	0x0800510f
 800502c:	0800510f 	.word	0x0800510f
 8005030:	080050bb 	.word	0x080050bb
 8005034:	0800510f 	.word	0x0800510f
 8005038:	0800510f 	.word	0x0800510f
 800503c:	0800510f 	.word	0x0800510f
 8005040:	080050cb 	.word	0x080050cb
 8005044:	0800510f 	.word	0x0800510f
 8005048:	0800510f 	.word	0x0800510f
 800504c:	0800510f 	.word	0x0800510f
 8005050:	0800510f 	.word	0x0800510f
 8005054:	0800510f 	.word	0x0800510f
 8005058:	0800510f 	.word	0x0800510f
 800505c:	0800510f 	.word	0x0800510f
 8005060:	080050db 	.word	0x080050db
 8005064:	0800510f 	.word	0x0800510f
 8005068:	0800510f 	.word	0x0800510f
 800506c:	0800510f 	.word	0x0800510f
 8005070:	0800510f 	.word	0x0800510f
 8005074:	0800510f 	.word	0x0800510f
 8005078:	0800510f 	.word	0x0800510f
 800507c:	0800510f 	.word	0x0800510f
 8005080:	0800510f 	.word	0x0800510f
 8005084:	0800510f 	.word	0x0800510f
 8005088:	0800510f 	.word	0x0800510f
 800508c:	0800510f 	.word	0x0800510f
 8005090:	0800510f 	.word	0x0800510f
 8005094:	0800510f 	.word	0x0800510f
 8005098:	0800510f 	.word	0x0800510f
 800509c:	0800510f 	.word	0x0800510f
 80050a0:	08005101 	.word	0x08005101
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d02e      	beq.n	8005106 <UART_SetConfig+0x8aa>
 80050a8:	e031      	b.n	800510e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050aa:	f7fd fa4d 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 80050ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050b0:	e033      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b2:	f7fd fa5f 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 80050b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050b8:	e02f      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fc8e 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c8:	e027      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ca:	f107 0318 	add.w	r3, r7, #24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fdda 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d8:	e01f      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050da:	4b2d      	ldr	r3, [pc, #180]	@ (8005190 <UART_SetConfig+0x934>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005190 <UART_SetConfig+0x934>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <UART_SetConfig+0x928>)
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050f8:	e00f      	b.n	800511a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050fa:	4b22      	ldr	r3, [pc, #136]	@ (8005184 <UART_SetConfig+0x928>)
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050fe:	e00c      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005100:	4b21      	ldr	r3, [pc, #132]	@ (8005188 <UART_SetConfig+0x92c>)
 8005102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005104:	e009      	b.n	800511a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800510c:	e005      	b.n	800511a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800511a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80e7 	beq.w	80052f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	4a19      	ldr	r2, [pc, #100]	@ (800518c <UART_SetConfig+0x930>)
 8005128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512c:	461a      	mov	r2, r3
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	fbb3 f3f2 	udiv	r3, r3, r2
 8005134:	005a      	lsls	r2, r3, #1
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	441a      	add	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d916      	bls.n	800517c <UART_SetConfig+0x920>
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005154:	d212      	bcs.n	800517c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	b29b      	uxth	r3, r3
 800515a:	f023 030f 	bic.w	r3, r3, #15
 800515e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	b29a      	uxth	r2, r3
 800516c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800516e:	4313      	orrs	r3, r2
 8005170:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	e0b9      	b.n	80052f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005182:	e0b5      	b.n	80052f0 <UART_SetConfig+0xa94>
 8005184:	03d09000 	.word	0x03d09000
 8005188:	003d0900 	.word	0x003d0900
 800518c:	080059f4 	.word	0x080059f4
 8005190:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005194:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005198:	2b20      	cmp	r3, #32
 800519a:	dc49      	bgt.n	8005230 <UART_SetConfig+0x9d4>
 800519c:	2b00      	cmp	r3, #0
 800519e:	db7c      	blt.n	800529a <UART_SetConfig+0xa3e>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d87a      	bhi.n	800529a <UART_SetConfig+0xa3e>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0x950>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	08005237 	.word	0x08005237
 80051b0:	0800523f 	.word	0x0800523f
 80051b4:	0800529b 	.word	0x0800529b
 80051b8:	0800529b 	.word	0x0800529b
 80051bc:	08005247 	.word	0x08005247
 80051c0:	0800529b 	.word	0x0800529b
 80051c4:	0800529b 	.word	0x0800529b
 80051c8:	0800529b 	.word	0x0800529b
 80051cc:	08005257 	.word	0x08005257
 80051d0:	0800529b 	.word	0x0800529b
 80051d4:	0800529b 	.word	0x0800529b
 80051d8:	0800529b 	.word	0x0800529b
 80051dc:	0800529b 	.word	0x0800529b
 80051e0:	0800529b 	.word	0x0800529b
 80051e4:	0800529b 	.word	0x0800529b
 80051e8:	0800529b 	.word	0x0800529b
 80051ec:	08005267 	.word	0x08005267
 80051f0:	0800529b 	.word	0x0800529b
 80051f4:	0800529b 	.word	0x0800529b
 80051f8:	0800529b 	.word	0x0800529b
 80051fc:	0800529b 	.word	0x0800529b
 8005200:	0800529b 	.word	0x0800529b
 8005204:	0800529b 	.word	0x0800529b
 8005208:	0800529b 	.word	0x0800529b
 800520c:	0800529b 	.word	0x0800529b
 8005210:	0800529b 	.word	0x0800529b
 8005214:	0800529b 	.word	0x0800529b
 8005218:	0800529b 	.word	0x0800529b
 800521c:	0800529b 	.word	0x0800529b
 8005220:	0800529b 	.word	0x0800529b
 8005224:	0800529b 	.word	0x0800529b
 8005228:	0800529b 	.word	0x0800529b
 800522c:	0800528d 	.word	0x0800528d
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d02e      	beq.n	8005292 <UART_SetConfig+0xa36>
 8005234:	e031      	b.n	800529a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005236:	f7fd f987 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 800523a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800523c:	e033      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523e:	f7fd f999 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8005242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005244:	e02f      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fbc8 	bl	80039e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005254:	e027      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005256:	f107 0318 	add.w	r3, r7, #24
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fd14 	bl	8003c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005264:	e01f      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005266:	4b2d      	ldr	r3, [pc, #180]	@ (800531c <UART_SetConfig+0xac0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005272:	4b2a      	ldr	r3, [pc, #168]	@ (800531c <UART_SetConfig+0xac0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	08db      	lsrs	r3, r3, #3
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	4a28      	ldr	r2, [pc, #160]	@ (8005320 <UART_SetConfig+0xac4>)
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005284:	e00f      	b.n	80052a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005286:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <UART_SetConfig+0xac4>)
 8005288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800528a:	e00c      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800528c:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <UART_SetConfig+0xac8>)
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005290:	e009      	b.n	80052a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005298:	e005      	b.n	80052a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052a4:	bf00      	nop
    }

    if (pclk != 0U)
 80052a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d021      	beq.n	80052f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <UART_SetConfig+0xacc>)
 80052b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	441a      	add	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d909      	bls.n	80052ea <UART_SetConfig+0xa8e>
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052dc:	d205      	bcs.n	80052ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60da      	str	r2, [r3, #12]
 80052e8:	e002      	b.n	80052f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800530c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005310:	4618      	mov	r0, r3
 8005312:	3748      	adds	r7, #72	@ 0x48
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	03d09000 	.word	0x03d09000
 8005324:	003d0900 	.word	0x003d0900
 8005328:	080059f4 	.word	0x080059f4

0800532c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01a      	beq.n	8005442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800542a:	d10a      	bne.n	8005442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	605a      	str	r2, [r3, #4]
  }
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b098      	sub	sp, #96	@ 0x60
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005480:	f7fb fd58 	bl	8000f34 <HAL_GetTick>
 8005484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b08      	cmp	r3, #8
 8005492:	d12f      	bne.n	80054f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549c:	2200      	movs	r2, #0
 800549e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f88e 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d022      	beq.n	80054f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e063      	b.n	80055bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d149      	bne.n	8005596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550a:	2200      	movs	r2, #0
 800550c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f857 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d03c      	beq.n	8005596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	623b      	str	r3, [r7, #32]
   return(result);
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800553a:	633b      	str	r3, [r7, #48]	@ 0x30
 800553c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e6      	bne.n	800551c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3308      	adds	r3, #8
 8005554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60fb      	str	r3, [r7, #12]
   return(result);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800556e:	61fa      	str	r2, [r7, #28]
 8005570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	617b      	str	r3, [r7, #20]
   return(result);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e5      	bne.n	800554e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e012      	b.n	80055bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3758      	adds	r7, #88	@ 0x58
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	e04f      	b.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055dc:	d04b      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055de:	f7fb fca9 	bl	8000f34 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e04e      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d037      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b80      	cmp	r3, #128	@ 0x80
 800560a:	d034      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d031      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d110      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2208      	movs	r2, #8
 8005626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f839 	bl	80056a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2208      	movs	r2, #8
 8005632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e029      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005650:	d111      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800565a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f81f 	bl	80056a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e00f      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d0a0      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b095      	sub	sp, #84	@ 0x54
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80056c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e6      	bne.n	80056a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <UART_EndRxTransfer+0xc8>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3308      	adds	r3, #8
 80056f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d118      	bne.n	8005748 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60bb      	str	r3, [r7, #8]
   return(result);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	647b      	str	r3, [r7, #68]	@ 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	613b      	str	r3, [r7, #16]
   return(result);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e6      	bne.n	8005716 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800575c:	bf00      	nop
 800575e:	3754      	adds	r7, #84	@ 0x54
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	effffffe 	.word	0xeffffffe

0800576c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UARTEx_DisableFifoMode+0x16>
 800577e:	2302      	movs	r3, #2
 8005780:	e027      	b.n	80057d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	@ 0x24
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e02d      	b.n	8005852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	@ 0x24
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f850 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586e:	2302      	movs	r3, #2
 8005870:	e02d      	b.n	80058ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	@ 0x24
 800587e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f812 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f8:	e031      	b.n	800595e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fa:	2310      	movs	r3, #16
 80058fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fe:	2310      	movs	r3, #16
 8005900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0e5b      	lsrs	r3, r3, #25
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0f5b      	lsrs	r3, r3, #29
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	7b3a      	ldrb	r2, [r7, #12]
 8005926:	4911      	ldr	r1, [pc, #68]	@ (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005928:	5c8a      	ldrb	r2, [r1, r2]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592e:	7b3a      	ldrb	r2, [r7, #12]
 8005930:	490f      	ldr	r1, [pc, #60]	@ (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005934:	fb93 f3f2 	sdiv	r3, r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	7b7a      	ldrb	r2, [r7, #13]
 8005944:	4909      	ldr	r1, [pc, #36]	@ (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800594c:	7b7a      	ldrb	r2, [r7, #13]
 800594e:	4908      	ldr	r1, [pc, #32]	@ (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005952:	fb93 f3f2 	sdiv	r3, r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	08005a0c 	.word	0x08005a0c
 8005970:	08005a14 	.word	0x08005a14

08005974 <memset>:
 8005974:	4402      	add	r2, r0
 8005976:	4603      	mov	r3, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	@ (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	@ (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	@ (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	@ (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f818 	bl	80059cc <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005a24 	.word	0x08005a24
 80059c0:	08005a24 	.word	0x08005a24
 80059c4:	08005a24 	.word	0x08005a24
 80059c8:	08005a28 	.word	0x08005a28

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
